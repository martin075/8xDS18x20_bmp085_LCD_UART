
8xDS18x20_BMP180_LCD_UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ee  00800100  00003db6  00003e6a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003db6  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000161  008001ee  008001ee  00003f58  2**0
                  ALLOC
  3 .eeprom       0000004c  00810000  00810000  00003f58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005c  00000000  00000000  00003fa4  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  00004000  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003c59  00000000  00000000  00004168  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001045  00000000  00000000  00007dc1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dda  00000000  00000000  00008e06  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000af0  00000000  00000000  00009be0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a6c  00000000  00000000  0000a6d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000035cb  00000000  00000000  0000b13c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  0000e707  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 0e 02 	jmp	0x41c	; 0x41c <__ctors_end>
       4:	0c 94 2b 02 	jmp	0x456	; 0x456 <__bad_interrupt>
       8:	0c 94 2b 02 	jmp	0x456	; 0x456 <__bad_interrupt>
       c:	0c 94 2b 02 	jmp	0x456	; 0x456 <__bad_interrupt>
      10:	0c 94 2b 02 	jmp	0x456	; 0x456 <__bad_interrupt>
      14:	0c 94 2b 02 	jmp	0x456	; 0x456 <__bad_interrupt>
      18:	0c 94 2b 02 	jmp	0x456	; 0x456 <__bad_interrupt>
      1c:	0c 94 2b 02 	jmp	0x456	; 0x456 <__bad_interrupt>
      20:	0c 94 2b 02 	jmp	0x456	; 0x456 <__bad_interrupt>
      24:	0c 94 2b 02 	jmp	0x456	; 0x456 <__bad_interrupt>
      28:	0c 94 2b 02 	jmp	0x456	; 0x456 <__bad_interrupt>
      2c:	0c 94 2d 02 	jmp	0x45a	; 0x45a <__vector_11>
      30:	0c 94 2b 02 	jmp	0x456	; 0x456 <__bad_interrupt>
      34:	0c 94 2b 02 	jmp	0x456	; 0x456 <__bad_interrupt>
      38:	0c 94 2b 02 	jmp	0x456	; 0x456 <__bad_interrupt>
      3c:	0c 94 2b 02 	jmp	0x456	; 0x456 <__bad_interrupt>
      40:	0c 94 2b 02 	jmp	0x456	; 0x456 <__bad_interrupt>
      44:	0c 94 2b 02 	jmp	0x456	; 0x456 <__bad_interrupt>
      48:	0c 94 5f 09 	jmp	0x12be	; 0x12be <__vector_18>
      4c:	0c 94 8d 09 	jmp	0x131a	; 0x131a <__vector_19>
      50:	0c 94 2b 02 	jmp	0x456	; 0x456 <__bad_interrupt>
      54:	0c 94 2b 02 	jmp	0x456	; 0x456 <__bad_interrupt>
      58:	0c 94 2b 02 	jmp	0x456	; 0x456 <__bad_interrupt>
      5c:	0c 94 2b 02 	jmp	0x456	; 0x456 <__bad_interrupt>
      60:	0c 94 2b 02 	jmp	0x456	; 0x456 <__bad_interrupt>
      64:	0c 94 2b 02 	jmp	0x456	; 0x456 <__bad_interrupt>
      68:	07 63       	ori	r16, 0x37	; 55
      6a:	42 36       	cpi	r20, 0x62	; 98
      6c:	b7 9b       	sbis	0x16, 7	; 22
      6e:	d8 a7       	std	Y+40, r29	; 0x28
      70:	1a 39       	cpi	r17, 0x9A	; 154
      72:	68 56       	subi	r22, 0x68	; 104
      74:	18 ae       	std	Y+56, r1	; 0x38
      76:	ba ab       	std	Y+50, r27	; 0x32
      78:	55 8c       	ldd	r5, Z+29	; 0x1d
      7a:	1d 3c       	cpi	r17, 0xCD	; 205
      7c:	b7 cc       	rjmp	.-1682   	; 0xfffff9ec <__eeprom_end+0xff7ef9a0>
      7e:	57 63       	ori	r21, 0x37	; 55
      80:	bd 6d       	ori	r27, 0xDD	; 221
      82:	ed fd       	.word	0xfded	; ????
      84:	75 3e       	cpi	r23, 0xE5	; 229
      86:	f6 17       	cp	r31, r22
      88:	72 31       	cpi	r23, 0x12	; 18
      8a:	bf 00       	.word	0x00bf	; ????
      8c:	00 00       	nop
      8e:	80 3f       	cpi	r24, 0xF0	; 240
      90:	08 00       	.word	0x0008	; ????
      92:	00 00       	nop
      94:	be 92       	st	-X, r11
      96:	24 49       	sbci	r18, 0x94	; 148
      98:	12 3e       	cpi	r17, 0xE2	; 226
      9a:	ab aa       	std	Y+51, r10	; 0x33
      9c:	aa 2a       	or	r10, r26
      9e:	be cd       	rjmp	.-1156   	; 0xfffffc1c <__eeprom_end+0xff7efbd0>
      a0:	cc cc       	rjmp	.-1640   	; 0xfffffa3a <__eeprom_end+0xff7ef9ee>
      a2:	4c 3e       	cpi	r20, 0xEC	; 236
      a4:	00 00       	nop
      a6:	00 80       	ld	r0, Z
      a8:	be ab       	std	Y+54, r27	; 0x36
      aa:	aa aa       	std	Y+50, r10	; 0x32
      ac:	aa 3e       	cpi	r26, 0xEA	; 234
      ae:	00 00       	nop
      b0:	00 00       	nop
      b2:	bf 00       	.word	0x00bf	; ????
      b4:	00 00       	nop
      b6:	80 3f       	cpi	r24, 0xF0	; 240
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	00 08       	sbc	r0, r0
      be:	41 78       	andi	r20, 0x81	; 129
      c0:	d3 bb       	out	0x13, r29	; 19
      c2:	43 87       	std	Z+11, r20	; 0x0b
      c4:	d1 13       	cpse	r29, r17
      c6:	3d 19       	sub	r19, r13
      c8:	0e 3c       	cpi	r16, 0xCE	; 206
      ca:	c3 bd       	out	0x23, r28	; 35
      cc:	42 82       	std	Z+2, r4	; 0x02
      ce:	ad 2b       	or	r26, r29
      d0:	3e 68       	ori	r19, 0x8E	; 142
      d2:	ec 82       	std	Y+4, r14	; 0x04
      d4:	76 be       	out	0x36, r7	; 54
      d6:	d9 8f       	std	Y+25, r29	; 0x19
      d8:	e1 a9       	ldd	r30, Z+49	; 0x31
      da:	3e 4c       	sbci	r19, 0xCE	; 206
      dc:	80 ef       	ldi	r24, 0xF0	; 240
      de:	ff be       	out	0x3f, r15	; 63
      e0:	01 c4       	rjmp	.+2050   	; 0x8e4 <display_temperatures+0x2b4>
      e2:	ff 7f       	andi	r31, 0xFF	; 255
      e4:	3f 00       	.word	0x003f	; ????
      e6:	00 00       	nop
	...

000000ea <__trampolines_end>:
      ea:	3f 3a       	cpi	r19, 0xAF	; 175
	...

000000ed <__c.2627>:
      ed:	31 38 42 3a 00                                      18B:.

000000f2 <__c.2625>:
      f2:	31 38 53 3a 00                                      18S:.

000000f7 <__c.2623>:
      f7:	20 20 20 20 20 20 20 00                                    .

000000ff <__c.2621>:
      ff:	2f 42 75 73 00                                      /Bus.

00000104 <__c.2619>:
     104:	44 73 70 00                                         Dsp.

00000108 <__c.2609>:
     108:	28 3f 29 00                                         (?).

0000010c <__c.2607>:
     10c:	28 31 38 42 29 00                                   (18B).

00000112 <__c.2605>:
     112:	28 31 38 53 29 00                                   (18S).

00000118 <__c.2603>:
     118:	20 53 4e 3a 00                                       SN:.

0000011d <__c.2601>:
     11d:	20 43 52 43 3a 00                                    CRC:.

00000123 <__c.2599>:
     123:	46 43 3a 00                                         FC:.

00000127 <__c.2593>:
     127:	53 74 61 72 74 20 6d 65 61 73 2e 20 66 61 69 6c     Start meas. fail
     137:	0d 00                                               ..

00000139 <__c.2581>:
     139:	0d 00                                               ..

0000013b <__c.2571>:
     13b:	68 50 61 00                                         hPa.

0000013f <__c.2569>:
     13f:	20 20 20 20 20 20 20 20 20 20 20 20 00                          .

0000014c <__c.2567>:
     14c:	20 20 20 20 20 20 20 20 20 20 20 20 00                          .

00000159 <__c.2565>:
     159:	20 20 20 20 20 20 20 20 20 20 20 20 00                          .

00000166 <__c.2554>:
     166:	0d 00                                               ..

00000168 <__c.2549>:
     168:	43 52 43 20 66 61 69 6c 65 64 20 2d 20 69 67 6e     CRC failed - ign
     178:	6f 72 69 6e 67 20 73 65 6e 73 6f 72 3a 20 00        oring sensor: .

00000187 <__c.2541>:
     187:	42 75 73 20 45 72 72 6f 72 0d 00                    Bus Error..

00000192 <__c.2539>:
     192:	42 75 73 20 45 72 72 6f 72 00                       Bus Error.

0000019c <__c.2536>:
     19c:	4e 6f 20 6f 77 20 53 65 6e 73 6f 72 73 20 66 6f     No ow Sensors fo
     1ac:	75 6e 64 0d 00                                      und..

000001b1 <__c.2534>:
     1b1:	4e 6f 20 6f 77 20 53 65 6e 73 6f 72 73 20 66 6f     No ow Sensors fo
     1c1:	75 6e 64 00                                         und.

000001c5 <__c.2506>:
     1c5:	4c 43 44 20 62 72 69 67 68 74 6e 65 73 73 0a 00     LCD brightness..

000001d5 <__c.2478>:
     1d5:	4c 6f 67 67 69 6e 67 20 69 6e 74 65 72 76 61 6c     Logging interval
     1e5:	0a 00                                               ..

000001e7 <__c.2451>:
     1e7:	31 57 69 72 65 20 64 69 73 70 6c 61 79 20 6f 72     1Wire display or
     1f7:	64 65 72 00                                         der.

000001fb <__c.2449>:
     1fb:	77 72 69 74 65 20 74 6f 20 45 45 50 52 4f 4d 00     write to EEPROM.

0000020b <__c.2446>:
     20b:	0d 0d 00                                            ...

0000020e <__c.2441>:
     20e:	0d 00                                               ..

00000210 <__c.2439>:
     210:	20 3d 20 00                                          = .

00000214 <__c.2437>:
     214:	44 53 31 38 42 32 30 00                             DS18B20.

0000021c <__c.2435>:
     21c:	44 53 31 38 53 32 30 2f 44 53 31 38 32 30 00        DS18S20/DS1820.

0000022b <__c.2433>:
     22b:	20 69 73 20 61 20 00                                 is a .

00000232 <__c.2431>:
     232:	20 2f 20 42 75 73 00                                 / Bus.

00000239 <__c.2429>:
     239:	53 65 6e 73 6f 72 20 44 69 73 70 6c 61 79 00        Sensor Display.

00000248 <__c.2427>:
     248:	0d 0d 00                                            ...

0000024b <__c.2416>:
     24b:	70 72 65 73 73 20 4d 4f 44 45 20 74 6f 20 6f 74     press MODE to ot
     25b:	68 65 72 00                                         her.

0000025f <__c.2414>:
     25f:	20 74 6f 20 73 74 61 72 74 0a 0a 00                  to start...

0000026b <__c.2412>:
     26b:	20 6f 72 20 00                                       or .

00000270 <__c.2410>:
     270:	53 74 61 72 74 20 4c 6f 67 67 69 6e 67 3f 0a 00     Start Logging?..

00000280 <__c.2385>:
     280:	20 44 53 31 38 58 32 30 20 53 65 6e 73 6f 72 28      DS18X20 Sensor(
     290:	73 29 20 61 76 61 69 6c 61 62 6c 65 0d 00           s) available..

0000029e <__c.2383>:
     29e:	20 53 65 6e 73 6f 72 28 73 29 00                     Sensor(s).

000002a9 <__c.2381>:
     2a9:	4e 6f 20 53 65 6e 73 6f 72 73 20 46 6f 75 6e 64     No Sensors Found
	...

000002ba <__c.2379>:
     2ba:	4e 6f 20 44 53 20 53 65 6e 73 6f 72 73 20 46 6f     No DS Sensors Fo
     2ca:	75 6e 64 00                                         und.

000002ce <__c.2377>:
     2ce:	20 20 20 42 4d 50 31 38 30 20 4c 6f 67 67 65 72        BMP180 Logger
	...

000002df <__c.2375>:
     2df:	44 53 31 38 78 32 30 20 4c 6f 67 67 65 72 20 76     DS18x20 Logger v
     2ef:	31 2e 32 31 0d 00                                   1.21..

000002f5 <__c.2373>:
     2f5:	44 53 31 38 32 30 2c 42 4d 50 31 38 30 20 4c 6f     DS1820,BMP180 Lo
     305:	67 67 65 72 20 76 31 2e 32 31 0d 00                 gger v1.21..

00000311 <lcdChars>:
     311:	04 04 04 04 15 1f 0e 04 04 0e 1f 15 04 04 04 04     ................
     321:	00 40 7a 10 f3 5a 00 a0 72 4e 18 09 00 10 a5 d4     .@z..Z..rN......
     331:	e8 00 00 e8 76 48 17 00 00 e4 0b 54 02 00 00 ca     ....vH.....T....
     341:	9a 3b 00 00 00 e1 f5 05 00 00 80 96 98 00 00 00     .;..............
     351:	40 42 0f 00 00 00 a0 86 01 00 00 00 10 27 00 00     @B...........'..
     361:	00 00 e8 03 00 00 00 00 64 00 00 00 00 00 0a 00     ........d.......
     371:	00 00 00 00 01 00 00 00 00 00 2c 76 d8 88 dc 67     ..........,v...g
     381:	4f 08 23 df c1 df ae 59 e1 b1 b7 96 e5 e3 e4 53     O.#....Y.......S
     391:	c6 3a e6 51 99 76 96 e8 e6 c2 84 26 eb 89 8c 9b     .:.Q.v.....&....
     3a1:	62 ed 40 7c 6f fc ef bc 9c 9f 40 f2 ba a5 6f a5     b.@|o.....@...o.
     3b1:	f4 90 05 5a 2a f7 5c 93 6b 6c f9 67 6d c1 1b fc     ...Z*.\.kl.gm...
     3c1:	e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed 90 2e 03 00     ...G.. .........
     3d1:	94 35 77 05 00 80 84 1e 08 00 00 20 4e 0a 00 00     .5w........ N...
     3e1:	00 c8 0c 33 33 33 33 0f 98 6e 12 83 11 41 ef 8d     ...3333..n...A..
     3f1:	21 14 89 3b e6 55 16 cf fe e6 db 18 d1 84 4b 38     !..;.U........K8
     401:	1b f7 7c 1d 90 1d a4 bb e4 24 20 32 84 72 5e 22     ..|......$ 2.r^"
     411:	81 00 c9 f1 24 ec a1 e5 3d 27 00                    ....$...='.

0000041c <__ctors_end>:
     41c:	11 24       	eor	r1, r1
     41e:	1f be       	out	0x3f, r1	; 63
     420:	cf ef       	ldi	r28, 0xFF	; 255
     422:	d4 e0       	ldi	r29, 0x04	; 4
     424:	de bf       	out	0x3e, r29	; 62
     426:	cd bf       	out	0x3d, r28	; 61

00000428 <__do_copy_data>:
     428:	11 e0       	ldi	r17, 0x01	; 1
     42a:	a0 e0       	ldi	r26, 0x00	; 0
     42c:	b1 e0       	ldi	r27, 0x01	; 1
     42e:	e6 eb       	ldi	r30, 0xB6	; 182
     430:	fd e3       	ldi	r31, 0x3D	; 61
     432:	02 c0       	rjmp	.+4      	; 0x438 <__do_copy_data+0x10>
     434:	05 90       	lpm	r0, Z+
     436:	0d 92       	st	X+, r0
     438:	ae 3e       	cpi	r26, 0xEE	; 238
     43a:	b1 07       	cpc	r27, r17
     43c:	d9 f7       	brne	.-10     	; 0x434 <__do_copy_data+0xc>

0000043e <__do_clear_bss>:
     43e:	23 e0       	ldi	r18, 0x03	; 3
     440:	ae ee       	ldi	r26, 0xEE	; 238
     442:	b1 e0       	ldi	r27, 0x01	; 1
     444:	01 c0       	rjmp	.+2      	; 0x448 <.do_clear_bss_start>

00000446 <.do_clear_bss_loop>:
     446:	1d 92       	st	X+, r1

00000448 <.do_clear_bss_start>:
     448:	af 34       	cpi	r26, 0x4F	; 79
     44a:	b2 07       	cpc	r27, r18
     44c:	e1 f7       	brne	.-8      	; 0x446 <.do_clear_bss_loop>
     44e:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <main>
     452:	0c 94 d9 1e 	jmp	0x3db2	; 0x3db2 <_exit>

00000456 <__bad_interrupt>:
     456:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000045a <__vector_11>:
 *                                                                                      *
 ***************************************************************************************/

// service routine should occur every 1/TMR_TICK seconds.
ISR( TIMER1_COMPA_vect)
{
     45a:	1f 92       	push	r1
     45c:	0f 92       	push	r0
     45e:	0f b6       	in	r0, 0x3f	; 63
     460:	0f 92       	push	r0
     462:	11 24       	eor	r1, r1
     464:	8f 93       	push	r24
     466:	9f 93       	push	r25
     468:	af 93       	push	r26
     46a:	bf 93       	push	r27
	static uint8_t second_counter;	// second_counter == TMR_TICK = 1 second
//static uint8_t tcounter = 0; // pocita interval
	// increment the counters
	if( ++second_counter >= TMR_TICK)	// one second elapsed?
     46c:	80 91 ee 01 	lds	r24, 0x01EE
     470:	8f 5f       	subi	r24, 0xFF	; 255
     472:	80 93 ee 01 	sts	0x01EE, r24
     476:	88 3c       	cpi	r24, 0xC8	; 200
     478:	10 f1       	brcs	.+68     	; 0x4be <__vector_11+0x64>
	{
		gElapsed++;
     47a:	80 91 ef 01 	lds	r24, 0x01EF
     47e:	90 91 f0 01 	lds	r25, 0x01F0
     482:	01 96       	adiw	r24, 0x01	; 1
     484:	90 93 f0 01 	sts	0x01F0, r25
     488:	80 93 ef 01 	sts	0x01EF, r24
		second_counter = 0;
     48c:	10 92 ee 01 	sts	0x01EE, r1
		//tcounter++;
		//if (tcounter >= 60)
		//	{tcounter = 0; // nulovanie pocitadla po 1 min
		//	min_counter++;
		//	}
		if( gRTC_status == 0) gRTC_clk++;
     490:	80 91 f5 01 	lds	r24, 0x01F5
     494:	81 11       	cpse	r24, r1
     496:	13 c0       	rjmp	.+38     	; 0x4be <__vector_11+0x64>
     498:	80 91 f1 01 	lds	r24, 0x01F1
     49c:	90 91 f2 01 	lds	r25, 0x01F2
     4a0:	a0 91 f3 01 	lds	r26, 0x01F3
     4a4:	b0 91 f4 01 	lds	r27, 0x01F4
     4a8:	01 96       	adiw	r24, 0x01	; 1
     4aa:	a1 1d       	adc	r26, r1
     4ac:	b1 1d       	adc	r27, r1
     4ae:	80 93 f1 01 	sts	0x01F1, r24
     4b2:	90 93 f2 01 	sts	0x01F2, r25
     4b6:	a0 93 f3 01 	sts	0x01F3, r26
     4ba:	b0 93 f4 01 	sts	0x01F4, r27
	}
}
     4be:	bf 91       	pop	r27
     4c0:	af 91       	pop	r26
     4c2:	9f 91       	pop	r25
     4c4:	8f 91       	pop	r24
     4c6:	0f 90       	pop	r0
     4c8:	0f be       	out	0x3f, r0	; 63
     4ca:	0f 90       	pop	r0
     4cc:	1f 90       	pop	r1
     4ce:	18 95       	reti

000004d0 <onewire_search>:
/********************************************************/
// search 1-wire bus for active devices
uint8_t onewire_search( void)
{
     4d0:	cf 92       	push	r12
     4d2:	df 92       	push	r13
     4d4:	ef 92       	push	r14
     4d6:	ff 92       	push	r15
     4d8:	0f 93       	push	r16
     4da:	1f 93       	push	r17
     4dc:	cf 93       	push	r28
     4de:	df 93       	push	r29
     4e0:	cd b7       	in	r28, 0x3d	; 61
     4e2:	de b7       	in	r29, 0x3e	; 62
     4e4:	28 97       	sbiw	r28, 0x08	; 8
     4e6:	0f b6       	in	r0, 0x3f	; 63
     4e8:	f8 94       	cli
     4ea:	de bf       	out	0x3e, r29	; 62
     4ec:	0f be       	out	0x3f, r0	; 63
     4ee:	cd bf       	out	0x3d, r28	; 61
	uint8_t i, diff, num_sensors;
	uint8_t id[OWI_ROMCODE_SIZE];
	
	num_sensors = 0;
     4f0:	d1 2c       	mov	r13, r1
	
	for( diff = OWI_SEARCH_FIRST; 
     4f2:	cc 24       	eor	r12, r12
     4f4:	ca 94       	dec	r12
     4f6:	7e 01       	movw	r14, r28
     4f8:	89 e0       	ldi	r24, 0x09	; 9
     4fa:	e8 0e       	add	r14, r24
     4fc:	f1 1c       	adc	r15, r1
			diff != OWI_LAST_DEVICE && num_sensors < MAX_SENSORS ;)
	{
		diff = owi_search( diff, &id[0], OWI_SEARCH_ROM);	// search all sensors
     4fe:	40 ef       	ldi	r20, 0xF0	; 240
     500:	be 01       	movw	r22, r28
     502:	6f 5f       	subi	r22, 0xFF	; 255
     504:	7f 4f       	sbci	r23, 0xFF	; 255
     506:	8c 2d       	mov	r24, r12
     508:	0e 94 89 08 	call	0x1112	; 0x1112 <owi_search>
     50c:	c8 2e       	mov	r12, r24
		
		if( diff == OWI_PRESENCE_ERROR)
     50e:	ee ef       	ldi	r30, 0xFE	; 254
     510:	8e 13       	cpse	r24, r30
     512:	0b c0       	rjmp	.+22     	; 0x52a <__stack+0x2b>
		{
			lcd_gotoxy(0,1);
     514:	61 e0       	ldi	r22, 0x01	; 1
     516:	80 e0       	ldi	r24, 0x00	; 0
     518:	0e 94 9f 07 	call	0xf3e	; 0xf3e <lcd_gotoxy>
			lcd_puts_P( "No ow Sensors found");
     51c:	81 eb       	ldi	r24, 0xB1	; 177
     51e:	91 e0       	ldi	r25, 0x01	; 1
     520:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <lcd_puts_p>
			uart_puts_P( "No ow Sensors found\r"); 	
     524:	8c e9       	ldi	r24, 0x9C	; 156
     526:	91 e0       	ldi	r25, 0x01	; 1
     528:	0d c0       	rjmp	.+26     	; 0x544 <__stack+0x45>
			break;
		}
		else if( diff == OWI_DATA_ERR)
     52a:	fd ef       	ldi	r31, 0xFD	; 253
     52c:	8f 13       	cpse	r24, r31
     52e:	0d c0       	rjmp	.+26     	; 0x54a <__stack+0x4b>
		{
			lcd_gotoxy(0,1);
     530:	61 e0       	ldi	r22, 0x01	; 1
     532:	80 e0       	ldi	r24, 0x00	; 0
     534:	0e 94 9f 07 	call	0xf3e	; 0xf3e <lcd_gotoxy>
			lcd_puts_P( "Bus Error");
     538:	82 e9       	ldi	r24, 0x92	; 146
     53a:	91 e0       	ldi	r25, 0x01	; 1
     53c:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <lcd_puts_p>
			uart_puts_P( "Bus Error\r"); 	
     540:	87 e8       	ldi	r24, 0x87	; 135
     542:	91 e0       	ldi	r25, 0x01	; 1
     544:	0e 94 0f 0a 	call	0x141e	; 0x141e <uart_puts_p>
			break;
     548:	63 c0       	rjmp	.+198    	; 0x610 <__stack+0x111>
		}
		else if( ! crc8( id, OWI_ROMCODE_SIZE))	// is it a valid id?
     54a:	68 e0       	ldi	r22, 0x08	; 8
     54c:	ce 01       	movw	r24, r28
     54e:	01 96       	adiw	r24, 0x01	; 1
     550:	0e 94 11 06 	call	0xc22	; 0xc22 <crc8>
     554:	81 11       	cpse	r24, r1
     556:	43 c0       	rjmp	.+134    	; 0x5de <__stack+0xdf>
		{
			if( OWI_FAMILY( id[0]) == DS18B20_FAMILY_CODE || OWI_FAMILY( id[0]) == DS18S20_FAMILY_CODE)
     558:	89 81       	ldd	r24, Y+1	; 0x01
     55a:	8f 77       	andi	r24, 0x7F	; 127
     55c:	88 32       	cpi	r24, 0x28	; 40
     55e:	11 f0       	breq	.+4      	; 0x564 <__stack+0x65>
     560:	80 31       	cpi	r24, 0x10	; 16
     562:	b1 f4       	brne	.+44     	; 0x590 <__stack+0x91>
     564:	fe 01       	movw	r30, r28
     566:	31 96       	adiw	r30, 0x01	; 1
     568:	88 e0       	ldi	r24, 0x08	; 8
     56a:	d8 9e       	mul	r13, r24
     56c:	a0 01       	movw	r20, r0
     56e:	11 24       	eor	r1, r1
     570:	4d 50       	subi	r20, 0x0D	; 13
     572:	5d 4f       	sbci	r21, 0xFD	; 253
	uint8_t i, diff, num_sensors;
	uint8_t id[OWI_ROMCODE_SIZE];
	
	num_sensors = 0;
	
	for( diff = OWI_SEARCH_FIRST; 
     574:	20 e0       	ldi	r18, 0x00	; 0
     576:	30 e0       	ldi	r19, 0x00	; 0
		else if( ! crc8( id, OWI_ROMCODE_SIZE))	// is it a valid id?
		{
			if( OWI_FAMILY( id[0]) == DS18B20_FAMILY_CODE || OWI_FAMILY( id[0]) == DS18S20_FAMILY_CODE)
			{
				for( i = 0; i < OWI_ROMCODE_SIZE; i++)
					gSensorIDs[num_sensors][i] = id[i];
     578:	81 91       	ld	r24, Z+
     57a:	da 01       	movw	r26, r20
     57c:	a2 0f       	add	r26, r18
     57e:	b3 1f       	adc	r27, r19
     580:	8c 93       	st	X, r24
     582:	2f 5f       	subi	r18, 0xFF	; 255
     584:	3f 4f       	sbci	r19, 0xFF	; 255
		}
		else if( ! crc8( id, OWI_ROMCODE_SIZE))	// is it a valid id?
		{
			if( OWI_FAMILY( id[0]) == DS18B20_FAMILY_CODE || OWI_FAMILY( id[0]) == DS18S20_FAMILY_CODE)
			{
				for( i = 0; i < OWI_ROMCODE_SIZE; i++)
     586:	28 30       	cpi	r18, 0x08	; 8
     588:	31 05       	cpc	r19, r1
     58a:	b1 f7       	brne	.-20     	; 0x578 <__stack+0x79>
					gSensorIDs[num_sensors][i] = id[i];
				num_sensors++;
     58c:	d3 94       	inc	r13
     58e:	3a c0       	rjmp	.+116    	; 0x604 <__stack+0x105>
			}
			else if( OWI_FAMILY( id[0]) == DS2415_FAMILY_CODE)
     590:	84 32       	cpi	r24, 0x24	; 36
     592:	c1 f5       	brne	.+112    	; 0x604 <__stack+0x105>
     594:	fe 01       	movw	r30, r28
     596:	31 96       	adiw	r30, 0x01	; 1
     598:	a9 eb       	ldi	r26, 0xB9	; 185
     59a:	b2 e0       	ldi	r27, 0x02	; 2
			{
				for( i = 0; i < OWI_ROMCODE_SIZE; i++)
					gRTC_ID[i] = id[i];
     59c:	81 91       	ld	r24, Z+
     59e:	8d 93       	st	X+, r24
					gSensorIDs[num_sensors][i] = id[i];
				num_sensors++;
			}
			else if( OWI_FAMILY( id[0]) == DS2415_FAMILY_CODE)
			{
				for( i = 0; i < OWI_ROMCODE_SIZE; i++)
     5a0:	ee 15       	cp	r30, r14
     5a2:	ff 05       	cpc	r31, r15
     5a4:	d9 f7       	brne	.-10     	; 0x59c <__stack+0x9d>
					gRTC_ID[i] = id[i];

				// make sure the RTC oscillator is turned on
				if( DS2415_read_clock( &gRTC_status, &gRTC_clk, id) == DS2415_CLOCK_OK)
     5a6:	ae 01       	movw	r20, r28
     5a8:	4f 5f       	subi	r20, 0xFF	; 255
     5aa:	5f 4f       	sbci	r21, 0xFF	; 255
     5ac:	61 ef       	ldi	r22, 0xF1	; 241
     5ae:	71 e0       	ldi	r23, 0x01	; 1
     5b0:	85 ef       	ldi	r24, 0xF5	; 245
     5b2:	91 e0       	ldi	r25, 0x01	; 1
     5b4:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <DS2415_read_clock>
     5b8:	81 11       	cpse	r24, r1
     5ba:	24 c0       	rjmp	.+72     	; 0x604 <__stack+0x105>
				{
					DS2415_write_clock( DS2415_OSC_ON( gRTC_status), gRTC_clk, id);
     5bc:	40 91 f1 01 	lds	r20, 0x01F1
     5c0:	50 91 f2 01 	lds	r21, 0x01F2
     5c4:	60 91 f3 01 	lds	r22, 0x01F3
     5c8:	70 91 f4 01 	lds	r23, 0x01F4
     5cc:	80 91 f5 01 	lds	r24, 0x01F5
     5d0:	9e 01       	movw	r18, r28
     5d2:	2f 5f       	subi	r18, 0xFF	; 255
     5d4:	3f 4f       	sbci	r19, 0xFF	; 255
     5d6:	8c 60       	ori	r24, 0x0C	; 12
     5d8:	0e 94 4c 0a 	call	0x1498	; 0x1498 <DS2415_write_clock>
     5dc:	13 c0       	rjmp	.+38     	; 0x604 <__stack+0x105>
			}
		}
		else
		{
			// id failed CRC check
			uart_puts_P( "CRC failed - ignoring sensor: "); 	
     5de:	88 e6       	ldi	r24, 0x68	; 104
     5e0:	91 e0       	ldi	r25, 0x01	; 1
     5e2:	0e 94 0f 0a 	call	0x141e	; 0x141e <uart_puts_p>
     5e6:	8e 01       	movw	r16, r28
     5e8:	0f 5f       	subi	r16, 0xFF	; 255
     5ea:	1f 4f       	sbci	r17, 0xFF	; 255
			for( i = 0; i < OWI_ROMCODE_SIZE; i++)
				uart_puthex_byte( id[i]);
     5ec:	f8 01       	movw	r30, r16
     5ee:	81 91       	ld	r24, Z+
     5f0:	8f 01       	movw	r16, r30
     5f2:	0e 94 42 0a 	call	0x1484	; 0x1484 <uart_puthex_byte>
		}
		else
		{
			// id failed CRC check
			uart_puts_P( "CRC failed - ignoring sensor: "); 	
			for( i = 0; i < OWI_ROMCODE_SIZE; i++)
     5f6:	0e 15       	cp	r16, r14
     5f8:	1f 05       	cpc	r17, r15
     5fa:	c1 f7       	brne	.-16     	; 0x5ec <__stack+0xed>
				uart_puthex_byte( id[i]);
			uart_puts_P( "\r"); 	
     5fc:	86 e6       	ldi	r24, 0x66	; 102
     5fe:	91 e0       	ldi	r25, 0x01	; 1
     600:	0e 94 0f 0a 	call	0x141e	; 0x141e <uart_puts_p>
	uint8_t i, diff, num_sensors;
	uint8_t id[OWI_ROMCODE_SIZE];
	
	num_sensors = 0;
	
	for( diff = OWI_SEARCH_FIRST; 
     604:	cc 20       	and	r12, r12
     606:	21 f0       	breq	.+8      	; 0x610 <__stack+0x111>
			diff != OWI_LAST_DEVICE && num_sensors < MAX_SENSORS ;)
     608:	f7 e0       	ldi	r31, 0x07	; 7
     60a:	fd 15       	cp	r31, r13
     60c:	08 f0       	brcs	.+2      	; 0x610 <__stack+0x111>
     60e:	77 cf       	rjmp	.-274    	; 0x4fe <onewire_search+0x2e>
				uart_puthex_byte( id[i]);
			uart_puts_P( "\r"); 	
		}
	}
	return num_sensors;
}
     610:	8d 2d       	mov	r24, r13
     612:	28 96       	adiw	r28, 0x08	; 8
     614:	0f b6       	in	r0, 0x3f	; 63
     616:	f8 94       	cli
     618:	de bf       	out	0x3e, r29	; 62
     61a:	0f be       	out	0x3f, r0	; 63
     61c:	cd bf       	out	0x3d, r28	; 61
     61e:	df 91       	pop	r29
     620:	cf 91       	pop	r28
     622:	1f 91       	pop	r17
     624:	0f 91       	pop	r16
     626:	ff 90       	pop	r15
     628:	ef 90       	pop	r14
     62a:	df 90       	pop	r13
     62c:	cf 90       	pop	r12
     62e:	08 95       	ret

00000630 <display_temperatures>:
/************************************************************/
// display one page of most recent temperature data on lcd
void display_temperatures( uint8_t num_sensors, uint8_t page)
{
     630:	cf 92       	push	r12
     632:	df 92       	push	r13
     634:	ef 92       	push	r14
     636:	ff 92       	push	r15
     638:	0f 93       	push	r16
     63a:	1f 93       	push	r17
     63c:	cf 93       	push	r28
     63e:	df 93       	push	r29
     640:	c8 2e       	mov	r12, r24
     642:	c6 2f       	mov	r28, r22
	int *pom1 = &gReadings[0];
	int *pom2 = &gReadings_old[0];
	//int *pom1;
	// should always have at least one sensor on a page
	//temperature = ( gReadings[device] / 10 );
	lcd_home();
     644:	0e 94 b5 07 	call	0xf6a	; 0xf6a <lcd_home>
	device = g1Wire_order[page];
     648:	0c 2f       	mov	r16, r28
     64a:	10 e0       	ldi	r17, 0x00	; 0
     64c:	f8 01       	movw	r30, r16
     64e:	e1 52       	subi	r30, 0x21	; 33
     650:	fd 4f       	sbci	r31, 0xFD	; 253
     652:	e0 81       	ld	r30, Z
	//*pom1 = &gReadings[0];
	//podmienka so zobrazenim sipky hore/dole/rovno -kod podla displeja C5hore/C6dole/C7rovno, pre vonkajsiu teplotu
			if( ( ( pom1[0] ) < ( pom2[0]) ) && ((pom2[0]-pom1[0]) > HYSTER) )
     654:	40 91 35 03 	lds	r20, 0x0335
     658:	50 91 36 03 	lds	r21, 0x0336
     65c:	20 91 8f 02 	lds	r18, 0x028F
     660:	30 91 90 02 	lds	r19, 0x0290
     664:	f0 e0       	ldi	r31, 0x00	; 0
     666:	42 17       	cp	r20, r18
     668:	53 07       	cpc	r21, r19
     66a:	74 f5       	brge	.+92     	; 0x6c8 <display_temperatures+0x98>
     66c:	24 1b       	sub	r18, r20
     66e:	35 0b       	sbc	r19, r21
     670:	2b 30       	cpi	r18, 0x0B	; 11
     672:	31 05       	cpc	r19, r1
     674:	0c f4       	brge	.+2      	; 0x678 <display_temperatures+0x48>
     676:	58 c0       	rjmp	.+176    	; 0x728 <display_temperatures+0xf8>
				{sprintf( gBuffer, "%i#Out %+04i.%c\xC6\n",(int)page, gReadings[device] / 10,(gReadings[device] % 10) + '0');
     678:	ee 0f       	add	r30, r30
     67a:	ff 1f       	adc	r31, r31
     67c:	eb 5c       	subi	r30, 0xCB	; 203
     67e:	fc 4f       	sbci	r31, 0xFC	; 252
     680:	80 81       	ld	r24, Z
     682:	91 81       	ldd	r25, Z+1	; 0x01
     684:	6a e0       	ldi	r22, 0x0A	; 10
     686:	70 e0       	ldi	r23, 0x00	; 0
     688:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <__divmodhi4>
     68c:	c0 96       	adiw	r24, 0x30	; 48
     68e:	9f 93       	push	r25
     690:	8f 93       	push	r24
     692:	7f 93       	push	r23
     694:	6f 93       	push	r22
     696:	1f 92       	push	r1
     698:	cf 93       	push	r28
     69a:	82 e2       	ldi	r24, 0x22	; 34
     69c:	91 e0       	ldi	r25, 0x01	; 1
     69e:	9f 93       	push	r25
     6a0:	8f 93       	push	r24
     6a2:	82 ea       	ldi	r24, 0xA2	; 162
     6a4:	92 e0       	ldi	r25, 0x02	; 2
     6a6:	9f 93       	push	r25
     6a8:	8f 93       	push	r24
     6aa:	0e 94 67 19 	call	0x32ce	; 0x32ce <sprintf>
				lcd_puts( gBuffer);
     6ae:	82 ea       	ldi	r24, 0xA2	; 162
     6b0:	92 e0       	ldi	r25, 0x02	; 2
     6b2:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <lcd_puts>
     6b6:	8d b7       	in	r24, 0x3d	; 61
     6b8:	9e b7       	in	r25, 0x3e	; 62
     6ba:	0a 96       	adiw	r24, 0x0a	; 10
     6bc:	0f b6       	in	r0, 0x3f	; 63
     6be:	f8 94       	cli
     6c0:	9e bf       	out	0x3e, r25	; 62
     6c2:	0f be       	out	0x3f, r0	; 63
     6c4:	8d bf       	out	0x3d, r24	; 61
     6c6:	57 c0       	rjmp	.+174    	; 0x776 <display_temperatures+0x146>
				}
			else if( ( ( pom1[0] ) > ( pom2[0]) ) && ((pom1[0]-pom2[0]) > HYSTER) )
     6c8:	24 17       	cp	r18, r20
     6ca:	35 07       	cpc	r19, r21
     6cc:	6c f5       	brge	.+90     	; 0x728 <display_temperatures+0xf8>
     6ce:	42 1b       	sub	r20, r18
     6d0:	53 0b       	sbc	r21, r19
     6d2:	4b 30       	cpi	r20, 0x0B	; 11
     6d4:	51 05       	cpc	r21, r1
     6d6:	44 f1       	brlt	.+80     	; 0x728 <display_temperatures+0xf8>
				{sprintf( gBuffer, "%i#Out %+04i.%c\xC5\n",(int)page, gReadings[device] / 10,(gReadings[device] % 10) + '0');
     6d8:	ee 0f       	add	r30, r30
     6da:	ff 1f       	adc	r31, r31
     6dc:	eb 5c       	subi	r30, 0xCB	; 203
     6de:	fc 4f       	sbci	r31, 0xFC	; 252
     6e0:	80 81       	ld	r24, Z
     6e2:	91 81       	ldd	r25, Z+1	; 0x01
     6e4:	6a e0       	ldi	r22, 0x0A	; 10
     6e6:	70 e0       	ldi	r23, 0x00	; 0
     6e8:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <__divmodhi4>
     6ec:	c0 96       	adiw	r24, 0x30	; 48
     6ee:	9f 93       	push	r25
     6f0:	8f 93       	push	r24
     6f2:	7f 93       	push	r23
     6f4:	6f 93       	push	r22
     6f6:	1f 92       	push	r1
     6f8:	cf 93       	push	r28
     6fa:	84 e3       	ldi	r24, 0x34	; 52
     6fc:	91 e0       	ldi	r25, 0x01	; 1
     6fe:	9f 93       	push	r25
     700:	8f 93       	push	r24
     702:	82 ea       	ldi	r24, 0xA2	; 162
     704:	92 e0       	ldi	r25, 0x02	; 2
     706:	9f 93       	push	r25
     708:	8f 93       	push	r24
     70a:	0e 94 67 19 	call	0x32ce	; 0x32ce <sprintf>
				lcd_puts( gBuffer);
     70e:	82 ea       	ldi	r24, 0xA2	; 162
     710:	92 e0       	ldi	r25, 0x02	; 2
     712:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <lcd_puts>
     716:	8d b7       	in	r24, 0x3d	; 61
     718:	9e b7       	in	r25, 0x3e	; 62
     71a:	0a 96       	adiw	r24, 0x0a	; 10
     71c:	0f b6       	in	r0, 0x3f	; 63
     71e:	f8 94       	cli
     720:	9e bf       	out	0x3e, r25	; 62
     722:	0f be       	out	0x3f, r0	; 63
     724:	8d bf       	out	0x3d, r24	; 61
     726:	27 c0       	rjmp	.+78     	; 0x776 <display_temperatures+0x146>
				}
			else
			{sprintf( gBuffer, "%i#Out %+04i.%c\xC7\n",(int)page, gReadings[device] / 10,(gReadings[device] % 10) + '0');
     728:	ee 0f       	add	r30, r30
     72a:	ff 1f       	adc	r31, r31
     72c:	eb 5c       	subi	r30, 0xCB	; 203
     72e:	fc 4f       	sbci	r31, 0xFC	; 252
     730:	80 81       	ld	r24, Z
     732:	91 81       	ldd	r25, Z+1	; 0x01
     734:	6a e0       	ldi	r22, 0x0A	; 10
     736:	70 e0       	ldi	r23, 0x00	; 0
     738:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <__divmodhi4>
     73c:	c0 96       	adiw	r24, 0x30	; 48
     73e:	9f 93       	push	r25
     740:	8f 93       	push	r24
     742:	7f 93       	push	r23
     744:	6f 93       	push	r22
     746:	1f 92       	push	r1
     748:	cf 93       	push	r28
     74a:	86 e4       	ldi	r24, 0x46	; 70
     74c:	91 e0       	ldi	r25, 0x01	; 1
     74e:	9f 93       	push	r25
     750:	8f 93       	push	r24
     752:	82 ea       	ldi	r24, 0xA2	; 162
     754:	92 e0       	ldi	r25, 0x02	; 2
     756:	9f 93       	push	r25
     758:	8f 93       	push	r24
     75a:	0e 94 67 19 	call	0x32ce	; 0x32ce <sprintf>
			lcd_puts( gBuffer);
     75e:	82 ea       	ldi	r24, 0xA2	; 162
     760:	92 e0       	ldi	r25, 0x02	; 2
     762:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <lcd_puts>
     766:	8d b7       	in	r24, 0x3d	; 61
     768:	9e b7       	in	r25, 0x3e	; 62
     76a:	0a 96       	adiw	r24, 0x0a	; 10
     76c:	0f b6       	in	r0, 0x3f	; 63
     76e:	f8 94       	cli
     770:	9e bf       	out	0x3e, r25	; 62
     772:	0f be       	out	0x3f, r0	; 63
     774:	8d bf       	out	0x3d, r24	; 61
			}
			pom2[0] = pom1[0];
     776:	80 91 35 03 	lds	r24, 0x0335
     77a:	90 91 36 03 	lds	r25, 0x0336
     77e:	90 93 90 02 	sts	0x0290, r25
     782:	80 93 8f 02 	sts	0x028F, r24
			
			//min_counter = 0;
		
			// is there a second sensor to display?
		if( (page + 1) < num_sensors)
     786:	98 01       	movw	r18, r16
     788:	2f 5f       	subi	r18, 0xFF	; 255
     78a:	3f 4f       	sbci	r19, 0xFF	; 255
     78c:	d1 2c       	mov	r13, r1
     78e:	2c 15       	cp	r18, r12
     790:	3d 05       	cpc	r19, r13
     792:	0c f0       	brlt	.+2      	; 0x796 <display_temperatures+0x166>
     794:	90 c0       	rjmp	.+288    	; 0x8b6 <display_temperatures+0x286>
		{
				device = g1Wire_order[page + 1];
     796:	f9 01       	movw	r30, r18
     798:	e1 52       	subi	r30, 0x21	; 33
     79a:	fd 4f       	sbci	r31, 0xFD	; 253
				sprintf( gBuffer, "%i#PmpW%+04i.%c\n",(int)page + 1, gReadings[device] / 10,(gReadings[device] % 10) + '0'); // pumpwell
     79c:	e0 81       	ld	r30, Z
     79e:	f0 e0       	ldi	r31, 0x00	; 0
     7a0:	ee 0f       	add	r30, r30
     7a2:	ff 1f       	adc	r31, r31
     7a4:	eb 5c       	subi	r30, 0xCB	; 203
     7a6:	fc 4f       	sbci	r31, 0xFC	; 252
     7a8:	80 81       	ld	r24, Z
     7aa:	91 81       	ldd	r25, Z+1	; 0x01
     7ac:	5a e0       	ldi	r21, 0x0A	; 10
     7ae:	e5 2e       	mov	r14, r21
     7b0:	f1 2c       	mov	r15, r1
     7b2:	b7 01       	movw	r22, r14
     7b4:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <__divmodhi4>
     7b8:	c0 96       	adiw	r24, 0x30	; 48
     7ba:	9f 93       	push	r25
     7bc:	8f 93       	push	r24
     7be:	7f 93       	push	r23
     7c0:	6f 93       	push	r22
     7c2:	3f 93       	push	r19
     7c4:	2f 93       	push	r18
     7c6:	88 e5       	ldi	r24, 0x58	; 88
     7c8:	91 e0       	ldi	r25, 0x01	; 1
     7ca:	9f 93       	push	r25
     7cc:	8f 93       	push	r24
     7ce:	c2 ea       	ldi	r28, 0xA2	; 162
     7d0:	d2 e0       	ldi	r29, 0x02	; 2
     7d2:	df 93       	push	r29
     7d4:	cf 93       	push	r28
     7d6:	0e 94 67 19 	call	0x32ce	; 0x32ce <sprintf>
				lcd_puts( gBuffer);
     7da:	ce 01       	movw	r24, r28
     7dc:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <lcd_puts>
				if( (page + 2) < num_sensors)
     7e0:	98 01       	movw	r18, r16
     7e2:	2e 5f       	subi	r18, 0xFE	; 254
     7e4:	3f 4f       	sbci	r19, 0xFF	; 255
     7e6:	8d b7       	in	r24, 0x3d	; 61
     7e8:	9e b7       	in	r25, 0x3e	; 62
     7ea:	0a 96       	adiw	r24, 0x0a	; 10
     7ec:	0f b6       	in	r0, 0x3f	; 63
     7ee:	f8 94       	cli
     7f0:	9e bf       	out	0x3e, r25	; 62
     7f2:	0f be       	out	0x3f, r0	; 63
     7f4:	8d bf       	out	0x3d, r24	; 61
     7f6:	2c 15       	cp	r18, r12
     7f8:	3d 05       	cpc	r19, r13
     7fa:	0c f0       	brlt	.+2      	; 0x7fe <display_temperatures+0x1ce>
     7fc:	59 c0       	rjmp	.+178    	; 0x8b0 <display_temperatures+0x280>
	      	 {
	 	      	 device = g1Wire_order[page + 2];
     7fe:	f9 01       	movw	r30, r18
     800:	e1 52       	subi	r30, 0x21	; 33
     802:	fd 4f       	sbci	r31, 0xFD	; 253
	 	       	sprintf( gBuffer, "%i#Cllr%+04i.%c\n",(int)page + 2, gReadings[device] / 10,(gReadings[device] % 10) + '0'); //cellar
     804:	e0 81       	ld	r30, Z
     806:	f0 e0       	ldi	r31, 0x00	; 0
     808:	ee 0f       	add	r30, r30
     80a:	ff 1f       	adc	r31, r31
     80c:	eb 5c       	subi	r30, 0xCB	; 203
     80e:	fc 4f       	sbci	r31, 0xFC	; 252
     810:	80 81       	ld	r24, Z
     812:	91 81       	ldd	r25, Z+1	; 0x01
     814:	b7 01       	movw	r22, r14
     816:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <__divmodhi4>
     81a:	c0 96       	adiw	r24, 0x30	; 48
     81c:	9f 93       	push	r25
     81e:	8f 93       	push	r24
     820:	7f 93       	push	r23
     822:	6f 93       	push	r22
     824:	3f 93       	push	r19
     826:	2f 93       	push	r18
     828:	89 e6       	ldi	r24, 0x69	; 105
     82a:	91 e0       	ldi	r25, 0x01	; 1
     82c:	9f 93       	push	r25
     82e:	8f 93       	push	r24
     830:	df 93       	push	r29
     832:	cf 93       	push	r28
     834:	0e 94 67 19 	call	0x32ce	; 0x32ce <sprintf>
           	lcd_puts( gBuffer);
     838:	ce 01       	movw	r24, r28
     83a:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <lcd_puts>
            if( (page + 3) < num_sensors)
     83e:	0d 5f       	subi	r16, 0xFD	; 253
     840:	1f 4f       	sbci	r17, 0xFF	; 255
     842:	8d b7       	in	r24, 0x3d	; 61
     844:	9e b7       	in	r25, 0x3e	; 62
     846:	0a 96       	adiw	r24, 0x0a	; 10
     848:	0f b6       	in	r0, 0x3f	; 63
     84a:	f8 94       	cli
     84c:	9e bf       	out	0x3e, r25	; 62
     84e:	0f be       	out	0x3f, r0	; 63
     850:	8d bf       	out	0x3d, r24	; 61
     852:	0c 15       	cp	r16, r12
     854:	1d 05       	cpc	r17, r13
     856:	4c f5       	brge	.+82     	; 0x8aa <display_temperatures+0x27a>
	        	   {
	 	        	  device = g1Wire_order[page + 3];
     858:	f8 01       	movw	r30, r16
     85a:	e1 52       	subi	r30, 0x21	; 33
     85c:	fd 4f       	sbci	r31, 0xFD	; 253
	 	          	sprintf( gBuffer, "%i#Bler%+04i.%c\n",(int)page + 3, gReadings[device] / 10,(gReadings[device] % 10) + '0'); //boiler
     85e:	e0 81       	ld	r30, Z
     860:	f0 e0       	ldi	r31, 0x00	; 0
     862:	ee 0f       	add	r30, r30
     864:	ff 1f       	adc	r31, r31
     866:	eb 5c       	subi	r30, 0xCB	; 203
     868:	fc 4f       	sbci	r31, 0xFC	; 252
     86a:	80 81       	ld	r24, Z
     86c:	91 81       	ldd	r25, Z+1	; 0x01
     86e:	b7 01       	movw	r22, r14
     870:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <__divmodhi4>
     874:	c0 96       	adiw	r24, 0x30	; 48
     876:	9f 93       	push	r25
     878:	8f 93       	push	r24
     87a:	7f 93       	push	r23
     87c:	6f 93       	push	r22
     87e:	1f 93       	push	r17
     880:	0f 93       	push	r16
     882:	8a e7       	ldi	r24, 0x7A	; 122
     884:	91 e0       	ldi	r25, 0x01	; 1
     886:	9f 93       	push	r25
     888:	8f 93       	push	r24
     88a:	df 93       	push	r29
     88c:	cf 93       	push	r28
     88e:	0e 94 67 19 	call	0x32ce	; 0x32ce <sprintf>
               	lcd_puts( gBuffer);
     892:	ce 01       	movw	r24, r28
     894:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <lcd_puts>
     898:	8d b7       	in	r24, 0x3d	; 61
     89a:	9e b7       	in	r25, 0x3e	; 62
     89c:	0a 96       	adiw	r24, 0x0a	; 10
     89e:	0f b6       	in	r0, 0x3f	; 63
     8a0:	f8 94       	cli
     8a2:	9e bf       	out	0x3e, r25	; 62
     8a4:	0f be       	out	0x3f, r0	; 63
     8a6:	8d bf       	out	0x3d, r24	; 61
     8a8:	0a c0       	rjmp	.+20     	; 0x8be <display_temperatures+0x28e>
	           		}
             	else lcd_puts_P( "            ");
     8aa:	89 e5       	ldi	r24, 0x59	; 89
     8ac:	91 e0       	ldi	r25, 0x01	; 1
     8ae:	05 c0       	rjmp	.+10     	; 0x8ba <display_temperatures+0x28a>
	       		}
         	else lcd_puts_P( "            ");
     8b0:	8c e4       	ldi	r24, 0x4C	; 76
     8b2:	91 e0       	ldi	r25, 0x01	; 1
     8b4:	02 c0       	rjmp	.+4      	; 0x8ba <display_temperatures+0x28a>
      }
		else lcd_puts_P( "            ");
     8b6:	8f e3       	ldi	r24, 0x3F	; 63
     8b8:	91 e0       	ldi	r25, 0x01	; 1
     8ba:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <lcd_puts_p>
		{
		//get temperature
		d = bmp085_gettemperature();
     8be:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <bmp085_gettemperature>
     8c2:	60 93 e7 02 	sts	0x02E7, r22
     8c6:	70 93 e8 02 	sts	0x02E8, r23
     8ca:	80 93 e9 02 	sts	0x02E9, r24
     8ce:	90 93 ea 02 	sts	0x02EA, r25
		dtostrf(d, 10, 2, printbuff);
     8d2:	05 e4       	ldi	r16, 0x45	; 69
     8d4:	13 e0       	ldi	r17, 0x03	; 3
     8d6:	22 e0       	ldi	r18, 0x02	; 2
     8d8:	4a e0       	ldi	r20, 0x0A	; 10
     8da:	0e 94 e5 18 	call	0x31ca	; 0x31ca <dtostrf>
		uart_puts("temperature: "); 
     8de:	8b e8       	ldi	r24, 0x8B	; 139
     8e0:	91 e0       	ldi	r25, 0x01	; 1
     8e2:	0e 94 03 0a 	call	0x1406	; 0x1406 <uart_puts>
		uart_puts(printbuff);  
     8e6:	c8 01       	movw	r24, r16
     8e8:	0e 94 03 0a 	call	0x1406	; 0x1406 <uart_puts>
		uart_puts(" C deg"); 
     8ec:	89 e9       	ldi	r24, 0x99	; 153
     8ee:	91 e0       	ldi	r25, 0x01	; 1
     8f0:	0e 94 03 0a 	call	0x1406	; 0x1406 <uart_puts>
		uart_puts("\r\n");
     8f4:	80 ea       	ldi	r24, 0xA0	; 160
     8f6:	91 e0       	ldi	r25, 0x01	; 1
     8f8:	0e 94 03 0a 	call	0x1406	; 0x1406 <uart_puts>

		//get pressure
		l = bmp085_getpressure();
     8fc:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <bmp085_getpressure>
     900:	60 93 c7 02 	sts	0x02C7, r22
     904:	70 93 c8 02 	sts	0x02C8, r23
     908:	80 93 c9 02 	sts	0x02C9, r24
     90c:	90 93 ca 02 	sts	0x02CA, r25
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ltoa_ncheck (long, char *, unsigned char);
	return __ltoa_ncheck (__val, __s, __radix);
     910:	2a e0       	ldi	r18, 0x0A	; 10
     912:	a8 01       	movw	r20, r16
     914:	0e 94 1c 19 	call	0x3238	; 0x3238 <__ltoa_ncheck>
		ltoa(l, printbuff, 10); 
		uart_puts("abs.pressure:   "); 
     918:	83 ea       	ldi	r24, 0xA3	; 163
     91a:	91 e0       	ldi	r25, 0x01	; 1
     91c:	0e 94 03 0a 	call	0x1406	; 0x1406 <uart_puts>
		uart_puts(printbuff);
     920:	c8 01       	movw	r24, r16
     922:	0e 94 03 0a 	call	0x1406	; 0x1406 <uart_puts>
		uart_puts(" Pa");
     926:	84 eb       	ldi	r24, 0xB4	; 180
     928:	91 e0       	ldi	r25, 0x01	; 1
     92a:	0e 94 03 0a 	call	0x1406	; 0x1406 <uart_puts>
		uart_puts("\r\n");
     92e:	80 ea       	ldi	r24, 0xA0	; 160
     930:	91 e0       	ldi	r25, 0x01	; 1
     932:	0e 94 03 0a 	call	0x1406	; 0x1406 <uart_puts>
		lcd_gotoxy( 17, 2);
     936:	62 e0       	ldi	r22, 0x02	; 2
     938:	81 e1       	ldi	r24, 0x11	; 17
     93a:	0e 94 9f 07 	call	0xf3e	; 0xf3e <lcd_gotoxy>
		lcd_puts_P( "hPa");
     93e:	8b e3       	ldi	r24, 0x3B	; 59
     940:	91 e0       	ldi	r25, 0x01	; 1
     942:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <lcd_puts_p>
		lcd_gotoxy( 13, 2);
     946:	62 e0       	ldi	r22, 0x02	; 2
     948:	8d e0       	ldi	r24, 0x0D	; 13
     94a:	0e 94 9f 07 	call	0xf3e	; 0xf3e <lcd_gotoxy>
		ltoa((l/100) , printbuff, 10); // in hPa (/100) in relative pressure to sea level, bmp085.h
     94e:	60 91 c7 02 	lds	r22, 0x02C7
     952:	70 91 c8 02 	lds	r23, 0x02C8
     956:	80 91 c9 02 	lds	r24, 0x02C9
     95a:	90 91 ca 02 	lds	r25, 0x02CA
     95e:	24 e6       	ldi	r18, 0x64	; 100
     960:	30 e0       	ldi	r19, 0x00	; 0
     962:	40 e0       	ldi	r20, 0x00	; 0
     964:	50 e0       	ldi	r21, 0x00	; 0
     966:	0e 94 6d 15 	call	0x2ada	; 0x2ada <__divmodsi4>
     96a:	ca 01       	movw	r24, r20
     96c:	b9 01       	movw	r22, r18
     96e:	2a e0       	ldi	r18, 0x0A	; 10
     970:	a8 01       	movw	r20, r16
     972:	0e 94 1c 19 	call	0x3238	; 0x3238 <__ltoa_ncheck>
		lcd_puts( printbuff);
     976:	c8 01       	movw	r24, r16
     978:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <lcd_puts>

		//get altitude
		d = bmp085_getaltitude();
     97c:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <bmp085_getaltitude>
     980:	60 93 e7 02 	sts	0x02E7, r22
     984:	70 93 e8 02 	sts	0x02E8, r23
     988:	80 93 e9 02 	sts	0x02E9, r24
     98c:	90 93 ea 02 	sts	0x02EA, r25
		dtostrf(d, 10, 2, printbuff);
     990:	22 e0       	ldi	r18, 0x02	; 2
     992:	4a e0       	ldi	r20, 0x0A	; 10
     994:	0e 94 e5 18 	call	0x31ca	; 0x31ca <dtostrf>
		uart_puts("altitude   : ");
     998:	88 eb       	ldi	r24, 0xB8	; 184
     99a:	91 e0       	ldi	r25, 0x01	; 1
     99c:	0e 94 03 0a 	call	0x1406	; 0x1406 <uart_puts>
		uart_puts(printbuff);
     9a0:	c8 01       	movw	r24, r16
     9a2:	0e 94 03 0a 	call	0x1406	; 0x1406 <uart_puts>
		uart_puts(" M above sea");
     9a6:	86 ec       	ldi	r24, 0xC6	; 198
     9a8:	91 e0       	ldi	r25, 0x01	; 1
     9aa:	0e 94 03 0a 	call	0x1406	; 0x1406 <uart_puts>
		uart_puts("\r\n");
     9ae:	80 ea       	ldi	r24, 0xA0	; 160
     9b0:	91 e0       	ldi	r25, 0x01	; 1
     9b2:	0e 94 03 0a 	call	0x1406	; 0x1406 <uart_puts>
		//lcd_gotoxy( 19, 1);
		//lcd_puts_P( "m");
		//lcd_gotoxy( 15, 1);
		//lcd_puts( printbuff);
		//uart_puts("\r\n");
		delay_ms(500);
     9b6:	64 e8       	ldi	r22, 0x84	; 132
     9b8:	7b e2       	ldi	r23, 0x2B	; 43
     9ba:	8a e0       	ldi	r24, 0x0A	; 10
     9bc:	90 e0       	ldi	r25, 0x00	; 0
		}
}
     9be:	df 91       	pop	r29
     9c0:	cf 91       	pop	r28
     9c2:	1f 91       	pop	r17
     9c4:	0f 91       	pop	r16
     9c6:	ff 90       	pop	r15
     9c8:	ef 90       	pop	r14
     9ca:	df 90       	pop	r13
     9cc:	cf 90       	pop	r12
		//lcd_gotoxy( 19, 1);
		//lcd_puts_P( "m");
		//lcd_gotoxy( 15, 1);
		//lcd_puts( printbuff);
		//uart_puts("\r\n");
		delay_ms(500);
     9ce:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <delayloop32>

000009d2 <log_temperatures>:
		}
}
/**************************************************************/
// output most recent temperatures to comm port
void log_temperatures( uint8_t num_sensors)
{
     9d2:	9f 92       	push	r9
     9d4:	af 92       	push	r10
     9d6:	bf 92       	push	r11
     9d8:	cf 92       	push	r12
     9da:	df 92       	push	r13
     9dc:	ef 92       	push	r14
     9de:	ff 92       	push	r15
     9e0:	0f 93       	push	r16
     9e2:	1f 93       	push	r17
     9e4:	cf 93       	push	r28
     9e6:	df 93       	push	r29
     9e8:	98 2e       	mov	r9, r24
	uint8_t i, device;
//	DS2415_date_t dt;

	// output the timestamp at the start of the record
	//DS2415_epoch_to_gregorian( gRTC_clk, &dt);
	uart_putc( '#');	// marker for data record to help parsing via external program
     9ea:	83 e2       	ldi	r24, 0x23	; 35
     9ec:	0e 94 ee 09 	call	0x13dc	; 0x13dc <uart_putc>
     9f0:	cf ed       	ldi	r28, 0xDF	; 223
     9f2:	cc 2e       	mov	r12, r28
     9f4:	c2 e0       	ldi	r28, 0x02	; 2
     9f6:	dc 2e       	mov	r13, r28

	//sprintf( gBuffer, " %02i:%02i:%02i;", (int)dt.hour, (int)dt.min, (int)dt.sec);
	//uart_puts( gBuffer);
	
	// output a semicolon delimited list of the sensors data
	for( i = 0; i < num_sensors; i++)
     9f8:	e6 01       	movw	r28, r12
	{
		device = g1Wire_order[i];   //premenna, zoradene snimace
		sprintf( gBuffer, "%+04i.%c;", gReadings[device] / 10, (gReadings[device] % 10) + '0');
     9fa:	1a e0       	ldi	r17, 0x0A	; 10
     9fc:	a1 2e       	mov	r10, r17
     9fe:	b1 2c       	mov	r11, r1
     a00:	03 ed       	ldi	r16, 0xD3	; 211
     a02:	11 e0       	ldi	r17, 0x01	; 1
     a04:	82 ea       	ldi	r24, 0xA2	; 162
     a06:	e8 2e       	mov	r14, r24
     a08:	82 e0       	ldi	r24, 0x02	; 2
     a0a:	f8 2e       	mov	r15, r24
     a0c:	8c 2f       	mov	r24, r28
     a0e:	8c 19       	sub	r24, r12

	//sprintf( gBuffer, " %02i:%02i:%02i;", (int)dt.hour, (int)dt.min, (int)dt.sec);
	//uart_puts( gBuffer);
	
	// output a semicolon delimited list of the sensors data
	for( i = 0; i < num_sensors; i++)
     a10:	89 15       	cp	r24, r9
     a12:	28 f5       	brcc	.+74     	; 0xa5e <log_temperatures+0x8c>
	{
		device = g1Wire_order[i];   //premenna, zoradene snimace
     a14:	e9 91       	ld	r30, Y+
		sprintf( gBuffer, "%+04i.%c;", gReadings[device] / 10, (gReadings[device] % 10) + '0');
     a16:	f0 e0       	ldi	r31, 0x00	; 0
     a18:	ee 0f       	add	r30, r30
     a1a:	ff 1f       	adc	r31, r31
     a1c:	eb 5c       	subi	r30, 0xCB	; 203
     a1e:	fc 4f       	sbci	r31, 0xFC	; 252
     a20:	80 81       	ld	r24, Z
     a22:	91 81       	ldd	r25, Z+1	; 0x01
     a24:	b5 01       	movw	r22, r10
     a26:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <__divmodhi4>
     a2a:	9c 01       	movw	r18, r24
     a2c:	20 5d       	subi	r18, 0xD0	; 208
     a2e:	3f 4f       	sbci	r19, 0xFF	; 255
     a30:	3f 93       	push	r19
     a32:	2f 93       	push	r18
     a34:	7f 93       	push	r23
     a36:	6f 93       	push	r22
     a38:	1f 93       	push	r17
     a3a:	0f 93       	push	r16
     a3c:	ff 92       	push	r15
     a3e:	ef 92       	push	r14
     a40:	0e 94 67 19 	call	0x32ce	; 0x32ce <sprintf>
		uart_puts( gBuffer);
     a44:	82 ea       	ldi	r24, 0xA2	; 162
     a46:	92 e0       	ldi	r25, 0x02	; 2
     a48:	0e 94 03 0a 	call	0x1406	; 0x1406 <uart_puts>
     a4c:	8d b7       	in	r24, 0x3d	; 61
     a4e:	9e b7       	in	r25, 0x3e	; 62
     a50:	08 96       	adiw	r24, 0x08	; 8
     a52:	0f b6       	in	r0, 0x3f	; 63
     a54:	f8 94       	cli
     a56:	9e bf       	out	0x3e, r25	; 62
     a58:	0f be       	out	0x3f, r0	; 63
     a5a:	8d bf       	out	0x3d, r24	; 61
     a5c:	d7 cf       	rjmp	.-82     	; 0xa0c <log_temperatures+0x3a>
	}
	uart_puts_P( "\r");      //vycital vsetky za sebou a poslal znak novy riadok
     a5e:	89 e3       	ldi	r24, 0x39	; 57
     a60:	91 e0       	ldi	r25, 0x01	; 1
}
     a62:	df 91       	pop	r29
     a64:	cf 91       	pop	r28
     a66:	1f 91       	pop	r17
     a68:	0f 91       	pop	r16
     a6a:	ff 90       	pop	r15
     a6c:	ef 90       	pop	r14
     a6e:	df 90       	pop	r13
     a70:	cf 90       	pop	r12
     a72:	bf 90       	pop	r11
     a74:	af 90       	pop	r10
     a76:	9f 90       	pop	r9
	{
		device = g1Wire_order[i];   //premenna, zoradene snimace
		sprintf( gBuffer, "%+04i.%c;", gReadings[device] / 10, (gReadings[device] % 10) + '0');
		uart_puts( gBuffer);
	}
	uart_puts_P( "\r");      //vycital vsetky za sebou a poslal znak novy riadok
     a78:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <uart_puts_p>

00000a7c <read_temperatures>:
}
/**********************************************************/
// read all DS18x20 sensors on 1-wire buss, 12-bit resolution
void read_temperatures( uint8_t num_sensors)
{
     a7c:	ef 92       	push	r14
     a7e:	ff 92       	push	r15
     a80:	0f 93       	push	r16
     a82:	1f 93       	push	r17
     a84:	cf 93       	push	r28
     a86:	df 93       	push	r29
     a88:	e8 2e       	mov	r14, r24
	uint8_t i;
	
	if( DS18X20_start_meas( NULL) == OWI_BUS_OK)
     a8a:	80 e0       	ldi	r24, 0x00	; 0
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	0e 94 4a 06 	call	0xc94	; 0xc94 <DS18X20_start_meas>
     a92:	88 23       	and	r24, r24
     a94:	21 f0       	breq	.+8      	; 0xa9e <read_temperatures+0x22>
     a96:	e5 e3       	ldi	r30, 0x35	; 53
     a98:	f3 e0       	ldi	r31, 0x03	; 3
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	11 c0       	rjmp	.+34     	; 0xac0 <read_temperatures+0x44>
     a9e:	c3 ef       	ldi	r28, 0xF3	; 243
     aa0:	d2 e0       	ldi	r29, 0x02	; 2
     aa2:	05 e3       	ldi	r16, 0x35	; 53
     aa4:	13 e0       	ldi	r17, 0x03	; 3
     aa6:	f1 2c       	mov	r15, r1
	{
		//if( gRTC_status) DS2415_read_clock( &gRTC_status, &gRTC_clk, gRTC_ID);
		for( i = 0; i < num_sensors; i++)
     aa8:	fe 14       	cp	r15, r14
     aaa:	d1 f0       	breq	.+52     	; 0xae0 <read_temperatures+0x64>
			gReadings[i] = DS18X20_get_temp( &gSensorIDs[i][0]);
     aac:	ce 01       	movw	r24, r28
     aae:	0e 94 a2 06 	call	0xd44	; 0xd44 <DS18X20_get_temp>
     ab2:	f8 01       	movw	r30, r16
     ab4:	81 93       	st	Z+, r24
     ab6:	91 93       	st	Z+, r25
     ab8:	8f 01       	movw	r16, r30
	uint8_t i;
	
	if( DS18X20_start_meas( NULL) == OWI_BUS_OK)
	{
		//if( gRTC_status) DS2415_read_clock( &gRTC_status, &gRTC_clk, gRTC_ID);
		for( i = 0; i < num_sensors; i++)
     aba:	f3 94       	inc	r15
     abc:	28 96       	adiw	r28, 0x08	; 8
     abe:	f4 cf       	rjmp	.-24     	; 0xaa8 <read_temperatures+0x2c>
			gReadings[i] = DS18X20_get_temp( &gSensorIDs[i][0]);
	}
	else
	{
		for( i = 0; i < num_sensors; i++)
     ac0:	9e 15       	cp	r25, r14
     ac2:	21 f0       	breq	.+8      	; 0xacc <read_temperatures+0x50>
			gReadings[i] = 0;
     ac4:	11 92       	st	Z+, r1
     ac6:	11 92       	st	Z+, r1
		for( i = 0; i < num_sensors; i++)
			gReadings[i] = DS18X20_get_temp( &gSensorIDs[i][0]);
	}
	else
	{
		for( i = 0; i < num_sensors; i++)
     ac8:	9f 5f       	subi	r25, 0xFF	; 255
     aca:	fa cf       	rjmp	.-12     	; 0xac0 <read_temperatures+0x44>
			gReadings[i] = 0;
		uart_puts_P( "Start meas. fail\r"); 	
     acc:	87 e2       	ldi	r24, 0x27	; 39
     ace:	91 e0       	ldi	r25, 0x01	; 1
	}
}
     ad0:	df 91       	pop	r29
     ad2:	cf 91       	pop	r28
     ad4:	1f 91       	pop	r17
     ad6:	0f 91       	pop	r16
     ad8:	ff 90       	pop	r15
     ada:	ef 90       	pop	r14
	}
	else
	{
		for( i = 0; i < num_sensors; i++)
			gReadings[i] = 0;
		uart_puts_P( "Start meas. fail\r"); 	
     adc:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <uart_puts_p>
	}
}
     ae0:	df 91       	pop	r29
     ae2:	cf 91       	pop	r28
     ae4:	1f 91       	pop	r17
     ae6:	0f 91       	pop	r16
     ae8:	ff 90       	pop	r15
     aea:	ef 90       	pop	r14
     aec:	08 95       	ret

00000aee <show_id_uart>:
/***************************************************/
// display the sensor ID info on the serial port
void show_id_uart( uint8_t *id)
{
     aee:	ef 92       	push	r14
     af0:	ff 92       	push	r15
     af2:	0f 93       	push	r16
     af4:	1f 93       	push	r17
     af6:	cf 93       	push	r28
     af8:	df 93       	push	r29
     afa:	7c 01       	movw	r14, r24
     afc:	8c 01       	movw	r16, r24
	size_t i;
	for( i = 0; i < OWI_ROMCODE_SIZE; i++)
     afe:	c0 e0       	ldi	r28, 0x00	; 0
     b00:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if( i == 0) uart_puts_P( "FC:");
     b02:	20 97       	sbiw	r28, 0x00	; 0
     b04:	19 f4       	brne	.+6      	; 0xb0c <show_id_uart+0x1e>
     b06:	83 e2       	ldi	r24, 0x23	; 35
     b08:	91 e0       	ldi	r25, 0x01	; 1
     b0a:	0b c0       	rjmp	.+22     	; 0xb22 <show_id_uart+0x34>
		else if( i == OWI_ROMCODE_SIZE - 1) uart_puts_P( " CRC:");
     b0c:	c7 30       	cpi	r28, 0x07	; 7
     b0e:	d1 05       	cpc	r29, r1
     b10:	19 f4       	brne	.+6      	; 0xb18 <show_id_uart+0x2a>
     b12:	8d e1       	ldi	r24, 0x1D	; 29
     b14:	91 e0       	ldi	r25, 0x01	; 1
     b16:	05 c0       	rjmp	.+10     	; 0xb22 <show_id_uart+0x34>
		if( i == 1) uart_puts_P( " SN:");
     b18:	c1 30       	cpi	r28, 0x01	; 1
     b1a:	d1 05       	cpc	r29, r1
     b1c:	21 f4       	brne	.+8      	; 0xb26 <show_id_uart+0x38>
     b1e:	88 e1       	ldi	r24, 0x18	; 24
     b20:	91 e0       	ldi	r25, 0x01	; 1
     b22:	0e 94 0f 0a 	call	0x141e	; 0x141e <uart_puts_p>
		uart_puthex_byte( id[i]);
     b26:	f8 01       	movw	r30, r16
     b28:	81 91       	ld	r24, Z+
     b2a:	8f 01       	movw	r16, r30
     b2c:	0e 94 42 0a 	call	0x1484	; 0x1484 <uart_puthex_byte>
		if( i == 0)
     b30:	20 97       	sbiw	r28, 0x00	; 0
     b32:	89 f4       	brne	.+34     	; 0xb56 <show_id_uart+0x68>
		{
			if( OWI_FAMILY( id[0]) == DS18S20_FAMILY_CODE) uart_puts_P( "(18S)");
     b34:	f7 01       	movw	r30, r14
     b36:	80 81       	ld	r24, Z
     b38:	8f 77       	andi	r24, 0x7F	; 127
     b3a:	80 31       	cpi	r24, 0x10	; 16
     b3c:	19 f4       	brne	.+6      	; 0xb44 <show_id_uart+0x56>
     b3e:	82 e1       	ldi	r24, 0x12	; 18
     b40:	91 e0       	ldi	r25, 0x01	; 1
     b42:	07 c0       	rjmp	.+14     	; 0xb52 <show_id_uart+0x64>
			else if( OWI_FAMILY( id[0]) == DS18B20_FAMILY_CODE) uart_puts_P( "(18B)");
     b44:	88 32       	cpi	r24, 0x28	; 40
     b46:	19 f4       	brne	.+6      	; 0xb4e <show_id_uart+0x60>
     b48:	8c e0       	ldi	r24, 0x0C	; 12
     b4a:	91 e0       	ldi	r25, 0x01	; 1
     b4c:	02 c0       	rjmp	.+4      	; 0xb52 <show_id_uart+0x64>
			else uart_puts_P( "(?)");
     b4e:	88 e0       	ldi	r24, 0x08	; 8
     b50:	91 e0       	ldi	r25, 0x01	; 1
     b52:	0e 94 0f 0a 	call	0x141e	; 0x141e <uart_puts_p>
/***************************************************/
// display the sensor ID info on the serial port
void show_id_uart( uint8_t *id)
{
	size_t i;
	for( i = 0; i < OWI_ROMCODE_SIZE; i++)
     b56:	21 96       	adiw	r28, 0x01	; 1
     b58:	c8 30       	cpi	r28, 0x08	; 8
     b5a:	d1 05       	cpc	r29, r1
     b5c:	91 f6       	brne	.-92     	; 0xb02 <show_id_uart+0x14>
			if( OWI_FAMILY( id[0]) == DS18S20_FAMILY_CODE) uart_puts_P( "(18S)");
			else if( OWI_FAMILY( id[0]) == DS18B20_FAMILY_CODE) uart_puts_P( "(18B)");
			else uart_puts_P( "(?)");
		}
	}
}
     b5e:	df 91       	pop	r29
     b60:	cf 91       	pop	r28
     b62:	1f 91       	pop	r17
     b64:	0f 91       	pop	r16
     b66:	ff 90       	pop	r15
     b68:	ef 90       	pop	r14
     b6a:	08 95       	ret

00000b6c <show_exinfo_lcd>:
/*****************************************************/
// condense the extended 1Wire device info into
// two 16-character lines and display on the LCD
void show_exinfo_lcd( uint8_t index)
{
     b6c:	0f 93       	push	r16
     b6e:	1f 93       	push	r17
     b70:	cf 93       	push	r28
     b72:	df 93       	push	r29
     b74:	c8 2f       	mov	r28, r24
	uint8_t device, i;

	// show the displayed order and the identified order
	device = g1Wire_order[index];
     b76:	e8 2f       	mov	r30, r24
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	e1 52       	subi	r30, 0x21	; 33
     b7c:	fd 4f       	sbci	r31, 0xFD	; 253
     b7e:	00 81       	ld	r16, Z
	lcd_gotoxy( 0, 0);
     b80:	60 e0       	ldi	r22, 0x00	; 0
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	0e 94 9f 07 	call	0xf3e	; 0xf3e <lcd_gotoxy>
	lcd_puts_P( "Dsp");
     b88:	84 e0       	ldi	r24, 0x04	; 4
     b8a:	91 e0       	ldi	r25, 0x01	; 1
     b8c:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <lcd_puts_p>
	lcd_putc( index + '0');
     b90:	80 e3       	ldi	r24, 0x30	; 48
     b92:	8c 0f       	add	r24, r28
     b94:	0e 94 b8 07 	call	0xf70	; 0xf70 <lcd_putc>
	lcd_puts_P( "/Bus");
     b98:	8f ef       	ldi	r24, 0xFF	; 255
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <lcd_puts_p>
	lcd_putc( device + '0');
     ba0:	80 e3       	ldi	r24, 0x30	; 48
     ba2:	80 0f       	add	r24, r16
     ba4:	0e 94 b8 07 	call	0xf70	; 0xf70 <lcd_putc>

	lcd_puts_P( "       ");//	 clear any previously displayed measurement data
     ba8:	87 ef       	ldi	r24, 0xF7	; 247
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <lcd_puts_p>

	// show the device information on next line
	lcd_gotoxy( 0, 1);
     bb0:	61 e0       	ldi	r22, 0x01	; 1
     bb2:	80 e0       	ldi	r24, 0x00	; 0
     bb4:	0e 94 9f 07 	call	0xf3e	; 0xf3e <lcd_gotoxy>
	if( OWI_FAMILY( gSensorIDs[device][0]) == DS18S20_FAMILY_CODE)
     bb8:	10 e0       	ldi	r17, 0x00	; 0
     bba:	f8 01       	movw	r30, r16
     bbc:	23 e0       	ldi	r18, 0x03	; 3
     bbe:	ee 0f       	add	r30, r30
     bc0:	ff 1f       	adc	r31, r31
     bc2:	2a 95       	dec	r18
     bc4:	e1 f7       	brne	.-8      	; 0xbbe <show_exinfo_lcd+0x52>
     bc6:	ed 50       	subi	r30, 0x0D	; 13
     bc8:	fd 4f       	sbci	r31, 0xFD	; 253
     bca:	80 81       	ld	r24, Z
     bcc:	98 2f       	mov	r25, r24
     bce:	9f 77       	andi	r25, 0x7F	; 127
     bd0:	90 31       	cpi	r25, 0x10	; 16
     bd2:	71 f4       	brne	.+28     	; 0xbf0 <show_exinfo_lcd+0x84>
		lcd_puts_P( "18S:");
     bd4:	82 ef       	ldi	r24, 0xF2	; 242
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <lcd_puts_p>
     bdc:	93 e0       	ldi	r25, 0x03	; 3
     bde:	00 0f       	add	r16, r16
     be0:	11 1f       	adc	r17, r17
     be2:	9a 95       	dec	r25
     be4:	e1 f7       	brne	.-8      	; 0xbde <show_exinfo_lcd+0x72>
     be6:	0d 50       	subi	r16, 0x0D	; 13
     be8:	1d 4f       	sbci	r17, 0xFD	; 253
}
/*****************************************************/
// condense the extended 1Wire device info into
// two 16-character lines and display on the LCD
void show_exinfo_lcd( uint8_t index)
{
     bea:	c0 e0       	ldi	r28, 0x00	; 0
     bec:	d0 e0       	ldi	r29, 0x00	; 0
     bee:	0a c0       	rjmp	.+20     	; 0xc04 <show_exinfo_lcd+0x98>

	// show the device information on next line
	lcd_gotoxy( 0, 1);
	if( OWI_FAMILY( gSensorIDs[device][0]) == DS18S20_FAMILY_CODE)
		lcd_puts_P( "18S:");
	else if( OWI_FAMILY( gSensorIDs[device][0]) == DS18B20_FAMILY_CODE)
     bf0:	98 32       	cpi	r25, 0x28	; 40
     bf2:	19 f4       	brne	.+6      	; 0xbfa <show_exinfo_lcd+0x8e>
		lcd_puts_P( "18B:");
     bf4:	8d ee       	ldi	r24, 0xED	; 237
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	ef cf       	rjmp	.-34     	; 0xbd8 <show_exinfo_lcd+0x6c>
	else
	{
		 // unknown device type
		 lcd_puthex_byte( gSensorIDs[device][0]);
     bfa:	0e 94 fb 07 	call	0xff6	; 0xff6 <lcd_puthex_byte>
		 lcd_puts_P( "?:");
     bfe:	8a ee       	ldi	r24, 0xEA	; 234
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	ea cf       	rjmp	.-44     	; 0xbd8 <show_exinfo_lcd+0x6c>
     c04:	f8 01       	movw	r30, r16
     c06:	ec 0f       	add	r30, r28
     c08:	fd 1f       	adc	r31, r29
	}

	// show the serial number and CRC byte
	for( i = 1; i < OWI_ROMCODE_SIZE - 1; i++)
		lcd_puthex_byte( gSensorIDs[device][i]);
     c0a:	81 81       	ldd	r24, Z+1	; 0x01
     c0c:	0e 94 fb 07 	call	0xff6	; 0xff6 <lcd_puthex_byte>
     c10:	21 96       	adiw	r28, 0x01	; 1
		 lcd_puthex_byte( gSensorIDs[device][0]);
		 lcd_puts_P( "?:");
	}

	// show the serial number and CRC byte
	for( i = 1; i < OWI_ROMCODE_SIZE - 1; i++)
     c12:	c6 30       	cpi	r28, 0x06	; 6
     c14:	d1 05       	cpc	r29, r1
     c16:	b1 f7       	brne	.-20     	; 0xc04 <show_exinfo_lcd+0x98>
		lcd_puthex_byte( gSensorIDs[device][i]);
}
     c18:	df 91       	pop	r29
     c1a:	cf 91       	pop	r28
     c1c:	1f 91       	pop	r17
     c1e:	0f 91       	pop	r16
     c20:	08 95       	ret

00000c22 <crc8>:
{
	uint16_t byte_ctr;
	uint8_t bit_ctr, temp, crc, cur_byte;

	crc = 0;
	for( byte_ctr = 0; byte_ctr < num_bytes; byte_ctr++)
     c22:	fc 01       	movw	r30, r24
extern uint8_t crc8( uint8_t *data, uint8_t num_bytes)
{
	uint16_t byte_ctr;
	uint8_t bit_ctr, temp, crc, cur_byte;

	crc = 0;
     c24:	40 e0       	ldi	r20, 0x00	; 0
	for( byte_ctr = 0; byte_ctr < num_bytes; byte_ctr++)
     c26:	70 e0       	ldi	r23, 0x00	; 0
			{
				crc >>= 1;
			}
			else
			{
				crc ^= 0x18;
     c28:	58 e1       	ldi	r21, 0x18	; 24
     c2a:	9f 01       	movw	r18, r30
     c2c:	28 1b       	sub	r18, r24
     c2e:	39 0b       	sbc	r19, r25
{
	uint16_t byte_ctr;
	uint8_t bit_ctr, temp, crc, cur_byte;

	crc = 0;
	for( byte_ctr = 0; byte_ctr < num_bytes; byte_ctr++)
     c30:	26 17       	cp	r18, r22
     c32:	37 07       	cpc	r19, r23
     c34:	78 f4       	brcc	.+30     	; 0xc54 <crc8+0x32>
	{
		cur_byte = data[byte_ctr];
     c36:	31 91       	ld	r19, Z+
     c38:	28 e0       	ldi	r18, 0x08	; 8
		for( bit_ctr = 8; bit_ctr > 0; bit_ctr--)
		{
			temp = ((crc ^ cur_byte) & 0x01);
     c3a:	a3 2f       	mov	r26, r19
     c3c:	a4 27       	eor	r26, r20
			if( temp == 0)
     c3e:	a0 fd       	sbrc	r26, 0
     c40:	02 c0       	rjmp	.+4      	; 0xc46 <crc8+0x24>
			{
				crc >>= 1;
     c42:	46 95       	lsr	r20
     c44:	03 c0       	rjmp	.+6      	; 0xc4c <crc8+0x2a>
			}
			else
			{
				crc ^= 0x18;
     c46:	45 27       	eor	r20, r21
				crc >>= 1;
     c48:	46 95       	lsr	r20
				crc |= 0x80;
     c4a:	40 68       	ori	r20, 0x80	; 128
			}
			cur_byte >>= 1;
     c4c:	36 95       	lsr	r19
     c4e:	21 50       	subi	r18, 0x01	; 1

	crc = 0;
	for( byte_ctr = 0; byte_ctr < num_bytes; byte_ctr++)
	{
		cur_byte = data[byte_ctr];
		for( bit_ctr = 8; bit_ctr > 0; bit_ctr--)
     c50:	a1 f7       	brne	.-24     	; 0xc3a <crc8+0x18>
     c52:	eb cf       	rjmp	.-42     	; 0xc2a <crc8+0x8>
			}
			cur_byte >>= 1;
		}
	}
	return crc;
}
     c54:	84 2f       	mov	r24, r20
     c56:	08 95       	ret

00000c58 <crc16>:
*         *data : pointer to array of bytes to compute CRC
*     num_bytes : number of bytes in the array
*       returns : the CRC of the data
*/
uint16_t crc16( uint8_t *data, uint16_t num_bytes)
{
     c58:	fc 01       	movw	r30, r24
     c5a:	68 0f       	add	r22, r24
     c5c:	79 1f       	adc	r23, r25
	uint16_t byte_ctr;
	uint8_t bit_ctr, temp, crc, cur_byte;

	crc = 0;
     c5e:	80 e0       	ldi	r24, 0x00	; 0
	for( byte_ctr = 0; byte_ctr < num_bytes; byte_ctr++)
     c60:	e6 17       	cp	r30, r22
     c62:	f7 07       	cpc	r31, r23
     c64:	41 f0       	breq	.+16     	; 0xc76 <crc16+0x1e>
	{
		cur_byte = data[byte_ctr];
     c66:	21 91       	ld	r18, Z+
     c68:	98 e0       	ldi	r25, 0x08	; 8
		for( bit_ctr = 8; bit_ctr > 0; bit_ctr--)
		{
			temp = ((crc ^ cur_byte) & 0x01);
     c6a:	82 27       	eor	r24, r18
     c6c:	81 70       	andi	r24, 0x01	; 1
			{
				crc ^= 0x4002;
				crc >>= 1;
				crc |= 0x8000;
			}
			cur_byte >>= 1;
     c6e:	26 95       	lsr	r18
     c70:	91 50       	subi	r25, 0x01	; 1

	crc = 0;
	for( byte_ctr = 0; byte_ctr < num_bytes; byte_ctr++)
	{
		cur_byte = data[byte_ctr];
		for( bit_ctr = 8; bit_ctr > 0; bit_ctr--)
     c72:	d9 f7       	brne	.-10     	; 0xc6a <crc16+0x12>
     c74:	f5 cf       	rjmp	.-22     	; 0xc60 <crc16+0x8>
			}
			cur_byte >>= 1;
		}
	}
	return crc;
}
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	08 95       	ret

00000c7a <delayloop32>:
#include <inttypes.h>

#include "delay.h"

void delayloop32(uint32_t loops) 
{
     c7a:	dc 01       	movw	r26, r24
     c7c:	cb 01       	movw	r24, r22
  __asm__ volatile ( "cp  %A0,__zero_reg__ \n\t"  \
     c7e:	81 15       	cp	r24, r1
     c80:	91 05       	cpc	r25, r1
     c82:	a1 05       	cpc	r26, r1
     c84:	b1 05       	cpc	r27, r1
     c86:	29 f0       	breq	.+10     	; 0xc92 <L_Exit_7>

00000c88 <L_LOOP_7>:
     c88:	81 50       	subi	r24, 0x01	; 1
     c8a:	90 40       	sbci	r25, 0x00	; 0
     c8c:	a0 40       	sbci	r26, 0x00	; 0
     c8e:	b0 40       	sbci	r27, 0x00	; 0
     c90:	d9 f7       	brne	.-10     	; 0xc88 <L_LOOP_7>

00000c92 <L_Exit_7>:
     c92:	08 95       	ret

00000c94 <DS18X20_start_meas>:

/* start measurement (CONVERT_T) for all sensors if input id==NULL 
   or for single sensor. then id is the rom-code */
extern uint8_t DS18X20_start_meas( uint8_t id[])
{
	if( ! owi_device_command( DS18X20_CONVERT_T, id))
     c94:	bc 01       	movw	r22, r24
     c96:	84 e4       	ldi	r24, 0x44	; 68
     c98:	0e 94 60 08 	call	0x10c0	; 0x10c0 <owi_device_command>
     c9c:	81 11       	cpse	r24, r1
     c9e:	08 c0       	rjmp	.+16     	; 0xcb0 <DS18X20_start_meas+0x1c>
	{
		// wait for measurement cycle to complete
		delay_ms( DS18B20_TCONV_12BIT);
     ca0:	66 e4       	ldi	r22, 0x46	; 70
     ca2:	71 e4       	ldi	r23, 0x41	; 65
     ca4:	8f e0       	ldi	r24, 0x0F	; 15
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	0e 94 3d 06 	call	0xc7a	; 0xc7a <delayloop32>
		return OWI_BUS_OK;
     cac:	80 e0       	ldi	r24, 0x00	; 0
     cae:	08 95       	ret
	}
	return OWI_BUS_ERROR;
     cb0:	8f ef       	ldi	r24, 0xFF	; 255
}
     cb2:	08 95       	ret

00000cb4 <DS18X20_get_meas>:
/*************************************************************/
extern int DS18X20_get_meas( uint8_t id[])
{
     cb4:	df 92       	push	r13
     cb6:	ef 92       	push	r14
     cb8:	ff 92       	push	r15
     cba:	0f 93       	push	r16
     cbc:	1f 93       	push	r17
     cbe:	cf 93       	push	r28
     cc0:	df 93       	push	r29
     cc2:	cd b7       	in	r28, 0x3d	; 61
     cc4:	de b7       	in	r29, 0x3e	; 62
     cc6:	2a 97       	sbiw	r28, 0x0a	; 10
     cc8:	0f b6       	in	r0, 0x3f	; 63
     cca:	f8 94       	cli
     ccc:	de bf       	out	0x3e, r29	; 62
     cce:	0f be       	out	0x3f, r0	; 63
     cd0:	cd bf       	out	0x3d, r28	; 61
	uint8_t i, sp[DS18X20_SP_SIZE];
	uint16_t meas;

	// make sure we have a device to check and the bus is working
	if( id == NULL || owi_device_command( DS18X20_READ, id)) return DS18X20_BAD_TEMP;
     cd2:	00 97       	sbiw	r24, 0x00	; 0
     cd4:	19 f4       	brne	.+6      	; 0xcdc <DS18X20_get_meas+0x28>
     cd6:	8f e0       	ldi	r24, 0x0F	; 15
     cd8:	97 e2       	ldi	r25, 0x27	; 39
     cda:	26 c0       	rjmp	.+76     	; 0xd28 <DS18X20_get_meas+0x74>
     cdc:	bc 01       	movw	r22, r24
     cde:	8e eb       	ldi	r24, 0xBE	; 190
     ce0:	0e 94 60 08 	call	0x10c0	; 0x10c0 <owi_device_command>
     ce4:	81 11       	cpse	r24, r1
     ce6:	f7 cf       	rjmp	.-18     	; 0xcd6 <DS18X20_get_meas+0x22>
     ce8:	8e 01       	movw	r16, r28
     cea:	0f 5f       	subi	r16, 0xFF	; 255
     cec:	1f 4f       	sbci	r17, 0xFF	; 255
     cee:	7e 01       	movw	r14, r28
     cf0:	8a e0       	ldi	r24, 0x0A	; 10
     cf2:	e8 0e       	add	r14, r24
     cf4:	f1 1c       	adc	r15, r1
     cf6:	d0 2e       	mov	r13, r16
     cf8:	91 2f       	mov	r25, r17

	// get the scratchpad data
	for( i = 0 ; i < DS18X20_SP_SIZE; i++) sp[i] = owi_byte_io( 0xFF);
     cfa:	8f ef       	ldi	r24, 0xFF	; 255
     cfc:	9a 87       	std	Y+10, r25	; 0x0a
     cfe:	0e 94 38 08 	call	0x1070	; 0x1070 <owi_byte_io>
     d02:	f8 01       	movw	r30, r16
     d04:	81 93       	st	Z+, r24
     d06:	8f 01       	movw	r16, r30
     d08:	9a 85       	ldd	r25, Y+10	; 0x0a
     d0a:	ee 15       	cp	r30, r14
     d0c:	ff 05       	cpc	r31, r15
     d0e:	a9 f7       	brne	.-22     	; 0xcfa <DS18X20_get_meas+0x46>
	if( crc8( &sp[0], DS18X20_SP_SIZE)) return DS18X20_BAD_TEMP;
     d10:	69 e0       	ldi	r22, 0x09	; 9
     d12:	8d 2d       	mov	r24, r13
     d14:	0e 94 11 06 	call	0xc22	; 0xc22 <crc8>
     d18:	81 11       	cpse	r24, r1
     d1a:	dd cf       	rjmp	.-70     	; 0xcd6 <DS18X20_get_meas+0x22>

	// got good data
	meas = sp[0] | (((uint16_t)sp[1]) << 8);
     d1c:	8a 81       	ldd	r24, Y+2	; 0x02
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	98 2f       	mov	r25, r24
     d22:	88 27       	eor	r24, r24
     d24:	29 81       	ldd	r18, Y+1	; 0x01
     d26:	82 2b       	or	r24, r18

	return meas;
}
     d28:	2a 96       	adiw	r28, 0x0a	; 10
     d2a:	0f b6       	in	r0, 0x3f	; 63
     d2c:	f8 94       	cli
     d2e:	de bf       	out	0x3e, r29	; 62
     d30:	0f be       	out	0x3f, r0	; 63
     d32:	cd bf       	out	0x3d, r28	; 61
     d34:	df 91       	pop	r29
     d36:	cf 91       	pop	r28
     d38:	1f 91       	pop	r17
     d3a:	0f 91       	pop	r16
     d3c:	ff 90       	pop	r15
     d3e:	ef 90       	pop	r14
     d40:	df 90       	pop	r13
     d42:	08 95       	ret

00000d44 <DS18X20_get_temp>:
/**************************************************************/
// returns the temperature * 100 as an int
extern int DS18X20_get_temp( uint8_t id[])
{
     d44:	bf 92       	push	r11
     d46:	cf 92       	push	r12
     d48:	df 92       	push	r13
     d4a:	ef 92       	push	r14
     d4c:	ff 92       	push	r15
     d4e:	0f 93       	push	r16
     d50:	1f 93       	push	r17
     d52:	cf 93       	push	r28
     d54:	df 93       	push	r29
     d56:	cd b7       	in	r28, 0x3d	; 61
     d58:	de b7       	in	r29, 0x3e	; 62
     d5a:	62 97       	sbiw	r28, 0x12	; 18
     d5c:	0f b6       	in	r0, 0x3f	; 63
     d5e:	f8 94       	cli
     d60:	de bf       	out	0x3e, r29	; 62
     d62:	0f be       	out	0x3f, r0	; 63
     d64:	cd bf       	out	0x3d, r28	; 61
     d66:	7c 01       	movw	r14, r24
	uint8_t sp[DS18X20_SP_SIZE];
	uint16_t meas;
	uint8_t i, subzero, cel;
	uint8_t need_rounding[] = { 1, 3, 4, 6, 9, 11, 12, 14 };
     d68:	88 e0       	ldi	r24, 0x08	; 8
     d6a:	ea e1       	ldi	r30, 0x1A	; 26
     d6c:	f1 e0       	ldi	r31, 0x01	; 1
     d6e:	de 01       	movw	r26, r28
     d70:	1a 96       	adiw	r26, 0x0a	; 10
     d72:	01 90       	ld	r0, Z+
     d74:	0d 92       	st	X+, r0
     d76:	8a 95       	dec	r24
     d78:	e1 f7       	brne	.-8      	; 0xd72 <DS18X20_get_temp+0x2e>

	// make sure we have a device to check and the bus is working
	if( id == NULL || owi_device_command( DS18X20_READ, id)) return DS18X20_BAD_TEMP;
     d7a:	e1 14       	cp	r14, r1
     d7c:	f1 04       	cpc	r15, r1
     d7e:	19 f4       	brne	.+6      	; 0xd86 <DS18X20_get_temp+0x42>
     d80:	8f e0       	ldi	r24, 0x0F	; 15
     d82:	97 e2       	ldi	r25, 0x27	; 39
     d84:	73 c0       	rjmp	.+230    	; 0xe6c <DS18X20_get_temp+0x128>
     d86:	b7 01       	movw	r22, r14
     d88:	8e eb       	ldi	r24, 0xBE	; 190
     d8a:	0e 94 60 08 	call	0x10c0	; 0x10c0 <owi_device_command>
     d8e:	81 11       	cpse	r24, r1
     d90:	f7 cf       	rjmp	.-18     	; 0xd80 <DS18X20_get_temp+0x3c>
     d92:	8e 01       	movw	r16, r28
     d94:	0f 5f       	subi	r16, 0xFF	; 255
     d96:	1f 4f       	sbci	r17, 0xFF	; 255
     d98:	6e 01       	movw	r12, r28
     d9a:	4a e0       	ldi	r20, 0x0A	; 10
     d9c:	c4 0e       	add	r12, r20
     d9e:	d1 1c       	adc	r13, r1
     da0:	b0 2e       	mov	r11, r16
     da2:	91 2f       	mov	r25, r17
	// get the scratchpad data
	for( i = 0 ; i < DS18X20_SP_SIZE; i++) sp[i] = owi_byte_io( 0xFF);
     da4:	8f ef       	ldi	r24, 0xFF	; 255
     da6:	9a 8b       	std	Y+18, r25	; 0x12
     da8:	0e 94 38 08 	call	0x1070	; 0x1070 <owi_byte_io>
     dac:	f8 01       	movw	r30, r16
     dae:	81 93       	st	Z+, r24
     db0:	8f 01       	movw	r16, r30
     db2:	9a 89       	ldd	r25, Y+18	; 0x12
     db4:	ec 15       	cp	r30, r12
     db6:	fd 05       	cpc	r31, r13
     db8:	a9 f7       	brne	.-22     	; 0xda4 <DS18X20_get_temp+0x60>
	if( crc8( &sp[0], DS18X20_SP_SIZE)) return DS18X20_BAD_TEMP;
     dba:	69 e0       	ldi	r22, 0x09	; 9
     dbc:	8b 2d       	mov	r24, r11
     dbe:	0e 94 11 06 	call	0xc22	; 0xc22 <crc8>
     dc2:	81 11       	cpse	r24, r1
     dc4:	dd cf       	rjmp	.-70     	; 0xd80 <DS18X20_get_temp+0x3c>

	// got good data so start conversion
	meas = sp[0];  // LSB
     dc6:	29 81       	ldd	r18, Y+1	; 0x01
	meas |= ((uint16_t)sp[1]) << 8; // MSB
     dc8:	8a 81       	ldd	r24, Y+2	; 0x02
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	38 2b       	or	r19, r24

	// convert to 18S20 9bit temp to 12bit temperature 
	if( OWI_FAMILY( id[0]) == DS18S20_FAMILY_CODE)
     dce:	f7 01       	movw	r30, r14
     dd0:	40 81       	ld	r20, Z
     dd2:	4f 77       	andi	r20, 0x7F	; 127
     dd4:	40 31       	cpi	r20, 0x10	; 16
     dd6:	71 f4       	brne	.+28     	; 0xdf4 <DS18X20_get_temp+0xb0>
	{
		/* Extended measurements for DS18S20 contributed by Carsten Foss */
		meas &= (uint16_t) 0xfffe;	// Discard LSB , needed for later extended precicion calc
     dd8:	c9 01       	movw	r24, r18
     dda:	8e 7f       	andi	r24, 0xFE	; 254
		meas <<= 3;					// Convert to 12-bit , now degrees are in 1/16 degrees units
     ddc:	53 e0       	ldi	r21, 0x03	; 3
     dde:	88 0f       	add	r24, r24
     de0:	99 1f       	adc	r25, r25
     de2:	5a 95       	dec	r21
     de4:	e1 f7       	brne	.-8      	; 0xdde <DS18X20_get_temp+0x9a>
		meas += (16 - sp[6]) - 4;	// Add the compensation , and remember to subtract 0.25 degree (4/16)
     de6:	5f 81       	ldd	r21, Y+7	; 0x07
     de8:	2c e0       	ldi	r18, 0x0C	; 12
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	25 1b       	sub	r18, r21
     dee:	31 09       	sbc	r19, r1
     df0:	28 0f       	add	r18, r24
     df2:	39 1f       	adc	r19, r25
	}

	// check for negative 
	if( meas & 0x8000) 
     df4:	37 ff       	sbrs	r19, 7
     df6:	05 c0       	rjmp	.+10     	; 0xe02 <DS18X20_get_temp+0xbe>
	{
		subzero = 1;      // mark negative
		meas ^= 0xffff;  // convert to positive => (twos complement)++
		meas++;
     df8:	31 95       	neg	r19
     dfa:	21 95       	neg	r18
     dfc:	31 09       	sbc	r19, r1
	}

	// check for negative 
	if( meas & 0x8000) 
	{
		subzero = 1;      // mark negative
     dfe:	a1 e0       	ldi	r26, 0x01	; 1
     e00:	01 c0       	rjmp	.+2      	; 0xe04 <DS18X20_get_temp+0xc0>
		meas ^= 0xffff;  // convert to positive => (twos complement)++
		meas++;
	}
	else subzero = 0;
     e02:	a0 e0       	ldi	r26, 0x00	; 0
	
	// clear undefined bits for B != 12bit
	if( OWI_FAMILY( id[0]) == DS18B20_FAMILY_CODE)
     e04:	48 32       	cpi	r20, 0x28	; 40
     e06:	71 f4       	brne	.+28     	; 0xe24 <DS18X20_get_temp+0xe0>
	{
		i = sp[DS18B20_CONF_REG];
     e08:	8d 81       	ldd	r24, Y+5	; 0x05
		if ( (i & DS18B20_12_BIT) == DS18B20_12_BIT ) ;	// both bits set
     e0a:	98 2f       	mov	r25, r24
     e0c:	90 76       	andi	r25, 0x60	; 96
     e0e:	90 36       	cpi	r25, 0x60	; 96
     e10:	49 f0       	breq	.+18     	; 0xe24 <DS18X20_get_temp+0xe0>
		else if( (i & DS18B20_11_BIT) == DS18B20_11_BIT) // bit 6
     e12:	86 ff       	sbrs	r24, 6
     e14:	02 c0       	rjmp	.+4      	; 0xe1a <DS18X20_get_temp+0xd6>
			meas &= ~(DS18B20_11_BIT_UNDF);
     e16:	2e 7f       	andi	r18, 0xFE	; 254
     e18:	05 c0       	rjmp	.+10     	; 0xe24 <DS18X20_get_temp+0xe0>
		else if( (i & DS18B20_10_BIT) == DS18B20_10_BIT) // bit 5
     e1a:	85 ff       	sbrs	r24, 5
     e1c:	02 c0       	rjmp	.+4      	; 0xe22 <DS18X20_get_temp+0xde>
			meas &= ~(DS18B20_10_BIT_UNDF);
     e1e:	2c 7f       	andi	r18, 0xFC	; 252
     e20:	01 c0       	rjmp	.+2      	; 0xe24 <DS18X20_get_temp+0xe0>
		else // neither bit 6 or 5
			meas &= ~(DS18B20_9_BIT_UNDF);
     e22:	28 7f       	andi	r18, 0xF8	; 248
	}			
	
	cel = (uint8_t)(meas >> 4);	// save the integer degrees 
     e24:	c9 01       	movw	r24, r18
     e26:	44 e0       	ldi	r20, 0x04	; 4
     e28:	96 95       	lsr	r25
     e2a:	87 95       	ror	r24
     e2c:	4a 95       	dec	r20
     e2e:	e1 f7       	brne	.-8      	; 0xe28 <DS18X20_get_temp+0xe4>
	meas = (uint8_t)(meas & 0x000F);	// get the fractional part
     e30:	2f 70       	andi	r18, 0x0F	; 15
     e32:	33 27       	eor	r19, r19

	// need rounding?
	if( !subzero)
     e34:	a1 11       	cpse	r26, r1
     e36:	0f c0       	rjmp	.+30     	; 0xe56 <DS18X20_get_temp+0x112>
     e38:	f6 01       	movw	r30, r12
     e3a:	ae 01       	movw	r20, r28
     e3c:	4e 5e       	subi	r20, 0xEE	; 238
     e3e:	5f 4f       	sbci	r21, 0xFF	; 255
	{
		for( i = 0; i < sizeof(need_rounding); i++)
		{
			if( meas == need_rounding[i])
     e40:	61 91       	ld	r22, Z+
     e42:	70 e0       	ldi	r23, 0x00	; 0
     e44:	26 17       	cp	r18, r22
     e46:	37 07       	cpc	r19, r23
     e48:	19 f4       	brne	.+6      	; 0xe50 <DS18X20_get_temp+0x10c>
			{
				meas++;
     e4a:	2f 5f       	subi	r18, 0xFF	; 255
     e4c:	3f 4f       	sbci	r19, 0xFF	; 255
				break;
     e4e:	03 c0       	rjmp	.+6      	; 0xe56 <DS18X20_get_temp+0x112>
	meas = (uint8_t)(meas & 0x000F);	// get the fractional part

	// need rounding?
	if( !subzero)
	{
		for( i = 0; i < sizeof(need_rounding); i++)
     e50:	e4 17       	cp	r30, r20
     e52:	f5 07       	cpc	r31, r21
     e54:	a9 f7       	brne	.-22     	; 0xe40 <DS18X20_get_temp+0xfc>
				meas++;
				break;
			}
		}
	}
	meas += cel * 10;
     e56:	fa e0       	ldi	r31, 0x0A	; 10
     e58:	8f 9f       	mul	r24, r31
     e5a:	20 0d       	add	r18, r0
     e5c:	31 1d       	adc	r19, r1
     e5e:	11 24       	eor	r1, r1

	return ((subzero) ? -meas : meas);
     e60:	aa 23       	and	r26, r26
     e62:	19 f0       	breq	.+6      	; 0xe6a <DS18X20_get_temp+0x126>
     e64:	31 95       	neg	r19
     e66:	21 95       	neg	r18
     e68:	31 09       	sbc	r19, r1
     e6a:	c9 01       	movw	r24, r18
}
     e6c:	62 96       	adiw	r28, 0x12	; 18
     e6e:	0f b6       	in	r0, 0x3f	; 63
     e70:	f8 94       	cli
     e72:	de bf       	out	0x3e, r29	; 62
     e74:	0f be       	out	0x3f, r0	; 63
     e76:	cd bf       	out	0x3d, r28	; 61
     e78:	df 91       	pop	r29
     e7a:	cf 91       	pop	r28
     e7c:	1f 91       	pop	r17
     e7e:	0f 91       	pop	r16
     e80:	ff 90       	pop	r15
     e82:	ef 90       	pop	r14
     e84:	df 90       	pop	r13
     e86:	cf 90       	pop	r12
     e88:	bf 90       	pop	r11
     e8a:	08 95       	ret

00000e8c <toggle_e>:

#if LCD_IO_MODE
	/* toggle Enable Pin to initiate write */
	static void toggle_e( void)
	{
		lcd_e_high();
     e8c:	2e 9a       	sbi	0x05, 6	; 5
		lcd_e_delay();
     e8e:	00 c0       	rjmp	.+0      	; 0xe90 <toggle_e+0x4>
		lcd_e_low();
     e90:	2e 98       	cbi	0x05, 6	; 5
     e92:	08 95       	ret

00000e94 <lcd_write>:
				 0: write instruction
Returns:  none
*************************************************************************/
#if LCD_IO_MODE
	static void lcd_write( uint8_t data, uint8_t rs) 
	{
     e94:	1f 93       	push	r17
     e96:	cf 93       	push	r28
     e98:	df 93       	push	r29
     e9a:	1f 92       	push	r1
     e9c:	cd b7       	in	r28, 0x3d	; 61
     e9e:	de b7       	in	r29, 0x3e	; 62
		unsigned char dataBits ;


		if( rs)	/* write data		( RS=1, RW=0) */
     ea0:	66 23       	and	r22, r22
     ea2:	11 f0       	breq	.+4      	; 0xea8 <lcd_write+0x14>
		{
			lcd_rs_high();
     ea4:	2c 9a       	sbi	0x05, 4	; 5
     ea6:	01 c0       	rjmp	.+2      	; 0xeaa <lcd_write+0x16>
		}
		else	/* write instruction ( RS=0, RW=0) */
		{
			lcd_rs_low();
     ea8:	2c 98       	cbi	0x05, 4	; 5
		}
		lcd_rw_low();
     eaa:	2d 98       	cbi	0x05, 5	; 5

		if( (&LCD_DATA0_PORT == &LCD_DATA1_PORT) && (&LCD_DATA1_PORT == &LCD_DATA2_PORT) && (&LCD_DATA2_PORT == &LCD_DATA3_PORT)
				&& (LCD_DATA0_PIN == 0) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3))
		{
			/* configure data pins as output */
			DDR( LCD_DATA0_PORT) |= 0x0F;
     eac:	94 b1       	in	r25, 0x04	; 4
     eae:	9f 60       	ori	r25, 0x0F	; 15
     eb0:	94 b9       	out	0x04, r25	; 4

			/* output high nibble first */
			dataBits = LCD_DATA0_PORT & 0xF0;
     eb2:	15 b1       	in	r17, 0x05	; 5
     eb4:	10 7f       	andi	r17, 0xF0	; 240
			LCD_DATA0_PORT = dataBits | ((data>>4) & 0x0F);
     eb6:	98 2f       	mov	r25, r24
     eb8:	92 95       	swap	r25
     eba:	9f 70       	andi	r25, 0x0F	; 15
     ebc:	91 2b       	or	r25, r17
     ebe:	95 b9       	out	0x05, r25	; 5
			lcd_e_toggle();
     ec0:	89 83       	std	Y+1, r24	; 0x01
     ec2:	0e 94 46 07 	call	0xe8c	; 0xe8c <toggle_e>

			/* output low nibble */
			LCD_DATA0_PORT = dataBits | (data & 0x0F);
     ec6:	89 81       	ldd	r24, Y+1	; 0x01
     ec8:	8f 70       	andi	r24, 0x0F	; 15
     eca:	81 2b       	or	r24, r17
     ecc:	85 b9       	out	0x05, r24	; 5
			lcd_e_toggle();
     ece:	0e 94 46 07 	call	0xe8c	; 0xe8c <toggle_e>

			/* all data pins high ( inactive) */
			LCD_DATA0_PORT = dataBits | 0x0F;
     ed2:	1f 60       	ori	r17, 0x0F	; 15
     ed4:	15 b9       	out	0x05, r17	; 5
			LCD_DATA0_PORT |= _BV( LCD_DATA0_PIN);
			LCD_DATA1_PORT |= _BV( LCD_DATA1_PIN);
			LCD_DATA2_PORT |= _BV( LCD_DATA2_PIN);
			LCD_DATA3_PORT |= _BV( LCD_DATA3_PIN);
		}
	}
     ed6:	0f 90       	pop	r0
     ed8:	df 91       	pop	r29
     eda:	cf 91       	pop	r28
     edc:	1f 91       	pop	r17
     ede:	08 95       	ret

00000ee0 <lcd_read.constprop.0>:
	
	
	if( rs)
		lcd_rs_high();						/* RS=1: read data	  */
	else
		lcd_rs_low();						/* RS=0: read busy flag */
     ee0:	2c 98       	cbi	0x05, 4	; 5
	lcd_rw_high();							/* RW=1  read mode	  */
     ee2:	2d 9a       	sbi	0x05, 5	; 5
	
	if( (&LCD_DATA0_PORT == &LCD_DATA1_PORT) && (&LCD_DATA1_PORT == &LCD_DATA2_PORT) && (&LCD_DATA2_PORT == &LCD_DATA3_PORT)
	  && (LCD_DATA0_PIN == 0) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3))
	{
		DDR( LCD_DATA0_PORT) &= 0xF0;		 /* configure data pins as input */
     ee4:	84 b1       	in	r24, 0x04	; 4
     ee6:	80 7f       	andi	r24, 0xF0	; 240
     ee8:	84 b9       	out	0x04, r24	; 4
		
		lcd_e_high();
     eea:	2e 9a       	sbi	0x05, 6	; 5
		lcd_e_delay();		
     eec:	00 c0       	rjmp	.+0      	; 0xeee <lcd_read.constprop.0+0xe>
		data = PIN( LCD_DATA0_PORT) << 4;	 /* read high nibble first */
     eee:	83 b1       	in	r24, 0x03	; 3
		lcd_e_low();
     ef0:	2e 98       	cbi	0x05, 6	; 5
		
		lcd_e_delay();						/* Enable 500ns low		*/
     ef2:	00 c0       	rjmp	.+0      	; 0xef4 <lcd_read.constprop.0+0x14>
		
		lcd_e_high();
     ef4:	2e 9a       	sbi	0x05, 6	; 5
		lcd_e_delay();
     ef6:	00 c0       	rjmp	.+0      	; 0xef8 <lcd_read.constprop.0+0x18>
		data |= PIN( LCD_DATA0_PORT) & 0x0F;	/* read low nibble		*/
     ef8:	93 b1       	in	r25, 0x03	; 3
     efa:	9f 70       	andi	r25, 0x0F	; 15
	{
		DDR( LCD_DATA0_PORT) &= 0xF0;		 /* configure data pins as input */
		
		lcd_e_high();
		lcd_e_delay();		
		data = PIN( LCD_DATA0_PORT) << 4;	 /* read high nibble first */
     efc:	82 95       	swap	r24
     efe:	80 7f       	andi	r24, 0xF0	; 240
		lcd_e_delay();						/* Enable 500ns low		*/
		
		lcd_e_high();
		lcd_e_delay();
		data |= PIN( LCD_DATA0_PORT) & 0x0F;	/* read low nibble		*/
		lcd_e_low();
     f00:	2e 98       	cbi	0x05, 6	; 5
		if( PIN( LCD_DATA2_PORT) & _BV( LCD_DATA2_PIN)) data |= 0x04;
		if( PIN( LCD_DATA3_PORT) & _BV( LCD_DATA3_PIN)) data |= 0x08;		
		lcd_e_low();
	}
	return data;
}
     f02:	89 2b       	or	r24, r25
     f04:	08 95       	ret

00000f06 <lcd_waitbusy>:

{
	register uint8_t c;
	
	/* wait until busy flag is cleared */
	while ( (c = lcd_read( 0)) & (1 << LCD_BUSY)) {}
     f06:	0e 94 70 07 	call	0xee0	; 0xee0 <lcd_read.constprop.0>
     f0a:	87 fd       	sbrc	r24, 7
     f0c:	fc cf       	rjmp	.-8      	; 0xf06 <lcd_waitbusy>
static inline void _delayFourCycles( unsigned int __count)
{
	if( __count == 0)	
		__asm__ __volatile__( "rjmp 1f\n 1:");	// 2 cycles
	else
		__asm__ __volatile__( 
     f0e:	84 e0       	ldi	r24, 0x04	; 4
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	01 97       	sbiw	r24, 0x01	; 1
     f14:	f1 f7       	brne	.-4      	; 0xf12 <lcd_waitbusy+0xc>
	
	/* the address counter is updated 4us after the busy flag is cleared */
	delay( 2);

	/* now read the address counter */
	return ( lcd_read( 0));  // return address counter
     f16:	0c 94 70 07 	jmp	0xee0	; 0xee0 <lcd_read.constprop.0>

00000f1a <lcd_command>:
Send LCD controller instruction command
Input:	instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command( uint8_t cmd)
{
     f1a:	cf 93       	push	r28
     f1c:	c8 2f       	mov	r28, r24
	lcd_waitbusy();
     f1e:	0e 94 83 07 	call	0xf06	; 0xf06 <lcd_waitbusy>
	lcd_write( cmd, 0);
     f22:	60 e0       	ldi	r22, 0x00	; 0
     f24:	8c 2f       	mov	r24, r28
}
     f26:	cf 91       	pop	r28
Returns: none
*************************************************************************/
void lcd_command( uint8_t cmd)
{
	lcd_waitbusy();
	lcd_write( cmd, 0);
     f28:	0c 94 4a 07 	jmp	0xe94	; 0xe94 <lcd_write>

00000f2c <lcd_data>:
Send data byte to LCD controller 
Input:	data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data( uint8_t data)
{
     f2c:	cf 93       	push	r28
     f2e:	c8 2f       	mov	r28, r24
	lcd_waitbusy();
     f30:	0e 94 83 07 	call	0xf06	; 0xf06 <lcd_waitbusy>
	lcd_write( data, 1);
     f34:	61 e0       	ldi	r22, 0x01	; 1
     f36:	8c 2f       	mov	r24, r28
}
     f38:	cf 91       	pop	r28
Returns: none
*************************************************************************/
void lcd_data( uint8_t data)
{
	lcd_waitbusy();
	lcd_write( data, 1);
     f3a:	0c 94 4a 07 	jmp	0xe94	; 0xe94 <lcd_write>

00000f3e <lcd_gotoxy>:
		lcd_command( (1 << LCD_DDRAM) + LCD_START_LINE1 + x);
	else
		lcd_command( (1 << LCD_DDRAM) + LCD_START_LINE2 + x);
#endif
#if LCD_LINES == 4
	if( y == 0)
     f3e:	61 11       	cpse	r22, r1
     f40:	02 c0       	rjmp	.+4      	; 0xf46 <lcd_gotoxy+0x8>
		lcd_command( (1 << LCD_DDRAM) + LCD_START_LINE1 + x);
     f42:	80 58       	subi	r24, 0x80	; 128
     f44:	09 c0       	rjmp	.+18     	; 0xf58 <lcd_gotoxy+0x1a>
	else if( y == 1)
     f46:	61 30       	cpi	r22, 0x01	; 1
     f48:	11 f4       	brne	.+4      	; 0xf4e <lcd_gotoxy+0x10>
		lcd_command( (1 << LCD_DDRAM) + LCD_START_LINE2 + x);
     f4a:	80 54       	subi	r24, 0x40	; 64
     f4c:	05 c0       	rjmp	.+10     	; 0xf58 <lcd_gotoxy+0x1a>
	else if( y == 2)
     f4e:	62 30       	cpi	r22, 0x02	; 2
     f50:	11 f4       	brne	.+4      	; 0xf56 <lcd_gotoxy+0x18>
		lcd_command( (1 << LCD_DDRAM) + LCD_START_LINE3 + x);
     f52:	8c 56       	subi	r24, 0x6C	; 108
     f54:	01 c0       	rjmp	.+2      	; 0xf58 <lcd_gotoxy+0x1a>
	else /* y == 3 */
		lcd_command( (1 << LCD_DDRAM) + LCD_START_LINE4 + x);
     f56:	8c 52       	subi	r24, 0x2C	; 44
     f58:	0c 94 8d 07 	jmp	0xf1a	; 0xf1a <lcd_command>

00000f5c <lcd_getxy>:

/*************************************************************************
*************************************************************************/
int lcd_getxy( void)
{
	return lcd_waitbusy();
     f5c:	0e 94 83 07 	call	0xf06	; 0xf06 <lcd_waitbusy>
}
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	08 95       	ret

00000f64 <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr( void)
{
	lcd_command(1 << LCD_CLR);
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	0c 94 8d 07 	jmp	0xf1a	; 0xf1a <lcd_command>

00000f6a <lcd_home>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home( void)
{
	lcd_command(1 << LCD_HOME);
     f6a:	82 e0       	ldi	r24, 0x02	; 2
     f6c:	0c 94 8d 07 	jmp	0xf1a	; 0xf1a <lcd_command>

00000f70 <lcd_putc>:
Display character at current cursor position 
Input:	character to be displayed										
Returns:  none
*************************************************************************/
void lcd_putc( char c)
{
     f70:	cf 93       	push	r28
     f72:	c8 2f       	mov	r28, r24
	uint8_t pos;


	pos = lcd_waitbusy();	// read busy-flag and address counter
     f74:	0e 94 83 07 	call	0xf06	; 0xf06 <lcd_waitbusy>
     f78:	98 2f       	mov	r25, r24
	if( c == '\n')
     f7a:	ca 30       	cpi	r28, 0x0A	; 10
     f7c:	a1 f4       	brne	.+40     	; 0xfa6 <lcd_putc+0x36>
	else if( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE4))
		addressCounter = LCD_START_LINE4;
	else 
		addressCounter = LCD_START_LINE1;
#else
	if( pos < LCD_START_LINE3)
     f7e:	84 31       	cpi	r24, 0x14	; 20
     f80:	48 f0       	brcs	.+18     	; 0xf94 <lcd_putc+0x24>
		addressCounter = LCD_START_LINE2;
	else if( (pos >= LCD_START_LINE2) && (pos < LCD_START_LINE4))
     f82:	80 ec       	ldi	r24, 0xC0	; 192
     f84:	89 0f       	add	r24, r25
     f86:	84 31       	cpi	r24, 0x14	; 20
     f88:	38 f0       	brcs	.+14     	; 0xf98 <lcd_putc+0x28>
		addressCounter = LCD_START_LINE3;
	else if( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE2))
     f8a:	94 51       	subi	r25, 0x14	; 20
     f8c:	9c 32       	cpi	r25, 0x2C	; 44
     f8e:	30 f4       	brcc	.+12     	; 0xf9c <lcd_putc+0x2c>
		addressCounter = LCD_START_LINE4;
     f90:	84 e5       	ldi	r24, 0x54	; 84
     f92:	05 c0       	rjmp	.+10     	; 0xf9e <lcd_putc+0x2e>
		addressCounter = LCD_START_LINE4;
	else 
		addressCounter = LCD_START_LINE1;
#else
	if( pos < LCD_START_LINE3)
		addressCounter = LCD_START_LINE2;
     f94:	80 e4       	ldi	r24, 0x40	; 64
     f96:	03 c0       	rjmp	.+6      	; 0xf9e <lcd_putc+0x2e>
	else if( (pos >= LCD_START_LINE2) && (pos < LCD_START_LINE4))
		addressCounter = LCD_START_LINE3;
     f98:	84 e1       	ldi	r24, 0x14	; 20
     f9a:	01 c0       	rjmp	.+2      	; 0xf9e <lcd_putc+0x2e>
	else if( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE2))
		addressCounter = LCD_START_LINE4;
	else 
		addressCounter = LCD_START_LINE1;
     f9c:	80 e0       	ldi	r24, 0x00	; 0
#endif
#endif
	lcd_command( (1 << LCD_DDRAM) + addressCounter);
     f9e:	80 58       	subi	r24, 0x80	; 128
		lcd_waitbusy();
#endif
		lcd_write( c, 1);
	}

}/* lcd_putc */
     fa0:	cf 91       	pop	r28
		addressCounter = LCD_START_LINE4;
	else 
		addressCounter = LCD_START_LINE1;
#endif
#endif
	lcd_command( (1 << LCD_DDRAM) + addressCounter);
     fa2:	0c 94 8d 07 	jmp	0xf1a	; 0xf1a <lcd_command>
			lcd_write( (1 << LCD_DDRAM) + LCD_START_LINE1, 0);
		}
#endif
		lcd_waitbusy();
#endif
		lcd_write( c, 1);
     fa6:	61 e0       	ldi	r22, 0x01	; 1
     fa8:	8c 2f       	mov	r24, r28
	}

}/* lcd_putc */
     faa:	cf 91       	pop	r28
			lcd_write( (1 << LCD_DDRAM) + LCD_START_LINE1, 0);
		}
#endif
		lcd_waitbusy();
#endif
		lcd_write( c, 1);
     fac:	0c 94 4a 07 	jmp	0xe94	; 0xe94 <lcd_write>

00000fb0 <lcd_puts>:
Input:	string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts( const char *s)
/* print string on lcd ( no auto linefeed) */
{
     fb0:	cf 93       	push	r28
     fb2:	df 93       	push	r29
     fb4:	ec 01       	movw	r28, r24
	register char c;

	while ( (c = *s++))
     fb6:	89 91       	ld	r24, Y+
     fb8:	88 23       	and	r24, r24
     fba:	19 f0       	breq	.+6      	; 0xfc2 <lcd_puts+0x12>
	{
		lcd_putc( c);
     fbc:	0e 94 b8 07 	call	0xf70	; 0xf70 <lcd_putc>
     fc0:	fa cf       	rjmp	.-12     	; 0xfb6 <lcd_puts+0x6>
	}

}/* lcd_puts */
     fc2:	df 91       	pop	r29
     fc4:	cf 91       	pop	r28
     fc6:	08 95       	ret

00000fc8 <lcd_puts_p>:
Input:	 string from program memory be be displayed										
Returns:	none
*************************************************************************/
void lcd_puts_p( const char *progmem_s)
/* print string from program memory on lcd ( no auto linefeed) */
{
     fc8:	cf 93       	push	r28
     fca:	df 93       	push	r29
     fcc:	fc 01       	movw	r30, r24
	register char c;

	while ( ( c = pgm_read_byte( progmem_s++)))
     fce:	84 91       	lpm	r24, Z
     fd0:	ef 01       	movw	r28, r30
     fd2:	21 96       	adiw	r28, 0x01	; 1
     fd4:	88 23       	and	r24, r24
     fd6:	21 f0       	breq	.+8      	; 0xfe0 <lcd_puts_p+0x18>
	{
		lcd_putc( c);
     fd8:	0e 94 b8 07 	call	0xf70	; 0xf70 <lcd_putc>
     fdc:	fe 01       	movw	r30, r28
     fde:	f7 cf       	rjmp	.-18     	; 0xfce <lcd_puts_p+0x6>
	}

}/* lcd_puts_p */
     fe0:	df 91       	pop	r29
     fe2:	cf 91       	pop	r28
     fe4:	08 95       	ret

00000fe6 <lcd_puthex_nibble>:
for his UART library.  Adapted for the LCD lib by Tom Blough
Don't blame P. Fleury if it doesn't work ;-)
**************************************************************************/
void lcd_puthex_nibble(const unsigned char b)
{
    unsigned char  c = b & 0x0f;
     fe6:	8f 70       	andi	r24, 0x0F	; 15
    if (c>9) c += 'A'-10;
     fe8:	8a 30       	cpi	r24, 0x0A	; 10
     fea:	10 f0       	brcs	.+4      	; 0xff0 <lcd_puthex_nibble+0xa>
     fec:	89 5c       	subi	r24, 0xC9	; 201
     fee:	01 c0       	rjmp	.+2      	; 0xff2 <lcd_puthex_nibble+0xc>
    else c += '0';
     ff0:	80 5d       	subi	r24, 0xD0	; 208
    lcd_putc(c);
     ff2:	0c 94 b8 07 	jmp	0xf70	; 0xf70 <lcd_putc>

00000ff6 <lcd_puthex_byte>:
This functions was created by Martin Thomas <eversmith@heizung-thomas.de>
for his UART library.  Adapted for the LCD lib by Tom Blough
Don't blame P. Fleury if it doesn't work ;-)
**************************************************************************/
void lcd_puthex_byte(const unsigned char  b)
{
     ff6:	cf 93       	push	r28
     ff8:	c8 2f       	mov	r28, r24
    lcd_puthex_nibble(b>>4);
     ffa:	82 95       	swap	r24
     ffc:	8f 70       	andi	r24, 0x0F	; 15
     ffe:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <lcd_puthex_nibble>
    lcd_puthex_nibble(b);
    1002:	8c 2f       	mov	r24, r28
} /* lcd_puthex_byte */
    1004:	cf 91       	pop	r28
Don't blame P. Fleury if it doesn't work ;-)
**************************************************************************/
void lcd_puthex_byte(const unsigned char  b)
{
    lcd_puthex_nibble(b>>4);
    lcd_puthex_nibble(b);
    1006:	0c 94 f3 07 	jmp	0xfe6	; 0xfe6 <lcd_puthex_nibble>

0000100a <lcd_init>:
					LCD_DISP_ON_CURSOR	  display on, cursor on
					LCD_DISP_CURSOR_BLINK	display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init( uint8_t dispAttr)
{
    100a:	cf 93       	push	r28
    100c:	c8 2f       	mov	r28, r24
	  && (&LCD_RS_PORT == &LCD_DATA0_PORT) && (&LCD_RW_PORT == &LCD_DATA0_PORT) && (&LCD_E_PORT == &LCD_DATA0_PORT)
	  && (LCD_DATA0_PIN == 0) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) 
	  && (LCD_RS_PIN == 4) && (LCD_RW_PIN == 5) && (LCD_E_PIN == 6))
	{
		/* configure all port bits as output ( all LCD lines on same port) */
		DDR( LCD_DATA0_PORT) |= 0x7F;
    100e:	94 b1       	in	r25, 0x04	; 4
    1010:	9f 67       	ori	r25, 0x7F	; 127
    1012:	94 b9       	out	0x04, r25	; 4
static inline void _delayFourCycles( unsigned int __count)
{
	if( __count == 0)	
		__asm__ __volatile__( "rjmp 1f\n 1:");	// 2 cycles
	else
		__asm__ __volatile__( 
    1014:	e0 e0       	ldi	r30, 0x00	; 0
    1016:	fd e7       	ldi	r31, 0x7D	; 125
    1018:	31 97       	sbiw	r30, 0x01	; 1
    101a:	f1 f7       	brne	.-4      	; 0x1018 <lcd_init+0xe>
		DDR( LCD_DATA3_PORT) |= _BV( LCD_DATA3_PIN);
	}
	delay(16000);		/* wait 16ms or more after power-on		*/
	
	/* initial write to lcd is 8bit */
	LCD_DATA1_PORT |= _BV( LCD_DATA1_PIN);  // _BV( LCD_FUNCTION)>>4;
    101c:	29 9a       	sbi	0x05, 1	; 5
	LCD_DATA0_PORT |= _BV( LCD_DATA0_PIN);  // _BV( LCD_FUNCTION_8BIT)>>4;
    101e:	28 9a       	sbi	0x05, 0	; 5
	lcd_e_toggle();
    1020:	0e 94 46 07 	call	0xe8c	; 0xe8c <toggle_e>
static inline void _delayFourCycles( unsigned int __count)
{
	if( __count == 0)	
		__asm__ __volatile__( "rjmp 1f\n 1:");	// 2 cycles
	else
		__asm__ __volatile__( 
    1024:	e0 e0       	ldi	r30, 0x00	; 0
    1026:	f7 e2       	ldi	r31, 0x27	; 39
    1028:	31 97       	sbiw	r30, 0x01	; 1
    102a:	f1 f7       	brne	.-4      	; 0x1028 <lcd_init+0x1e>
	LCD_DATA0_PORT |= _BV( LCD_DATA0_PIN);  // _BV( LCD_FUNCTION_8BIT)>>4;
	lcd_e_toggle();
	delay( 4992);		 /* delay, busy flag can't be checked here */
	
	/* repeat last command */ 
	lcd_e_toggle();	  
    102c:	0e 94 46 07 	call	0xe8c	; 0xe8c <toggle_e>
static inline void _delayFourCycles( unsigned int __count)
{
	if( __count == 0)	
		__asm__ __volatile__( "rjmp 1f\n 1:");	// 2 cycles
	else
		__asm__ __volatile__( 
    1030:	e0 e8       	ldi	r30, 0x80	; 128
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	31 97       	sbiw	r30, 0x01	; 1
    1036:	f1 f7       	brne	.-4      	; 0x1034 <lcd_init+0x2a>
	/* repeat last command */ 
	lcd_e_toggle();	  
	delay( 64);			/* delay, busy flag can't be checked here */
	
	/* repeat last command a third time */
	lcd_e_toggle();	  
    1038:	0e 94 46 07 	call	0xe8c	; 0xe8c <toggle_e>
static inline void _delayFourCycles( unsigned int __count)
{
	if( __count == 0)	
		__asm__ __volatile__( "rjmp 1f\n 1:");	// 2 cycles
	else
		__asm__ __volatile__( 
    103c:	e0 e8       	ldi	r30, 0x80	; 128
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	31 97       	sbiw	r30, 0x01	; 1
    1042:	f1 f7       	brne	.-4      	; 0x1040 <lcd_init+0x36>
	/* repeat last command a third time */
	lcd_e_toggle();	  
	delay( 64);			/* delay, busy flag can't be checked here */

	/* now configure for 4bit mode */
	LCD_DATA0_PORT &= ~_BV( LCD_DATA0_PIN);	// LCD_FUNCTION_4BIT_1LINE>>4
    1044:	28 98       	cbi	0x05, 0	; 5
	lcd_e_toggle();
    1046:	0e 94 46 07 	call	0xe8c	; 0xe8c <toggle_e>
static inline void _delayFourCycles( unsigned int __count)
{
	if( __count == 0)	
		__asm__ __volatile__( "rjmp 1f\n 1:");	// 2 cycles
	else
		__asm__ __volatile__( 
    104a:	e0 e8       	ldi	r30, 0x80	; 128
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	31 97       	sbiw	r30, 0x01	; 1
    1050:	f1 f7       	brne	.-4      	; 0x104e <lcd_init+0x44>
	/* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command( KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command( KS0073_4LINES_MODE);
	lcd_command( KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
	lcd_command( LCD_FUNCTION_DEFAULT);	  /* function set: display lines  */
    1052:	88 e2       	ldi	r24, 0x28	; 40
    1054:	0e 94 8d 07 	call	0xf1a	; 0xf1a <lcd_command>
#endif
	lcd_command( LCD_DISP_OFF);			  /* display off				  */
    1058:	88 e0       	ldi	r24, 0x08	; 8
    105a:	0e 94 8d 07 	call	0xf1a	; 0xf1a <lcd_command>
	lcd_clrscr();							/* display clear				*/ 
    105e:	0e 94 b2 07 	call	0xf64	; 0xf64 <lcd_clrscr>
	lcd_command( LCD_MODE_DEFAULT);		  /* set entry mode				*/
    1062:	86 e0       	ldi	r24, 0x06	; 6
    1064:	0e 94 8d 07 	call	0xf1a	; 0xf1a <lcd_command>
	lcd_command( dispAttr);				  /* display/cursor control		*/
    1068:	8c 2f       	mov	r24, r28

}/* lcd_init */
    106a:	cf 91       	pop	r28
	lcd_command( LCD_FUNCTION_DEFAULT);	  /* function set: display lines  */
#endif
	lcd_command( LCD_DISP_OFF);			  /* display off				  */
	lcd_clrscr();							/* display clear				*/ 
	lcd_command( LCD_MODE_DEFAULT);		  /* set entry mode				*/
	lcd_command( dispAttr);				  /* display/cursor control		*/
    106c:	0c 94 8d 07 	jmp	0xf1a	; 0xf1a <lcd_command>

00001070 <owi_byte_io>:
/* read or write a full byte of data to the 1-Wire bus
 * note that owi_byte_io( 0xff) is the same as owi_byte_rd()
 * and owi_byte_io( data) is the same as owi_byte_wr( data)
 */
extern uint8_t owi_byte_io( uint8_t data)
{
    1070:	ef 92       	push	r14
    1072:	ff 92       	push	r15
    1074:	0f 93       	push	r16
    1076:	1f 93       	push	r17
    1078:	cf 93       	push	r28
    107a:	df 93       	push	r29
    107c:	e8 2e       	mov	r14, r24
    107e:	c0 e0       	ldi	r28, 0x00	; 0
    1080:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t i, result = 0;
    1082:	f1 2c       	mov	r15, r1

	// write the data, and add it to the result
	for( i = 0; i < 8; i++)
		result |= (owi_bit_io( data & (1 << i)) << i);
    1084:	01 e0       	ldi	r16, 0x01	; 1
    1086:	10 e0       	ldi	r17, 0x00	; 0
    1088:	c8 01       	movw	r24, r16
    108a:	0c 2e       	mov	r0, r28
    108c:	01 c0       	rjmp	.+2      	; 0x1090 <owi_byte_io+0x20>
    108e:	88 0f       	add	r24, r24
    1090:	0a 94       	dec	r0
    1092:	ea f7       	brpl	.-6      	; 0x108e <owi_byte_io+0x1e>
    1094:	8e 21       	and	r24, r14
    1096:	0e 94 0e 09 	call	0x121c	; 0x121c <owi_bit_io>
    109a:	28 2f       	mov	r18, r24
    109c:	0c 2e       	mov	r0, r28
    109e:	01 c0       	rjmp	.+2      	; 0x10a2 <owi_byte_io+0x32>
    10a0:	22 0f       	add	r18, r18
    10a2:	0a 94       	dec	r0
    10a4:	ea f7       	brpl	.-6      	; 0x10a0 <owi_byte_io+0x30>
    10a6:	f2 2a       	or	r15, r18
    10a8:	21 96       	adiw	r28, 0x01	; 1
extern uint8_t owi_byte_io( uint8_t data)
{
	uint8_t i, result = 0;

	// write the data, and add it to the result
	for( i = 0; i < 8; i++)
    10aa:	c8 30       	cpi	r28, 0x08	; 8
    10ac:	d1 05       	cpc	r29, r1
    10ae:	61 f7       	brne	.-40     	; 0x1088 <owi_byte_io+0x18>
		result |= (owi_bit_io( data & (1 << i)) << i);

	return result;
}
    10b0:	8f 2d       	mov	r24, r15
    10b2:	df 91       	pop	r29
    10b4:	cf 91       	pop	r28
    10b6:	1f 91       	pop	r17
    10b8:	0f 91       	pop	r16
    10ba:	ff 90       	pop	r15
    10bc:	ef 90       	pop	r14
    10be:	08 95       	ret

000010c0 <owi_device_command>:
 * if id contains the rom code of one of the devices on the bus, that device
 * will be selected and the command sent to the single device.  if id is
 * null, the command will be sent to all devices on the 1-wire bus
 */
extern uint8_t owi_device_command( uint8_t command, uint8_t *id)
{
    10c0:	ff 92       	push	r15
    10c2:	0f 93       	push	r16
    10c4:	1f 93       	push	r17
    10c6:	cf 93       	push	r28
    10c8:	df 93       	push	r29
    10ca:	f8 2e       	mov	r15, r24
    10cc:	eb 01       	movw	r28, r22
	uint8_t i;

	if( owi_reset())
    10ce:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <owi_reset>
    10d2:	88 23       	and	r24, r24
    10d4:	b9 f0       	breq	.+46     	; 0x1104 <owi_device_command+0x44>
	{
		if( id)
    10d6:	20 97       	sbiw	r28, 0x00	; 0
    10d8:	69 f0       	breq	.+26     	; 0x10f4 <owi_device_command+0x34>
		{
			owi_byte_io( OWI_MATCH_ROM); // to a single device
    10da:	85 e5       	ldi	r24, 0x55	; 85
    10dc:	0e 94 38 08 	call	0x1070	; 0x1070 <owi_byte_io>
    10e0:	8e 01       	movw	r16, r28
    10e2:	08 5f       	subi	r16, 0xF8	; 248
    10e4:	1f 4f       	sbci	r17, 0xFF	; 255
			i = OWI_ROMCODE_SIZE;
			do
			{
				owi_byte_io( *id);
    10e6:	89 91       	ld	r24, Y+
    10e8:	0e 94 38 08 	call	0x1070	; 0x1070 <owi_byte_io>
				id++;
			} while( --i);
    10ec:	c0 17       	cp	r28, r16
    10ee:	d1 07       	cpc	r29, r17
    10f0:	d1 f7       	brne	.-12     	; 0x10e6 <owi_device_command+0x26>
    10f2:	03 c0       	rjmp	.+6      	; 0x10fa <owi_device_command+0x3a>
		} else
		{
			owi_byte_io( OWI_SKIP_ROM); // to all devices
    10f4:	8c ec       	ldi	r24, 0xCC	; 204
    10f6:	0e 94 38 08 	call	0x1070	; 0x1070 <owi_byte_io>
		}
		owi_byte_io( command);	// send the command
    10fa:	8f 2d       	mov	r24, r15
    10fc:	0e 94 38 08 	call	0x1070	; 0x1070 <owi_byte_io>

		return OWI_BUS_OK;
    1100:	80 e0       	ldi	r24, 0x00	; 0
    1102:	01 c0       	rjmp	.+2      	; 0x1106 <owi_device_command+0x46>
	}
	return OWI_BUS_ERROR;
    1104:	8f ef       	ldi	r24, 0xFF	; 255
}
    1106:	df 91       	pop	r29
    1108:	cf 91       	pop	r28
    110a:	1f 91       	pop	r17
    110c:	0f 91       	pop	r16
    110e:	ff 90       	pop	r15
    1110:	08 95       	ret

00001112 <owi_search>:
 *         discovered identifier will be placed.
 *
 *   cmd   Either SearchROM (0xF0) or AlarmSearch (0xEC)
 */
extern uint8_t owi_search( uint8_t diff, uint8_t *id, uint8_t cmd)
{
    1112:	af 92       	push	r10
    1114:	bf 92       	push	r11
    1116:	df 92       	push	r13
    1118:	ef 92       	push	r14
    111a:	ff 92       	push	r15
    111c:	0f 93       	push	r16
    111e:	1f 93       	push	r17
    1120:	cf 93       	push	r28
    1122:	df 93       	push	r29
    1124:	1f 92       	push	r1
    1126:	cd b7       	in	r28, 0x3d	; 61
    1128:	de b7       	in	r29, 0x3e	; 62
    112a:	e8 2e       	mov	r14, r24
    112c:	5b 01       	movw	r10, r22
	uint8_t i, j, next_diff;
	uint8_t b;

	if( ! owi_reset())
    112e:	49 83       	std	Y+1, r20	; 0x01
    1130:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <owi_reset>
    1134:	49 81       	ldd	r20, Y+1	; 0x01
    1136:	88 23       	and	r24, r24
    1138:	a9 f1       	breq	.+106    	; 0x11a4 <owi_search+0x92>
		return OWI_PRESENCE_ERROR; // error, no device found

	owi_byte_io( cmd); // ROM search command
    113a:	84 2f       	mov	r24, r20
    113c:	0e 94 38 08 	call	0x1070	; 0x1070 <owi_byte_io>
	next_diff = OWI_LAST_DEVICE; // unchanged on last device
    1140:	f1 2c       	mov	r15, r1

	i = OWI_ROMCODE_SIZE * 8; // 8 bytes
    1142:	10 e4       	ldi	r17, 0x40	; 64
    1144:	88 ef       	ldi	r24, 0xF8	; 248
    1146:	d8 2e       	mov	r13, r24
    1148:	d1 0e       	add	r13, r17
	do
	{
		j = 8; // 8 bits
		do
		{
			b = owi_bit_io( 1); // read bit
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	0e 94 0e 09 	call	0x121c	; 0x121c <owi_bit_io>
    1150:	08 2f       	mov	r16, r24
			if( owi_bit_io( 1) )
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	0e 94 0e 09 	call	0x121c	; 0x121c <owi_bit_io>
    1158:	88 23       	and	r24, r24
    115a:	19 f0       	breq	.+6      	; 0x1162 <owi_search+0x50>
			{ // read complement bit
				if( b) // 11
    115c:	00 23       	and	r16, r16
    115e:	69 f0       	breq	.+26     	; 0x117a <owi_search+0x68>
    1160:	23 c0       	rjmp	.+70     	; 0x11a8 <owi_search+0x96>
					return OWI_DATA_ERR; // data error
			} else
			{
				if( !b)
    1162:	01 11       	cpse	r16, r1
    1164:	0a c0       	rjmp	.+20     	; 0x117a <owi_search+0x68>
				{ // 00 = 2 devices
					if( diff > i || (( *id & 1) && diff != i))
    1166:	1e 15       	cp	r17, r14
    1168:	30 f0       	brcs	.+12     	; 0x1176 <owi_search+0x64>
    116a:	f5 01       	movw	r30, r10
    116c:	80 81       	ld	r24, Z
    116e:	80 ff       	sbrs	r24, 0
    1170:	04 c0       	rjmp	.+8      	; 0x117a <owi_search+0x68>
    1172:	e1 16       	cp	r14, r17
    1174:	11 f0       	breq	.+4      	; 0x117a <owi_search+0x68>
    1176:	f1 2e       	mov	r15, r17
					{
						b = 1; // now 1
    1178:	01 e0       	ldi	r16, 0x01	; 1
						next_diff = i; // next pass 0
					}
				}
			}
			owi_bit_io( b); // write bit
    117a:	80 2f       	mov	r24, r16
    117c:	0e 94 0e 09 	call	0x121c	; 0x121c <owi_bit_io>
			*id >>= 1;
    1180:	f5 01       	movw	r30, r10
    1182:	90 81       	ld	r25, Z
    1184:	96 95       	lsr	r25
			if( b)
    1186:	00 23       	and	r16, r16
    1188:	11 f0       	breq	.+4      	; 0x118e <owi_search+0x7c>
				*id |= 0x80; // store bit
    118a:	90 68       	ori	r25, 0x80	; 128
    118c:	f5 01       	movw	r30, r10
    118e:	90 83       	st	Z, r25

			i--;
    1190:	11 50       	subi	r17, 0x01	; 1

		} while( --j);
    1192:	1d 11       	cpse	r17, r13
    1194:	da cf       	rjmp	.-76     	; 0x114a <owi_search+0x38>

		id++; // next byte
    1196:	ff ef       	ldi	r31, 0xFF	; 255
    1198:	af 1a       	sub	r10, r31
    119a:	bf 0a       	sbc	r11, r31

	} while( i);
    119c:	11 11       	cpse	r17, r1
    119e:	d2 cf       	rjmp	.-92     	; 0x1144 <owi_search+0x32>
    11a0:	8f 2d       	mov	r24, r15
    11a2:	03 c0       	rjmp	.+6      	; 0x11aa <owi_search+0x98>
{
	uint8_t i, j, next_diff;
	uint8_t b;

	if( ! owi_reset())
		return OWI_PRESENCE_ERROR; // error, no device found
    11a4:	8e ef       	ldi	r24, 0xFE	; 254
    11a6:	01 c0       	rjmp	.+2      	; 0x11aa <owi_search+0x98>
		{
			b = owi_bit_io( 1); // read bit
			if( owi_bit_io( 1) )
			{ // read complement bit
				if( b) // 11
					return OWI_DATA_ERR; // data error
    11a8:	8d ef       	ldi	r24, 0xFD	; 253
		id++; // next byte

	} while( i);

	return next_diff; // to continue search
}
    11aa:	0f 90       	pop	r0
    11ac:	df 91       	pop	r29
    11ae:	cf 91       	pop	r28
    11b0:	1f 91       	pop	r17
    11b2:	0f 91       	pop	r16
    11b4:	ff 90       	pop	r15
    11b6:	ef 90       	pop	r14
    11b8:	df 90       	pop	r13
    11ba:	bf 90       	pop	r11
    11bc:	af 90       	pop	r10
    11be:	08 95       	ret

000011c0 <delayloop16>:
 * 4 cpu cycles per loop + 1 cycles(?) overhead 
 * when a constant is passed.
 */
static inline void delayloop16(uint16_t count)
{
	asm volatile (  "cp  %A0,__zero_reg__ \n\t"  \
    11c0:	81 15       	cp	r24, r1
    11c2:	91 05       	cpc	r25, r1
    11c4:	11 f0       	breq	.+4      	; 0x11ca <L_Exit_7>

000011c6 <L_LOOP_7>:
    11c6:	01 97       	sbiw	r24, 0x01	; 1
    11c8:	f1 f7       	brne	.-4      	; 0x11c6 <L_LOOP_7>

000011ca <L_Exit_7>:
    11ca:	08 95       	ret

000011cc <owi_init>:
/*  This function initializes the 1-Wire bus(es) by releasing it and
 *  waiting until any presence sinals are finished.
 */
extern void owi_init()
{
    OWI_RELEASE_BUS();
    11cc:	56 98       	cbi	0x0a, 6	; 10
    11ce:	5e 98       	cbi	0x0b, 6	; 11
    // The first rising edge can be interpreted by a slave as the end of a
    // Reset pulse. Delay for the required reset recovery time (H) to be 
    // sure that the real reset is interpreted correctly.
    delay_us( OWI_DELAY_H);
    11d0:	8f eb       	ldi	r24, 0xBF	; 191
    11d2:	93 e0       	ldi	r25, 0x03	; 3
    11d4:	0c 94 e0 08 	jmp	0x11c0	; 0x11c0 <delayloop16>

000011d8 <owi_reset>:
 *
 *  returns OWI_BUS_OK if presence signal was detected or OWI_BUS_ERROR
 *  if no devices present or bus error exists
 */
extern uint8_t owi_reset()
{
    11d8:	cf 93       	push	r28
    11da:	df 93       	push	r29
	uint8_t sreg, b;

	// first part is long delay with significant timing leeway so
	// don't disable interrupts until after
	OWI_PULL_BUS_LOW();
    11dc:	56 9a       	sbi	0x0a, 6	; 10
    11de:	5e 98       	cbi	0x0b, 6	; 11
	delay_us( OWI_DELAY_H + 12);
    11e0:	87 ed       	ldi	r24, 0xD7	; 215
    11e2:	93 e0       	ldi	r25, 0x03	; 3
    11e4:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <delayloop16>

	sreg = SREG;
    11e8:	df b7       	in	r29, 0x3f	; 63
	cli();	// disable interrupts
    11ea:	f8 94       	cli

	OWI_RELEASE_BUS();	// allow bus high
    11ec:	56 98       	cbi	0x0a, 6	; 10
    11ee:	5e 98       	cbi	0x0b, 6	; 11
	delay_us( OWI_DELAY_I);
    11f0:	8b e8       	ldi	r24, 0x8B	; 139
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <delayloop16>

	b = ~OWI_GET_IN();
    11f8:	c9 b1       	in	r28, 0x09	; 9

	SREG = sreg;	// restore interrupts
    11fa:	df bf       	out	0x3f, r29	; 63

	// another long delay without max so re-enable interrupts before
	delay_us( OWI_DELAY_J);
    11fc:	83 e3       	ldi	r24, 0x33	; 51
    11fe:	93 e0       	ldi	r25, 0x03	; 3
    1200:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <delayloop16>
	// check to see if the bus is stull pulled low (shorted?)
	return b & OWI_GET_IN();
    1204:	99 b1       	in	r25, 0x09	; 9
	cli();	// disable interrupts

	OWI_RELEASE_BUS();	// allow bus high
	delay_us( OWI_DELAY_I);

	b = ~OWI_GET_IN();
    1206:	c6 fb       	bst	r28, 6
    1208:	88 27       	eor	r24, r24
    120a:	80 f9       	bld	r24, 0
    120c:	80 95       	com	r24
	SREG = sreg;	// restore interrupts

	// another long delay without max so re-enable interrupts before
	delay_us( OWI_DELAY_J);
	// check to see if the bus is stull pulled low (shorted?)
	return b & OWI_GET_IN();
    120e:	96 fb       	bst	r25, 6
    1210:	99 27       	eor	r25, r25
    1212:	90 f9       	bld	r25, 0
}
    1214:	89 23       	and	r24, r25
    1216:	df 91       	pop	r29
    1218:	cf 91       	pop	r28
    121a:	08 95       	ret

0000121c <owi_bit_io>:
/* write or read a single bit from the bus
 * note that owi_bit_io( b) is the same as owi_bit_wr( b)
 * and b = owi_bit_io( 0x01) is the same as b = owi_bit_rd();
 */
extern uint8_t owi_bit_io( uint8_t b)
{
    121c:	cf 93       	push	r28
    121e:	df 93       	push	r29
	uint8_t sreg;

	sreg = SREG;
    1220:	df b7       	in	r29, 0x3f	; 63
	cli();
    1222:	f8 94       	cli

	// attention pulse
	OWI_PULL_BUS_LOW();	// drive bus low
    1224:	56 9a       	sbi	0x0a, 6	; 10
    1226:	5e 98       	cbi	0x0b, 6	; 11
	...
	DELAY_1US();
	DELAY_1US();
	DELAY_1US();

	// if writing 1 (or reading), stop pulling low data period
	if( b)
    1270:	81 11       	cpse	r24, r1
		OWI_RELEASE_BUS();	// allow bus high
    1272:	56 98       	cbi	0x0a, 6	; 10
    1274:	5e 98       	cbi	0x0b, 6	; 11

	// response wait
	//delay_us( OWI_DELAY_E);
	delay_us( 1);
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <delayloop16>
	b = OWI_GET_IN();	// sample at end of response wait
    127e:	c9 b1       	in	r28, 0x09	; 9

	delay_us( OWI_DELAY_F - OWI_DELAY_D - 3);	// wait for rest of R/W time slot
    1280:	83 e5       	ldi	r24, 0x53	; 83
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <delayloop16>

	// recovery time
	OWI_RELEASE_BUS();	// allow bus high if we were reading or writing 0, else we were already there
    1288:	56 98       	cbi	0x0a, 6	; 10
    128a:	5e 98       	cbi	0x0b, 6	; 11
	...
	// delay_us( OWI_DELAY_D);
	//delay_us( 1); // code was too long - replace with assembler delays
	DELAY_1US();
	DELAY_1US();

	SREG = sreg; // sei();
    12b0:	df bf       	out	0x3f, r29	; 63

	return b;
}
    12b2:	c6 fb       	bst	r28, 6
    12b4:	88 27       	eor	r24, r24
    12b6:	80 f9       	bld	r24, 0
    12b8:	df 91       	pop	r29
    12ba:	cf 91       	pop	r28
    12bc:	08 95       	ret

000012be <__vector_18>:
ISR (UART0_RECEIVE_INTERRUPT)	
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
    12be:	1f 92       	push	r1
    12c0:	0f 92       	push	r0
    12c2:	0f b6       	in	r0, 0x3f	; 63
    12c4:	0f 92       	push	r0
    12c6:	11 24       	eor	r1, r1
    12c8:	2f 93       	push	r18
    12ca:	8f 93       	push	r24
    12cc:	9f 93       	push	r25
    12ce:	ef 93       	push	r30
    12d0:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */
    usr  = UART0_STATUS;
    12d2:	80 91 c0 00 	lds	r24, 0x00C0
    data = UART0_DATA;
    12d6:	90 91 c6 00 	lds	r25, 0x00C6
    
    /* get FEn (Frame Error) DORn (Data OverRun) UPEn (USART Parity Error) bits */
#if defined(FE) && defined(DOR) && defined(UPE)
    lastRxError = usr & (_BV(FE)|_BV(DOR)|_BV(UPE) );
#elif defined(FE0) && defined(DOR0) && defined(UPE0)
    lastRxError = usr & (_BV(FE0)|_BV(DOR0)|_BV(UPE0) );
    12da:	8c 71       	andi	r24, 0x1C	; 28
#elif defined(FE) && defined(DOR)
    lastRxError = usr & (_BV(FE)|_BV(DOR) );
#endif

    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    12dc:	e0 91 f8 01 	lds	r30, 0x01F8
    12e0:	ef 5f       	subi	r30, 0xFF	; 255
    12e2:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART_RxTail ) {
    12e4:	20 91 f7 01 	lds	r18, 0x01F7
    12e8:	e2 17       	cp	r30, r18
    12ea:	39 f0       	breq	.+14     	; 0x12fa <__vector_18+0x3c>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
    12ec:	e0 93 f8 01 	sts	0x01F8, r30
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	e5 50       	subi	r30, 0x05	; 5
    12f4:	fe 4f       	sbci	r31, 0xFE	; 254
    12f6:	90 83       	st	Z, r25
    12f8:	01 c0       	rjmp	.+2      	; 0x12fc <__vector_18+0x3e>
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    12fa:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError |= lastRxError;   
    12fc:	90 91 f6 01 	lds	r25, 0x01F6
    1300:	98 2b       	or	r25, r24
    1302:	90 93 f6 01 	sts	0x01F6, r25
}
    1306:	ff 91       	pop	r31
    1308:	ef 91       	pop	r30
    130a:	9f 91       	pop	r25
    130c:	8f 91       	pop	r24
    130e:	2f 91       	pop	r18
    1310:	0f 90       	pop	r0
    1312:	0f be       	out	0x3f, r0	; 63
    1314:	0f 90       	pop	r0
    1316:	1f 90       	pop	r1
    1318:	18 95       	reti

0000131a <__vector_19>:
ISR (UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
    131a:	1f 92       	push	r1
    131c:	0f 92       	push	r0
    131e:	0f b6       	in	r0, 0x3f	; 63
    1320:	0f 92       	push	r0
    1322:	11 24       	eor	r1, r1
    1324:	8f 93       	push	r24
    1326:	9f 93       	push	r25
    1328:	ef 93       	push	r30
    132a:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
    132c:	90 91 fa 01 	lds	r25, 0x01FA
    1330:	80 91 f9 01 	lds	r24, 0x01F9
    1334:	98 17       	cp	r25, r24
    1336:	69 f0       	breq	.+26     	; 0x1352 <__vector_19+0x38>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
    1338:	e0 91 f9 01 	lds	r30, 0x01F9
    133c:	ef 5f       	subi	r30, 0xFF	; 255
    133e:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
    1340:	e0 93 f9 01 	sts	0x01F9, r30
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	e5 5e       	subi	r30, 0xE5	; 229
    1348:	fd 4f       	sbci	r31, 0xFD	; 253
    134a:	80 81       	ld	r24, Z
    134c:	80 93 c6 00 	sts	0x00C6, r24
    1350:	05 c0       	rjmp	.+10     	; 0x135c <__vector_19+0x42>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
    1352:	80 91 c1 00 	lds	r24, 0x00C1
    1356:	8f 7d       	andi	r24, 0xDF	; 223
    1358:	80 93 c1 00 	sts	0x00C1, r24
    }
}
    135c:	ff 91       	pop	r31
    135e:	ef 91       	pop	r30
    1360:	9f 91       	pop	r25
    1362:	8f 91       	pop	r24
    1364:	0f 90       	pop	r0
    1366:	0f be       	out	0x3f, r0	; 63
    1368:	0f 90       	pop	r0
    136a:	1f 90       	pop	r1
    136c:	18 95       	reti

0000136e <uart_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
    136e:	10 92 fa 01 	sts	0x01FA, r1
    UART_TxTail = 0;
    1372:	10 92 f9 01 	sts	0x01F9, r1
    UART_RxHead = 0;
    1376:	10 92 f8 01 	sts	0x01F8, r1
    UART_RxTail = 0;
    137a:	10 92 f7 01 	sts	0x01F7, r1
#endif
#endif
#endif

    /* Set baud rate */
    if ( baudrate & 0x8000 )
    137e:	97 ff       	sbrs	r25, 7
    1380:	03 c0       	rjmp	.+6      	; 0x1388 <uart_init+0x1a>
    {
        #if UART0_BIT_U2X
        UART0_STATUS = (1<<UART0_BIT_U2X);  //Enable 2x speed 
    1382:	22 e0       	ldi	r18, 0x02	; 2
    1384:	20 93 c0 00 	sts	0x00C0, r18
        #endif
    } 
    #if defined(UART0_UBRRH)
    UART0_UBRRH = (unsigned char)((baudrate>>8)&0x80) ;
    1388:	90 78       	andi	r25, 0x80	; 128
    138a:	90 93 c5 00 	sts	0x00C5, r25
    #endif    
    UART0_UBRRL = (unsigned char) (baudrate&0x00FF);
    138e:	80 93 c4 00 	sts	0x00C4, r24
      
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(UART0_BIT_RXCIE)|(1<<UART0_BIT_RXEN)|(1<<UART0_BIT_TXEN);
    1392:	88 e9       	ldi	r24, 0x98	; 152
    1394:	80 93 c1 00 	sts	0x00C1, r24
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef UART0_CONTROLC
    #ifdef UART0_BIT_URSEL
    UART0_CONTROLC = (1<<UART0_BIT_URSEL)|(1<<UART0_BIT_UCSZ1)|(1<<UART0_BIT_UCSZ0);
    #else
    UART0_CONTROLC = (1<<UART0_BIT_UCSZ1)|(1<<UART0_BIT_UCSZ0);
    1398:	86 e0       	ldi	r24, 0x06	; 6
    139a:	80 93 c2 00 	sts	0x00C2, r24
    139e:	08 95       	ret

000013a0 <uart_getc>:
    unsigned char tmptail;
    unsigned char data;
    unsigned char lastRxError;


    if ( UART_RxHead == UART_RxTail ) {
    13a0:	90 91 f8 01 	lds	r25, 0x01F8
    13a4:	80 91 f7 01 	lds	r24, 0x01F7
    13a8:	98 17       	cp	r25, r24
    13aa:	a9 f0       	breq	.+42     	; 0x13d6 <uart_getc+0x36>
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
    13ac:	90 91 f7 01 	lds	r25, 0x01F7
    13b0:	9f 5f       	subi	r25, 0xFF	; 255
    13b2:	9f 71       	andi	r25, 0x1F	; 31
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
    13b4:	e9 2f       	mov	r30, r25
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	e5 50       	subi	r30, 0x05	; 5
    13ba:	fe 4f       	sbci	r31, 0xFE	; 254
    13bc:	20 81       	ld	r18, Z
    lastRxError = UART_LastRxError;
    13be:	80 91 f6 01 	lds	r24, 0x01F6
    
    /* store buffer index */
    UART_RxTail = tmptail; 
    13c2:	90 93 f7 01 	sts	0x01F7, r25
    
    UART_LastRxError = 0;
    13c6:	10 92 f6 01 	sts	0x01F6, r1
    return (lastRxError << 8) + data;
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	98 2f       	mov	r25, r24
    13ce:	88 27       	eor	r24, r24
    13d0:	82 0f       	add	r24, r18
    13d2:	91 1d       	adc	r25, r1
    13d4:	08 95       	ret
    unsigned char data;
    unsigned char lastRxError;


    if ( UART_RxHead == UART_RxTail ) {
        return UART_NO_DATA;   /* no data available */
    13d6:	80 e0       	ldi	r24, 0x00	; 0
    13d8:	91 e0       	ldi	r25, 0x01	; 1
    UART_RxTail = tmptail; 
    
    UART_LastRxError = 0;
    return (lastRxError << 8) + data;

}/* uart_getc */
    13da:	08 95       	ret

000013dc <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
    13dc:	90 91 fa 01 	lds	r25, 0x01FA
    13e0:	9f 5f       	subi	r25, 0xFF	; 255
    13e2:	9f 71       	andi	r25, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
    13e4:	20 91 f9 01 	lds	r18, 0x01F9
    13e8:	92 17       	cp	r25, r18
    13ea:	e1 f3       	breq	.-8      	; 0x13e4 <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
    13ec:	e9 2f       	mov	r30, r25
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	e5 5e       	subi	r30, 0xE5	; 229
    13f2:	fd 4f       	sbci	r31, 0xFD	; 253
    13f4:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
    13f6:	90 93 fa 01 	sts	0x01FA, r25

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
    13fa:	80 91 c1 00 	lds	r24, 0x00C1
    13fe:	80 62       	ori	r24, 0x20	; 32
    1400:	80 93 c1 00 	sts	0x00C1, r24
    1404:	08 95       	ret

00001406 <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    1406:	cf 93       	push	r28
    1408:	df 93       	push	r29
    140a:	ec 01       	movw	r28, r24
    while (*s) 
    140c:	89 91       	ld	r24, Y+
    140e:	88 23       	and	r24, r24
    1410:	19 f0       	breq	.+6      	; 0x1418 <uart_puts+0x12>
      uart_putc(*s++);
    1412:	0e 94 ee 09 	call	0x13dc	; 0x13dc <uart_putc>
    1416:	fa cf       	rjmp	.-12     	; 0x140c <uart_puts+0x6>

}/* uart_puts */
    1418:	df 91       	pop	r29
    141a:	cf 91       	pop	r28
    141c:	08 95       	ret

0000141e <uart_puts_p>:
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    141e:	cf 93       	push	r28
    1420:	df 93       	push	r29
    1422:	fc 01       	movw	r30, r24
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
    1424:	84 91       	lpm	r24, Z
    1426:	ef 01       	movw	r28, r30
    1428:	21 96       	adiw	r28, 0x01	; 1
    142a:	88 23       	and	r24, r24
    142c:	21 f0       	breq	.+8      	; 0x1436 <uart_puts_p+0x18>
      uart_putc(c);
    142e:	0e 94 ee 09 	call	0x13dc	; 0x13dc <uart_putc>
    1432:	fe 01       	movw	r30, r28
    1434:	f7 cf       	rjmp	.-18     	; 0x1424 <uart_puts_p+0x6>

}/* uart_puts_p */
    1436:	df 91       	pop	r29
    1438:	cf 91       	pop	r28
    143a:	08 95       	ret

0000143c <uart_puti>:
Returns:  none
This functions has been added by Martin Thomas <eversmith@heizung-thomas.de>
Don't blame P. Fleury if it doesn't work ;-)
**************************************************************************/
void uart_puti( const int val )
{
    143c:	cf 93       	push	r28
    143e:	df 93       	push	r29
    1440:	cd b7       	in	r28, 0x3d	; 61
    1442:	de b7       	in	r29, 0x3e	; 62
    1444:	61 97       	sbiw	r28, 0x11	; 17
    1446:	0f b6       	in	r0, 0x3f	; 63
    1448:	f8 94       	cli
    144a:	de bf       	out	0x3e, r29	; 62
    144c:	0f be       	out	0x3f, r0	; 63
    144e:	cd bf       	out	0x3d, r28	; 61
    char buffer[sizeof(int)*8+1];
    
    uart_puts( itoa(val, buffer, 10) );
    1450:	4a e0       	ldi	r20, 0x0A	; 10
    1452:	50 e0       	ldi	r21, 0x00	; 0
    1454:	be 01       	movw	r22, r28
    1456:	6f 5f       	subi	r22, 0xFF	; 255
    1458:	7f 4f       	sbci	r23, 0xFF	; 255
    145a:	0e 94 06 19 	call	0x320c	; 0x320c <itoa>
    145e:	0e 94 03 0a 	call	0x1406	; 0x1406 <uart_puts>

}/* uart_puti */
    1462:	61 96       	adiw	r28, 0x11	; 17
    1464:	0f b6       	in	r0, 0x3f	; 63
    1466:	f8 94       	cli
    1468:	de bf       	out	0x3e, r29	; 62
    146a:	0f be       	out	0x3f, r0	; 63
    146c:	cd bf       	out	0x3d, r28	; 61
    146e:	df 91       	pop	r29
    1470:	cf 91       	pop	r28
    1472:	08 95       	ret

00001474 <uart_puthex_nibble>:
This functions has been added by Martin Thomas <eversmith@heizung-thomas.de>
Don't blame P. Fleury if it doesn't work ;-)
**************************************************************************/
void uart_puthex_nibble(const unsigned char b)
{
    unsigned char  c = b & 0x0f;
    1474:	8f 70       	andi	r24, 0x0F	; 15
    if (c>9) c += 'A'-10;
    1476:	8a 30       	cpi	r24, 0x0A	; 10
    1478:	10 f0       	brcs	.+4      	; 0x147e <uart_puthex_nibble+0xa>
    147a:	89 5c       	subi	r24, 0xC9	; 201
    147c:	01 c0       	rjmp	.+2      	; 0x1480 <uart_puthex_nibble+0xc>
    else c += '0';
    147e:	80 5d       	subi	r24, 0xD0	; 208
    uart_putc(c);
    1480:	0c 94 ee 09 	jmp	0x13dc	; 0x13dc <uart_putc>

00001484 <uart_puthex_byte>:
Returns:  none
This functions has been added by Martin Thomas <eversmith@heizung-thomas.de>
Don't blame P. Fleury if it doesn't work ;-)
**************************************************************************/
void uart_puthex_byte(const unsigned char  b)
{
    1484:	cf 93       	push	r28
    1486:	c8 2f       	mov	r28, r24
    uart_puthex_nibble(b>>4);
    1488:	82 95       	swap	r24
    148a:	8f 70       	andi	r24, 0x0F	; 15
    148c:	0e 94 3a 0a 	call	0x1474	; 0x1474 <uart_puthex_nibble>
    uart_puthex_nibble(b);
    1490:	8c 2f       	mov	r24, r28
} /* uart_puthex_byte */
    1492:	cf 91       	pop	r28
Don't blame P. Fleury if it doesn't work ;-)
**************************************************************************/
void uart_puthex_byte(const unsigned char  b)
{
    uart_puthex_nibble(b>>4);
    uart_puthex_nibble(b);
    1494:	0c 94 3a 0a 	jmp	0x1474	; 0x1474 <uart_puthex_nibble>

00001498 <DS2415_write_clock>:

/* Write the control byte and 4 data bytes comprising the 32 bit seconds counter
 * to the DS2415
 */
extern uint8_t DS2415_write_clock( uint8_t ctrl, uint32_t rtc, uint8_t id[])
{
    1498:	ff 92       	push	r15
    149a:	0f 93       	push	r16
    149c:	1f 93       	push	r17
    149e:	cf 93       	push	r28
    14a0:	df 93       	push	r29
    14a2:	f8 2e       	mov	r15, r24
    14a4:	8a 01       	movw	r16, r20
    14a6:	d6 2f       	mov	r29, r22
    14a8:	c7 2f       	mov	r28, r23
	// make sure we have a device to check and the bus is working
	if( id == NULL || owi_device_command( DS2415_WRITE_CLOCK, id)) return DS2415_CLOCK_ERROR;
    14aa:	21 15       	cp	r18, r1
    14ac:	31 05       	cpc	r19, r1
    14ae:	11 f4       	brne	.+4      	; 0x14b4 <DS2415_write_clock+0x1c>
    14b0:	8f ef       	ldi	r24, 0xFF	; 255
    14b2:	18 c0       	rjmp	.+48     	; 0x14e4 <DS2415_write_clock+0x4c>
    14b4:	b9 01       	movw	r22, r18
    14b6:	89 e9       	ldi	r24, 0x99	; 153
    14b8:	0e 94 60 08 	call	0x10c0	; 0x10c0 <owi_device_command>
    14bc:	81 11       	cpse	r24, r1
    14be:	f8 cf       	rjmp	.-16     	; 0x14b0 <DS2415_write_clock+0x18>

	// set the clock data
	owi_byte_io( ctrl);
    14c0:	8f 2d       	mov	r24, r15
    14c2:	0e 94 38 08 	call	0x1070	; 0x1070 <owi_byte_io>
	owi_byte_io( (uint8_t)rtc); // LSB
    14c6:	80 2f       	mov	r24, r16
    14c8:	0e 94 38 08 	call	0x1070	; 0x1070 <owi_byte_io>
	owi_byte_io( (uint8_t)(rtc >> 8));
    14cc:	81 2f       	mov	r24, r17
    14ce:	0e 94 38 08 	call	0x1070	; 0x1070 <owi_byte_io>
	owi_byte_io( (uint8_t)(rtc >> 16));
    14d2:	8d 2f       	mov	r24, r29
    14d4:	0e 94 38 08 	call	0x1070	; 0x1070 <owi_byte_io>
	owi_byte_io( (uint8_t)(rtc >> 24));	// MSB
    14d8:	8c 2f       	mov	r24, r28
    14da:	0e 94 38 08 	call	0x1070	; 0x1070 <owi_byte_io>
	owi_reset();	// activate the changes
    14de:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <owi_reset>
	return DS2415_CLOCK_OK;
    14e2:	80 e0       	ldi	r24, 0x00	; 0
}
    14e4:	df 91       	pop	r29
    14e6:	cf 91       	pop	r28
    14e8:	1f 91       	pop	r17
    14ea:	0f 91       	pop	r16
    14ec:	ff 90       	pop	r15
    14ee:	08 95       	ret

000014f0 <DS2415_read_clock>:

/* Read the control byte and 4 data bytes comprising the 32 bit seconds counter
 * from the DS2415
 */
extern uint8_t DS2415_read_clock( uint8_t *ctrl, uint32_t *rtc, uint8_t id[])
{
    14f0:	cf 92       	push	r12
    14f2:	df 92       	push	r13
    14f4:	ef 92       	push	r14
    14f6:	ff 92       	push	r15
    14f8:	cf 93       	push	r28
    14fa:	df 93       	push	r29
    14fc:	7c 01       	movw	r14, r24
    14fe:	eb 01       	movw	r28, r22
	// make sure we have a device to check and the bus is working
	if( id == NULL || owi_device_command( DS2415_READ_CLOCK, id)) return DS2415_CLOCK_ERROR;
    1500:	41 15       	cp	r20, r1
    1502:	51 05       	cpc	r21, r1
    1504:	11 f4       	brne	.+4      	; 0x150a <DS2415_read_clock+0x1a>
    1506:	8f ef       	ldi	r24, 0xFF	; 255
    1508:	31 c0       	rjmp	.+98     	; 0x156c <DS2415_read_clock+0x7c>
    150a:	ba 01       	movw	r22, r20
    150c:	86 e6       	ldi	r24, 0x66	; 102
    150e:	0e 94 60 08 	call	0x10c0	; 0x10c0 <owi_device_command>
    1512:	81 11       	cpse	r24, r1
    1514:	f8 cf       	rjmp	.-16     	; 0x1506 <DS2415_read_clock+0x16>

	// get the clock data
	*ctrl = owi_byte_io( 0xFF);
    1516:	8f ef       	ldi	r24, 0xFF	; 255
    1518:	0e 94 38 08 	call	0x1070	; 0x1070 <owi_byte_io>
    151c:	f7 01       	movw	r30, r14
    151e:	80 83       	st	Z, r24
	*rtc = ((uint32_t)owi_byte_io( 0xFF));	// LSB
    1520:	8f ef       	ldi	r24, 0xFF	; 255
    1522:	0e 94 38 08 	call	0x1070	; 0x1070 <owi_byte_io>
    1526:	c8 2e       	mov	r12, r24
    1528:	d1 2c       	mov	r13, r1
    152a:	e1 2c       	mov	r14, r1
    152c:	f1 2c       	mov	r15, r1
    152e:	c8 82       	st	Y, r12
    1530:	d9 82       	std	Y+1, r13	; 0x01
    1532:	ea 82       	std	Y+2, r14	; 0x02
    1534:	fb 82       	std	Y+3, r15	; 0x03
	*rtc |= ((uint32_t)owi_byte_io( 0xFF)) << 8;
    1536:	8f ef       	ldi	r24, 0xFF	; 255
    1538:	0e 94 38 08 	call	0x1070	; 0x1070 <owi_byte_io>
    153c:	d8 2a       	or	r13, r24
    153e:	c8 82       	st	Y, r12
    1540:	d9 82       	std	Y+1, r13	; 0x01
    1542:	ea 82       	std	Y+2, r14	; 0x02
    1544:	fb 82       	std	Y+3, r15	; 0x03
	*rtc |= ((uint32_t)owi_byte_io( 0xFF)) << 16;
    1546:	8f ef       	ldi	r24, 0xFF	; 255
    1548:	0e 94 38 08 	call	0x1070	; 0x1070 <owi_byte_io>
    154c:	e8 2a       	or	r14, r24
    154e:	c8 82       	st	Y, r12
    1550:	d9 82       	std	Y+1, r13	; 0x01
    1552:	ea 82       	std	Y+2, r14	; 0x02
    1554:	fb 82       	std	Y+3, r15	; 0x03
	*rtc |= ((uint32_t)owi_byte_io( 0xFF)) << 24;	// MSB
    1556:	8f ef       	ldi	r24, 0xFF	; 255
    1558:	0e 94 38 08 	call	0x1070	; 0x1070 <owi_byte_io>
    155c:	f8 2a       	or	r15, r24
    155e:	c8 82       	st	Y, r12
    1560:	d9 82       	std	Y+1, r13	; 0x01
    1562:	ea 82       	std	Y+2, r14	; 0x02
    1564:	fb 82       	std	Y+3, r15	; 0x03
	owi_reset();	// stop further clock transmissions
    1566:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <owi_reset>
	return DS2415_CLOCK_OK;
    156a:	80 e0       	ldi	r24, 0x00	; 0
}
    156c:	df 91       	pop	r29
    156e:	cf 91       	pop	r28
    1570:	ff 90       	pop	r15
    1572:	ef 90       	pop	r14
    1574:	df 90       	pop	r13
    1576:	cf 90       	pop	r12
    1578:	08 95       	ret

0000157a <DS2415_gregorian_to_epoch>:

// Convert a Gregorian calendar date and time into a Unix Epoch seconds count
extern uint32_t DS2415_gregorian_to_epoch( DS2415_date_t *dt)
{
    157a:	cf 92       	push	r12
    157c:	df 92       	push	r13
    157e:	ef 92       	push	r14
    1580:	ff 92       	push	r15
    1582:	cf 93       	push	r28
    1584:	df 93       	push	r29
    1586:	fc 01       	movw	r30, r24
	uint16_t days;
	uint32_t rtc;

	// convert gregorian date (dt) into total days
	days = 365 * (dt->year - 70) + accum_days[dt->month] + (dt->day - 1);
    1588:	c0 81       	ld	r28, Z
    158a:	2c 2f       	mov	r18, r28
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	d1 81       	ldd	r29, Z+1	; 0x01
    1590:	82 81       	ldd	r24, Z+2	; 0x02
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	01 97       	sbiw	r24, 0x01	; 1
    1596:	ad 2f       	mov	r26, r29
    1598:	b0 e0       	ldi	r27, 0x00	; 0
    159a:	aa 0f       	add	r26, r26
    159c:	bb 1f       	adc	r27, r27
    159e:	a0 50       	subi	r26, 0x00	; 0
    15a0:	bf 4f       	sbci	r27, 0xFF	; 255
    15a2:	4d 91       	ld	r20, X+
    15a4:	5c 91       	ld	r21, X
    15a6:	84 0f       	add	r24, r20
    15a8:	95 1f       	adc	r25, r21
    15aa:	d9 01       	movw	r26, r18
    15ac:	a6 54       	subi	r26, 0x46	; 70
    15ae:	b1 09       	sbc	r27, r1
    15b0:	6d e6       	ldi	r22, 0x6D	; 109
    15b2:	71 e0       	ldi	r23, 0x01	; 1
    15b4:	a6 9f       	mul	r26, r22
    15b6:	a0 01       	movw	r20, r0
    15b8:	a7 9f       	mul	r26, r23
    15ba:	50 0d       	add	r21, r0
    15bc:	b6 9f       	mul	r27, r22
    15be:	50 0d       	add	r21, r0
    15c0:	11 24       	eor	r1, r1
    15c2:	84 0f       	add	r24, r20
    15c4:	95 1f       	adc	r25, r21
	days += (dt->year - 69) / 4;	// fixup for past leap years
    15c6:	25 54       	subi	r18, 0x45	; 69
    15c8:	31 09       	sbc	r19, r1
    15ca:	37 ff       	sbrs	r19, 7
    15cc:	02 c0       	rjmp	.+4      	; 0x15d2 <DS2415_gregorian_to_epoch+0x58>
    15ce:	2d 5f       	subi	r18, 0xFD	; 253
    15d0:	3f 4f       	sbci	r19, 0xFF	; 255
    15d2:	35 95       	asr	r19
    15d4:	27 95       	ror	r18
    15d6:	35 95       	asr	r19
    15d8:	27 95       	ror	r18
    15da:	28 0f       	add	r18, r24
    15dc:	39 1f       	adc	r19, r25
	if( (dt->month > 1) && ((dt->year % 4) == 0)) days++;	// fixup for current leapyear
    15de:	d2 30       	cpi	r29, 0x02	; 2
    15e0:	20 f0       	brcs	.+8      	; 0x15ea <DS2415_gregorian_to_epoch+0x70>
    15e2:	c3 70       	andi	r28, 0x03	; 3
    15e4:	11 f4       	brne	.+4      	; 0x15ea <DS2415_gregorian_to_epoch+0x70>
    15e6:	2f 5f       	subi	r18, 0xFF	; 255
    15e8:	3f 4f       	sbci	r19, 0xFF	; 255

	// convert to seconds and add the time offset
	rtc = 3600 * ((uint32_t)dt->hour + (24 * (uint32_t)days));
    15ea:	a8 e1       	ldi	r26, 0x18	; 24
    15ec:	b0 e0       	ldi	r27, 0x00	; 0
    15ee:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <__umulhisi3>
    15f2:	9b 01       	movw	r18, r22
    15f4:	ac 01       	movw	r20, r24
    15f6:	83 81       	ldd	r24, Z+3	; 0x03
    15f8:	28 0f       	add	r18, r24
    15fa:	31 1d       	adc	r19, r1
    15fc:	41 1d       	adc	r20, r1
    15fe:	51 1d       	adc	r21, r1
    1600:	a0 e1       	ldi	r26, 0x10	; 16
    1602:	be e0       	ldi	r27, 0x0E	; 14
    1604:	0e 94 9b 15 	call	0x2b36	; 0x2b36 <__muluhisi3>
    1608:	6b 01       	movw	r12, r22
    160a:	7c 01       	movw	r14, r24
	rtc += 60 * (uint32_t)dt->min;
    160c:	24 81       	ldd	r18, Z+4	; 0x04
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	ac e3       	ldi	r26, 0x3C	; 60
    1612:	b0 e0       	ldi	r27, 0x00	; 0
    1614:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <__umulhisi3>
	rtc += (uint32_t)dt->sec;
    1618:	25 81       	ldd	r18, Z+5	; 0x05
	days += (dt->year - 69) / 4;	// fixup for past leap years
	if( (dt->month > 1) && ((dt->year % 4) == 0)) days++;	// fixup for current leapyear

	// convert to seconds and add the time offset
	rtc = 3600 * ((uint32_t)dt->hour + (24 * (uint32_t)days));
	rtc += 60 * (uint32_t)dt->min;
    161a:	62 0f       	add	r22, r18
    161c:	71 1d       	adc	r23, r1
    161e:	81 1d       	adc	r24, r1
    1620:	91 1d       	adc	r25, r1
	rtc += (uint32_t)dt->sec;
    1622:	6c 0d       	add	r22, r12
    1624:	7d 1d       	adc	r23, r13
    1626:	8e 1d       	adc	r24, r14
    1628:	9f 1d       	adc	r25, r15

	return rtc;
}
    162a:	df 91       	pop	r29
    162c:	cf 91       	pop	r28
    162e:	ff 90       	pop	r15
    1630:	ef 90       	pop	r14
    1632:	df 90       	pop	r13
    1634:	cf 90       	pop	r12
    1636:	08 95       	ret

00001638 <DS2415_epoch_to_gregorian>:

// Convert a Unix Epoch seconds count into a Gregorian calendar date and time 
extern void DS2415_epoch_to_gregorian( uint32_t seconds, DS2415_date_t *dt)
{
    1638:	8f 92       	push	r8
    163a:	9f 92       	push	r9
    163c:	af 92       	push	r10
    163e:	bf 92       	push	r11
    1640:	cf 92       	push	r12
    1642:	df 92       	push	r13
    1644:	ef 92       	push	r14
    1646:	ff 92       	push	r15
    1648:	0f 93       	push	r16
    164a:	1f 93       	push	r17
    164c:	cf 93       	push	r28
    164e:	df 93       	push	r29
    1650:	16 2f       	mov	r17, r22
    1652:	ea 01       	movw	r28, r20
	uint16_t tmp_uint_1, tmp_uint_2, tmp_uint_3;
	uint32_t tmp_ulong_1, tmp_ulong_2;

	// convert elapsed epoch seconds (rtc) count into gregorian date (dt)
	tmp_ulong_1 = seconds / 60;	// whole minutes
    1654:	6c e3       	ldi	r22, 0x3C	; 60
    1656:	c6 2e       	mov	r12, r22
    1658:	d1 2c       	mov	r13, r1
    165a:	e1 2c       	mov	r14, r1
    165c:	f1 2c       	mov	r15, r1
    165e:	61 2f       	mov	r22, r17
    1660:	a7 01       	movw	r20, r14
    1662:	96 01       	movw	r18, r12
    1664:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <__udivmodsi4>
    1668:	02 2f       	mov	r16, r18
    166a:	ca 01       	movw	r24, r20
	dt->sec = seconds - (60 * tmp_ulong_1);
    166c:	7c e3       	ldi	r23, 0x3C	; 60
    166e:	b7 2e       	mov	r11, r23
    1670:	b2 9e       	mul	r11, r18
    1672:	10 19       	sub	r17, r0
    1674:	11 24       	eor	r1, r1
    1676:	1d 83       	std	Y+5, r17	; 0x05

	tmp_ulong_2 = tmp_ulong_1 / 60;	// whole hours
    1678:	62 2f       	mov	r22, r18
    167a:	73 2f       	mov	r23, r19
    167c:	a7 01       	movw	r20, r14
    167e:	96 01       	movw	r18, r12
    1680:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <__udivmodsi4>
    1684:	12 2f       	mov	r17, r18
    1686:	ca 01       	movw	r24, r20
	dt->min = tmp_ulong_1 - (60 * tmp_ulong_2);
    1688:	b2 9e       	mul	r11, r18
    168a:	00 19       	sub	r16, r0
    168c:	11 24       	eor	r1, r1
    168e:	0c 83       	std	Y+4, r16	; 0x04

	tmp_ulong_1 = tmp_ulong_2 / 24;	// whole days
    1690:	62 2f       	mov	r22, r18
    1692:	73 2f       	mov	r23, r19
    1694:	28 e1       	ldi	r18, 0x18	; 24
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	40 e0       	ldi	r20, 0x00	; 0
    169a:	50 e0       	ldi	r21, 0x00	; 0
    169c:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <__udivmodsi4>
	dt->hour = tmp_ulong_2 - (24 * tmp_ulong_1);
    16a0:	88 e1       	ldi	r24, 0x18	; 24
    16a2:	28 9f       	mul	r18, r24
    16a4:	10 19       	sub	r17, r0
    16a6:	11 24       	eor	r1, r1
    16a8:	1b 83       	std	Y+3, r17	; 0x03

	tmp_ulong_2 = tmp_ulong_1 + 365 + 366;	// whole days since 1968
    16aa:	69 01       	movw	r12, r18
    16ac:	7a 01       	movw	r14, r20
    16ae:	8b ed       	ldi	r24, 0xDB	; 219
    16b0:	c8 0e       	add	r12, r24
    16b2:	82 e0       	ldi	r24, 0x02	; 2
    16b4:	d8 1e       	adc	r13, r24
    16b6:	e1 1c       	adc	r14, r1
    16b8:	f1 1c       	adc	r15, r1
	tmp_uint_1 = tmp_ulong_2 / ((4 * 365) + 1);	// leap year periods
    16ba:	c7 01       	movw	r24, r14
    16bc:	b6 01       	movw	r22, r12
    16be:	25 eb       	ldi	r18, 0xB5	; 181
    16c0:	35 e0       	ldi	r19, 0x05	; 5
    16c2:	40 e0       	ldi	r20, 0x00	; 0
    16c4:	50 e0       	ldi	r21, 0x00	; 0
    16c6:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <__udivmodsi4>
    16ca:	4b 01       	movw	r8, r22
    16cc:	5c 01       	movw	r10, r24
    16ce:	89 01       	movw	r16, r18

	tmp_uint_2 = tmp_ulong_2 % ((4 * 365) + 1);	// days since current lyear

	// if days are after a current leap year then add a leap year period
	if ((tmp_uint_2 >= (31 + 29))) tmp_uint_1++;
    16d0:	8c e3       	ldi	r24, 0x3C	; 60
    16d2:	88 16       	cp	r8, r24
    16d4:	91 04       	cpc	r9, r1
    16d6:	10 f0       	brcs	.+4      	; 0x16dc <DS2415_epoch_to_gregorian+0xa4>
    16d8:	0f 5f       	subi	r16, 0xFF	; 255
    16da:	1f 4f       	sbci	r17, 0xFF	; 255

	tmp_uint_3 = (tmp_ulong_2 - tmp_uint_1) / 365;	// whole years
    16dc:	c7 01       	movw	r24, r14
    16de:	b6 01       	movw	r22, r12
    16e0:	60 1b       	sub	r22, r16
    16e2:	71 0b       	sbc	r23, r17
    16e4:	81 09       	sbc	r24, r1
    16e6:	91 09       	sbc	r25, r1
    16e8:	2d e6       	ldi	r18, 0x6D	; 109
    16ea:	31 e0       	ldi	r19, 0x01	; 1
    16ec:	40 e0       	ldi	r20, 0x00	; 0
    16ee:	50 e0       	ldi	r21, 0x00	; 0
    16f0:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <__udivmodsi4>
	tmp_uint_1 = tmp_ulong_2 - (tmp_uint_3 * 365) - tmp_uint_1;	// days since first of year
    16f4:	6d e6       	ldi	r22, 0x6D	; 109
    16f6:	71 e0       	ldi	r23, 0x01	; 1
    16f8:	62 9f       	mul	r22, r18
    16fa:	c0 01       	movw	r24, r0
    16fc:	63 9f       	mul	r22, r19
    16fe:	90 0d       	add	r25, r0
    1700:	72 9f       	mul	r23, r18
    1702:	90 0d       	add	r25, r0
    1704:	11 24       	eor	r1, r1
    1706:	c8 1a       	sub	r12, r24
    1708:	d9 0a       	sbc	r13, r25
    170a:	c0 1a       	sub	r12, r16
    170c:	d1 0a       	sbc	r13, r17

	if ((tmp_uint_2 <= 365) && (tmp_uint_2 >= 60)) {
    170e:	8c e3       	ldi	r24, 0x3C	; 60
    1710:	88 1a       	sub	r8, r24
    1712:	91 08       	sbc	r9, r1
    1714:	82 e3       	ldi	r24, 0x32	; 50
    1716:	88 16       	cp	r8, r24
    1718:	81 e0       	ldi	r24, 0x01	; 1
    171a:	98 06       	cpc	r9, r24
    171c:	18 f4       	brcc	.+6      	; 0x1724 <DS2415_epoch_to_gregorian+0xec>
		tmp_uint_1++;
    171e:	8f ef       	ldi	r24, 0xFF	; 255
    1720:	c8 1a       	sub	r12, r24
    1722:	d8 0a       	sbc	r13, r24
	}
	dt->year = tmp_uint_3 + 68;		
    1724:	44 e4       	ldi	r20, 0x44	; 68
    1726:	42 0f       	add	r20, r18
    1728:	48 83       	st	Y, r20
    172a:	ea e1       	ldi	r30, 0x1A	; 26
    172c:	f1 e0       	ldi	r31, 0x01	; 1

	// search for what month it is based on how many days have past
	// within the current year
	tmp_uint_2 = 13;	// month
	tmp_uint_3 = 366;	// days to month
    172e:	8e e6       	ldi	r24, 0x6E	; 110
    1730:	91 e0       	ldi	r25, 0x01	; 1
	}
	dt->year = tmp_uint_3 + 68;		

	// search for what month it is based on how many days have past
	// within the current year
	tmp_uint_2 = 13;	// month
    1732:	2d e0       	ldi	r18, 0x0D	; 13
    1734:	30 e0       	ldi	r19, 0x00	; 0
	while (tmp_uint_1 < tmp_uint_3)
	{
		 tmp_uint_2--;
		 tmp_uint_3 = accum_days[tmp_uint_2];
		 // fixup if month is past February and it is a leap year
		 if ((tmp_uint_2 >= 2) && ((dt->year % 4) == 0)) tmp_uint_3++;
    1736:	43 70       	andi	r20, 0x03	; 3

	// search for what month it is based on how many days have past
	// within the current year
	tmp_uint_2 = 13;	// month
	tmp_uint_3 = 366;	// days to month
	while (tmp_uint_1 < tmp_uint_3)
    1738:	c8 16       	cp	r12, r24
    173a:	d9 06       	cpc	r13, r25
    173c:	58 f4       	brcc	.+22     	; 0x1754 <DS2415_epoch_to_gregorian+0x11c>
	{
		 tmp_uint_2--;
    173e:	21 50       	subi	r18, 0x01	; 1
    1740:	31 09       	sbc	r19, r1
		 tmp_uint_3 = accum_days[tmp_uint_2];
    1742:	92 91       	ld	r25, -Z
    1744:	82 91       	ld	r24, -Z
		 // fixup if month is past February and it is a leap year
		 if ((tmp_uint_2 >= 2) && ((dt->year % 4) == 0)) tmp_uint_3++;
    1746:	22 30       	cpi	r18, 0x02	; 2
    1748:	31 05       	cpc	r19, r1
    174a:	b0 f3       	brcs	.-20     	; 0x1738 <DS2415_epoch_to_gregorian+0x100>
    174c:	41 11       	cpse	r20, r1
    174e:	f4 cf       	rjmp	.-24     	; 0x1738 <DS2415_epoch_to_gregorian+0x100>
    1750:	01 96       	adiw	r24, 0x01	; 1
    1752:	f2 cf       	rjmp	.-28     	; 0x1738 <DS2415_epoch_to_gregorian+0x100>
	}
	dt->month = tmp_uint_2;
    1754:	29 83       	std	Y+1, r18	; 0x01
	dt->day = tmp_uint_1 - tmp_uint_3 + 1;
    1756:	c3 94       	inc	r12
    1758:	c8 1a       	sub	r12, r24
    175a:	ca 82       	std	Y+2, r12	; 0x02
}
    175c:	df 91       	pop	r29
    175e:	cf 91       	pop	r28
    1760:	1f 91       	pop	r17
    1762:	0f 91       	pop	r16
    1764:	ff 90       	pop	r15
    1766:	ef 90       	pop	r14
    1768:	df 90       	pop	r13
    176a:	cf 90       	pop	r12
    176c:	bf 90       	pop	r11
    176e:	af 90       	pop	r10
    1770:	9f 90       	pop	r9
    1772:	8f 90       	pop	r8
    1774:	08 95       	ret

00001776 <bmp085_writemem>:
#include BMP085_I2CFLEURYPATH

/*
 * i2c write
 */
void bmp085_writemem(uint8_t reg, uint8_t value) {
    1776:	1f 93       	push	r17
    1778:	cf 93       	push	r28
    177a:	df 93       	push	r29
    177c:	1f 92       	push	r1
    177e:	cd b7       	in	r28, 0x3d	; 61
    1780:	de b7       	in	r29, 0x3e	; 62
    1782:	18 2f       	mov	r17, r24
	i2c_start_wait(BMP085_ADDR | I2C_WRITE);
    1784:	8e ee       	ldi	r24, 0xEE	; 238
    1786:	69 83       	std	Y+1, r22	; 0x01
    1788:	0e 94 76 0f 	call	0x1eec	; 0x1eec <i2c_start_wait>
	i2c_write(reg);
    178c:	81 2f       	mov	r24, r17
    178e:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <i2c_write>
	i2c_write(value);
    1792:	69 81       	ldd	r22, Y+1	; 0x01
    1794:	86 2f       	mov	r24, r22
    1796:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <i2c_write>
	i2c_stop();
}
    179a:	0f 90       	pop	r0
    179c:	df 91       	pop	r29
    179e:	cf 91       	pop	r28
    17a0:	1f 91       	pop	r17
 */
void bmp085_writemem(uint8_t reg, uint8_t value) {
	i2c_start_wait(BMP085_ADDR | I2C_WRITE);
	i2c_write(reg);
	i2c_write(value);
	i2c_stop();
    17a2:	0c 94 9f 0f 	jmp	0x1f3e	; 0x1f3e <i2c_stop>

000017a6 <bmp085_readmem>:
}

/*
 * i2c read
 */
void bmp085_readmem(uint8_t reg, uint8_t buff[], uint8_t bytes) {
    17a6:	af 92       	push	r10
    17a8:	bf 92       	push	r11
    17aa:	df 92       	push	r13
    17ac:	ef 92       	push	r14
    17ae:	ff 92       	push	r15
    17b0:	0f 93       	push	r16
    17b2:	1f 93       	push	r17
    17b4:	cf 93       	push	r28
    17b6:	df 93       	push	r29
    17b8:	00 d0       	rcall	.+0      	; 0x17ba <bmp085_readmem+0x14>
    17ba:	cd b7       	in	r28, 0x3d	; 61
    17bc:	de b7       	in	r29, 0x3e	; 62
    17be:	18 2f       	mov	r17, r24
    17c0:	d4 2e       	mov	r13, r20
	uint8_t i =0;
	i2c_start_wait(BMP085_ADDR | I2C_WRITE);
    17c2:	8e ee       	ldi	r24, 0xEE	; 238
    17c4:	69 83       	std	Y+1, r22	; 0x01
    17c6:	7a 83       	std	Y+2, r23	; 0x02
    17c8:	0e 94 76 0f 	call	0x1eec	; 0x1eec <i2c_start_wait>
	i2c_write(reg);
    17cc:	81 2f       	mov	r24, r17
    17ce:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <i2c_write>
	i2c_rep_start(BMP085_ADDR | I2C_READ);
    17d2:	8f ee       	ldi	r24, 0xEF	; 239
    17d4:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <i2c_rep_start>
    17d8:	69 81       	ldd	r22, Y+1	; 0x01
    17da:	a6 2e       	mov	r10, r22
    17dc:	7a 81       	ldd	r23, Y+2	; 0x02
    17de:	b7 2e       	mov	r11, r23
	for(i=0; i<bytes; i++) {
    17e0:	00 e0       	ldi	r16, 0x00	; 0
    17e2:	10 e0       	ldi	r17, 0x00	; 0
		if(i==bytes-1)
    17e4:	ed 2c       	mov	r14, r13
    17e6:	f1 2c       	mov	r15, r1
    17e8:	81 e0       	ldi	r24, 0x01	; 1
    17ea:	e8 1a       	sub	r14, r24
    17ec:	f1 08       	sbc	r15, r1
void bmp085_readmem(uint8_t reg, uint8_t buff[], uint8_t bytes) {
	uint8_t i =0;
	i2c_start_wait(BMP085_ADDR | I2C_WRITE);
	i2c_write(reg);
	i2c_rep_start(BMP085_ADDR | I2C_READ);
	for(i=0; i<bytes; i++) {
    17ee:	0d 15       	cp	r16, r13
    17f0:	80 f4       	brcc	.+32     	; 0x1812 <bmp085_readmem+0x6c>
		if(i==bytes-1)
    17f2:	0e 15       	cp	r16, r14
    17f4:	1f 05       	cpc	r17, r15
    17f6:	19 f4       	brne	.+6      	; 0x17fe <bmp085_readmem+0x58>
			buff[i] = i2c_readNak();
    17f8:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <i2c_readNak>
    17fc:	02 c0       	rjmp	.+4      	; 0x1802 <bmp085_readmem+0x5c>
		else
			buff[i] = i2c_readAck();
    17fe:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <i2c_readAck>
    1802:	f5 01       	movw	r30, r10
    1804:	80 83       	st	Z, r24
    1806:	0f 5f       	subi	r16, 0xFF	; 255
    1808:	1f 4f       	sbci	r17, 0xFF	; 255
    180a:	ff ef       	ldi	r31, 0xFF	; 255
    180c:	af 1a       	sub	r10, r31
    180e:	bf 0a       	sbc	r11, r31
    1810:	ee cf       	rjmp	.-36     	; 0x17ee <bmp085_readmem+0x48>
	}
	i2c_stop();
}
    1812:	0f 90       	pop	r0
    1814:	0f 90       	pop	r0
    1816:	df 91       	pop	r29
    1818:	cf 91       	pop	r28
    181a:	1f 91       	pop	r17
    181c:	0f 91       	pop	r16
    181e:	ff 90       	pop	r15
    1820:	ef 90       	pop	r14
    1822:	df 90       	pop	r13
    1824:	bf 90       	pop	r11
    1826:	af 90       	pop	r10
		if(i==bytes-1)
			buff[i] = i2c_readNak();
		else
			buff[i] = i2c_readAck();
	}
	i2c_stop();
    1828:	0c 94 9f 0f 	jmp	0x1f3e	; 0x1f3e <i2c_stop>

0000182c <bmp085_avaragefilter>:


#if BMP085_FILTERPRESSURE == 1
#define BMP085_AVARAGECOEF 21
static long k[BMP085_AVARAGECOEF];
long bmp085_avaragefilter(long input) {
    182c:	0f 93       	push	r16
    182e:	1f 93       	push	r17
    1830:	eb e3       	ldi	r30, 0x3B	; 59
    1832:	f2 e0       	ldi	r31, 0x02	; 2
	uint8_t i=0;
	long sum=0;
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
		k[i] = k[i+1];
    1834:	04 81       	ldd	r16, Z+4	; 0x04
    1836:	15 81       	ldd	r17, Z+5	; 0x05
    1838:	26 81       	ldd	r18, Z+6	; 0x06
    183a:	37 81       	ldd	r19, Z+7	; 0x07
    183c:	01 93       	st	Z+, r16
    183e:	11 93       	st	Z+, r17
    1840:	21 93       	st	Z+, r18
    1842:	31 93       	st	Z+, r19
#define BMP085_AVARAGECOEF 21
static long k[BMP085_AVARAGECOEF];
long bmp085_avaragefilter(long input) {
	uint8_t i=0;
	long sum=0;
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
    1844:	22 e0       	ldi	r18, 0x02	; 2
    1846:	ef 38       	cpi	r30, 0x8F	; 143
    1848:	f2 07       	cpc	r31, r18
    184a:	a1 f7       	brne	.-24     	; 0x1834 <bmp085_avaragefilter+0x8>
		k[i] = k[i+1];
	}
	k[BMP085_AVARAGECOEF-1] = input;
    184c:	60 93 8b 02 	sts	0x028B, r22
    1850:	70 93 8c 02 	sts	0x028C, r23
    1854:	80 93 8d 02 	sts	0x028D, r24
    1858:	90 93 8e 02 	sts	0x028E, r25
    185c:	eb e3       	ldi	r30, 0x3B	; 59
    185e:	f2 e0       	ldi	r31, 0x02	; 2
#if BMP085_FILTERPRESSURE == 1
#define BMP085_AVARAGECOEF 21
static long k[BMP085_AVARAGECOEF];
long bmp085_avaragefilter(long input) {
	uint8_t i=0;
	long sum=0;
    1860:	60 e0       	ldi	r22, 0x00	; 0
    1862:	70 e0       	ldi	r23, 0x00	; 0
    1864:	cb 01       	movw	r24, r22
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
		k[i] = k[i+1];
	}
	k[BMP085_AVARAGECOEF-1] = input;
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
		sum += k[i];
    1866:	01 91       	ld	r16, Z+
    1868:	11 91       	ld	r17, Z+
    186a:	21 91       	ld	r18, Z+
    186c:	31 91       	ld	r19, Z+
    186e:	60 0f       	add	r22, r16
    1870:	71 1f       	adc	r23, r17
    1872:	82 1f       	adc	r24, r18
    1874:	93 1f       	adc	r25, r19
	long sum=0;
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
		k[i] = k[i+1];
	}
	k[BMP085_AVARAGECOEF-1] = input;
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
    1876:	22 e0       	ldi	r18, 0x02	; 2
    1878:	ef 38       	cpi	r30, 0x8F	; 143
    187a:	f2 07       	cpc	r31, r18
    187c:	a1 f7       	brne	.-24     	; 0x1866 <bmp085_avaragefilter+0x3a>
		sum += k[i];
	}
	return (sum /BMP085_AVARAGECOEF) ;
    187e:	25 e1       	ldi	r18, 0x15	; 21
    1880:	30 e0       	ldi	r19, 0x00	; 0
    1882:	40 e0       	ldi	r20, 0x00	; 0
    1884:	50 e0       	ldi	r21, 0x00	; 0
    1886:	0e 94 6d 15 	call	0x2ada	; 0x2ada <__divmodsi4>
}
    188a:	ca 01       	movw	r24, r20
    188c:	b9 01       	movw	r22, r18
    188e:	1f 91       	pop	r17
    1890:	0f 91       	pop	r16
    1892:	08 95       	ret

00001894 <bmp085_getcalibration>:
#endif

/*
 * read calibration registers
 */
void bmp085_getcalibration() {
    1894:	cf 93       	push	r28
    1896:	df 93       	push	r29
    1898:	00 d0       	rcall	.+0      	; 0x189a <bmp085_getcalibration+0x6>
    189a:	cd b7       	in	r28, 0x3d	; 61
    189c:	de b7       	in	r29, 0x3e	; 62
	uint8_t buff[2];
	memset(buff, 0, sizeof(buff));
    189e:	1a 82       	std	Y+2, r1	; 0x02
    18a0:	19 82       	std	Y+1, r1	; 0x01

	bmp085_readmem(BMP085_REGAC1, buff, 2);
    18a2:	42 e0       	ldi	r20, 0x02	; 2
    18a4:	be 01       	movw	r22, r28
    18a6:	6f 5f       	subi	r22, 0xFF	; 255
    18a8:	7f 4f       	sbci	r23, 0xFF	; 255
    18aa:	8a ea       	ldi	r24, 0xAA	; 170
    18ac:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <bmp085_readmem>
	bmp085_regac1 = ((int)buff[0] <<8 | ((int)buff[1]));
    18b0:	89 81       	ldd	r24, Y+1	; 0x01
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	98 2f       	mov	r25, r24
    18b6:	88 27       	eor	r24, r24
    18b8:	2a 81       	ldd	r18, Y+2	; 0x02
    18ba:	82 2b       	or	r24, r18
    18bc:	90 93 de 02 	sts	0x02DE, r25
    18c0:	80 93 dd 02 	sts	0x02DD, r24
	bmp085_readmem(BMP085_REGAC2, buff, 2);
    18c4:	42 e0       	ldi	r20, 0x02	; 2
    18c6:	be 01       	movw	r22, r28
    18c8:	6f 5f       	subi	r22, 0xFF	; 255
    18ca:	7f 4f       	sbci	r23, 0xFF	; 255
    18cc:	8c ea       	ldi	r24, 0xAC	; 172
    18ce:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <bmp085_readmem>
	bmp085_regac2 = ((int)buff[0] <<8 | ((int)buff[1]));
    18d2:	89 81       	ldd	r24, Y+1	; 0x01
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	98 2f       	mov	r25, r24
    18d8:	88 27       	eor	r24, r24
    18da:	2a 81       	ldd	r18, Y+2	; 0x02
    18dc:	82 2b       	or	r24, r18
    18de:	90 93 34 03 	sts	0x0334, r25
    18e2:	80 93 33 03 	sts	0x0333, r24
	bmp085_readmem(BMP085_REGAC3, buff, 2);
    18e6:	42 e0       	ldi	r20, 0x02	; 2
    18e8:	be 01       	movw	r22, r28
    18ea:	6f 5f       	subi	r22, 0xFF	; 255
    18ec:	7f 4f       	sbci	r23, 0xFF	; 255
    18ee:	8e ea       	ldi	r24, 0xAE	; 174
    18f0:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <bmp085_readmem>
	bmp085_regac3 = ((int)buff[0] <<8 | ((int)buff[1]));
    18f4:	89 81       	ldd	r24, Y+1	; 0x01
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	98 2f       	mov	r25, r24
    18fa:	88 27       	eor	r24, r24
    18fc:	2a 81       	ldd	r18, Y+2	; 0x02
    18fe:	82 2b       	or	r24, r18
    1900:	90 93 c6 02 	sts	0x02C6, r25
    1904:	80 93 c5 02 	sts	0x02C5, r24
	bmp085_readmem(BMP085_REGAC4, buff, 2);
    1908:	42 e0       	ldi	r20, 0x02	; 2
    190a:	be 01       	movw	r22, r28
    190c:	6f 5f       	subi	r22, 0xFF	; 255
    190e:	7f 4f       	sbci	r23, 0xFF	; 255
    1910:	80 eb       	ldi	r24, 0xB0	; 176
    1912:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <bmp085_readmem>
	bmp085_regac4 = ((unsigned int)buff[0] <<8 | ((unsigned int)buff[1]));
    1916:	89 81       	ldd	r24, Y+1	; 0x01
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	98 2f       	mov	r25, r24
    191c:	88 27       	eor	r24, r24
    191e:	2a 81       	ldd	r18, Y+2	; 0x02
    1920:	82 2b       	or	r24, r18
    1922:	90 93 a0 02 	sts	0x02A0, r25
    1926:	80 93 9f 02 	sts	0x029F, r24
	bmp085_readmem(BMP085_REGAC5, buff, 2);
    192a:	42 e0       	ldi	r20, 0x02	; 2
    192c:	be 01       	movw	r22, r28
    192e:	6f 5f       	subi	r22, 0xFF	; 255
    1930:	7f 4f       	sbci	r23, 0xFF	; 255
    1932:	82 eb       	ldi	r24, 0xB2	; 178
    1934:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <bmp085_readmem>
	bmp085_regac5 = ((unsigned int)buff[0] <<8 | ((unsigned int)buff[1]));
    1938:	89 81       	ldd	r24, Y+1	; 0x01
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	98 2f       	mov	r25, r24
    193e:	88 27       	eor	r24, r24
    1940:	2a 81       	ldd	r18, Y+2	; 0x02
    1942:	82 2b       	or	r24, r18
    1944:	90 93 f0 02 	sts	0x02F0, r25
    1948:	80 93 ef 02 	sts	0x02EF, r24
	bmp085_readmem(BMP085_REGAC6, buff, 2);
    194c:	42 e0       	ldi	r20, 0x02	; 2
    194e:	be 01       	movw	r22, r28
    1950:	6f 5f       	subi	r22, 0xFF	; 255
    1952:	7f 4f       	sbci	r23, 0xFF	; 255
    1954:	84 eb       	ldi	r24, 0xB4	; 180
    1956:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <bmp085_readmem>
	bmp085_regac6 = ((unsigned int)buff[0] <<8 | ((unsigned int)buff[1]));
    195a:	89 81       	ldd	r24, Y+1	; 0x01
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	98 2f       	mov	r25, r24
    1960:	88 27       	eor	r24, r24
    1962:	2a 81       	ldd	r18, Y+2	; 0x02
    1964:	82 2b       	or	r24, r18
    1966:	90 93 d2 02 	sts	0x02D2, r25
    196a:	80 93 d1 02 	sts	0x02D1, r24
	bmp085_readmem(BMP085_REGB1, buff, 2);
    196e:	42 e0       	ldi	r20, 0x02	; 2
    1970:	be 01       	movw	r22, r28
    1972:	6f 5f       	subi	r22, 0xFF	; 255
    1974:	7f 4f       	sbci	r23, 0xFF	; 255
    1976:	86 eb       	ldi	r24, 0xB6	; 182
    1978:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <bmp085_readmem>
	bmp085_regb1 = ((int)buff[0] <<8 | ((int)buff[1]));
    197c:	89 81       	ldd	r24, Y+1	; 0x01
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	98 2f       	mov	r25, r24
    1982:	88 27       	eor	r24, r24
    1984:	2a 81       	ldd	r18, Y+2	; 0x02
    1986:	82 2b       	or	r24, r18
    1988:	90 93 d0 02 	sts	0x02D0, r25
    198c:	80 93 cf 02 	sts	0x02CF, r24
	bmp085_readmem(BMP085_REGB2, buff, 2);
    1990:	42 e0       	ldi	r20, 0x02	; 2
    1992:	be 01       	movw	r22, r28
    1994:	6f 5f       	subi	r22, 0xFF	; 255
    1996:	7f 4f       	sbci	r23, 0xFF	; 255
    1998:	88 eb       	ldi	r24, 0xB8	; 184
    199a:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <bmp085_readmem>
	bmp085_regb2 = ((int)buff[0] <<8 | ((int)buff[1]));
    199e:	89 81       	ldd	r24, Y+1	; 0x01
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	98 2f       	mov	r25, r24
    19a4:	88 27       	eor	r24, r24
    19a6:	2a 81       	ldd	r18, Y+2	; 0x02
    19a8:	82 2b       	or	r24, r18
    19aa:	90 93 b8 02 	sts	0x02B8, r25
    19ae:	80 93 b7 02 	sts	0x02B7, r24
	bmp085_readmem(BMP085_REGMB, buff, 2);
    19b2:	42 e0       	ldi	r20, 0x02	; 2
    19b4:	be 01       	movw	r22, r28
    19b6:	6f 5f       	subi	r22, 0xFF	; 255
    19b8:	7f 4f       	sbci	r23, 0xFF	; 255
    19ba:	8a eb       	ldi	r24, 0xBA	; 186
    19bc:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <bmp085_readmem>
	bmp085_regmb = ((int)buff[0] <<8 | ((int)buff[1]));
    19c0:	89 81       	ldd	r24, Y+1	; 0x01
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	98 2f       	mov	r25, r24
    19c6:	88 27       	eor	r24, r24
    19c8:	2a 81       	ldd	r18, Y+2	; 0x02
    19ca:	82 2b       	or	r24, r18
    19cc:	90 93 ee 02 	sts	0x02EE, r25
    19d0:	80 93 ed 02 	sts	0x02ED, r24
	bmp085_readmem(BMP085_REGMC, buff, 2);
    19d4:	42 e0       	ldi	r20, 0x02	; 2
    19d6:	be 01       	movw	r22, r28
    19d8:	6f 5f       	subi	r22, 0xFF	; 255
    19da:	7f 4f       	sbci	r23, 0xFF	; 255
    19dc:	8c eb       	ldi	r24, 0xBC	; 188
    19de:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <bmp085_readmem>
	bmp085_regmc = ((int)buff[0] <<8 | ((int)buff[1]));
    19e2:	89 81       	ldd	r24, Y+1	; 0x01
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	98 2f       	mov	r25, r24
    19e8:	88 27       	eor	r24, r24
    19ea:	2a 81       	ldd	r18, Y+2	; 0x02
    19ec:	82 2b       	or	r24, r18
    19ee:	90 93 f2 02 	sts	0x02F2, r25
    19f2:	80 93 f1 02 	sts	0x02F1, r24
	bmp085_readmem(BMP085_REGMD, buff, 2);
    19f6:	42 e0       	ldi	r20, 0x02	; 2
    19f8:	be 01       	movw	r22, r28
    19fa:	6f 5f       	subi	r22, 0xFF	; 255
    19fc:	7f 4f       	sbci	r23, 0xFF	; 255
    19fe:	8e eb       	ldi	r24, 0xBE	; 190
    1a00:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <bmp085_readmem>
	bmp085_regmd = ((int)buff[0] <<8 | ((int)buff[1]));
    1a04:	89 81       	ldd	r24, Y+1	; 0x01
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	98 2f       	mov	r25, r24
    1a0a:	88 27       	eor	r24, r24
    1a0c:	2a 81       	ldd	r18, Y+2	; 0x02
    1a0e:	82 2b       	or	r24, r18
    1a10:	90 93 d4 02 	sts	0x02D4, r25
    1a14:	80 93 d3 02 	sts	0x02D3, r24
}
    1a18:	0f 90       	pop	r0
    1a1a:	0f 90       	pop	r0
    1a1c:	df 91       	pop	r29
    1a1e:	cf 91       	pop	r28
    1a20:	08 95       	ret

00001a22 <bmp085_getrawtemperature>:

/*
 * get raw temperature as read by registers, and do some calculation to convert it
 */
void bmp085_getrawtemperature() {
    1a22:	cf 92       	push	r12
    1a24:	df 92       	push	r13
    1a26:	ef 92       	push	r14
    1a28:	ff 92       	push	r15
    1a2a:	cf 93       	push	r28
    1a2c:	df 93       	push	r29
    1a2e:	00 d0       	rcall	.+0      	; 0x1a30 <bmp085_getrawtemperature+0xe>
    1a30:	cd b7       	in	r28, 0x3d	; 61
    1a32:	de b7       	in	r29, 0x3e	; 62
	uint8_t buff[2];
	memset(buff, 0, sizeof(buff));
    1a34:	1a 82       	std	Y+2, r1	; 0x02
    1a36:	19 82       	std	Y+1, r1	; 0x01
	long ut,x1,x2;

	//read raw temperature
	bmp085_writemem(BMP085_REGCONTROL, BMP085_REGREADTEMPERATURE);
    1a38:	6e e2       	ldi	r22, 0x2E	; 46
    1a3a:	84 ef       	ldi	r24, 0xF4	; 244
    1a3c:	0e 94 bb 0b 	call	0x1776	; 0x1776 <bmp085_writemem>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1a40:	8f e0       	ldi	r24, 0x0F	; 15
    1a42:	97 e2       	ldi	r25, 0x27	; 39
    1a44:	01 97       	sbiw	r24, 0x01	; 1
    1a46:	f1 f7       	brne	.-4      	; 0x1a44 <bmp085_getrawtemperature+0x22>
    1a48:	00 c0       	rjmp	.+0      	; 0x1a4a <bmp085_getrawtemperature+0x28>
    1a4a:	00 00       	nop
	_delay_ms(5); // min. 4.5ms read Temp delay
	bmp085_readmem(BMP085_REGCONTROLOUTPUT, buff, 2);
    1a4c:	42 e0       	ldi	r20, 0x02	; 2
    1a4e:	be 01       	movw	r22, r28
    1a50:	6f 5f       	subi	r22, 0xFF	; 255
    1a52:	7f 4f       	sbci	r23, 0xFF	; 255
    1a54:	86 ef       	ldi	r24, 0xF6	; 246
    1a56:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <bmp085_readmem>
	ut = ((long)buff[0] << 8 | ((long)buff[1])); //uncompensated temperature value
    1a5a:	29 81       	ldd	r18, Y+1	; 0x01
    1a5c:	82 2f       	mov	r24, r18
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	a0 e0       	ldi	r26, 0x00	; 0
    1a62:	b0 e0       	ldi	r27, 0x00	; 0
    1a64:	22 27       	eor	r18, r18
    1a66:	38 2f       	mov	r19, r24
    1a68:	49 2f       	mov	r20, r25
    1a6a:	5a 2f       	mov	r21, r26
    1a6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a6e:	28 2b       	or	r18, r24

	//calculate raw temperature
	x1 = ((long)ut - bmp085_regac6) * bmp085_regac5 >> 15;
    1a70:	80 91 d1 02 	lds	r24, 0x02D1
    1a74:	90 91 d2 02 	lds	r25, 0x02D2
    1a78:	28 1b       	sub	r18, r24
    1a7a:	39 0b       	sbc	r19, r25
    1a7c:	41 09       	sbc	r20, r1
    1a7e:	51 09       	sbc	r21, r1
    1a80:	a0 91 ef 02 	lds	r26, 0x02EF
    1a84:	b0 91 f0 02 	lds	r27, 0x02F0
    1a88:	0e 94 9b 15 	call	0x2b36	; 0x2b36 <__muluhisi3>
    1a8c:	6b 01       	movw	r12, r22
    1a8e:	7c 01       	movw	r14, r24
    1a90:	4f e0       	ldi	r20, 0x0F	; 15
    1a92:	f5 94       	asr	r15
    1a94:	e7 94       	ror	r14
    1a96:	d7 94       	ror	r13
    1a98:	c7 94       	ror	r12
    1a9a:	4a 95       	dec	r20
    1a9c:	d1 f7       	brne	.-12     	; 0x1a92 <bmp085_getrawtemperature+0x70>
	x2 = ((long)bmp085_regmc << 11) / (x1 + bmp085_regmd);
    1a9e:	60 91 f1 02 	lds	r22, 0x02F1
    1aa2:	70 91 f2 02 	lds	r23, 0x02F2
    1aa6:	88 27       	eor	r24, r24
    1aa8:	77 fd       	sbrc	r23, 7
    1aaa:	80 95       	com	r24
    1aac:	98 2f       	mov	r25, r24
    1aae:	5b e0       	ldi	r21, 0x0B	; 11
    1ab0:	66 0f       	add	r22, r22
    1ab2:	77 1f       	adc	r23, r23
    1ab4:	88 1f       	adc	r24, r24
    1ab6:	99 1f       	adc	r25, r25
    1ab8:	5a 95       	dec	r21
    1aba:	d1 f7       	brne	.-12     	; 0x1ab0 <bmp085_getrawtemperature+0x8e>
    1abc:	20 91 d3 02 	lds	r18, 0x02D3
    1ac0:	30 91 d4 02 	lds	r19, 0x02D4
    1ac4:	44 27       	eor	r20, r20
    1ac6:	37 fd       	sbrc	r19, 7
    1ac8:	40 95       	com	r20
    1aca:	54 2f       	mov	r21, r20
    1acc:	2c 0d       	add	r18, r12
    1ace:	3d 1d       	adc	r19, r13
    1ad0:	4e 1d       	adc	r20, r14
    1ad2:	5f 1d       	adc	r21, r15
    1ad4:	0e 94 6d 15 	call	0x2ada	; 0x2ada <__divmodsi4>
	bmp085_rawtemperature = x1 + x2;
    1ad8:	2c 0d       	add	r18, r12
    1ada:	3d 1d       	adc	r19, r13
    1adc:	4e 1d       	adc	r20, r14
    1ade:	5f 1d       	adc	r21, r15
    1ae0:	20 93 cb 02 	sts	0x02CB, r18
    1ae4:	30 93 cc 02 	sts	0x02CC, r19
    1ae8:	40 93 cd 02 	sts	0x02CD, r20
    1aec:	50 93 ce 02 	sts	0x02CE, r21
}
    1af0:	0f 90       	pop	r0
    1af2:	0f 90       	pop	r0
    1af4:	df 91       	pop	r29
    1af6:	cf 91       	pop	r28
    1af8:	ff 90       	pop	r15
    1afa:	ef 90       	pop	r14
    1afc:	df 90       	pop	r13
    1afe:	cf 90       	pop	r12
    1b00:	08 95       	ret

00001b02 <bmp085_getrawpressure>:

/*
 * get raw pressure as read by registers, and do some calculation to convert it
 */
void bmp085_getrawpressure() {
    1b02:	4f 92       	push	r4
    1b04:	5f 92       	push	r5
    1b06:	6f 92       	push	r6
    1b08:	7f 92       	push	r7
    1b0a:	8f 92       	push	r8
    1b0c:	9f 92       	push	r9
    1b0e:	af 92       	push	r10
    1b10:	bf 92       	push	r11
    1b12:	cf 92       	push	r12
    1b14:	df 92       	push	r13
    1b16:	ef 92       	push	r14
    1b18:	ff 92       	push	r15
    1b1a:	cf 93       	push	r28
    1b1c:	df 93       	push	r29
    1b1e:	cd b7       	in	r28, 0x3d	; 61
    1b20:	de b7       	in	r29, 0x3e	; 62
    1b22:	2b 97       	sbiw	r28, 0x0b	; 11
    1b24:	0f b6       	in	r0, 0x3f	; 63
    1b26:	f8 94       	cli
    1b28:	de bf       	out	0x3e, r29	; 62
    1b2a:	0f be       	out	0x3f, r0	; 63
    1b2c:	cd bf       	out	0x3d, r28	; 61
	uint8_t buff[3];
	memset(buff, 0, sizeof(buff));
    1b2e:	19 82       	std	Y+1, r1	; 0x01
    1b30:	1a 82       	std	Y+2, r1	; 0x02
    1b32:	1b 82       	std	Y+3, r1	; 0x03
	long up,x1,x2,x3,b3,b6,p;
	unsigned long b4,b7;

	#if BMP085_AUTOUPDATETEMP == 1
	bmp085_getrawtemperature();
    1b34:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <bmp085_getrawtemperature>
	#endif

	//read raw pressure
	bmp085_writemem(BMP085_REGCONTROL, BMP085_REGREADPRESSURE+(BMP085_MODE << 6));
    1b38:	64 ef       	ldi	r22, 0xF4	; 244
    1b3a:	84 ef       	ldi	r24, 0xF4	; 244
    1b3c:	0e 94 bb 0b 	call	0x1776	; 0x1776 <bmp085_writemem>
    1b40:	8f e1       	ldi	r24, 0x1F	; 31
    1b42:	9b ec       	ldi	r25, 0xCB	; 203
    1b44:	01 97       	sbiw	r24, 0x01	; 1
    1b46:	f1 f7       	brne	.-4      	; 0x1b44 <bmp085_getrawpressure+0x42>
    1b48:	00 c0       	rjmp	.+0      	; 0x1b4a <bmp085_getrawpressure+0x48>
    1b4a:	00 00       	nop
	_delay_ms(2 + (3<<BMP085_MODE));
	bmp085_readmem(BMP085_REGCONTROLOUTPUT, buff, 3);
    1b4c:	43 e0       	ldi	r20, 0x03	; 3
    1b4e:	be 01       	movw	r22, r28
    1b50:	6f 5f       	subi	r22, 0xFF	; 255
    1b52:	7f 4f       	sbci	r23, 0xFF	; 255
    1b54:	86 ef       	ldi	r24, 0xF6	; 246
    1b56:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <bmp085_readmem>
	up = ((((long)buff[0] <<16) | ((long)buff[1] <<8) | ((long)buff[2])) >> (8-BMP085_MODE)); // uncompensated pressure value

	//calculate raw pressure
	b6 = bmp085_rawtemperature - 4000;
    1b5a:	80 91 cb 02 	lds	r24, 0x02CB
    1b5e:	90 91 cc 02 	lds	r25, 0x02CC
    1b62:	a0 91 cd 02 	lds	r26, 0x02CD
    1b66:	b0 91 ce 02 	lds	r27, 0x02CE
    1b6a:	80 5a       	subi	r24, 0xA0	; 160
    1b6c:	9f 40       	sbci	r25, 0x0F	; 15
    1b6e:	a1 09       	sbc	r26, r1
    1b70:	b1 09       	sbc	r27, r1
    1b72:	8c 83       	std	Y+4, r24	; 0x04
    1b74:	9d 83       	std	Y+5, r25	; 0x05
    1b76:	ae 83       	std	Y+6, r26	; 0x06
    1b78:	bf 83       	std	Y+7, r27	; 0x07
	x1 = (bmp085_regb2* (b6 * b6) >> 12) >> 11;
    1b7a:	9c 01       	movw	r18, r24
    1b7c:	ad 01       	movw	r20, r26
    1b7e:	bc 01       	movw	r22, r24
    1b80:	cd 01       	movw	r24, r26
    1b82:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <__mulsi3>
    1b86:	2b 01       	movw	r4, r22
    1b88:	3c 01       	movw	r6, r24
	x2 = (bmp085_regac2 * b6) >> 11;
	x3 = x1 + x2;
	b3 = (((((long)bmp085_regac1) * 4 + x3) << BMP085_MODE) + 2) >> 2;
    1b8a:	e0 91 dd 02 	lds	r30, 0x02DD
    1b8e:	f0 91 de 02 	lds	r31, 0x02DE
	x1 = (bmp085_regac3 * b6) >> 13;
    1b92:	a0 91 c5 02 	lds	r26, 0x02C5
    1b96:	b0 91 c6 02 	lds	r27, 0x02C6
    1b9a:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <__mulshisi3>
    1b9e:	6b 01       	movw	r12, r22
    1ba0:	7c 01       	movw	r14, r24
    1ba2:	3d e0       	ldi	r19, 0x0D	; 13
    1ba4:	f5 94       	asr	r15
    1ba6:	e7 94       	ror	r14
    1ba8:	d7 94       	ror	r13
    1baa:	c7 94       	ror	r12
    1bac:	3a 95       	dec	r19
    1bae:	d1 f7       	brne	.-12     	; 0x1ba4 <bmp085_getrawpressure+0xa2>
	x2 = (bmp085_regb1 * ((b6 * b6) >> 12)) >> 16;
    1bb0:	a0 91 cf 02 	lds	r26, 0x02CF
    1bb4:	b0 91 d0 02 	lds	r27, 0x02D0
    1bb8:	a3 01       	movw	r20, r6
    1bba:	92 01       	movw	r18, r4
    1bbc:	6c e0       	ldi	r22, 0x0C	; 12
    1bbe:	55 95       	asr	r21
    1bc0:	47 95       	ror	r20
    1bc2:	37 95       	ror	r19
    1bc4:	27 95       	ror	r18
    1bc6:	6a 95       	dec	r22
    1bc8:	d1 f7       	brne	.-12     	; 0x1bbe <bmp085_getrawpressure+0xbc>
    1bca:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <__mulshisi3>
    1bce:	bb 27       	eor	r27, r27
    1bd0:	97 fd       	sbrc	r25, 7
    1bd2:	b0 95       	com	r27
    1bd4:	ab 2f       	mov	r26, r27
	x3 = ((x1 + x2) + 2) >> 2;
    1bd6:	c8 0e       	add	r12, r24
    1bd8:	d9 1e       	adc	r13, r25
    1bda:	ea 1e       	adc	r14, r26
    1bdc:	fb 1e       	adc	r15, r27
    1bde:	92 e0       	ldi	r25, 0x02	; 2
    1be0:	c9 0e       	add	r12, r25
    1be2:	d1 1c       	adc	r13, r1
    1be4:	e1 1c       	adc	r14, r1
    1be6:	f1 1c       	adc	r15, r1
    1be8:	b2 e0       	ldi	r27, 0x02	; 2
    1bea:	f5 94       	asr	r15
    1bec:	e7 94       	ror	r14
    1bee:	d7 94       	ror	r13
    1bf0:	c7 94       	ror	r12
    1bf2:	ba 95       	dec	r27
    1bf4:	d1 f7       	brne	.-12     	; 0x1bea <bmp085_getrawpressure+0xe8>
	b4 = (bmp085_regac4 * (uint32_t)(x3 + 32768)) >> 15;
    1bf6:	a0 e8       	ldi	r26, 0x80	; 128
    1bf8:	da 0e       	add	r13, r26
    1bfa:	e1 1c       	adc	r14, r1
    1bfc:	f1 1c       	adc	r15, r1
    1bfe:	a0 91 9f 02 	lds	r26, 0x029F
    1c02:	b0 91 a0 02 	lds	r27, 0x02A0
    1c06:	a7 01       	movw	r20, r14
    1c08:	96 01       	movw	r18, r12
    1c0a:	0e 94 9b 15 	call	0x2b36	; 0x2b36 <__muluhisi3>
    1c0e:	dc 01       	movw	r26, r24
    1c10:	cb 01       	movw	r24, r22
    1c12:	2f e0       	ldi	r18, 0x0F	; 15
    1c14:	b6 95       	lsr	r27
    1c16:	a7 95       	ror	r26
    1c18:	97 95       	ror	r25
    1c1a:	87 95       	ror	r24
    1c1c:	2a 95       	dec	r18
    1c1e:	d1 f7       	brne	.-12     	; 0x1c14 <bmp085_getrawpressure+0x112>
    1c20:	88 87       	std	Y+8, r24	; 0x08
    1c22:	99 87       	std	Y+9, r25	; 0x09
    1c24:	aa 87       	std	Y+10, r26	; 0x0a
    1c26:	bb 87       	std	Y+11, r27	; 0x0b

	//read raw pressure
	bmp085_writemem(BMP085_REGCONTROL, BMP085_REGREADPRESSURE+(BMP085_MODE << 6));
	_delay_ms(2 + (3<<BMP085_MODE));
	bmp085_readmem(BMP085_REGCONTROLOUTPUT, buff, 3);
	up = ((((long)buff[0] <<16) | ((long)buff[1] <<8) | ((long)buff[2])) >> (8-BMP085_MODE)); // uncompensated pressure value
    1c28:	89 81       	ldd	r24, Y+1	; 0x01
    1c2a:	ca 80       	ldd	r12, Y+2	; 0x02
    1c2c:	d1 2c       	mov	r13, r1
    1c2e:	e1 2c       	mov	r14, r1
    1c30:	f1 2c       	mov	r15, r1
    1c32:	fe 2c       	mov	r15, r14
    1c34:	ed 2c       	mov	r14, r13
    1c36:	dc 2c       	mov	r13, r12
    1c38:	cc 24       	eor	r12, r12
    1c3a:	e8 2a       	or	r14, r24
    1c3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3e:	c8 2a       	or	r12, r24
    1c40:	45 e0       	ldi	r20, 0x05	; 5
    1c42:	f5 94       	asr	r15
    1c44:	e7 94       	ror	r14
    1c46:	d7 94       	ror	r13
    1c48:	c7 94       	ror	r12
    1c4a:	4a 95       	dec	r20
    1c4c:	d1 f7       	brne	.-12     	; 0x1c42 <bmp085_getrawpressure+0x140>
	//calculate raw pressure
	b6 = bmp085_rawtemperature - 4000;
	x1 = (bmp085_regb2* (b6 * b6) >> 12) >> 11;
	x2 = (bmp085_regac2 * b6) >> 11;
	x3 = x1 + x2;
	b3 = (((((long)bmp085_regac1) * 4 + x3) << BMP085_MODE) + 2) >> 2;
    1c4e:	4f 01       	movw	r8, r30
    1c50:	aa 24       	eor	r10, r10
    1c52:	97 fc       	sbrc	r9, 7
    1c54:	a0 94       	com	r10
    1c56:	ba 2c       	mov	r11, r10
    1c58:	52 e0       	ldi	r21, 0x02	; 2
    1c5a:	88 0c       	add	r8, r8
    1c5c:	99 1c       	adc	r9, r9
    1c5e:	aa 1c       	adc	r10, r10
    1c60:	bb 1c       	adc	r11, r11
    1c62:	5a 95       	dec	r21
    1c64:	d1 f7       	brne	.-12     	; 0x1c5a <bmp085_getrawpressure+0x158>
	bmp085_readmem(BMP085_REGCONTROLOUTPUT, buff, 3);
	up = ((((long)buff[0] <<16) | ((long)buff[1] <<8) | ((long)buff[2])) >> (8-BMP085_MODE)); // uncompensated pressure value

	//calculate raw pressure
	b6 = bmp085_rawtemperature - 4000;
	x1 = (bmp085_regb2* (b6 * b6) >> 12) >> 11;
    1c66:	a0 91 b7 02 	lds	r26, 0x02B7
    1c6a:	b0 91 b8 02 	lds	r27, 0x02B8
    1c6e:	a3 01       	movw	r20, r6
    1c70:	92 01       	movw	r18, r4
    1c72:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <__mulshisi3>
    1c76:	2b 01       	movw	r4, r22
    1c78:	3c 01       	movw	r6, r24
    1c7a:	67 e1       	ldi	r22, 0x17	; 23
    1c7c:	75 94       	asr	r7
    1c7e:	67 94       	ror	r6
    1c80:	57 94       	ror	r5
    1c82:	47 94       	ror	r4
    1c84:	6a 95       	dec	r22
    1c86:	d1 f7       	brne	.-12     	; 0x1c7c <bmp085_getrawpressure+0x17a>
	x2 = (bmp085_regac2 * b6) >> 11;
    1c88:	a0 91 33 03 	lds	r26, 0x0333
    1c8c:	b0 91 34 03 	lds	r27, 0x0334
    1c90:	2c 81       	ldd	r18, Y+4	; 0x04
    1c92:	3d 81       	ldd	r19, Y+5	; 0x05
    1c94:	4e 81       	ldd	r20, Y+6	; 0x06
    1c96:	5f 81       	ldd	r21, Y+7	; 0x07
    1c98:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <__mulshisi3>
    1c9c:	eb e0       	ldi	r30, 0x0B	; 11
    1c9e:	95 95       	asr	r25
    1ca0:	87 95       	ror	r24
    1ca2:	77 95       	ror	r23
    1ca4:	67 95       	ror	r22
    1ca6:	ea 95       	dec	r30
    1ca8:	d1 f7       	brne	.-12     	; 0x1c9e <bmp085_getrawpressure+0x19c>
	x3 = x1 + x2;
    1caa:	46 0e       	add	r4, r22
    1cac:	57 1e       	adc	r5, r23
    1cae:	68 1e       	adc	r6, r24
    1cb0:	79 1e       	adc	r7, r25
	b3 = (((((long)bmp085_regac1) * 4 + x3) << BMP085_MODE) + 2) >> 2;
    1cb2:	84 0c       	add	r8, r4
    1cb4:	95 1c       	adc	r9, r5
    1cb6:	a6 1c       	adc	r10, r6
    1cb8:	b7 1c       	adc	r11, r7
    1cba:	88 0c       	add	r8, r8
    1cbc:	99 1c       	adc	r9, r9
    1cbe:	aa 1c       	adc	r10, r10
    1cc0:	bb 1c       	adc	r11, r11
	x1 = (bmp085_regac3 * b6) >> 13;
	x2 = (bmp085_regb1 * ((b6 * b6) >> 12)) >> 16;
	x3 = ((x1 + x2) + 2) >> 2;
	b4 = (bmp085_regac4 * (uint32_t)(x3 + 32768)) >> 15;
	b7 = ((uint32_t)up - b3) * (50000 >> BMP085_MODE);
    1cc2:	c8 18       	sub	r12, r8
    1cc4:	d9 08       	sbc	r13, r9
    1cc6:	ea 08       	sbc	r14, r10
    1cc8:	fb 08       	sbc	r15, r11
    1cca:	aa e6       	ldi	r26, 0x6A	; 106
    1ccc:	b8 e1       	ldi	r27, 0x18	; 24
    1cce:	a7 01       	movw	r20, r14
    1cd0:	96 01       	movw	r18, r12
    1cd2:	0e 94 9b 15 	call	0x2b36	; 0x2b36 <__muluhisi3>
	p = b7 < 0x80000000 ? (b7 << 1) / b4 : (b7 / b4) << 1;
    1cd6:	97 fd       	sbrc	r25, 7
    1cd8:	0d c0       	rjmp	.+26     	; 0x1cf4 <bmp085_getrawpressure+0x1f2>
    1cda:	66 0f       	add	r22, r22
    1cdc:	77 1f       	adc	r23, r23
    1cde:	88 1f       	adc	r24, r24
    1ce0:	99 1f       	adc	r25, r25
    1ce2:	28 85       	ldd	r18, Y+8	; 0x08
    1ce4:	39 85       	ldd	r19, Y+9	; 0x09
    1ce6:	4a 85       	ldd	r20, Y+10	; 0x0a
    1ce8:	5b 85       	ldd	r21, Y+11	; 0x0b
    1cea:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <__udivmodsi4>
    1cee:	49 01       	movw	r8, r18
    1cf0:	5a 01       	movw	r10, r20
    1cf2:	0c c0       	rjmp	.+24     	; 0x1d0c <bmp085_getrawpressure+0x20a>
    1cf4:	28 85       	ldd	r18, Y+8	; 0x08
    1cf6:	39 85       	ldd	r19, Y+9	; 0x09
    1cf8:	4a 85       	ldd	r20, Y+10	; 0x0a
    1cfa:	5b 85       	ldd	r21, Y+11	; 0x0b
    1cfc:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <__udivmodsi4>
    1d00:	49 01       	movw	r8, r18
    1d02:	5a 01       	movw	r10, r20
    1d04:	88 0c       	add	r8, r8
    1d06:	99 1c       	adc	r9, r9
    1d08:	aa 1c       	adc	r10, r10
    1d0a:	bb 1c       	adc	r11, r11
	x1 = (p >> 8) * (p >> 8);
    1d0c:	99 27       	eor	r25, r25
    1d0e:	b7 fc       	sbrc	r11, 7
    1d10:	9a 95       	dec	r25
    1d12:	8b 2d       	mov	r24, r11
    1d14:	7a 2d       	mov	r23, r10
    1d16:	69 2d       	mov	r22, r9
    1d18:	9b 01       	movw	r18, r22
    1d1a:	ac 01       	movw	r20, r24
    1d1c:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <__mulsi3>
    1d20:	9b 01       	movw	r18, r22
    1d22:	ac 01       	movw	r20, r24
	x1 = (x1 * 3038) >> 16;
    1d24:	ae ed       	ldi	r26, 0xDE	; 222
    1d26:	bb e0       	ldi	r27, 0x0B	; 11
    1d28:	0e 94 9b 15 	call	0x2b36	; 0x2b36 <__muluhisi3>
    1d2c:	6c 01       	movw	r12, r24
    1d2e:	ff 24       	eor	r15, r15
    1d30:	d7 fc       	sbrc	r13, 7
    1d32:	f0 94       	com	r15
    1d34:	ef 2c       	mov	r14, r15
	x2 = (-7357 * p) >> 16;
    1d36:	a3 e4       	ldi	r26, 0x43	; 67
    1d38:	b3 ee       	ldi	r27, 0xE3	; 227
    1d3a:	a5 01       	movw	r20, r10
    1d3c:	94 01       	movw	r18, r8
    1d3e:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <__mulohisi3>
    1d42:	bb 27       	eor	r27, r27
    1d44:	97 fd       	sbrc	r25, 7
    1d46:	b0 95       	com	r27
    1d48:	ab 2f       	mov	r26, r27
	bmp085_rawpressure = p + ((x1 + x2 + 3791) >> 4);
    1d4a:	c8 0e       	add	r12, r24
    1d4c:	d9 1e       	adc	r13, r25
    1d4e:	ea 1e       	adc	r14, r26
    1d50:	fb 1e       	adc	r15, r27
    1d52:	9f ec       	ldi	r25, 0xCF	; 207
    1d54:	c9 0e       	add	r12, r25
    1d56:	9e e0       	ldi	r25, 0x0E	; 14
    1d58:	d9 1e       	adc	r13, r25
    1d5a:	e1 1c       	adc	r14, r1
    1d5c:	f1 1c       	adc	r15, r1
    1d5e:	a4 e0       	ldi	r26, 0x04	; 4
    1d60:	f5 94       	asr	r15
    1d62:	e7 94       	ror	r14
    1d64:	d7 94       	ror	r13
    1d66:	c7 94       	ror	r12
    1d68:	aa 95       	dec	r26
    1d6a:	d1 f7       	brne	.-12     	; 0x1d60 <bmp085_getrawpressure+0x25e>
    1d6c:	c8 0c       	add	r12, r8
    1d6e:	d9 1c       	adc	r13, r9
    1d70:	ea 1c       	adc	r14, r10
    1d72:	fb 1c       	adc	r15, r11
    1d74:	c0 92 c1 02 	sts	0x02C1, r12
    1d78:	d0 92 c2 02 	sts	0x02C2, r13
    1d7c:	e0 92 c3 02 	sts	0x02C3, r14
    1d80:	f0 92 c4 02 	sts	0x02C4, r15

	#if BMP085_FILTERPRESSURE == 1
	bmp085_rawpressure = bmp085_avaragefilter(bmp085_rawpressure);
    1d84:	c7 01       	movw	r24, r14
    1d86:	b6 01       	movw	r22, r12
    1d88:	0e 94 16 0c 	call	0x182c	; 0x182c <bmp085_avaragefilter>
    1d8c:	60 93 c1 02 	sts	0x02C1, r22
    1d90:	70 93 c2 02 	sts	0x02C2, r23
    1d94:	80 93 c3 02 	sts	0x02C3, r24
    1d98:	90 93 c4 02 	sts	0x02C4, r25
	#endif
}
    1d9c:	2b 96       	adiw	r28, 0x0b	; 11
    1d9e:	0f b6       	in	r0, 0x3f	; 63
    1da0:	f8 94       	cli
    1da2:	de bf       	out	0x3e, r29	; 62
    1da4:	0f be       	out	0x3f, r0	; 63
    1da6:	cd bf       	out	0x3d, r28	; 61
    1da8:	df 91       	pop	r29
    1daa:	cf 91       	pop	r28
    1dac:	ff 90       	pop	r15
    1dae:	ef 90       	pop	r14
    1db0:	df 90       	pop	r13
    1db2:	cf 90       	pop	r12
    1db4:	bf 90       	pop	r11
    1db6:	af 90       	pop	r10
    1db8:	9f 90       	pop	r9
    1dba:	8f 90       	pop	r8
    1dbc:	7f 90       	pop	r7
    1dbe:	6f 90       	pop	r6
    1dc0:	5f 90       	pop	r5
    1dc2:	4f 90       	pop	r4
    1dc4:	08 95       	ret

00001dc6 <bmp085_gettemperature>:

/*
 * get celsius temperature
 */
double bmp085_gettemperature() {
	bmp085_getrawtemperature();
    1dc6:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <bmp085_getrawtemperature>
	double temperature = ((bmp085_rawtemperature + 8)>>4);
    1dca:	60 91 cb 02 	lds	r22, 0x02CB
    1dce:	70 91 cc 02 	lds	r23, 0x02CC
    1dd2:	80 91 cd 02 	lds	r24, 0x02CD
    1dd6:	90 91 ce 02 	lds	r25, 0x02CE
    1dda:	68 5f       	subi	r22, 0xF8	; 248
    1ddc:	7f 4f       	sbci	r23, 0xFF	; 255
    1dde:	8f 4f       	sbci	r24, 0xFF	; 255
    1de0:	9f 4f       	sbci	r25, 0xFF	; 255
    1de2:	a4 e0       	ldi	r26, 0x04	; 4
    1de4:	95 95       	asr	r25
    1de6:	87 95       	ror	r24
    1de8:	77 95       	ror	r23
    1dea:	67 95       	ror	r22
    1dec:	aa 95       	dec	r26
    1dee:	d1 f7       	brne	.-12     	; 0x1de4 <bmp085_gettemperature+0x1e>
    1df0:	0e 94 91 16 	call	0x2d22	; 0x2d22 <__floatsisf>
	temperature = temperature /10;
    1df4:	20 e0       	ldi	r18, 0x00	; 0
    1df6:	30 e0       	ldi	r19, 0x00	; 0
    1df8:	40 e2       	ldi	r20, 0x20	; 32
    1dfa:	51 e4       	ldi	r21, 0x41	; 65
    1dfc:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <__divsf3>
	return temperature;
}
    1e00:	08 95       	ret

00001e02 <bmp085_getpressure>:

/*
 * get pressure
 */
int32_t bmp085_getpressure() {
	bmp085_getrawpressure();
    1e02:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <bmp085_getrawpressure>
	return bmp085_rawpressure + BMP085_UNITPAOFFSET;
    1e06:	60 91 c1 02 	lds	r22, 0x02C1
    1e0a:	70 91 c2 02 	lds	r23, 0x02C2
    1e0e:	80 91 c3 02 	lds	r24, 0x02C3
    1e12:	90 91 c4 02 	lds	r25, 0x02C4
    1e16:	68 5d       	subi	r22, 0xD8	; 216
    1e18:	75 4f       	sbci	r23, 0xF5	; 245
    1e1a:	8f 4f       	sbci	r24, 0xFF	; 255
    1e1c:	9f 4f       	sbci	r25, 0xFF	; 255
}
    1e1e:	08 95       	ret

00001e20 <bmp085_getaltitude>:

/*
 * get altitude
 */
double bmp085_getaltitude() {
	bmp085_getrawpressure();
    1e20:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <bmp085_getrawpressure>
	return ((1 - pow(bmp085_rawpressure/(double)101325, 0.1903 )) / 0.0000225577) + BMP085_UNITMOFFSET;
    1e24:	60 91 c1 02 	lds	r22, 0x02C1
    1e28:	70 91 c2 02 	lds	r23, 0x02C2
    1e2c:	80 91 c3 02 	lds	r24, 0x02C3
    1e30:	90 91 c4 02 	lds	r25, 0x02C4
    1e34:	0e 94 91 16 	call	0x2d22	; 0x2d22 <__floatsisf>
    1e38:	20 e8       	ldi	r18, 0x80	; 128
    1e3a:	36 ee       	ldi	r19, 0xE6	; 230
    1e3c:	45 ec       	ldi	r20, 0xC5	; 197
    1e3e:	57 e4       	ldi	r21, 0x47	; 71
    1e40:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <__divsf3>
    1e44:	21 e0       	ldi	r18, 0x01	; 1
    1e46:	3e ed       	ldi	r19, 0xDE	; 222
    1e48:	42 e4       	ldi	r20, 0x42	; 66
    1e4a:	5e e3       	ldi	r21, 0x3E	; 62
    1e4c:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <pow>
    1e50:	9b 01       	movw	r18, r22
    1e52:	ac 01       	movw	r20, r24
    1e54:	60 e0       	ldi	r22, 0x00	; 0
    1e56:	70 e0       	ldi	r23, 0x00	; 0
    1e58:	80 e8       	ldi	r24, 0x80	; 128
    1e5a:	9f e3       	ldi	r25, 0x3F	; 63
    1e5c:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <__subsf3>
    1e60:	2b e4       	ldi	r18, 0x4B	; 75
    1e62:	3a e3       	ldi	r19, 0x3A	; 58
    1e64:	4d eb       	ldi	r20, 0xBD	; 189
    1e66:	57 e3       	ldi	r21, 0x37	; 55
    1e68:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <__divsf3>
    1e6c:	20 e0       	ldi	r18, 0x00	; 0
    1e6e:	30 e0       	ldi	r19, 0x00	; 0
    1e70:	a9 01       	movw	r20, r18
    1e72:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <__addsf3>
}
    1e76:	08 95       	ret

00001e78 <bmp085_init>:

/*
 * init bmp085
 */
void bmp085_init() {
    1e78:	cf 93       	push	r28
	#if BMP085_I2CINIT == 1
	//init i2c
	i2c_init();
    1e7a:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <i2c_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1e7e:	8a e1       	ldi	r24, 0x1A	; 26
    1e80:	8a 95       	dec	r24
    1e82:	f1 f7       	brne	.-4      	; 0x1e80 <bmp085_init+0x8>
    1e84:	00 c0       	rjmp	.+0      	; 0x1e86 <bmp085_init+0xe>
	_delay_us(10);
	#endif

	bmp085_getcalibration(); //get calibration data
    1e86:	0e 94 4a 0c 	call	0x1894	; 0x1894 <bmp085_getcalibration>
	bmp085_getrawtemperature(); //update raw temperature, at least the first time
    1e8a:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <bmp085_getrawtemperature>
    1e8e:	c5 e1       	ldi	r28, 0x15	; 21

	#if BMP085_FILTERPRESSURE == 1
	//initialize the avarage filter
	uint8_t i=0;
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
		bmp085_getrawpressure();
    1e90:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <bmp085_getrawpressure>
    1e94:	c1 50       	subi	r28, 0x01	; 1
	bmp085_getrawtemperature(); //update raw temperature, at least the first time

	#if BMP085_FILTERPRESSURE == 1
	//initialize the avarage filter
	uint8_t i=0;
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
    1e96:	e1 f7       	brne	.-8      	; 0x1e90 <bmp085_init+0x18>
		bmp085_getrawpressure();
	}
	#endif
}
    1e98:	cf 91       	pop	r28
    1e9a:	08 95       	ret

00001e9c <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
    1e9c:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    1ea0:	80 e2       	ldi	r24, 0x20	; 32
    1ea2:	80 93 b8 00 	sts	0x00B8, r24
    1ea6:	08 95       	ret

00001ea8 <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    1ea8:	94 ea       	ldi	r25, 0xA4	; 164
    1eaa:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    1eae:	90 91 bc 00 	lds	r25, 0x00BC
    1eb2:	97 ff       	sbrs	r25, 7
    1eb4:	fc cf       	rjmp	.-8      	; 0x1eae <i2c_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    1eb6:	90 91 b9 00 	lds	r25, 0x00B9
    1eba:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    1ebc:	98 30       	cpi	r25, 0x08	; 8
    1ebe:	21 f0       	breq	.+8      	; 0x1ec8 <i2c_start+0x20>
    1ec0:	90 31       	cpi	r25, 0x10	; 16
    1ec2:	11 f0       	breq	.+4      	; 0x1ec8 <i2c_start+0x20>
    1ec4:	81 e0       	ldi	r24, 0x01	; 1
    1ec6:	08 95       	ret

	// send device address
	TWDR = address;
    1ec8:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    1ecc:	84 e8       	ldi	r24, 0x84	; 132
    1ece:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    1ed2:	80 91 bc 00 	lds	r24, 0x00BC
    1ed6:	87 ff       	sbrs	r24, 7
    1ed8:	fc cf       	rjmp	.-8      	; 0x1ed2 <i2c_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    1eda:	80 91 b9 00 	lds	r24, 0x00B9
    1ede:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
    1ee0:	88 31       	cpi	r24, 0x18	; 24
    1ee2:	11 f0       	breq	.+4      	; 0x1ee8 <i2c_start+0x40>
    1ee4:	80 34       	cpi	r24, 0x40	; 64
    1ee6:	71 f7       	brne	.-36     	; 0x1ec4 <i2c_start+0x1c>

	return 0;
    1ee8:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
    1eea:	08 95       	ret

00001eec <i2c_start_wait>:


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    1eec:	24 ea       	ldi	r18, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    1eee:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    1ef0:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    1ef2:	20 93 bc 00 	sts	0x00BC, r18
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    1ef6:	90 91 bc 00 	lds	r25, 0x00BC
    1efa:	97 ff       	sbrs	r25, 7
    1efc:	fc cf       	rjmp	.-8      	; 0x1ef6 <i2c_start_wait+0xa>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    1efe:	90 91 b9 00 	lds	r25, 0x00B9
    1f02:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    1f04:	98 30       	cpi	r25, 0x08	; 8
    1f06:	11 f0       	breq	.+4      	; 0x1f0c <i2c_start_wait+0x20>
    1f08:	90 31       	cpi	r25, 0x10	; 16
    1f0a:	99 f7       	brne	.-26     	; 0x1ef2 <i2c_start_wait+0x6>
    
    	// send device address
    	TWDR = address;
    1f0c:	80 93 bb 00 	sts	0x00BB, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
    1f10:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    1f14:	90 91 bc 00 	lds	r25, 0x00BC
    1f18:	97 ff       	sbrs	r25, 7
    1f1a:	fc cf       	rjmp	.-8      	; 0x1f14 <i2c_start_wait+0x28>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    1f1c:	90 91 b9 00 	lds	r25, 0x00B9
    1f20:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    1f22:	90 32       	cpi	r25, 0x20	; 32
    1f24:	11 f0       	breq	.+4      	; 0x1f2a <i2c_start_wait+0x3e>
    1f26:	98 35       	cpi	r25, 0x58	; 88
    1f28:	39 f4       	brne	.+14     	; 0x1f38 <i2c_start_wait+0x4c>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    1f2a:	40 93 bc 00 	sts	0x00BC, r20
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
    1f2e:	90 91 bc 00 	lds	r25, 0x00BC
    1f32:	94 fd       	sbrc	r25, 4
    1f34:	fc cf       	rjmp	.-8      	; 0x1f2e <i2c_start_wait+0x42>
    1f36:	dd cf       	rjmp	.-70     	; 0x1ef2 <i2c_start_wait+0x6>
    1f38:	08 95       	ret

00001f3a <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
    1f3a:	0c 94 54 0f 	jmp	0x1ea8	; 0x1ea8 <i2c_start>

00001f3e <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    1f3e:	84 e9       	ldi	r24, 0x94	; 148
    1f40:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    1f44:	80 91 bc 00 	lds	r24, 0x00BC
    1f48:	84 fd       	sbrc	r24, 4
    1f4a:	fc cf       	rjmp	.-8      	; 0x1f44 <i2c_stop+0x6>

}/* i2c_stop */
    1f4c:	08 95       	ret

00001f4e <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    1f4e:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    1f52:	84 e8       	ldi	r24, 0x84	; 132
    1f54:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    1f58:	80 91 bc 00 	lds	r24, 0x00BC
    1f5c:	87 ff       	sbrs	r24, 7
    1f5e:	fc cf       	rjmp	.-8      	; 0x1f58 <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    1f60:	90 91 b9 00 	lds	r25, 0x00B9
    1f64:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    1f66:	81 e0       	ldi	r24, 0x01	; 1
    1f68:	98 32       	cpi	r25, 0x28	; 40
    1f6a:	09 f4       	brne	.+2      	; 0x1f6e <i2c_write+0x20>
    1f6c:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
    1f6e:	08 95       	ret

00001f70 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    1f70:	84 ec       	ldi	r24, 0xC4	; 196
    1f72:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
    1f76:	80 91 bc 00 	lds	r24, 0x00BC
    1f7a:	87 ff       	sbrs	r24, 7
    1f7c:	fc cf       	rjmp	.-8      	; 0x1f76 <i2c_readAck+0x6>

    return TWDR;
    1f7e:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
    1f82:	08 95       	ret

00001f84 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    1f84:	84 e8       	ldi	r24, 0x84	; 132
    1f86:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    1f8a:	80 91 bc 00 	lds	r24, 0x00BC
    1f8e:	87 ff       	sbrs	r24, 7
    1f90:	fc cf       	rjmp	.-8      	; 0x1f8a <i2c_readNak+0x6>
	
    return TWDR;
    1f92:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
    1f96:	08 95       	ret

00001f98 <main>:
	uint8_t i, num_sensors, device, page, mode, pos, tmp, up_held, dn_held;
	uint16_t bitmap;
//	DS2415_date_t dt;	// date structure for RTC

	// set unused I/O to input and enable pull-ups;
	DDRC = 0;	// all of port C is unused
    1f98:	17 b8       	out	0x07, r1	; 7
	PORTC = 0x0f;
    1f9a:	8f e0       	ldi	r24, 0x0F	; 15
    1f9c:	88 b9       	out	0x08, r24	; 8
#if defined(__AVR_ATmega168__)
	DDRD &= ~(1 << PD7);
    1f9e:	57 98       	cbi	0x0a, 7	; 10
	PORTD |= (1 << PD7);
    1fa0:	5f 9a       	sbi	0x0b, 7	; 11
#else
#error "Unknown target device"
#endif
	
	// enable our push buttons
	DDRB &= ~(1 << PB7);	// set for input - button 1
    1fa2:	27 98       	cbi	0x04, 7	; 4
	PORTB |= (1 << PB7);	// enable pull-up
    1fa4:	2f 9a       	sbi	0x05, 7	; 5
	DDRD &= ~((1 << PD2) | (1 << PD3) | (1 << PD4));	// buttons 2,3,4
    1fa6:	8a b1       	in	r24, 0x0a	; 10
    1fa8:	83 7e       	andi	r24, 0xE3	; 227
    1faa:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << PD2) | (1 << PD3) | (1 << PD4);
    1fac:	8b b1       	in	r24, 0x0b	; 11
    1fae:	8c 61       	ori	r24, 0x1C	; 28
    1fb0:	8b b9       	out	0x0b, r24	; 11

	// set up PWM for LCD backlight control
#if defined(__AVR_ATmega168__)
#define PWM_OUT OCR0B
	DDRD |= _BV( PD5);	// OC0B pin as output
    1fb2:	55 9a       	sbi	0x0a, 5	; 10
	TCCR0A = _BV( WGM00) | _BV( WGM01) | _BV( COM0B1);	// Fast PWM, CTC+TOP
    1fb4:	83 e2       	ldi	r24, 0x23	; 35
    1fb6:	84 bd       	out	0x24, r24	; 36
	TCCR0B = _BV( CS01);	// 1/8 prescale
    1fb8:	82 e0       	ldi	r24, 0x02	; 2
    1fba:	85 bd       	out	0x25, r24	; 37
	DDRD |= _BV( PD7);	// OC2 pin as output
	TCCR2 = _BV( WGM20) | _BV( WGM21) | _BV( COM21) | _BV( CS21);	// fast PWM, CTC+TOP, 1/8 prescale
#else
#error "Unknown target device"
#endif
	PWM_OUT = gBacklight = eeprom_read_byte( &nvBacklight);	// grab our persistant data
    1fbc:	89 e4       	ldi	r24, 0x49	; 73
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	0e 94 6b 1b 	call	0x36d6	; 0x36d6 <__eerd_byte_m168>
    1fc4:	80 93 a1 02 	sts	0x02A1, r24
    1fc8:	88 bd       	out	0x28, r24	; 40

	// set up the elapsed timer
	OCR1A = F_CPU / TMR_TICK;	// timer = 5 msec
    1fca:	80 e4       	ldi	r24, 0x40	; 64
    1fcc:	9c e9       	ldi	r25, 0x9C	; 156
    1fce:	90 93 89 00 	sts	0x0089, r25
    1fd2:	80 93 88 00 	sts	0x0088, r24
	TCCR1B = _BV( WGM12) + _BV( CS10);	// clear timer on compare match, no prescaler
    1fd6:	89 e0       	ldi	r24, 0x09	; 9
    1fd8:	80 93 81 00 	sts	0x0081, r24

	sei();	// enable global interrupts
    1fdc:	78 94       	sei
	
	// load userdefined characters from program memory
	// into LCD controller CG RAM
	lcd_init( LCD_DISP_ON);
    1fde:	8c e0       	ldi	r24, 0x0C	; 12
    1fe0:	0e 94 05 08 	call	0x100a	; 0x100a <lcd_init>
	lcd_command( _BV( LCD_CGRAM));	/* set CG RAM start address 0 */
    1fe4:	80 e4       	ldi	r24, 0x40	; 64
    1fe6:	0e 94 8d 07 	call	0xf1a	; 0xf1a <lcd_command>
    1fea:	c1 e1       	ldi	r28, 0x11	; 17
    1fec:	d3 e0       	ldi	r29, 0x03	; 3
	for( i = 0; i < (sizeof lcdChars / sizeof lcdChars[0]); i++)
		lcd_data( pgm_read_byte_near( &lcdChars[i]));
    1fee:	fe 01       	movw	r30, r28
    1ff0:	84 91       	lpm	r24, Z
    1ff2:	0e 94 96 07 	call	0xf2c	; 0xf2c <lcd_data>
    1ff6:	21 96       	adiw	r28, 0x01	; 1
	
	// load userdefined characters from program memory
	// into LCD controller CG RAM
	lcd_init( LCD_DISP_ON);
	lcd_command( _BV( LCD_CGRAM));	/* set CG RAM start address 0 */
	for( i = 0; i < (sizeof lcdChars / sizeof lcdChars[0]); i++)
    1ff8:	f3 e0       	ldi	r31, 0x03	; 3
    1ffa:	c1 32       	cpi	r28, 0x21	; 33
    1ffc:	df 07       	cpc	r29, r31
    1ffe:	b9 f7       	brne	.-18     	; 0x1fee <main+0x56>
		lcd_data( pgm_read_byte_near( &lcdChars[i]));
	lcd_clrscr();
    2000:	0e 94 b2 07 	call	0xf64	; 0xf64 <lcd_clrscr>

	// set up the comm port
	uart_init( UART_BAUD_SELECT( BAUD, F_CPU));
    2004:	89 e1       	ldi	r24, 0x19	; 25
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	0e 94 b7 09 	call	0x136e	; 0x136e <uart_init>
	
	// set up bmp085board
	bmp085_init();
    200c:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <bmp085_init>

	// announce our birth
	uart_puts_P( "DS1820,BMP180 Logger v" MAJOR_VER "." MINOR_VER "\r");
    2010:	85 ef       	ldi	r24, 0xF5	; 245
    2012:	92 e0       	ldi	r25, 0x02	; 2
    2014:	0e 94 0f 0a 	call	0x141e	; 0x141e <uart_puts_p>
	lcd_gotoxy( 0, 0);
    2018:	60 e0       	ldi	r22, 0x00	; 0
    201a:	80 e0       	ldi	r24, 0x00	; 0
    201c:	0e 94 9f 07 	call	0xf3e	; 0xf3e <lcd_gotoxy>
	lcd_puts_P( "DS18x20 Logger v" MAJOR_VER "." MINOR_VER "\r");
    2020:	8f ed       	ldi	r24, 0xDF	; 223
    2022:	92 e0       	ldi	r25, 0x02	; 2
    2024:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <lcd_puts_p>
	//lcd_gotoxy( 0, 1);
	lcd_puts_P( "   BMP180 Logger");
    2028:	8e ec       	ldi	r24, 0xCE	; 206
    202a:	92 e0       	ldi	r25, 0x02	; 2
    202c:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <lcd_puts_p>
	
	delay_ms( 1000);	// pause lcd display for a moment
    2030:	68 e0       	ldi	r22, 0x08	; 8
    2032:	77 e5       	ldi	r23, 0x57	; 87
    2034:	84 e1       	ldi	r24, 0x14	; 20
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	0e 94 3d 06 	call	0xc7a	; 0xc7a <delayloop32>

	// get attached 1-wire sensor info
	num_sensors = onewire_search();
    203c:	0e 94 68 02 	call	0x4d0	; 0x4d0 <onewire_search>
    2040:	38 2e       	mov	r3, r24
	if( num_sensors == 0 && ! gRTC_status) // bolo povodne
    2042:	81 11       	cpse	r24, r1
    2044:	0e c0       	rjmp	.+28     	; 0x2062 <main+0xca>
    2046:	80 91 f5 01 	lds	r24, 0x01F5
    204a:	81 11       	cpse	r24, r1
    204c:	0a c0       	rjmp	.+20     	; 0x2062 <main+0xca>
//	if( num_sensors == 0) 
	{
		lcd_gotoxy( 0, 2);
    204e:	62 e0       	ldi	r22, 0x02	; 2
    2050:	0e 94 9f 07 	call	0xf3e	; 0xf3e <lcd_gotoxy>
		lcd_puts_P( "No DS Sensors Found");
    2054:	8a eb       	ldi	r24, 0xBA	; 186
    2056:	92 e0       	ldi	r25, 0x02	; 2
    2058:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <lcd_puts_p>
		uart_puts_P( "No Sensors Found");
    205c:	89 ea       	ldi	r24, 0xA9	; 169
    205e:	92 e0       	ldi	r25, 0x02	; 2
    2060:	19 c0       	rjmp	.+50     	; 0x2094 <main+0xfc>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    2062:	4a e0       	ldi	r20, 0x0A	; 10
    2064:	62 ea       	ldi	r22, 0xA2	; 162
    2066:	72 e0       	ldi	r23, 0x02	; 2
    2068:	83 2d       	mov	r24, r3
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	0e 94 11 19 	call	0x3222	; 0x3222 <__itoa_ncheck>
	} 
	else
	{
		// display the count of sensors found on 1-Wire bus
		itoa( (int)num_sensors, gBuffer, 10);
		lcd_gotoxy( 0, 2);
    2070:	62 e0       	ldi	r22, 0x02	; 2
    2072:	80 e0       	ldi	r24, 0x00	; 0
    2074:	0e 94 9f 07 	call	0xf3e	; 0xf3e <lcd_gotoxy>
		lcd_puts( gBuffer);
    2078:	82 ea       	ldi	r24, 0xA2	; 162
    207a:	92 e0       	ldi	r25, 0x02	; 2
    207c:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <lcd_puts>
		lcd_puts_P( " Sensor(s)");
    2080:	8e e9       	ldi	r24, 0x9E	; 158
    2082:	92 e0       	ldi	r25, 0x02	; 2
    2084:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <lcd_puts_p>
		uart_puts( gBuffer);
    2088:	82 ea       	ldi	r24, 0xA2	; 162
    208a:	92 e0       	ldi	r25, 0x02	; 2
    208c:	0e 94 03 0a 	call	0x1406	; 0x1406 <uart_puts>
		uart_puts_P( " DS18X20 Sensor(s) available\r");
    2090:	80 e8       	ldi	r24, 0x80	; 128
    2092:	92 e0       	ldi	r25, 0x02	; 2
    2094:	0e 94 0f 0a 	call	0x141e	; 0x141e <uart_puts_p>
	}
	delay_ms( 2000);	// pause lcd display for a moment
    2098:	60 e1       	ldi	r22, 0x10	; 16
    209a:	7e ea       	ldi	r23, 0xAE	; 174
    209c:	88 e2       	ldi	r24, 0x28	; 40
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	0e 94 3d 06 	call	0xc7a	; 0xc7a <delayloop32>
	
	// initialize 1-wire output order from EEPROM.  make sure the order we read in
	// accounts for every sensor number by flipping the corresponding bit for each sensor
	// in the bitmap
	bitmap = 0;
	for( i = 0; i < num_sensors; i++)
    20a4:	80 e0       	ldi	r24, 0x00	; 0
    20a6:	90 e0       	ldi	r25, 0x00	; 0
	
	
	// initialize 1-wire output order from EEPROM.  make sure the order we read in
	// accounts for every sensor number by flipping the corresponding bit for each sensor
	// in the bitmap
	bitmap = 0;
    20a8:	c0 e0       	ldi	r28, 0x00	; 0
    20aa:	d0 e0       	ldi	r29, 0x00	; 0
	for( i = 0; i < num_sensors; i++)
		bitmap |= _BV( i);
    20ac:	21 e0       	ldi	r18, 0x01	; 1
    20ae:	30 e0       	ldi	r19, 0x00	; 0
	
	// initialize 1-wire output order from EEPROM.  make sure the order we read in
	// accounts for every sensor number by flipping the corresponding bit for each sensor
	// in the bitmap
	bitmap = 0;
	for( i = 0; i < num_sensors; i++)
    20b0:	83 15       	cp	r24, r3
    20b2:	58 f4       	brcc	.+22     	; 0x20ca <main+0x132>
		bitmap |= _BV( i);
    20b4:	a9 01       	movw	r20, r18
    20b6:	08 2e       	mov	r0, r24
    20b8:	02 c0       	rjmp	.+4      	; 0x20be <main+0x126>
    20ba:	44 0f       	add	r20, r20
    20bc:	55 1f       	adc	r21, r21
    20be:	0a 94       	dec	r0
    20c0:	e2 f7       	brpl	.-8      	; 0x20ba <main+0x122>
    20c2:	c4 2b       	or	r28, r20
    20c4:	d5 2b       	or	r29, r21
    20c6:	01 96       	adiw	r24, 0x01	; 1
    20c8:	f3 cf       	rjmp	.-26     	; 0x20b0 <main+0x118>
		if( eeprom_read_byte( &nvNum_sensors) == num_sensors)
    20ca:	88 e4       	ldi	r24, 0x48	; 72
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	0e 94 6b 1b 	call	0x36d6	; 0x36d6 <__eerd_byte_m168>
    20d2:	18 2f       	mov	r17, r24
    20d4:	83 11       	cpse	r24, r3
    20d6:	1d c0       	rjmp	.+58     	; 0x2112 <main+0x17a>
		{
		// assume if we have same number of sensors, we want to use the prev. order
		 eeprom_read_block( g1Wire_order, nv1Wire_order, MAX_SENSORS);
    20d8:	48 e0       	ldi	r20, 0x08	; 8
    20da:	50 e0       	ldi	r21, 0x00	; 0
    20dc:	60 e4       	ldi	r22, 0x40	; 64
    20de:	70 e0       	ldi	r23, 0x00	; 0
    20e0:	8f ed       	ldi	r24, 0xDF	; 223
    20e2:	92 e0       	ldi	r25, 0x02	; 2
    20e4:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <__eerd_block_m168>
    20e8:	4f ed       	ldi	r20, 0xDF	; 223
    20ea:	52 e0       	ldi	r21, 0x02	; 2

		// in the order we just loaded, check to see if all sensor
		// numbers were accounted for, by turning off bits in the bitmap
		 for( i = 0; i < num_sensors; i++)
    20ec:	fa 01       	movw	r30, r20
			 bitmap &= ~_BV( g1Wire_order[i]);
    20ee:	61 e0       	ldi	r22, 0x01	; 1
    20f0:	70 e0       	ldi	r23, 0x00	; 0
    20f2:	8e 2f       	mov	r24, r30
    20f4:	84 1b       	sub	r24, r20
		// assume if we have same number of sensors, we want to use the prev. order
		 eeprom_read_block( g1Wire_order, nv1Wire_order, MAX_SENSORS);

		// in the order we just loaded, check to see if all sensor
		// numbers were accounted for, by turning off bits in the bitmap
		 for( i = 0; i < num_sensors; i++)
    20f6:	81 17       	cp	r24, r17
    20f8:	60 f4       	brcc	.+24     	; 0x2112 <main+0x17a>
			 bitmap &= ~_BV( g1Wire_order[i]);
    20fa:	9b 01       	movw	r18, r22
    20fc:	01 90       	ld	r0, Z+
    20fe:	02 c0       	rjmp	.+4      	; 0x2104 <main+0x16c>
    2100:	22 0f       	add	r18, r18
    2102:	33 1f       	adc	r19, r19
    2104:	0a 94       	dec	r0
    2106:	e2 f7       	brpl	.-8      	; 0x2100 <main+0x168>
    2108:	20 95       	com	r18
    210a:	30 95       	com	r19
    210c:	c2 23       	and	r28, r18
    210e:	d3 23       	and	r29, r19
    2110:	f0 cf       	rjmp	.-32     	; 0x20f2 <main+0x15a>
		}

	if( bitmap != 0)	// were any sensors unaccounted for?
    2112:	cd 2b       	or	r28, r29
    2114:	b1 f0       	breq	.+44     	; 0x2142 <main+0x1aa>
	{
		// yes, so load the default order
		eeprom_write_byte( &nvNum_sensors, num_sensors);
    2116:	63 2d       	mov	r22, r3
    2118:	88 e4       	ldi	r24, 0x48	; 72
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	0e 94 83 1b 	call	0x3706	; 0x3706 <__eewr_byte_m168>
    2120:	8f ed       	ldi	r24, 0xDF	; 223
    2122:	92 e0       	ldi	r25, 0x02	; 2
		for( i = 0; i < num_sensors; i++)
    2124:	fc 01       	movw	r30, r24
    2126:	2e 2f       	mov	r18, r30
    2128:	28 1b       	sub	r18, r24
    212a:	23 15       	cp	r18, r3
    212c:	10 f4       	brcc	.+4      	; 0x2132 <main+0x19a>
			g1Wire_order[i] = i;
    212e:	21 93       	st	Z+, r18
    2130:	fa cf       	rjmp	.-12     	; 0x2126 <main+0x18e>
		eeprom_write_block( g1Wire_order, nv1Wire_order, MAX_SENSORS);
    2132:	48 e0       	ldi	r20, 0x08	; 8
    2134:	50 e0       	ldi	r21, 0x00	; 0
    2136:	60 e4       	ldi	r22, 0x40	; 64
    2138:	70 e0       	ldi	r23, 0x00	; 0
    213a:	8f ed       	ldi	r24, 0xDF	; 223
    213c:	92 e0       	ldi	r25, 0x02	; 2
    213e:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__eewr_block_m168>
	}

	// load and sanitize the reading interval from EEPROM
	gLog_interval = eeprom_read_word( &nvLog_interval);
    2142:	8a e4       	ldi	r24, 0x4A	; 74
    2144:	90 e0       	ldi	r25, 0x00	; 0
    2146:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <__eerd_word_m168>
    214a:	90 93 ec 02 	sts	0x02EC, r25
    214e:	80 93 eb 02 	sts	0x02EB, r24
	if( gLog_interval > MAX_INTERVAL || gLog_interval < MIN_INTERVAL)
    2152:	05 97       	sbiw	r24, 0x05	; 5
    2154:	8b 30       	cpi	r24, 0x0B	; 11
    2156:	97 42       	sbci	r25, 0x27	; 39
    2158:	60 f0       	brcs	.+24     	; 0x2172 <main+0x1da>
	{
		gLog_interval = DEF_INTERVAL;  // bola min hodnota
    215a:	8f e0       	ldi	r24, 0x0F	; 15
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	90 93 ec 02 	sts	0x02EC, r25
    2162:	80 93 eb 02 	sts	0x02EB, r24
		eeprom_write_word( &nvLog_interval, gLog_interval);	// save the persistant value
    2166:	6f e0       	ldi	r22, 0x0F	; 15
    2168:	70 e0       	ldi	r23, 0x00	; 0
    216a:	8a e4       	ldi	r24, 0x4A	; 74
    216c:	90 e0       	ldi	r25, 0x00	; 0
    216e:	0e 94 91 1b 	call	0x3722	; 0x3722 <__eewr_word_m168>
	// don't worry about backlight since it's only 1 byte it WILL be between 0 and 255
		
		
	//					 setup for main loop*********************************************
	page = 0;
	lcd_clrscr();
    2172:	0e 94 b2 07 	call	0xf64	; 0xf64 <lcd_clrscr>
	mode = MODE_START;	// first choice 
	TIMSK1 = _BV( OCIE1A);	// enable Output Compare 1 overflow interrupt to start elapsed timer
    2176:	82 e0       	ldi	r24, 0x02	; 2
    2178:	80 93 6f 00 	sts	0x006F, r24
		
	// don't worry about backlight since it's only 1 byte it WILL be between 0 and 255
		
		
	//					 setup for main loop*********************************************
	page = 0;
    217c:	21 2c       	mov	r2, r1
			}
		case MODE_INTERVAL:	// displaying logging interval change******************
			{
				lcd_clrscr();
				lcd_puts_P( "Logging interval\n");
				sprintf( gBuffer, "%4i", gLog_interval);
    217e:	02 ee       	ldi	r16, 0xE2	; 226
    2180:	11 e0       	ldi	r17, 0x01	; 1
    2182:	c2 ea       	ldi	r28, 0xA2	; 162
    2184:	d2 e0       	ldi	r29, 0x02	; 2
					{
						// give a small delay to see if this is a simultaneous press
						delay_ms( CMD_DELAY);
						if( BTN_DOWN) break;	// exit display loop
						// cycle if needed
						if( page + 4 < num_sensors) page += 2; //boli 2 a 2
    2186:	c3 2c       	mov	r12, r3
    2188:	d1 2c       	mov	r13, r1
					lcd_puts( gBuffer);

					if( BTN_UP)	// display next
					{
						// cycle if needed
						if( i < num_sensors - 1) i++;
    218a:	26 01       	movw	r4, r12
    218c:	41 e0       	ldi	r20, 0x01	; 1
    218e:	44 1a       	sub	r4, r20
    2190:	51 08       	sbc	r5, r1
				while( BTN_UP || BTN_DOWN);	// wait until switches released
				break;	// next case
			}
		case MODE_START:	// displaying start logging message**********************
			{
				if( ! num_sensors > 0)
    2192:	33 20       	and	r3, r3
    2194:	09 f4       	brne	.+2      	; 0x2198 <main+0x200>
    2196:	d2 c3       	rjmp	.+1956   	; 0x293c <main+0x9a4>
					{
					// no sensors found so skip all sensor related modes
					mode = MODE_BACKLIGHT;
					break;
					}
				lcd_clrscr();
    2198:	0e 94 b2 07 	call	0xf64	; 0xf64 <lcd_clrscr>
				lcd_puts_P( "Start Logging?\n");
    219c:	80 e7       	ldi	r24, 0x70	; 112
    219e:	92 e0       	ldi	r25, 0x02	; 2
    21a0:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <lcd_puts_p>
				lcd_putc( 0);	// down arrow
    21a4:	80 e0       	ldi	r24, 0x00	; 0
    21a6:	0e 94 b8 07 	call	0xf70	; 0xf70 <lcd_putc>
				lcd_puts_P( " or ");
    21aa:	8b e6       	ldi	r24, 0x6B	; 107
    21ac:	92 e0       	ldi	r25, 0x02	; 2
    21ae:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <lcd_puts_p>
				lcd_putc( 1);	// up arrow
    21b2:	81 e0       	ldi	r24, 0x01	; 1
    21b4:	0e 94 b8 07 	call	0xf70	; 0xf70 <lcd_putc>
				lcd_puts_P( " to start\n\n");
    21b8:	8f e5       	ldi	r24, 0x5F	; 95
    21ba:	92 e0       	ldi	r25, 0x02	; 2
    21bc:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <lcd_puts_p>
				lcd_puts_P( "press MODE to other");
    21c0:	8b e4       	ldi	r24, 0x4B	; 75
    21c2:	92 e0       	ldi	r25, 0x02	; 2
    21c4:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <lcd_puts_p>
				while( ! (BTN_MODE || BTN_UP || BTN_DOWN || BTN_SEL));	// wait for a button press
    21c8:	83 b1       	in	r24, 0x03	; 3
    21ca:	90 e0       	ldi	r25, 0x00	; 0
    21cc:	80 95       	com	r24
    21ce:	90 95       	com	r25
    21d0:	87 fd       	sbrc	r24, 7
    21d2:	12 c0       	rjmp	.+36     	; 0x21f8 <main+0x260>
    21d4:	89 b1       	in	r24, 0x09	; 9
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	80 95       	com	r24
    21da:	90 95       	com	r25
    21dc:	82 fd       	sbrc	r24, 2
    21de:	0c c0       	rjmp	.+24     	; 0x21f8 <main+0x260>
    21e0:	89 b1       	in	r24, 0x09	; 9
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	80 95       	com	r24
    21e6:	90 95       	com	r25
    21e8:	83 fd       	sbrc	r24, 3
    21ea:	06 c0       	rjmp	.+12     	; 0x21f8 <main+0x260>
    21ec:	89 b1       	in	r24, 0x09	; 9
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	80 95       	com	r24
    21f2:	90 95       	com	r25
    21f4:	84 ff       	sbrs	r24, 4
    21f6:	e8 cf       	rjmp	.-48     	; 0x21c8 <main+0x230>
				// if mode button pressed, change to next state
				if( BTN_MODE)
    21f8:	83 b1       	in	r24, 0x03	; 3
    21fa:	90 e0       	ldi	r25, 0x00	; 0
    21fc:	80 95       	com	r24
    21fe:	90 95       	com	r25
    2200:	87 ff       	sbrs	r24, 7
    2202:	09 c0       	rjmp	.+18     	; 0x2216 <main+0x27e>
					{
					lcd_clrscr();	// provide feedback on button push
    2204:	0e 94 b2 07 	call	0xf64	; 0xf64 <lcd_clrscr>
					mode = MODE_ORDER;
					while( BTN_MODE);	// wait for release
    2208:	83 b1       	in	r24, 0x03	; 3
    220a:	90 e0       	ldi	r25, 0x00	; 0
    220c:	80 95       	com	r24
    220e:	90 95       	com	r25
    2210:	87 fd       	sbrc	r24, 7
    2212:	fa cf       	rjmp	.-12     	; 0x2208 <main+0x270>
    2214:	1f c1       	rjmp	.+574    	; 0x2454 <main+0x4bc>
					}
				else	// any other button, start logging
					{
						lcd_clrscr();	// provide feedback on button push
    2216:	0e 94 b2 07 	call	0xf64	; 0xf64 <lcd_clrscr>
						mode = MODE_LOGGING;
						while( BTN_UP || BTN_DOWN || BTN_SEL);	// wait for release
    221a:	89 b1       	in	r24, 0x09	; 9
    221c:	90 e0       	ldi	r25, 0x00	; 0
    221e:	80 95       	com	r24
    2220:	90 95       	com	r25
    2222:	82 fd       	sbrc	r24, 2
    2224:	fa cf       	rjmp	.-12     	; 0x221a <main+0x282>
    2226:	89 b1       	in	r24, 0x09	; 9
    2228:	90 e0       	ldi	r25, 0x00	; 0
    222a:	80 95       	com	r24
    222c:	90 95       	com	r25
    222e:	83 fd       	sbrc	r24, 3
    2230:	f4 cf       	rjmp	.-24     	; 0x221a <main+0x282>
    2232:	89 b1       	in	r24, 0x09	; 9
    2234:	90 e0       	ldi	r25, 0x00	; 0
    2236:	80 95       	com	r24
    2238:	90 95       	com	r25
    223a:	84 fd       	sbrc	r24, 4
    223c:	ee cf       	rjmp	.-36     	; 0x221a <main+0x282>
								// send the extended sensor info out the comm port
						uart_puts_P( "\r\r");
    223e:	88 e4       	ldi	r24, 0x48	; 72
    2240:	92 e0       	ldi	r25, 0x02	; 2
    2242:	0e 94 0f 0a 	call	0x141e	; 0x141e <uart_puts_p>
    2246:	7f ed       	ldi	r23, 0xDF	; 223
    2248:	a7 2e       	mov	r10, r23
    224a:	72 e0       	ldi	r23, 0x02	; 2
    224c:	b7 2e       	mov	r11, r23
						for( i = 0; i < num_sensors; i++)
    224e:	e1 2c       	mov	r14, r1
    2250:	f1 2c       	mov	r15, r1
    2252:	e3 14       	cp	r14, r3
    2254:	d8 f5       	brcc	.+118    	; 0x22cc <main+0x334>
    2256:	35 01       	movw	r6, r10
							{
							device = g1Wire_order[i];
    2258:	f5 01       	movw	r30, r10
    225a:	81 90       	ld	r8, Z+
    225c:	5f 01       	movw	r10, r30
							uart_puts_P( "Sensor Display");
    225e:	89 e3       	ldi	r24, 0x39	; 57
    2260:	92 e0       	ldi	r25, 0x02	; 2
    2262:	0e 94 0f 0a 	call	0x141e	; 0x141e <uart_puts_p>
							uart_puti( (int)i);
    2266:	c7 01       	movw	r24, r14
    2268:	0e 94 1e 0a 	call	0x143c	; 0x143c <uart_puti>
							uart_puts_P( " / Bus");
    226c:	82 e3       	ldi	r24, 0x32	; 50
    226e:	92 e0       	ldi	r25, 0x02	; 2
    2270:	0e 94 0f 0a 	call	0x141e	; 0x141e <uart_puts_p>
							uart_puti( g1Wire_order[i]);
    2274:	f3 01       	movw	r30, r6
    2276:	80 81       	ld	r24, Z
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	0e 94 1e 0a 	call	0x143c	; 0x143c <uart_puti>
							uart_puts_P( " is a ");
    227e:	8b e2       	ldi	r24, 0x2B	; 43
    2280:	92 e0       	ldi	r25, 0x02	; 2
    2282:	0e 94 0f 0a 	call	0x141e	; 0x141e <uart_puts_p>
							if( OWI_FAMILY( gSensorIDs[device][0]) == DS18S20_FAMILY_CODE)
    2286:	f8 e0       	ldi	r31, 0x08	; 8
    2288:	8f 9e       	mul	r8, r31
    228a:	40 01       	movw	r8, r0
    228c:	11 24       	eor	r1, r1
    228e:	f4 01       	movw	r30, r8
    2290:	ed 50       	subi	r30, 0x0D	; 13
    2292:	fd 4f       	sbci	r31, 0xFD	; 253
    2294:	80 81       	ld	r24, Z
    2296:	8f 77       	andi	r24, 0x7F	; 127
    2298:	80 31       	cpi	r24, 0x10	; 16
    229a:	19 f4       	brne	.+6      	; 0x22a2 <main+0x30a>
									uart_puts_P( "DS18S20/DS1820");
    229c:	8c e1       	ldi	r24, 0x1C	; 28
    229e:	92 e0       	ldi	r25, 0x02	; 2
    22a0:	02 c0       	rjmp	.+4      	; 0x22a6 <main+0x30e>
							else uart_puts_P( "DS18B20");
    22a2:	84 e1       	ldi	r24, 0x14	; 20
    22a4:	92 e0       	ldi	r25, 0x02	; 2
    22a6:	0e 94 0f 0a 	call	0x141e	; 0x141e <uart_puts_p>
							uart_puts_P( " = ");
    22aa:	80 e1       	ldi	r24, 0x10	; 16
    22ac:	92 e0       	ldi	r25, 0x02	; 2
    22ae:	0e 94 0f 0a 	call	0x141e	; 0x141e <uart_puts_p>
							show_id_uart( &gSensorIDs[device][0]);
    22b2:	c4 01       	movw	r24, r8
    22b4:	8d 50       	subi	r24, 0x0D	; 13
    22b6:	9d 4f       	sbci	r25, 0xFD	; 253
    22b8:	0e 94 77 05 	call	0xaee	; 0xaee <show_id_uart>
							uart_puts_P("\r");
    22bc:	8e e0       	ldi	r24, 0x0E	; 14
    22be:	92 e0       	ldi	r25, 0x02	; 2
    22c0:	0e 94 0f 0a 	call	0x141e	; 0x141e <uart_puts_p>
    22c4:	2f ef       	ldi	r18, 0xFF	; 255
    22c6:	e2 1a       	sub	r14, r18
    22c8:	f2 0a       	sbc	r15, r18
    22ca:	c3 cf       	rjmp	.-122    	; 0x2252 <main+0x2ba>
							}
						uart_puts_P( "\r\r");
    22cc:	8b e0       	ldi	r24, 0x0B	; 11
    22ce:	92 e0       	ldi	r25, 0x02	; 2
    22d0:	0e 94 0f 0a 	call	0x141e	; 0x141e <uart_puts_p>
							// if no RTC clock present, reset the elapsed timer
						if( ! gRTC_status)
    22d4:	80 91 f5 01 	lds	r24, 0x01F5
    22d8:	81 11       	cpse	r24, r1
    22da:	08 c0       	rjmp	.+16     	; 0x22ec <main+0x354>
									gRTC_clk = 0;
    22dc:	10 92 f1 01 	sts	0x01F1, r1
    22e0:	10 92 f2 01 	sts	0x01F2, r1
    22e4:	10 92 f3 01 	sts	0x01F3, r1
    22e8:	10 92 f4 01 	sts	0x01F4, r1
						lcd_clrscr();
    22ec:	0e 94 b2 07 	call	0xf64	; 0xf64 <lcd_clrscr>
						read_temperatures( num_sensors);
    22f0:	83 2d       	mov	r24, r3
    22f2:	0e 94 3e 05 	call	0xa7c	; 0xa7c <read_temperatures>
						log_temperatures( num_sensors);
    22f6:	83 2d       	mov	r24, r3
    22f8:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <log_temperatures>
						display_temperatures( num_sensors, page);
    22fc:	62 2d       	mov	r22, r2
    22fe:	83 2d       	mov	r24, r3
    2300:	0e 94 18 03 	call	0x630	; 0x630 <display_temperatures>
						gElapsed = 0;	// restart the interval timer
    2304:	10 92 f0 01 	sts	0x01F0, r1
    2308:	10 92 ef 01 	sts	0x01EF, r1
							gElapsed = 0;	// restart the interval timer
						}
						// update the countdown.
						// else use the pseudo elapsed time counter
						lcd_gotoxy( 15, 0);
						sprintf( gBuffer, "%4is", gLog_interval - gElapsed);
    230c:	6d ed       	ldi	r22, 0xDD	; 221
    230e:	e6 2e       	mov	r14, r22
    2310:	61 e0       	ldi	r22, 0x01	; 1
    2312:	f6 2e       	mov	r15, r22
						// give a small delay to see if this is a simultaneous press
						delay_ms( CMD_DELAY);
						if( BTN_UP) break;	// exit display loop
						// cycle if needed
						if( page >= 4) page -= 2;          // if( page >= 2) page -= 2;
						else page = ((num_sensors - 1) >> 1) << 1; // bitovy posun - nasobenie
    2314:	bb 24       	eor	r11, r11
    2316:	ba 94       	dec	r11
    2318:	b3 0c       	add	r11, r3
    231a:	4b 2d       	mov	r20, r11
    231c:	4e 7f       	andi	r20, 0xFE	; 254
    231e:	b4 2e       	mov	r11, r20
		{
		case MODE_LOGGING:	// actively reading and logging temperatures***********
			{
				while( true)	// display loop
				{
					if( BTN_DOWN)	//vyhodnotenie stavu PINu - show previous 2 readings on LCD
    2320:	89 b1       	in	r24, 0x09	; 9
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	80 95       	com	r24
    2326:	90 95       	com	r25
    2328:	83 ff       	sbrs	r24, 3
    232a:	20 c0       	rjmp	.+64     	; 0x236c <main+0x3d4>
					{
						// give a small delay to see if this is a simultaneous press
						delay_ms( CMD_DELAY);
    232c:	68 e6       	ldi	r22, 0x68	; 104
    232e:	71 e1       	ldi	r23, 0x11	; 17
    2330:	84 e0       	ldi	r24, 0x04	; 4
    2332:	90 e0       	ldi	r25, 0x00	; 0
    2334:	0e 94 3d 06 	call	0xc7a	; 0xc7a <delayloop32>
						if( BTN_UP) break;	// exit display loop
    2338:	89 b1       	in	r24, 0x09	; 9
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	80 95       	com	r24
    233e:	90 95       	com	r25
    2340:	82 fd       	sbrc	r24, 2
    2342:	79 c0       	rjmp	.+242    	; 0x2436 <main+0x49e>
						// cycle if needed
						if( page >= 4) page -= 2;          // if( page >= 2) page -= 2;
    2344:	e3 e0       	ldi	r30, 0x03	; 3
    2346:	e2 15       	cp	r30, r2
    2348:	18 f4       	brcc	.+6      	; 0x2350 <main+0x3b8>
    234a:	2a 94       	dec	r2
    234c:	2a 94       	dec	r2
    234e:	01 c0       	rjmp	.+2      	; 0x2352 <main+0x3ba>
						else page = ((num_sensors - 1) >> 1) << 1; // bitovy posun - nasobenie
    2350:	2b 2c       	mov	r2, r11
						lcd_clrscr();
    2352:	0e 94 b2 07 	call	0xf64	; 0xf64 <lcd_clrscr>
						display_temperatures( num_sensors, page);
    2356:	62 2d       	mov	r22, r2
    2358:	83 2d       	mov	r24, r3
    235a:	0e 94 18 03 	call	0x630	; 0x630 <display_temperatures>
						while( BTN_DOWN);	// wait until switch released
    235e:	89 b1       	in	r24, 0x09	; 9
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	80 95       	com	r24
    2364:	90 95       	com	r25
    2366:	83 fd       	sbrc	r24, 3
    2368:	fa cf       	rjmp	.-12     	; 0x235e <main+0x3c6>
    236a:	da cf       	rjmp	.-76     	; 0x2320 <main+0x388>
					}
					else if( BTN_UP)	// show next 2-4 readings on LCD
    236c:	89 b1       	in	r24, 0x09	; 9
    236e:	90 e0       	ldi	r25, 0x00	; 0
    2370:	80 95       	com	r24
    2372:	90 95       	com	r25
    2374:	82 ff       	sbrs	r24, 2
    2376:	23 c0       	rjmp	.+70     	; 0x23be <main+0x426>
					{
						// give a small delay to see if this is a simultaneous press
						delay_ms( CMD_DELAY);
    2378:	68 e6       	ldi	r22, 0x68	; 104
    237a:	71 e1       	ldi	r23, 0x11	; 17
    237c:	84 e0       	ldi	r24, 0x04	; 4
    237e:	90 e0       	ldi	r25, 0x00	; 0
    2380:	0e 94 3d 06 	call	0xc7a	; 0xc7a <delayloop32>
						if( BTN_DOWN) break;	// exit display loop
    2384:	89 b1       	in	r24, 0x09	; 9
    2386:	90 e0       	ldi	r25, 0x00	; 0
    2388:	80 95       	com	r24
    238a:	90 95       	com	r25
    238c:	83 fd       	sbrc	r24, 3
    238e:	53 c0       	rjmp	.+166    	; 0x2436 <main+0x49e>
						// cycle if needed
						if( page + 4 < num_sensors) page += 2; //boli 2 a 2
    2390:	82 2d       	mov	r24, r2
    2392:	90 e0       	ldi	r25, 0x00	; 0
    2394:	04 96       	adiw	r24, 0x04	; 4
    2396:	8c 15       	cp	r24, r12
    2398:	9d 05       	cpc	r25, r13
    239a:	1c f4       	brge	.+6      	; 0x23a2 <main+0x40a>
    239c:	23 94       	inc	r2
    239e:	23 94       	inc	r2
    23a0:	01 c0       	rjmp	.+2      	; 0x23a4 <main+0x40c>
						else page = 0;
    23a2:	21 2c       	mov	r2, r1
						lcd_clrscr();
    23a4:	0e 94 b2 07 	call	0xf64	; 0xf64 <lcd_clrscr>
						display_temperatures( num_sensors, page);
    23a8:	62 2d       	mov	r22, r2
    23aa:	83 2d       	mov	r24, r3
    23ac:	0e 94 18 03 	call	0x630	; 0x630 <display_temperatures>
						while( BTN_UP);	// wait until switch released
    23b0:	89 b1       	in	r24, 0x09	; 9
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	80 95       	com	r24
    23b6:	90 95       	com	r25
    23b8:	82 fd       	sbrc	r24, 2
    23ba:	fa cf       	rjmp	.-12     	; 0x23b0 <main+0x418>
    23bc:	b1 cf       	rjmp	.-158    	; 0x2320 <main+0x388>
					}
					else
					{
						// time for a new reading?
						if( gElapsed >= gLog_interval)
    23be:	20 91 ef 01 	lds	r18, 0x01EF
    23c2:	30 91 f0 01 	lds	r19, 0x01F0
    23c6:	80 91 eb 02 	lds	r24, 0x02EB
    23ca:	90 91 ec 02 	lds	r25, 0x02EC
    23ce:	28 17       	cp	r18, r24
    23d0:	39 07       	cpc	r19, r25
    23d2:	80 f0       	brcs	.+32     	; 0x23f4 <main+0x45c>
						{
							read_temperatures( num_sensors);
    23d4:	83 2d       	mov	r24, r3
    23d6:	0e 94 3e 05 	call	0xa7c	; 0xa7c <read_temperatures>
							log_temperatures( num_sensors);
    23da:	83 2d       	mov	r24, r3
    23dc:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <log_temperatures>
							lcd_clrscr();
    23e0:	0e 94 b2 07 	call	0xf64	; 0xf64 <lcd_clrscr>
							display_temperatures( num_sensors, page);
    23e4:	62 2d       	mov	r22, r2
    23e6:	83 2d       	mov	r24, r3
    23e8:	0e 94 18 03 	call	0x630	; 0x630 <display_temperatures>
							gElapsed = 0;	// restart the interval timer
    23ec:	10 92 f0 01 	sts	0x01F0, r1
    23f0:	10 92 ef 01 	sts	0x01EF, r1
						}
						// update the countdown.
						// else use the pseudo elapsed time counter
						lcd_gotoxy( 15, 0);
    23f4:	60 e0       	ldi	r22, 0x00	; 0
    23f6:	8f e0       	ldi	r24, 0x0F	; 15
    23f8:	0e 94 9f 07 	call	0xf3e	; 0xf3e <lcd_gotoxy>
						sprintf( gBuffer, "%4is", gLog_interval - gElapsed);
    23fc:	20 91 ef 01 	lds	r18, 0x01EF
    2400:	30 91 f0 01 	lds	r19, 0x01F0
    2404:	80 91 eb 02 	lds	r24, 0x02EB
    2408:	90 91 ec 02 	lds	r25, 0x02EC
    240c:	82 1b       	sub	r24, r18
    240e:	93 0b       	sbc	r25, r19
    2410:	9f 93       	push	r25
    2412:	8f 93       	push	r24
    2414:	ff 92       	push	r15
    2416:	ef 92       	push	r14
    2418:	df 93       	push	r29
    241a:	cf 93       	push	r28
    241c:	0e 94 67 19 	call	0x32ce	; 0x32ce <sprintf>
						lcd_puts( gBuffer);
    2420:	82 ea       	ldi	r24, 0xA2	; 162
    2422:	92 e0       	ldi	r25, 0x02	; 2
    2424:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <lcd_puts>
    2428:	0f 90       	pop	r0
    242a:	0f 90       	pop	r0
    242c:	0f 90       	pop	r0
    242e:	0f 90       	pop	r0
    2430:	0f 90       	pop	r0
    2432:	0f 90       	pop	r0
    2434:	75 cf       	rjmp	.-278    	; 0x2320 <main+0x388>
					}
				}
				mode = MODE_START;
				lcd_clrscr();	// provide feedback on button push
    2436:	0e 94 b2 07 	call	0xf64	; 0xf64 <lcd_clrscr>
				while( BTN_UP || BTN_DOWN);	// wait until switches released
    243a:	89 b1       	in	r24, 0x09	; 9
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	80 95       	com	r24
    2440:	90 95       	com	r25
    2442:	82 fd       	sbrc	r24, 2
    2444:	fa cf       	rjmp	.-12     	; 0x243a <main+0x4a2>
    2446:	89 b1       	in	r24, 0x09	; 9
    2448:	90 e0       	ldi	r25, 0x00	; 0
    244a:	80 95       	com	r24
    244c:	90 95       	com	r25
    244e:	83 fd       	sbrc	r24, 3
    2450:	f4 cf       	rjmp	.-24     	; 0x243a <main+0x4a2>
    2452:	9f ce       	rjmp	.-706    	; 0x2192 <main+0x1fa>
		case MODE_ORDER:	// displaying change view order**************************
			{
				// this alters the Dallas 1Wire search order which appears random,
				// but is deterministic, to a more meaningful user selected order
				pos = 0;	// start on the left
				lcd_gotoxy( 1, 3);
    2454:	63 e0       	ldi	r22, 0x03	; 3
    2456:	81 e0       	ldi	r24, 0x01	; 1
    2458:	0e 94 9f 07 	call	0xf3e	; 0xf3e <lcd_gotoxy>
				lcd_puts_P( "write to EEPROM");
    245c:	8b ef       	ldi	r24, 0xFB	; 251
    245e:	91 e0       	ldi	r25, 0x01	; 1
    2460:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <lcd_puts_p>
				lcd_gotoxy( 0, 0);
    2464:	60 e0       	ldi	r22, 0x00	; 0
    2466:	80 e0       	ldi	r24, 0x00	; 0
    2468:	0e 94 9f 07 	call	0xf3e	; 0xf3e <lcd_gotoxy>
				lcd_puts_P( "1Wire display order");
    246c:	87 ee       	ldi	r24, 0xE7	; 231
    246e:	91 e0       	ldi	r25, 0x01	; 1
    2470:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <lcd_puts_p>
				lcd_gotoxy( 0, 1);
    2474:	61 e0       	ldi	r22, 0x01	; 1
    2476:	80 e0       	ldi	r24, 0x00	; 0
    2478:	0e 94 9f 07 	call	0xf3e	; 0xf3e <lcd_gotoxy>
    247c:	5f ed       	ldi	r21, 0xDF	; 223
    247e:	e5 2e       	mov	r14, r21
    2480:	52 e0       	ldi	r21, 0x02	; 2
    2482:	f5 2e       	mov	r15, r21
				for( i = 0; i < num_sensors; i++)	// display the 1-wire order
    2484:	57 01       	movw	r10, r14
    2486:	9e 2c       	mov	r9, r14
    2488:	8a 2d       	mov	r24, r10
    248a:	8e 19       	sub	r24, r14
    248c:	83 15       	cp	r24, r3
    248e:	38 f4       	brcc	.+14     	; 0x249e <main+0x506>
					lcd_putc( g1Wire_order[i] + '0');
    2490:	f5 01       	movw	r30, r10
    2492:	81 91       	ld	r24, Z+
    2494:	5f 01       	movw	r10, r30
    2496:	80 5d       	subi	r24, 0xD0	; 208
    2498:	0e 94 b8 07 	call	0xf70	; 0xf70 <lcd_putc>
    249c:	f5 cf       	rjmp	.-22     	; 0x2488 <main+0x4f0>
				lcd_gotoxy( pos, 1);
    249e:	61 e0       	ldi	r22, 0x01	; 1
    24a0:	80 e0       	ldi	r24, 0x00	; 0
    24a2:	0e 94 9f 07 	call	0xf3e	; 0xf3e <lcd_gotoxy>
				lcd_command( LCD_DISP_ON_BLINK);	// turn on flashing block cursor
    24a6:	8d e0       	ldi	r24, 0x0D	; 13
    24a8:	0e 94 8d 07 	call	0xf1a	; 0xf1a <lcd_command>
			}
		case MODE_ORDER:	// displaying change view order**************************
			{
				// this alters the Dallas 1Wire search order which appears random,
				// but is deterministic, to a more meaningful user selected order
				pos = 0;	// start on the left
    24ac:	b1 2c       	mov	r11, r1
				for( i = 0; i < num_sensors; i++)	// display the 1-wire order
					lcd_putc( g1Wire_order[i] + '0');
				lcd_gotoxy( pos, 1);
				lcd_command( LCD_DISP_ON_BLINK);	// turn on flashing block cursor
				
				while( ! BTN_MODE)
    24ae:	23 b1       	in	r18, 0x03	; 3
    24b0:	30 e0       	ldi	r19, 0x00	; 0
    24b2:	20 95       	com	r18
    24b4:	30 95       	com	r19
    24b6:	27 fd       	sbrc	r18, 7
    24b8:	7e c0       	rjmp	.+252    	; 0x25b6 <main+0x61e>
				{
					if( BTN_SEL)	// next ID
    24ba:	89 b1       	in	r24, 0x09	; 9
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	80 95       	com	r24
    24c0:	90 95       	com	r25
    24c2:	84 ff       	sbrs	r24, 4
    24c4:	12 c0       	rjmp	.+36     	; 0x24ea <main+0x552>
					{
						// move the cursor position right one - recycle if at end
						pos++;
    24c6:	b3 94       	inc	r11
						if( pos > num_sensors - 1) pos = 0;
    24c8:	8b 2d       	mov	r24, r11
    24ca:	90 e0       	ldi	r25, 0x00	; 0
    24cc:	8c 15       	cp	r24, r12
    24ce:	9d 05       	cpc	r25, r13
    24d0:	0c f0       	brlt	.+2      	; 0x24d4 <main+0x53c>
    24d2:	b1 2c       	mov	r11, r1
						lcd_gotoxy( pos, 1);
    24d4:	61 e0       	ldi	r22, 0x01	; 1
    24d6:	8b 2d       	mov	r24, r11
    24d8:	0e 94 9f 07 	call	0xf3e	; 0xf3e <lcd_gotoxy>

						while( BTN_SEL);	// wait for release
    24dc:	89 b1       	in	r24, 0x09	; 9
    24de:	90 e0       	ldi	r25, 0x00	; 0
    24e0:	80 95       	com	r24
    24e2:	90 95       	com	r25
    24e4:	84 fd       	sbrc	r24, 4
    24e6:	fa cf       	rjmp	.-12     	; 0x24dc <main+0x544>
    24e8:	e2 cf       	rjmp	.-60     	; 0x24ae <main+0x516>
					}
					else if( BTN_UP)	// move selection to the left
    24ea:	89 b1       	in	r24, 0x09	; 9
    24ec:	90 e0       	ldi	r25, 0x00	; 0
    24ee:	80 95       	com	r24
    24f0:	90 95       	com	r25
    24f2:	82 ff       	sbrs	r24, 2
    24f4:	2c c0       	rjmp	.+88     	; 0x254e <main+0x5b6>
					{
						if( pos > 0)
    24f6:	bb 20       	and	r11, r11
    24f8:	19 f1       	breq	.+70     	; 0x2540 <main+0x5a8>
						{
							// swap marker positions
							tmp = g1Wire_order[pos];
    24fa:	eb 2d       	mov	r30, r11
    24fc:	f0 e0       	ldi	r31, 0x00	; 0
    24fe:	df 01       	movw	r26, r30
    2500:	a1 52       	subi	r26, 0x21	; 33
    2502:	bd 4f       	sbci	r27, 0xFD	; 253
    2504:	8c 91       	ld	r24, X
							g1Wire_order[pos] = g1Wire_order[pos - 1];
    2506:	e2 52       	subi	r30, 0x22	; 34
    2508:	fd 4f       	sbci	r31, 0xFD	; 253
    250a:	90 81       	ld	r25, Z
    250c:	9c 93       	st	X, r25
							g1Wire_order[pos - 1] = tmp;
    250e:	80 83       	st	Z, r24
							pos--;
    2510:	ba 94       	dec	r11
							// display the markers in the new order
							lcd_gotoxy( 0, 1);
    2512:	61 e0       	ldi	r22, 0x01	; 1
    2514:	80 e0       	ldi	r24, 0x00	; 0
    2516:	0e 94 9f 07 	call	0xf3e	; 0xf3e <lcd_gotoxy>
							for( i = 0; i < num_sensors; i++)
    251a:	4f ed       	ldi	r20, 0xDF	; 223
    251c:	e4 2e       	mov	r14, r20
    251e:	42 e0       	ldi	r20, 0x02	; 2
    2520:	f4 2e       	mov	r15, r20
    2522:	8e 2d       	mov	r24, r14
    2524:	89 19       	sub	r24, r9
    2526:	83 15       	cp	r24, r3
    2528:	38 f4       	brcc	.+14     	; 0x2538 <main+0x5a0>
								lcd_putc( g1Wire_order[i] + '0');
    252a:	f7 01       	movw	r30, r14
    252c:	81 91       	ld	r24, Z+
    252e:	7f 01       	movw	r14, r30
    2530:	80 5d       	subi	r24, 0xD0	; 208
    2532:	0e 94 b8 07 	call	0xf70	; 0xf70 <lcd_putc>
    2536:	f5 cf       	rjmp	.-22     	; 0x2522 <main+0x58a>
							lcd_gotoxy( pos, 1);
    2538:	61 e0       	ldi	r22, 0x01	; 1
    253a:	8b 2d       	mov	r24, r11
    253c:	0e 94 9f 07 	call	0xf3e	; 0xf3e <lcd_gotoxy>
						}
						while( BTN_UP);	// wait until switch released
    2540:	89 b1       	in	r24, 0x09	; 9
    2542:	90 e0       	ldi	r25, 0x00	; 0
    2544:	80 95       	com	r24
    2546:	90 95       	com	r25
    2548:	82 fd       	sbrc	r24, 2
    254a:	fa cf       	rjmp	.-12     	; 0x2540 <main+0x5a8>
    254c:	b0 cf       	rjmp	.-160    	; 0x24ae <main+0x516>
					}
					else if( BTN_DOWN)	// move selection to the right
    254e:	89 b1       	in	r24, 0x09	; 9
    2550:	90 e0       	ldi	r25, 0x00	; 0
    2552:	80 95       	com	r24
    2554:	90 95       	com	r25
    2556:	83 ff       	sbrs	r24, 3
    2558:	aa cf       	rjmp	.-172    	; 0x24ae <main+0x516>
					{
						if( pos < num_sensors - 1)
    255a:	2b 2d       	mov	r18, r11
    255c:	30 e0       	ldi	r19, 0x00	; 0
    255e:	24 15       	cp	r18, r4
    2560:	35 05       	cpc	r19, r5
    2562:	14 f5       	brge	.+68     	; 0x25a8 <main+0x610>
						{
							// swap marker positions
							tmp = g1Wire_order[pos];
    2564:	d9 01       	movw	r26, r18
    2566:	a1 52       	subi	r26, 0x21	; 33
    2568:	bd 4f       	sbci	r27, 0xFD	; 253
    256a:	8c 91       	ld	r24, X
							g1Wire_order[pos] = g1Wire_order[pos + 1];
    256c:	f9 01       	movw	r30, r18
    256e:	e0 52       	subi	r30, 0x20	; 32
    2570:	fd 4f       	sbci	r31, 0xFD	; 253
    2572:	90 81       	ld	r25, Z
    2574:	9c 93       	st	X, r25
							g1Wire_order[pos + 1] = tmp;
    2576:	80 83       	st	Z, r24
							pos++;
    2578:	b3 94       	inc	r11
							// display the markers in the new order
							lcd_gotoxy( 0, 1);
    257a:	61 e0       	ldi	r22, 0x01	; 1
    257c:	80 e0       	ldi	r24, 0x00	; 0
    257e:	0e 94 9f 07 	call	0xf3e	; 0xf3e <lcd_gotoxy>
							for( i = 0; i < num_sensors; i++)
    2582:	3f ed       	ldi	r19, 0xDF	; 223
    2584:	e3 2e       	mov	r14, r19
    2586:	32 e0       	ldi	r19, 0x02	; 2
    2588:	f3 2e       	mov	r15, r19
    258a:	8e 2d       	mov	r24, r14
    258c:	89 19       	sub	r24, r9
    258e:	83 15       	cp	r24, r3
    2590:	38 f4       	brcc	.+14     	; 0x25a0 <main+0x608>
								lcd_putc( g1Wire_order[i] + '0');
    2592:	f7 01       	movw	r30, r14
    2594:	81 91       	ld	r24, Z+
    2596:	7f 01       	movw	r14, r30
    2598:	80 5d       	subi	r24, 0xD0	; 208
    259a:	0e 94 b8 07 	call	0xf70	; 0xf70 <lcd_putc>
    259e:	f5 cf       	rjmp	.-22     	; 0x258a <main+0x5f2>
							lcd_gotoxy( pos, 1);
    25a0:	61 e0       	ldi	r22, 0x01	; 1
    25a2:	8b 2d       	mov	r24, r11
    25a4:	0e 94 9f 07 	call	0xf3e	; 0xf3e <lcd_gotoxy>
						}
						while( BTN_DOWN);	// wait until switch released
    25a8:	29 b1       	in	r18, 0x09	; 9
    25aa:	30 e0       	ldi	r19, 0x00	; 0
    25ac:	20 95       	com	r18
    25ae:	30 95       	com	r19
    25b0:	23 fd       	sbrc	r18, 3
    25b2:	fa cf       	rjmp	.-12     	; 0x25a8 <main+0x610>
    25b4:	7c cf       	rjmp	.-264    	; 0x24ae <main+0x516>
					}
				}
				eeprom_write_block( g1Wire_order, nv1Wire_order, MAX_SENSORS);
    25b6:	48 e0       	ldi	r20, 0x08	; 8
    25b8:	50 e0       	ldi	r21, 0x00	; 0
    25ba:	60 e4       	ldi	r22, 0x40	; 64
    25bc:	70 e0       	ldi	r23, 0x00	; 0
    25be:	8f ed       	ldi	r24, 0xDF	; 223
    25c0:	92 e0       	ldi	r25, 0x02	; 2
    25c2:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__eewr_block_m168>
				
				if(num_sensors==1)
    25c6:	f1 e0       	ldi	r31, 0x01	; 1
    25c8:	3f 12       	cpse	r3, r31
    25ca:	09 c0       	rjmp	.+18     	; 0x25de <main+0x646>
						{ nvgSensorIDs1[1] = gSensorIDs[1][0];
    25cc:	80 91 fb 02 	lds	r24, 0x02FB
    25d0:	80 93 39 00 	sts	0x0039, r24
							eeprom_write_block( gSensorIDs, nvgSensorIDs1, 8);
    25d4:	48 e0       	ldi	r20, 0x08	; 8
    25d6:	50 e0       	ldi	r21, 0x00	; 0
    25d8:	68 e3       	ldi	r22, 0x38	; 56
    25da:	70 e0       	ldi	r23, 0x00	; 0
    25dc:	6b c0       	rjmp	.+214    	; 0x26b4 <main+0x71c>
						}
				if(num_sensors==2)
    25de:	22 e0       	ldi	r18, 0x02	; 2
    25e0:	32 12       	cpse	r3, r18
    25e2:	15 c0       	rjmp	.+42     	; 0x260e <main+0x676>
						{nvgSensorIDs1[1] = gSensorIDs[1][0];
    25e4:	80 91 fb 02 	lds	r24, 0x02FB
    25e8:	80 93 39 00 	sts	0x0039, r24
						eeprom_write_block( gSensorIDs, nvgSensorIDs1, 8);
    25ec:	48 e0       	ldi	r20, 0x08	; 8
    25ee:	50 e0       	ldi	r21, 0x00	; 0
    25f0:	68 e3       	ldi	r22, 0x38	; 56
    25f2:	70 e0       	ldi	r23, 0x00	; 0
    25f4:	83 ef       	ldi	r24, 0xF3	; 243
    25f6:	92 e0       	ldi	r25, 0x02	; 2
    25f8:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__eewr_block_m168>
						nvgSensorIDs2[1] = gSensorIDs[2][0];
    25fc:	80 91 03 03 	lds	r24, 0x0303
    2600:	80 93 31 00 	sts	0x0031, r24
						eeprom_write_block( gSensorIDs, nvgSensorIDs2, 8);
    2604:	48 e0       	ldi	r20, 0x08	; 8
    2606:	50 e0       	ldi	r21, 0x00	; 0
    2608:	60 e3       	ldi	r22, 0x30	; 48
    260a:	70 e0       	ldi	r23, 0x00	; 0
    260c:	53 c0       	rjmp	.+166    	; 0x26b4 <main+0x71c>
						}
				if(num_sensors==3)
    260e:	43 e0       	ldi	r20, 0x03	; 3
    2610:	34 12       	cpse	r3, r20
    2612:	21 c0       	rjmp	.+66     	; 0x2656 <main+0x6be>
						{nvgSensorIDs1[1] = gSensorIDs[1][0];
    2614:	80 91 fb 02 	lds	r24, 0x02FB
    2618:	80 93 39 00 	sts	0x0039, r24
						eeprom_write_block( gSensorIDs, nvgSensorIDs1, 8);
    261c:	48 e0       	ldi	r20, 0x08	; 8
    261e:	50 e0       	ldi	r21, 0x00	; 0
    2620:	68 e3       	ldi	r22, 0x38	; 56
    2622:	70 e0       	ldi	r23, 0x00	; 0
    2624:	83 ef       	ldi	r24, 0xF3	; 243
    2626:	92 e0       	ldi	r25, 0x02	; 2
    2628:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__eewr_block_m168>
						nvgSensorIDs2[1] = gSensorIDs[2][0];
    262c:	80 91 03 03 	lds	r24, 0x0303
    2630:	80 93 31 00 	sts	0x0031, r24
						eeprom_write_block( gSensorIDs, nvgSensorIDs2, 8);
    2634:	48 e0       	ldi	r20, 0x08	; 8
    2636:	50 e0       	ldi	r21, 0x00	; 0
    2638:	60 e3       	ldi	r22, 0x30	; 48
    263a:	70 e0       	ldi	r23, 0x00	; 0
    263c:	83 ef       	ldi	r24, 0xF3	; 243
    263e:	92 e0       	ldi	r25, 0x02	; 2
    2640:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__eewr_block_m168>
						nvgSensorIDs3[1] = gSensorIDs[3][0];
    2644:	80 91 0b 03 	lds	r24, 0x030B
    2648:	80 93 29 00 	sts	0x0029, r24
						eeprom_write_block( gSensorIDs, nvgSensorIDs3, 8);
    264c:	48 e0       	ldi	r20, 0x08	; 8
    264e:	50 e0       	ldi	r21, 0x00	; 0
    2650:	68 e2       	ldi	r22, 0x28	; 40
    2652:	70 e0       	ldi	r23, 0x00	; 0
    2654:	2f c0       	rjmp	.+94     	; 0x26b4 <main+0x71c>
						}
				if(num_sensors==4)
    2656:	84 e0       	ldi	r24, 0x04	; 4
    2658:	38 12       	cpse	r3, r24
    265a:	30 c0       	rjmp	.+96     	; 0x26bc <main+0x724>
						{nvgSensorIDs1[1] = gSensorIDs[1][0];
    265c:	80 91 fb 02 	lds	r24, 0x02FB
    2660:	80 93 39 00 	sts	0x0039, r24
						eeprom_write_block( gSensorIDs, nvgSensorIDs1, 8);
    2664:	48 e0       	ldi	r20, 0x08	; 8
    2666:	50 e0       	ldi	r21, 0x00	; 0
    2668:	68 e3       	ldi	r22, 0x38	; 56
    266a:	70 e0       	ldi	r23, 0x00	; 0
    266c:	83 ef       	ldi	r24, 0xF3	; 243
    266e:	92 e0       	ldi	r25, 0x02	; 2
    2670:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__eewr_block_m168>
						nvgSensorIDs2[1] = gSensorIDs[2][0];
    2674:	80 91 03 03 	lds	r24, 0x0303
    2678:	80 93 31 00 	sts	0x0031, r24
						eeprom_write_block( gSensorIDs, nvgSensorIDs2, 8);
    267c:	48 e0       	ldi	r20, 0x08	; 8
    267e:	50 e0       	ldi	r21, 0x00	; 0
    2680:	60 e3       	ldi	r22, 0x30	; 48
    2682:	70 e0       	ldi	r23, 0x00	; 0
    2684:	83 ef       	ldi	r24, 0xF3	; 243
    2686:	92 e0       	ldi	r25, 0x02	; 2
    2688:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__eewr_block_m168>
						nvgSensorIDs3[1] = gSensorIDs[3][0];
    268c:	80 91 0b 03 	lds	r24, 0x030B
    2690:	80 93 29 00 	sts	0x0029, r24
						eeprom_write_block( gSensorIDs, nvgSensorIDs3, 8);
    2694:	48 e0       	ldi	r20, 0x08	; 8
    2696:	50 e0       	ldi	r21, 0x00	; 0
    2698:	68 e2       	ldi	r22, 0x28	; 40
    269a:	70 e0       	ldi	r23, 0x00	; 0
    269c:	83 ef       	ldi	r24, 0xF3	; 243
    269e:	92 e0       	ldi	r25, 0x02	; 2
    26a0:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__eewr_block_m168>
						nvgSensorIDs4[1] = gSensorIDs[4][0];
    26a4:	80 91 13 03 	lds	r24, 0x0313
    26a8:	80 93 21 00 	sts	0x0021, r24
						eeprom_write_block( gSensorIDs, nvgSensorIDs4, 8);
    26ac:	48 e0       	ldi	r20, 0x08	; 8
    26ae:	50 e0       	ldi	r21, 0x00	; 0
    26b0:	60 e2       	ldi	r22, 0x20	; 32
    26b2:	70 e0       	ldi	r23, 0x00	; 0
    26b4:	83 ef       	ldi	r24, 0xF3	; 243
    26b6:	92 e0       	ldi	r25, 0x02	; 2
    26b8:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__eewr_block_m168>
						eeprom_write_block( gSensorIDs, nvgSensorIDs7, 8);
						nvgSensorIDs8[1] = gSensorIDs[8][0];
						eeprom_write_block( gSensorIDs, nvgSensorIDs8, 8);
						}
			*/	
				lcd_command( LCD_DISP_ON);	// turn off flashing cursor
    26bc:	8c e0       	ldi	r24, 0x0C	; 12
    26be:	0e 94 8d 07 	call	0xf1a	; 0xf1a <lcd_command>
				lcd_clrscr();	// acknowledge button press
    26c2:	0e 94 b2 07 	call	0xf64	; 0xf64 <lcd_clrscr>
				mode = MODE_INTERVAL;
				while( BTN_MODE);	// wait until switch released
    26c6:	83 b1       	in	r24, 0x03	; 3
    26c8:	90 e0       	ldi	r25, 0x00	; 0
    26ca:	80 95       	com	r24
    26cc:	90 95       	com	r25
    26ce:	87 fd       	sbrc	r24, 7
    26d0:	fa cf       	rjmp	.-12     	; 0x26c6 <main+0x72e>
				break;	// next case
			}
		case MODE_INTERVAL:	// displaying logging interval change******************
			{
				lcd_clrscr();
    26d2:	0e 94 b2 07 	call	0xf64	; 0xf64 <lcd_clrscr>
				lcd_puts_P( "Logging interval\n");
    26d6:	85 ed       	ldi	r24, 0xD5	; 213
    26d8:	91 e0       	ldi	r25, 0x01	; 1
    26da:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <lcd_puts_p>
				sprintf( gBuffer, "%4i", gLog_interval);
    26de:	80 91 ec 02 	lds	r24, 0x02EC
    26e2:	8f 93       	push	r24
    26e4:	80 91 eb 02 	lds	r24, 0x02EB
    26e8:	8f 93       	push	r24
    26ea:	1f 93       	push	r17
    26ec:	0f 93       	push	r16
    26ee:	df 93       	push	r29
    26f0:	cf 93       	push	r28
    26f2:	0e 94 67 19 	call	0x32ce	; 0x32ce <sprintf>
				lcd_puts( gBuffer);
    26f6:	82 ea       	ldi	r24, 0xA2	; 162
    26f8:	92 e0       	ldi	r25, 0x02	; 2
    26fa:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <lcd_puts>
				//lcd_puts_P( "Logging interval\n");

				while( ! BTN_MODE)
    26fe:	0f 90       	pop	r0
    2700:	0f 90       	pop	r0
    2702:	0f 90       	pop	r0
    2704:	0f 90       	pop	r0
    2706:	0f 90       	pop	r0
    2708:	0f 90       	pop	r0
								gLog_interval += up_held << 2;
							else
								gLog_interval++;
							
							// fixup on overflow
							if( gLog_interval > MAX_INTERVAL) gLog_interval = MAX_INTERVAL;
    270a:	ff e0       	ldi	r31, 0x0F	; 15
    270c:	ef 2e       	mov	r14, r31
    270e:	f7 e2       	ldi	r31, 0x27	; 39
    2710:	ff 2e       	mov	r15, r31
				lcd_puts_P( "Logging interval\n");
				sprintf( gBuffer, "%4i", gLog_interval);
				lcd_puts( gBuffer);
				//lcd_puts_P( "Logging interval\n");

				while( ! BTN_MODE)
    2712:	83 b1       	in	r24, 0x03	; 3
    2714:	90 e0       	ldi	r25, 0x00	; 0
    2716:	80 95       	com	r24
    2718:	90 95       	com	r25
    271a:	87 fd       	sbrc	r24, 7
    271c:	92 c0       	rjmp	.+292    	; 0x2842 <main+0x8aa>
    271e:	b1 2c       	mov	r11, r1
					 * if the button is still held, geometrically increase
					 * the step amount each loop through until the button
					 * is released
					 */
					up_held = dn_held = 0;
					while( BTN_UP)	// increase interval
    2720:	89 b1       	in	r24, 0x09	; 9
    2722:	90 e0       	ldi	r25, 0x00	; 0
    2724:	80 95       	com	r24
    2726:	90 95       	com	r25
    2728:	82 ff       	sbrs	r24, 2
    272a:	43 c0       	rjmp	.+134    	; 0x27b2 <main+0x81a>
					{
						if( gLog_interval < MAX_INTERVAL)
    272c:	80 91 eb 02 	lds	r24, 0x02EB
    2730:	90 91 ec 02 	lds	r25, 0x02EC
    2734:	8f 30       	cpi	r24, 0x0F	; 15
    2736:	e7 e2       	ldi	r30, 0x27	; 39
    2738:	9e 07       	cpc	r25, r30
    273a:	9c f5       	brge	.+102    	; 0x27a2 <main+0x80a>
						{
							// geometrically increase step size if button held
							if( up_held >= BUTTON_HELD)
    273c:	f2 e0       	ldi	r31, 0x02	; 2
    273e:	fb 15       	cp	r31, r11
    2740:	30 f4       	brcc	.+12     	; 0x274e <main+0x7b6>
								gLog_interval += up_held << 2;
    2742:	24 e0       	ldi	r18, 0x04	; 4
    2744:	b2 9e       	mul	r11, r18
    2746:	80 0d       	add	r24, r0
    2748:	91 1d       	adc	r25, r1
    274a:	11 24       	eor	r1, r1
    274c:	01 c0       	rjmp	.+2      	; 0x2750 <main+0x7b8>
							else
								gLog_interval++;
    274e:	01 96       	adiw	r24, 0x01	; 1
    2750:	90 93 ec 02 	sts	0x02EC, r25
    2754:	80 93 eb 02 	sts	0x02EB, r24
							
							// fixup on overflow
							if( gLog_interval > MAX_INTERVAL) gLog_interval = MAX_INTERVAL;
    2758:	80 91 eb 02 	lds	r24, 0x02EB
    275c:	90 91 ec 02 	lds	r25, 0x02EC
    2760:	80 31       	cpi	r24, 0x10	; 16
    2762:	97 42       	sbci	r25, 0x27	; 39
    2764:	24 f0       	brlt	.+8      	; 0x276e <main+0x7d6>
    2766:	f0 92 ec 02 	sts	0x02EC, r15
    276a:	e0 92 eb 02 	sts	0x02EB, r14

							lcd_gotoxy( 0, 1);
    276e:	61 e0       	ldi	r22, 0x01	; 1
    2770:	80 e0       	ldi	r24, 0x00	; 0
    2772:	0e 94 9f 07 	call	0xf3e	; 0xf3e <lcd_gotoxy>
							sprintf( gBuffer, "%4i", gLog_interval);
    2776:	80 91 ec 02 	lds	r24, 0x02EC
    277a:	8f 93       	push	r24
    277c:	80 91 eb 02 	lds	r24, 0x02EB
    2780:	8f 93       	push	r24
    2782:	1f 93       	push	r17
    2784:	0f 93       	push	r16
    2786:	df 93       	push	r29
    2788:	cf 93       	push	r28
    278a:	0e 94 67 19 	call	0x32ce	; 0x32ce <sprintf>
							lcd_puts( gBuffer);
    278e:	82 ea       	ldi	r24, 0xA2	; 162
    2790:	92 e0       	ldi	r25, 0x02	; 2
    2792:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <lcd_puts>
    2796:	0f 90       	pop	r0
    2798:	0f 90       	pop	r0
    279a:	0f 90       	pop	r0
    279c:	0f 90       	pop	r0
    279e:	0f 90       	pop	r0
    27a0:	0f 90       	pop	r0
						}
						delay_ms( CMD_DELAY);	// allow time to release button
    27a2:	68 e6       	ldi	r22, 0x68	; 104
    27a4:	71 e1       	ldi	r23, 0x11	; 17
    27a6:	84 e0       	ldi	r24, 0x04	; 4
    27a8:	90 e0       	ldi	r25, 0x00	; 0
    27aa:	0e 94 3d 06 	call	0xc7a	; 0xc7a <delayloop32>
						up_held++;
    27ae:	b3 94       	inc	r11
    27b0:	b7 cf       	rjmp	.-146    	; 0x2720 <main+0x788>
					 * if the button is still held, geometrically increase
					 * the step amount each loop through until the button
					 * is released
					 */
					up_held = dn_held = 0;
					while( BTN_UP)	// increase interval
    27b2:	b1 2c       	mov	r11, r1
						}
						delay_ms( CMD_DELAY);	// allow time to release button
						up_held++;
					}

					while( BTN_DOWN)	// decrease interval
    27b4:	89 b1       	in	r24, 0x09	; 9
    27b6:	90 e0       	ldi	r25, 0x00	; 0
    27b8:	80 95       	com	r24
    27ba:	90 95       	com	r25
    27bc:	83 ff       	sbrs	r24, 3
    27be:	a9 cf       	rjmp	.-174    	; 0x2712 <main+0x77a>
					{
						if( gLog_interval > MIN_INTERVAL)
    27c0:	80 91 eb 02 	lds	r24, 0x02EB
    27c4:	90 91 ec 02 	lds	r25, 0x02EC
    27c8:	86 30       	cpi	r24, 0x06	; 6
    27ca:	91 05       	cpc	r25, r1
    27cc:	94 f1       	brlt	.+100    	; 0x2832 <main+0x89a>
						{
							if( dn_held >= BUTTON_HELD)
    27ce:	e2 e0       	ldi	r30, 0x02	; 2
    27d0:	eb 15       	cp	r30, r11
    27d2:	80 f4       	brcc	.+32     	; 0x27f4 <main+0x85c>
							{
								// geometrically increase step size if button held
								// need to worry about underflow since interval is unsigned
								if( (gLog_interval - MIN_INTERVAL) > dn_held << 2)
    27d4:	f4 e0       	ldi	r31, 0x04	; 4
    27d6:	bf 9e       	mul	r11, r31
    27d8:	90 01       	movw	r18, r0
    27da:	11 24       	eor	r1, r1
    27dc:	ac 01       	movw	r20, r24
    27de:	45 50       	subi	r20, 0x05	; 5
    27e0:	51 09       	sbc	r21, r1
    27e2:	24 17       	cp	r18, r20
    27e4:	35 07       	cpc	r19, r21
    27e6:	1c f4       	brge	.+6      	; 0x27ee <main+0x856>
									gLog_interval -= dn_held << 2;
    27e8:	82 1b       	sub	r24, r18
    27ea:	93 0b       	sbc	r25, r19
    27ec:	04 c0       	rjmp	.+8      	; 0x27f6 <main+0x85e>
								else
									gLog_interval = MIN_INTERVAL;
    27ee:	85 e0       	ldi	r24, 0x05	; 5
    27f0:	90 e0       	ldi	r25, 0x00	; 0
    27f2:	01 c0       	rjmp	.+2      	; 0x27f6 <main+0x85e>
							}
							else
								gLog_interval--;
    27f4:	01 97       	sbiw	r24, 0x01	; 1
    27f6:	90 93 ec 02 	sts	0x02EC, r25
    27fa:	80 93 eb 02 	sts	0x02EB, r24
							lcd_gotoxy( 0,1);
    27fe:	61 e0       	ldi	r22, 0x01	; 1
    2800:	80 e0       	ldi	r24, 0x00	; 0
    2802:	0e 94 9f 07 	call	0xf3e	; 0xf3e <lcd_gotoxy>
							sprintf( gBuffer, "%4i", gLog_interval);
    2806:	80 91 ec 02 	lds	r24, 0x02EC
    280a:	8f 93       	push	r24
    280c:	80 91 eb 02 	lds	r24, 0x02EB
    2810:	8f 93       	push	r24
    2812:	1f 93       	push	r17
    2814:	0f 93       	push	r16
    2816:	df 93       	push	r29
    2818:	cf 93       	push	r28
    281a:	0e 94 67 19 	call	0x32ce	; 0x32ce <sprintf>
							lcd_puts( gBuffer);
    281e:	82 ea       	ldi	r24, 0xA2	; 162
    2820:	92 e0       	ldi	r25, 0x02	; 2
    2822:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <lcd_puts>
    2826:	0f 90       	pop	r0
    2828:	0f 90       	pop	r0
    282a:	0f 90       	pop	r0
    282c:	0f 90       	pop	r0
    282e:	0f 90       	pop	r0
    2830:	0f 90       	pop	r0
						}
						delay_ms( CMD_DELAY);
    2832:	68 e6       	ldi	r22, 0x68	; 104
    2834:	71 e1       	ldi	r23, 0x11	; 17
    2836:	84 e0       	ldi	r24, 0x04	; 4
    2838:	90 e0       	ldi	r25, 0x00	; 0
    283a:	0e 94 3d 06 	call	0xc7a	; 0xc7a <delayloop32>
						dn_held++;
    283e:	b3 94       	inc	r11
    2840:	b9 cf       	rjmp	.-142    	; 0x27b4 <main+0x81c>
					}
				}
				mode = MODE_SENSOR;
				eeprom_write_word( &nvLog_interval, gLog_interval);	// save the persistant value
    2842:	60 91 eb 02 	lds	r22, 0x02EB
    2846:	70 91 ec 02 	lds	r23, 0x02EC
    284a:	8a e4       	ldi	r24, 0x4A	; 74
    284c:	90 e0       	ldi	r25, 0x00	; 0
    284e:	0e 94 91 1b 	call	0x3722	; 0x3722 <__eewr_word_m168>
				lcd_clrscr();	// ack button press
    2852:	0e 94 b2 07 	call	0xf64	; 0xf64 <lcd_clrscr>
				while( BTN_MODE);	// wait until switch released
    2856:	83 b1       	in	r24, 0x03	; 3
    2858:	90 e0       	ldi	r25, 0x00	; 0
    285a:	80 95       	com	r24
    285c:	90 95       	com	r25
    285e:	87 fd       	sbrc	r24, 7
    2860:	fa cf       	rjmp	.-12     	; 0x2856 <main+0x8be>
				break;	// next case
			}
		case MODE_SENSOR:	// displaying extended sensor info***********************
			{
				i = 0;	// display order
				show_exinfo_lcd( i);
    2862:	80 e0       	ldi	r24, 0x00	; 0
    2864:	0e 94 b6 05 	call	0xb6c	; 0xb6c <show_exinfo_lcd>
				while( BTN_MODE);	// wait until switch released
				break;	// next case
			}
		case MODE_SENSOR:	// displaying extended sensor info***********************
			{
				i = 0;	// display order
    2868:	61 2c       	mov	r6, r1
					 * complexity I don't want
					 */
					device = g1Wire_order[i];
					lcd_gotoxy( 10, 0);
					DS18X20_start_meas( &gSensorIDs[device][0]);
					sprintf( gBuffer, "0x%04x", DS18X20_get_meas( &gSensorIDs[device][0]));
    286a:	e6 ee       	ldi	r30, 0xE6	; 230
    286c:	ee 2e       	mov	r14, r30
    286e:	e1 e0       	ldi	r30, 0x01	; 1
    2870:	fe 2e       	mov	r15, r30
					}
					else if( BTN_DOWN)	// display previous
					{
						// cycle if needed
						if( i > 0) i--;
						else i = num_sensors - 1;
    2872:	77 24       	eor	r7, r7
    2874:	7a 94       	dec	r7
    2876:	73 0c       	add	r7, r3
		case MODE_SENSOR:	// displaying extended sensor info***********************
			{
				i = 0;	// display order
				show_exinfo_lcd( i);

				while( ! BTN_MODE)	// loop until mode button pressed
    2878:	23 b1       	in	r18, 0x03	; 3
    287a:	30 e0       	ldi	r19, 0x00	; 0
    287c:	20 95       	com	r18
    287e:	30 95       	com	r19
    2880:	27 fd       	sbrc	r18, 7
    2882:	54 c0       	rjmp	.+168    	; 0x292c <main+0x994>
					 * makes the buttons appear unresponsive.  the only
					 * way I can think of to fix this is to handle the
					 * buttons with an ISR, but this adds a level of
					 * complexity I don't want
					 */
					device = g1Wire_order[i];
    2884:	a6 2c       	mov	r10, r6
    2886:	b1 2c       	mov	r11, r1
    2888:	f5 01       	movw	r30, r10
    288a:	e1 52       	subi	r30, 0x21	; 33
    288c:	fd 4f       	sbci	r31, 0xFD	; 253
    288e:	80 80       	ld	r8, Z
					lcd_gotoxy( 10, 0);
    2890:	60 e0       	ldi	r22, 0x00	; 0
    2892:	8a e0       	ldi	r24, 0x0A	; 10
    2894:	0e 94 9f 07 	call	0xf3e	; 0xf3e <lcd_gotoxy>
					DS18X20_start_meas( &gSensorIDs[device][0]);
    2898:	f8 e0       	ldi	r31, 0x08	; 8
    289a:	8f 9e       	mul	r8, r31
    289c:	40 01       	movw	r8, r0
    289e:	11 24       	eor	r1, r1
    28a0:	c4 01       	movw	r24, r8
    28a2:	8d 50       	subi	r24, 0x0D	; 13
    28a4:	9d 4f       	sbci	r25, 0xFD	; 253
    28a6:	4c 01       	movw	r8, r24
    28a8:	0e 94 4a 06 	call	0xc94	; 0xc94 <DS18X20_start_meas>
					sprintf( gBuffer, "0x%04x", DS18X20_get_meas( &gSensorIDs[device][0]));
    28ac:	c4 01       	movw	r24, r8
    28ae:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <DS18X20_get_meas>
    28b2:	9f 93       	push	r25
    28b4:	8f 93       	push	r24
    28b6:	ff 92       	push	r15
    28b8:	ef 92       	push	r14
    28ba:	df 93       	push	r29
    28bc:	cf 93       	push	r28
    28be:	0e 94 67 19 	call	0x32ce	; 0x32ce <sprintf>
					lcd_puts( gBuffer);
    28c2:	82 ea       	ldi	r24, 0xA2	; 162
    28c4:	92 e0       	ldi	r25, 0x02	; 2
    28c6:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <lcd_puts>

					if( BTN_UP)	// display next
    28ca:	89 b1       	in	r24, 0x09	; 9
    28cc:	90 e0       	ldi	r25, 0x00	; 0
    28ce:	80 95       	com	r24
    28d0:	90 95       	com	r25
    28d2:	0f 90       	pop	r0
    28d4:	0f 90       	pop	r0
    28d6:	0f 90       	pop	r0
    28d8:	0f 90       	pop	r0
    28da:	0f 90       	pop	r0
    28dc:	0f 90       	pop	r0
    28de:	82 ff       	sbrs	r24, 2
    28e0:	10 c0       	rjmp	.+32     	; 0x2902 <main+0x96a>
					{
						// cycle if needed
						if( i < num_sensors - 1) i++;
    28e2:	a4 14       	cp	r10, r4
    28e4:	b5 04       	cpc	r11, r5
    28e6:	14 f4       	brge	.+4      	; 0x28ec <main+0x954>
    28e8:	63 94       	inc	r6
    28ea:	01 c0       	rjmp	.+2      	; 0x28ee <main+0x956>
						else i = 0;
    28ec:	61 2c       	mov	r6, r1

						show_exinfo_lcd( i);
    28ee:	86 2d       	mov	r24, r6
    28f0:	0e 94 b6 05 	call	0xb6c	; 0xb6c <show_exinfo_lcd>
						while( BTN_UP);	// wait until switch released
    28f4:	89 b1       	in	r24, 0x09	; 9
    28f6:	90 e0       	ldi	r25, 0x00	; 0
    28f8:	80 95       	com	r24
    28fa:	90 95       	com	r25
    28fc:	82 fd       	sbrc	r24, 2
    28fe:	fa cf       	rjmp	.-12     	; 0x28f4 <main+0x95c>
    2900:	bb cf       	rjmp	.-138    	; 0x2878 <main+0x8e0>
					}
					else if( BTN_DOWN)	// display previous
    2902:	89 b1       	in	r24, 0x09	; 9
    2904:	90 e0       	ldi	r25, 0x00	; 0
    2906:	80 95       	com	r24
    2908:	90 95       	com	r25
    290a:	83 ff       	sbrs	r24, 3
    290c:	b5 cf       	rjmp	.-150    	; 0x2878 <main+0x8e0>
					{
						// cycle if needed
						if( i > 0) i--;
    290e:	66 20       	and	r6, r6
    2910:	11 f0       	breq	.+4      	; 0x2916 <main+0x97e>
    2912:	6a 94       	dec	r6
    2914:	01 c0       	rjmp	.+2      	; 0x2918 <main+0x980>
						else i = num_sensors - 1;
    2916:	67 2c       	mov	r6, r7
						show_exinfo_lcd( i);
    2918:	86 2d       	mov	r24, r6
    291a:	0e 94 b6 05 	call	0xb6c	; 0xb6c <show_exinfo_lcd>
						while( BTN_DOWN);	// wait until switch released
    291e:	89 b1       	in	r24, 0x09	; 9
    2920:	90 e0       	ldi	r25, 0x00	; 0
    2922:	80 95       	com	r24
    2924:	90 95       	com	r25
    2926:	83 fd       	sbrc	r24, 3
    2928:	fa cf       	rjmp	.-12     	; 0x291e <main+0x986>
    292a:	a6 cf       	rjmp	.-180    	; 0x2878 <main+0x8e0>
					}
				}
				lcd_clrscr();	// acknowledge the mode button press
    292c:	0e 94 b2 07 	call	0xf64	; 0xf64 <lcd_clrscr>
				while( BTN_MODE);	// wait until switch released
    2930:	83 b1       	in	r24, 0x03	; 3
    2932:	90 e0       	ldi	r25, 0x00	; 0
    2934:	80 95       	com	r24
    2936:	90 95       	com	r25
    2938:	87 fd       	sbrc	r24, 7
    293a:	fa cf       	rjmp	.-12     	; 0x2930 <main+0x998>
				mode = MODE_BACKLIGHT;
				break;	// next case
			}
		case MODE_BACKLIGHT:	// displaying interval change   *********************
			{
				lcd_clrscr();
    293c:	0e 94 b2 07 	call	0xf64	; 0xf64 <lcd_clrscr>
				lcd_puts_P( "LCD brightness\n");
    2940:	85 ec       	ldi	r24, 0xC5	; 197
    2942:	91 e0       	ldi	r25, 0x01	; 1
    2944:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <lcd_puts_p>
				sprintf( gBuffer, "%4i", gBacklight);
    2948:	80 91 a1 02 	lds	r24, 0x02A1
    294c:	1f 92       	push	r1
    294e:	8f 93       	push	r24
    2950:	1f 93       	push	r17
    2952:	0f 93       	push	r16
    2954:	df 93       	push	r29
    2956:	cf 93       	push	r28
    2958:	0e 94 67 19 	call	0x32ce	; 0x32ce <sprintf>
				lcd_puts( gBuffer);
    295c:	82 ea       	ldi	r24, 0xA2	; 162
    295e:	92 e0       	ldi	r25, 0x02	; 2
    2960:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <lcd_puts>

				// change PWM value to modify on-time of LED backlight
				while( ! BTN_MODE)
    2964:	0f 90       	pop	r0
    2966:	0f 90       	pop	r0
    2968:	0f 90       	pop	r0
    296a:	0f 90       	pop	r0
    296c:	0f 90       	pop	r0
    296e:	0f 90       	pop	r0
    2970:	83 b1       	in	r24, 0x03	; 3
    2972:	90 e0       	ldi	r25, 0x00	; 0
    2974:	80 95       	com	r24
    2976:	90 95       	com	r25
    2978:	87 fd       	sbrc	r24, 7
    297a:	5a c0       	rjmp	.+180    	; 0x2a30 <main+0xa98>
				{
					while( BTN_UP)	// increase interval
    297c:	89 b1       	in	r24, 0x09	; 9
    297e:	90 e0       	ldi	r25, 0x00	; 0
    2980:	80 95       	com	r24
    2982:	90 95       	com	r25
    2984:	82 ff       	sbrs	r24, 2
    2986:	4d c0       	rjmp	.+154    	; 0x2a22 <main+0xa8a>
					{
						if( gBacklight < 255)
    2988:	80 91 a1 02 	lds	r24, 0x02A1
    298c:	8f 3f       	cpi	r24, 0xFF	; 255
    298e:	e1 f0       	breq	.+56     	; 0x29c8 <main+0xa30>
						{
							PWM_OUT = ++gBacklight;
    2990:	8f 5f       	subi	r24, 0xFF	; 255
    2992:	80 93 a1 02 	sts	0x02A1, r24
    2996:	88 bd       	out	0x28, r24	; 40
							lcd_gotoxy( 0,1);
    2998:	61 e0       	ldi	r22, 0x01	; 1
    299a:	80 e0       	ldi	r24, 0x00	; 0
    299c:	0e 94 9f 07 	call	0xf3e	; 0xf3e <lcd_gotoxy>
							sprintf( gBuffer, "%4i", gBacklight);
    29a0:	80 91 a1 02 	lds	r24, 0x02A1
    29a4:	1f 92       	push	r1
    29a6:	8f 93       	push	r24
    29a8:	1f 93       	push	r17
    29aa:	0f 93       	push	r16
    29ac:	df 93       	push	r29
    29ae:	cf 93       	push	r28
    29b0:	0e 94 67 19 	call	0x32ce	; 0x32ce <sprintf>
							lcd_puts( gBuffer);
    29b4:	82 ea       	ldi	r24, 0xA2	; 162
    29b6:	92 e0       	ldi	r25, 0x02	; 2
    29b8:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <lcd_puts>
    29bc:	0f 90       	pop	r0
    29be:	0f 90       	pop	r0
    29c0:	0f 90       	pop	r0
    29c2:	0f 90       	pop	r0
    29c4:	0f 90       	pop	r0
    29c6:	0f 90       	pop	r0
						}
						// allow time to release button but still have fast cycle rate
						delay_ms( 25);
    29c8:	6d e2       	ldi	r22, 0x2D	; 45
    29ca:	72 e8       	ldi	r23, 0x82	; 130
    29cc:	80 e0       	ldi	r24, 0x00	; 0
    29ce:	90 e0       	ldi	r25, 0x00	; 0
    29d0:	0e 94 3d 06 	call	0xc7a	; 0xc7a <delayloop32>
    29d4:	d3 cf       	rjmp	.-90     	; 0x297c <main+0x9e4>
					}
					while( BTN_DOWN)	// decrease interval
					{
						if( gBacklight > 0)
    29d6:	80 91 a1 02 	lds	r24, 0x02A1
    29da:	88 23       	and	r24, r24
    29dc:	e1 f0       	breq	.+56     	; 0x2a16 <main+0xa7e>
						{
							PWM_OUT = --gBacklight;
    29de:	81 50       	subi	r24, 0x01	; 1
    29e0:	80 93 a1 02 	sts	0x02A1, r24
    29e4:	88 bd       	out	0x28, r24	; 40
							lcd_gotoxy( 0,1);
    29e6:	61 e0       	ldi	r22, 0x01	; 1
    29e8:	80 e0       	ldi	r24, 0x00	; 0
    29ea:	0e 94 9f 07 	call	0xf3e	; 0xf3e <lcd_gotoxy>
							sprintf( gBuffer, "%4i", gBacklight);
    29ee:	80 91 a1 02 	lds	r24, 0x02A1
    29f2:	1f 92       	push	r1
    29f4:	8f 93       	push	r24
    29f6:	1f 93       	push	r17
    29f8:	0f 93       	push	r16
    29fa:	df 93       	push	r29
    29fc:	cf 93       	push	r28
    29fe:	0e 94 67 19 	call	0x32ce	; 0x32ce <sprintf>
							lcd_puts( gBuffer);
    2a02:	82 ea       	ldi	r24, 0xA2	; 162
    2a04:	92 e0       	ldi	r25, 0x02	; 2
    2a06:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <lcd_puts>
    2a0a:	0f 90       	pop	r0
    2a0c:	0f 90       	pop	r0
    2a0e:	0f 90       	pop	r0
    2a10:	0f 90       	pop	r0
    2a12:	0f 90       	pop	r0
    2a14:	0f 90       	pop	r0
						}
						// allow time to release button but still have fast cycle rate
						delay_ms( 25);
    2a16:	6d e2       	ldi	r22, 0x2D	; 45
    2a18:	72 e8       	ldi	r23, 0x82	; 130
    2a1a:	80 e0       	ldi	r24, 0x00	; 0
    2a1c:	90 e0       	ldi	r25, 0x00	; 0
    2a1e:	0e 94 3d 06 	call	0xc7a	; 0xc7a <delayloop32>
							lcd_puts( gBuffer);
						}
						// allow time to release button but still have fast cycle rate
						delay_ms( 25);
					}
					while( BTN_DOWN)	// decrease interval
    2a22:	89 b1       	in	r24, 0x09	; 9
    2a24:	90 e0       	ldi	r25, 0x00	; 0
    2a26:	80 95       	com	r24
    2a28:	90 95       	com	r25
    2a2a:	83 fd       	sbrc	r24, 3
    2a2c:	d4 cf       	rjmp	.-88     	; 0x29d6 <main+0xa3e>
    2a2e:	a0 cf       	rjmp	.-192    	; 0x2970 <main+0x9d8>
						// allow time to release button but still have fast cycle rate
						delay_ms( 25);
					}
				}
				//mode = MODE_SHOW_DATE;
				eeprom_write_byte( &nvBacklight, gBacklight);	// save the persistant value
    2a30:	60 91 a1 02 	lds	r22, 0x02A1
    2a34:	89 e4       	ldi	r24, 0x49	; 73
    2a36:	90 e0       	ldi	r25, 0x00	; 0
    2a38:	0e 94 83 1b 	call	0x3706	; 0x3706 <__eewr_byte_m168>
				lcd_clrscr();	// ack button press
    2a3c:	0e 94 b2 07 	call	0xf64	; 0xf64 <lcd_clrscr>
				while( BTN_MODE);	// wait until switch released
    2a40:	83 b1       	in	r24, 0x03	; 3
    2a42:	90 e0       	ldi	r25, 0x00	; 0
    2a44:	80 95       	com	r24
    2a46:	90 95       	com	r25
    2a48:	87 fd       	sbrc	r24, 7
    2a4a:	fa cf       	rjmp	.-12     	; 0x2a40 <main+0xaa8>
    2a4c:	a2 cb       	rjmp	.-2236   	; 0x2192 <main+0x1fa>

00002a4e <__mulsi3>:
    2a4e:	db 01       	movw	r26, r22
    2a50:	8f 93       	push	r24
    2a52:	9f 93       	push	r25
    2a54:	0e 94 9b 15 	call	0x2b36	; 0x2b36 <__muluhisi3>
    2a58:	bf 91       	pop	r27
    2a5a:	af 91       	pop	r26
    2a5c:	a2 9f       	mul	r26, r18
    2a5e:	80 0d       	add	r24, r0
    2a60:	91 1d       	adc	r25, r1
    2a62:	a3 9f       	mul	r26, r19
    2a64:	90 0d       	add	r25, r0
    2a66:	b2 9f       	mul	r27, r18
    2a68:	90 0d       	add	r25, r0
    2a6a:	11 24       	eor	r1, r1
    2a6c:	08 95       	ret

00002a6e <__divmodhi4>:
    2a6e:	97 fb       	bst	r25, 7
    2a70:	07 2e       	mov	r0, r23
    2a72:	16 f4       	brtc	.+4      	; 0x2a78 <__divmodhi4+0xa>
    2a74:	00 94       	com	r0
    2a76:	07 d0       	rcall	.+14     	; 0x2a86 <__divmodhi4_neg1>
    2a78:	77 fd       	sbrc	r23, 7
    2a7a:	09 d0       	rcall	.+18     	; 0x2a8e <__divmodhi4_neg2>
    2a7c:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <__udivmodhi4>
    2a80:	07 fc       	sbrc	r0, 7
    2a82:	05 d0       	rcall	.+10     	; 0x2a8e <__divmodhi4_neg2>
    2a84:	3e f4       	brtc	.+14     	; 0x2a94 <__divmodhi4_exit>

00002a86 <__divmodhi4_neg1>:
    2a86:	90 95       	com	r25
    2a88:	81 95       	neg	r24
    2a8a:	9f 4f       	sbci	r25, 0xFF	; 255
    2a8c:	08 95       	ret

00002a8e <__divmodhi4_neg2>:
    2a8e:	70 95       	com	r23
    2a90:	61 95       	neg	r22
    2a92:	7f 4f       	sbci	r23, 0xFF	; 255

00002a94 <__divmodhi4_exit>:
    2a94:	08 95       	ret

00002a96 <__udivmodsi4>:
    2a96:	a1 e2       	ldi	r26, 0x21	; 33
    2a98:	1a 2e       	mov	r1, r26
    2a9a:	aa 1b       	sub	r26, r26
    2a9c:	bb 1b       	sub	r27, r27
    2a9e:	fd 01       	movw	r30, r26
    2aa0:	0d c0       	rjmp	.+26     	; 0x2abc <__udivmodsi4_ep>

00002aa2 <__udivmodsi4_loop>:
    2aa2:	aa 1f       	adc	r26, r26
    2aa4:	bb 1f       	adc	r27, r27
    2aa6:	ee 1f       	adc	r30, r30
    2aa8:	ff 1f       	adc	r31, r31
    2aaa:	a2 17       	cp	r26, r18
    2aac:	b3 07       	cpc	r27, r19
    2aae:	e4 07       	cpc	r30, r20
    2ab0:	f5 07       	cpc	r31, r21
    2ab2:	20 f0       	brcs	.+8      	; 0x2abc <__udivmodsi4_ep>
    2ab4:	a2 1b       	sub	r26, r18
    2ab6:	b3 0b       	sbc	r27, r19
    2ab8:	e4 0b       	sbc	r30, r20
    2aba:	f5 0b       	sbc	r31, r21

00002abc <__udivmodsi4_ep>:
    2abc:	66 1f       	adc	r22, r22
    2abe:	77 1f       	adc	r23, r23
    2ac0:	88 1f       	adc	r24, r24
    2ac2:	99 1f       	adc	r25, r25
    2ac4:	1a 94       	dec	r1
    2ac6:	69 f7       	brne	.-38     	; 0x2aa2 <__udivmodsi4_loop>
    2ac8:	60 95       	com	r22
    2aca:	70 95       	com	r23
    2acc:	80 95       	com	r24
    2ace:	90 95       	com	r25
    2ad0:	9b 01       	movw	r18, r22
    2ad2:	ac 01       	movw	r20, r24
    2ad4:	bd 01       	movw	r22, r26
    2ad6:	cf 01       	movw	r24, r30
    2ad8:	08 95       	ret

00002ada <__divmodsi4>:
    2ada:	05 2e       	mov	r0, r21
    2adc:	97 fb       	bst	r25, 7
    2ade:	1e f4       	brtc	.+6      	; 0x2ae6 <__divmodsi4+0xc>
    2ae0:	00 94       	com	r0
    2ae2:	0e 94 84 15 	call	0x2b08	; 0x2b08 <__negsi2>
    2ae6:	57 fd       	sbrc	r21, 7
    2ae8:	07 d0       	rcall	.+14     	; 0x2af8 <__divmodsi4_neg2>
    2aea:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <__udivmodsi4>
    2aee:	07 fc       	sbrc	r0, 7
    2af0:	03 d0       	rcall	.+6      	; 0x2af8 <__divmodsi4_neg2>
    2af2:	4e f4       	brtc	.+18     	; 0x2b06 <__divmodsi4_exit>
    2af4:	0c 94 84 15 	jmp	0x2b08	; 0x2b08 <__negsi2>

00002af8 <__divmodsi4_neg2>:
    2af8:	50 95       	com	r21
    2afa:	40 95       	com	r20
    2afc:	30 95       	com	r19
    2afe:	21 95       	neg	r18
    2b00:	3f 4f       	sbci	r19, 0xFF	; 255
    2b02:	4f 4f       	sbci	r20, 0xFF	; 255
    2b04:	5f 4f       	sbci	r21, 0xFF	; 255

00002b06 <__divmodsi4_exit>:
    2b06:	08 95       	ret

00002b08 <__negsi2>:
    2b08:	90 95       	com	r25
    2b0a:	80 95       	com	r24
    2b0c:	70 95       	com	r23
    2b0e:	61 95       	neg	r22
    2b10:	7f 4f       	sbci	r23, 0xFF	; 255
    2b12:	8f 4f       	sbci	r24, 0xFF	; 255
    2b14:	9f 4f       	sbci	r25, 0xFF	; 255
    2b16:	08 95       	ret

00002b18 <__umulhisi3>:
    2b18:	a2 9f       	mul	r26, r18
    2b1a:	b0 01       	movw	r22, r0
    2b1c:	b3 9f       	mul	r27, r19
    2b1e:	c0 01       	movw	r24, r0
    2b20:	a3 9f       	mul	r26, r19
    2b22:	70 0d       	add	r23, r0
    2b24:	81 1d       	adc	r24, r1
    2b26:	11 24       	eor	r1, r1
    2b28:	91 1d       	adc	r25, r1
    2b2a:	b2 9f       	mul	r27, r18
    2b2c:	70 0d       	add	r23, r0
    2b2e:	81 1d       	adc	r24, r1
    2b30:	11 24       	eor	r1, r1
    2b32:	91 1d       	adc	r25, r1
    2b34:	08 95       	ret

00002b36 <__muluhisi3>:
    2b36:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <__umulhisi3>
    2b3a:	a5 9f       	mul	r26, r21
    2b3c:	90 0d       	add	r25, r0
    2b3e:	b4 9f       	mul	r27, r20
    2b40:	90 0d       	add	r25, r0
    2b42:	a4 9f       	mul	r26, r20
    2b44:	80 0d       	add	r24, r0
    2b46:	91 1d       	adc	r25, r1
    2b48:	11 24       	eor	r1, r1
    2b4a:	08 95       	ret

00002b4c <__mulshisi3>:
    2b4c:	b7 ff       	sbrs	r27, 7
    2b4e:	0c 94 9b 15 	jmp	0x2b36	; 0x2b36 <__muluhisi3>

00002b52 <__mulohisi3>:
    2b52:	0e 94 9b 15 	call	0x2b36	; 0x2b36 <__muluhisi3>
    2b56:	82 1b       	sub	r24, r18
    2b58:	93 0b       	sbc	r25, r19
    2b5a:	08 95       	ret

00002b5c <__udivmodhi4>:
    2b5c:	aa 1b       	sub	r26, r26
    2b5e:	bb 1b       	sub	r27, r27
    2b60:	51 e1       	ldi	r21, 0x11	; 17
    2b62:	07 c0       	rjmp	.+14     	; 0x2b72 <__udivmodhi4_ep>

00002b64 <__udivmodhi4_loop>:
    2b64:	aa 1f       	adc	r26, r26
    2b66:	bb 1f       	adc	r27, r27
    2b68:	a6 17       	cp	r26, r22
    2b6a:	b7 07       	cpc	r27, r23
    2b6c:	10 f0       	brcs	.+4      	; 0x2b72 <__udivmodhi4_ep>
    2b6e:	a6 1b       	sub	r26, r22
    2b70:	b7 0b       	sbc	r27, r23

00002b72 <__udivmodhi4_ep>:
    2b72:	88 1f       	adc	r24, r24
    2b74:	99 1f       	adc	r25, r25
    2b76:	5a 95       	dec	r21
    2b78:	a9 f7       	brne	.-22     	; 0x2b64 <__udivmodhi4_loop>
    2b7a:	80 95       	com	r24
    2b7c:	90 95       	com	r25
    2b7e:	bc 01       	movw	r22, r24
    2b80:	cd 01       	movw	r24, r26
    2b82:	08 95       	ret

00002b84 <__subsf3>:
    2b84:	50 58       	subi	r21, 0x80	; 128

00002b86 <__addsf3>:
    2b86:	bb 27       	eor	r27, r27
    2b88:	aa 27       	eor	r26, r26
    2b8a:	0e d0       	rcall	.+28     	; 0x2ba8 <__addsf3x>
    2b8c:	1c c1       	rjmp	.+568    	; 0x2dc6 <__fp_round>
    2b8e:	0d d1       	rcall	.+538    	; 0x2daa <__fp_pscA>
    2b90:	30 f0       	brcs	.+12     	; 0x2b9e <__addsf3+0x18>
    2b92:	12 d1       	rcall	.+548    	; 0x2db8 <__fp_pscB>
    2b94:	20 f0       	brcs	.+8      	; 0x2b9e <__addsf3+0x18>
    2b96:	31 f4       	brne	.+12     	; 0x2ba4 <__addsf3+0x1e>
    2b98:	9f 3f       	cpi	r25, 0xFF	; 255
    2b9a:	11 f4       	brne	.+4      	; 0x2ba0 <__addsf3+0x1a>
    2b9c:	1e f4       	brtc	.+6      	; 0x2ba4 <__addsf3+0x1e>
    2b9e:	02 c1       	rjmp	.+516    	; 0x2da4 <__fp_nan>
    2ba0:	0e f4       	brtc	.+2      	; 0x2ba4 <__addsf3+0x1e>
    2ba2:	e0 95       	com	r30
    2ba4:	e7 fb       	bst	r30, 7
    2ba6:	f8 c0       	rjmp	.+496    	; 0x2d98 <__fp_inf>

00002ba8 <__addsf3x>:
    2ba8:	e9 2f       	mov	r30, r25
    2baa:	1e d1       	rcall	.+572    	; 0x2de8 <__fp_split3>
    2bac:	80 f3       	brcs	.-32     	; 0x2b8e <__addsf3+0x8>
    2bae:	ba 17       	cp	r27, r26
    2bb0:	62 07       	cpc	r22, r18
    2bb2:	73 07       	cpc	r23, r19
    2bb4:	84 07       	cpc	r24, r20
    2bb6:	95 07       	cpc	r25, r21
    2bb8:	18 f0       	brcs	.+6      	; 0x2bc0 <__addsf3x+0x18>
    2bba:	71 f4       	brne	.+28     	; 0x2bd8 <__addsf3x+0x30>
    2bbc:	9e f5       	brtc	.+102    	; 0x2c24 <__addsf3x+0x7c>
    2bbe:	36 c1       	rjmp	.+620    	; 0x2e2c <__fp_zero>
    2bc0:	0e f4       	brtc	.+2      	; 0x2bc4 <__addsf3x+0x1c>
    2bc2:	e0 95       	com	r30
    2bc4:	0b 2e       	mov	r0, r27
    2bc6:	ba 2f       	mov	r27, r26
    2bc8:	a0 2d       	mov	r26, r0
    2bca:	0b 01       	movw	r0, r22
    2bcc:	b9 01       	movw	r22, r18
    2bce:	90 01       	movw	r18, r0
    2bd0:	0c 01       	movw	r0, r24
    2bd2:	ca 01       	movw	r24, r20
    2bd4:	a0 01       	movw	r20, r0
    2bd6:	11 24       	eor	r1, r1
    2bd8:	ff 27       	eor	r31, r31
    2bda:	59 1b       	sub	r21, r25
    2bdc:	99 f0       	breq	.+38     	; 0x2c04 <__addsf3x+0x5c>
    2bde:	59 3f       	cpi	r21, 0xF9	; 249
    2be0:	50 f4       	brcc	.+20     	; 0x2bf6 <__addsf3x+0x4e>
    2be2:	50 3e       	cpi	r21, 0xE0	; 224
    2be4:	68 f1       	brcs	.+90     	; 0x2c40 <__addsf3x+0x98>
    2be6:	1a 16       	cp	r1, r26
    2be8:	f0 40       	sbci	r31, 0x00	; 0
    2bea:	a2 2f       	mov	r26, r18
    2bec:	23 2f       	mov	r18, r19
    2bee:	34 2f       	mov	r19, r20
    2bf0:	44 27       	eor	r20, r20
    2bf2:	58 5f       	subi	r21, 0xF8	; 248
    2bf4:	f3 cf       	rjmp	.-26     	; 0x2bdc <__addsf3x+0x34>
    2bf6:	46 95       	lsr	r20
    2bf8:	37 95       	ror	r19
    2bfa:	27 95       	ror	r18
    2bfc:	a7 95       	ror	r26
    2bfe:	f0 40       	sbci	r31, 0x00	; 0
    2c00:	53 95       	inc	r21
    2c02:	c9 f7       	brne	.-14     	; 0x2bf6 <__addsf3x+0x4e>
    2c04:	7e f4       	brtc	.+30     	; 0x2c24 <__addsf3x+0x7c>
    2c06:	1f 16       	cp	r1, r31
    2c08:	ba 0b       	sbc	r27, r26
    2c0a:	62 0b       	sbc	r22, r18
    2c0c:	73 0b       	sbc	r23, r19
    2c0e:	84 0b       	sbc	r24, r20
    2c10:	ba f0       	brmi	.+46     	; 0x2c40 <__addsf3x+0x98>
    2c12:	91 50       	subi	r25, 0x01	; 1
    2c14:	a1 f0       	breq	.+40     	; 0x2c3e <__addsf3x+0x96>
    2c16:	ff 0f       	add	r31, r31
    2c18:	bb 1f       	adc	r27, r27
    2c1a:	66 1f       	adc	r22, r22
    2c1c:	77 1f       	adc	r23, r23
    2c1e:	88 1f       	adc	r24, r24
    2c20:	c2 f7       	brpl	.-16     	; 0x2c12 <__addsf3x+0x6a>
    2c22:	0e c0       	rjmp	.+28     	; 0x2c40 <__addsf3x+0x98>
    2c24:	ba 0f       	add	r27, r26
    2c26:	62 1f       	adc	r22, r18
    2c28:	73 1f       	adc	r23, r19
    2c2a:	84 1f       	adc	r24, r20
    2c2c:	48 f4       	brcc	.+18     	; 0x2c40 <__addsf3x+0x98>
    2c2e:	87 95       	ror	r24
    2c30:	77 95       	ror	r23
    2c32:	67 95       	ror	r22
    2c34:	b7 95       	ror	r27
    2c36:	f7 95       	ror	r31
    2c38:	9e 3f       	cpi	r25, 0xFE	; 254
    2c3a:	08 f0       	brcs	.+2      	; 0x2c3e <__addsf3x+0x96>
    2c3c:	b3 cf       	rjmp	.-154    	; 0x2ba4 <__addsf3+0x1e>
    2c3e:	93 95       	inc	r25
    2c40:	88 0f       	add	r24, r24
    2c42:	08 f0       	brcs	.+2      	; 0x2c46 <__addsf3x+0x9e>
    2c44:	99 27       	eor	r25, r25
    2c46:	ee 0f       	add	r30, r30
    2c48:	97 95       	ror	r25
    2c4a:	87 95       	ror	r24
    2c4c:	08 95       	ret

00002c4e <__divsf3>:
    2c4e:	0c d0       	rcall	.+24     	; 0x2c68 <__divsf3x>
    2c50:	ba c0       	rjmp	.+372    	; 0x2dc6 <__fp_round>
    2c52:	b2 d0       	rcall	.+356    	; 0x2db8 <__fp_pscB>
    2c54:	40 f0       	brcs	.+16     	; 0x2c66 <__divsf3+0x18>
    2c56:	a9 d0       	rcall	.+338    	; 0x2daa <__fp_pscA>
    2c58:	30 f0       	brcs	.+12     	; 0x2c66 <__divsf3+0x18>
    2c5a:	21 f4       	brne	.+8      	; 0x2c64 <__divsf3+0x16>
    2c5c:	5f 3f       	cpi	r21, 0xFF	; 255
    2c5e:	19 f0       	breq	.+6      	; 0x2c66 <__divsf3+0x18>
    2c60:	9b c0       	rjmp	.+310    	; 0x2d98 <__fp_inf>
    2c62:	51 11       	cpse	r21, r1
    2c64:	e4 c0       	rjmp	.+456    	; 0x2e2e <__fp_szero>
    2c66:	9e c0       	rjmp	.+316    	; 0x2da4 <__fp_nan>

00002c68 <__divsf3x>:
    2c68:	bf d0       	rcall	.+382    	; 0x2de8 <__fp_split3>
    2c6a:	98 f3       	brcs	.-26     	; 0x2c52 <__divsf3+0x4>

00002c6c <__divsf3_pse>:
    2c6c:	99 23       	and	r25, r25
    2c6e:	c9 f3       	breq	.-14     	; 0x2c62 <__divsf3+0x14>
    2c70:	55 23       	and	r21, r21
    2c72:	b1 f3       	breq	.-20     	; 0x2c60 <__divsf3+0x12>
    2c74:	95 1b       	sub	r25, r21
    2c76:	55 0b       	sbc	r21, r21
    2c78:	bb 27       	eor	r27, r27
    2c7a:	aa 27       	eor	r26, r26
    2c7c:	62 17       	cp	r22, r18
    2c7e:	73 07       	cpc	r23, r19
    2c80:	84 07       	cpc	r24, r20
    2c82:	38 f0       	brcs	.+14     	; 0x2c92 <__divsf3_pse+0x26>
    2c84:	9f 5f       	subi	r25, 0xFF	; 255
    2c86:	5f 4f       	sbci	r21, 0xFF	; 255
    2c88:	22 0f       	add	r18, r18
    2c8a:	33 1f       	adc	r19, r19
    2c8c:	44 1f       	adc	r20, r20
    2c8e:	aa 1f       	adc	r26, r26
    2c90:	a9 f3       	breq	.-22     	; 0x2c7c <__divsf3_pse+0x10>
    2c92:	33 d0       	rcall	.+102    	; 0x2cfa <__divsf3_pse+0x8e>
    2c94:	0e 2e       	mov	r0, r30
    2c96:	3a f0       	brmi	.+14     	; 0x2ca6 <__divsf3_pse+0x3a>
    2c98:	e0 e8       	ldi	r30, 0x80	; 128
    2c9a:	30 d0       	rcall	.+96     	; 0x2cfc <__divsf3_pse+0x90>
    2c9c:	91 50       	subi	r25, 0x01	; 1
    2c9e:	50 40       	sbci	r21, 0x00	; 0
    2ca0:	e6 95       	lsr	r30
    2ca2:	00 1c       	adc	r0, r0
    2ca4:	ca f7       	brpl	.-14     	; 0x2c98 <__divsf3_pse+0x2c>
    2ca6:	29 d0       	rcall	.+82     	; 0x2cfa <__divsf3_pse+0x8e>
    2ca8:	fe 2f       	mov	r31, r30
    2caa:	27 d0       	rcall	.+78     	; 0x2cfa <__divsf3_pse+0x8e>
    2cac:	66 0f       	add	r22, r22
    2cae:	77 1f       	adc	r23, r23
    2cb0:	88 1f       	adc	r24, r24
    2cb2:	bb 1f       	adc	r27, r27
    2cb4:	26 17       	cp	r18, r22
    2cb6:	37 07       	cpc	r19, r23
    2cb8:	48 07       	cpc	r20, r24
    2cba:	ab 07       	cpc	r26, r27
    2cbc:	b0 e8       	ldi	r27, 0x80	; 128
    2cbe:	09 f0       	breq	.+2      	; 0x2cc2 <__divsf3_pse+0x56>
    2cc0:	bb 0b       	sbc	r27, r27
    2cc2:	80 2d       	mov	r24, r0
    2cc4:	bf 01       	movw	r22, r30
    2cc6:	ff 27       	eor	r31, r31
    2cc8:	93 58       	subi	r25, 0x83	; 131
    2cca:	5f 4f       	sbci	r21, 0xFF	; 255
    2ccc:	2a f0       	brmi	.+10     	; 0x2cd8 <__divsf3_pse+0x6c>
    2cce:	9e 3f       	cpi	r25, 0xFE	; 254
    2cd0:	51 05       	cpc	r21, r1
    2cd2:	68 f0       	brcs	.+26     	; 0x2cee <__divsf3_pse+0x82>
    2cd4:	61 c0       	rjmp	.+194    	; 0x2d98 <__fp_inf>
    2cd6:	ab c0       	rjmp	.+342    	; 0x2e2e <__fp_szero>
    2cd8:	5f 3f       	cpi	r21, 0xFF	; 255
    2cda:	ec f3       	brlt	.-6      	; 0x2cd6 <__divsf3_pse+0x6a>
    2cdc:	98 3e       	cpi	r25, 0xE8	; 232
    2cde:	dc f3       	brlt	.-10     	; 0x2cd6 <__divsf3_pse+0x6a>
    2ce0:	86 95       	lsr	r24
    2ce2:	77 95       	ror	r23
    2ce4:	67 95       	ror	r22
    2ce6:	b7 95       	ror	r27
    2ce8:	f7 95       	ror	r31
    2cea:	9f 5f       	subi	r25, 0xFF	; 255
    2cec:	c9 f7       	brne	.-14     	; 0x2ce0 <__divsf3_pse+0x74>
    2cee:	88 0f       	add	r24, r24
    2cf0:	91 1d       	adc	r25, r1
    2cf2:	96 95       	lsr	r25
    2cf4:	87 95       	ror	r24
    2cf6:	97 f9       	bld	r25, 7
    2cf8:	08 95       	ret
    2cfa:	e1 e0       	ldi	r30, 0x01	; 1
    2cfc:	66 0f       	add	r22, r22
    2cfe:	77 1f       	adc	r23, r23
    2d00:	88 1f       	adc	r24, r24
    2d02:	bb 1f       	adc	r27, r27
    2d04:	62 17       	cp	r22, r18
    2d06:	73 07       	cpc	r23, r19
    2d08:	84 07       	cpc	r24, r20
    2d0a:	ba 07       	cpc	r27, r26
    2d0c:	20 f0       	brcs	.+8      	; 0x2d16 <__divsf3_pse+0xaa>
    2d0e:	62 1b       	sub	r22, r18
    2d10:	73 0b       	sbc	r23, r19
    2d12:	84 0b       	sbc	r24, r20
    2d14:	ba 0b       	sbc	r27, r26
    2d16:	ee 1f       	adc	r30, r30
    2d18:	88 f7       	brcc	.-30     	; 0x2cfc <__divsf3_pse+0x90>
    2d1a:	e0 95       	com	r30
    2d1c:	08 95       	ret

00002d1e <__floatunsisf>:
    2d1e:	e8 94       	clt
    2d20:	09 c0       	rjmp	.+18     	; 0x2d34 <__floatsisf+0x12>

00002d22 <__floatsisf>:
    2d22:	97 fb       	bst	r25, 7
    2d24:	3e f4       	brtc	.+14     	; 0x2d34 <__floatsisf+0x12>
    2d26:	90 95       	com	r25
    2d28:	80 95       	com	r24
    2d2a:	70 95       	com	r23
    2d2c:	61 95       	neg	r22
    2d2e:	7f 4f       	sbci	r23, 0xFF	; 255
    2d30:	8f 4f       	sbci	r24, 0xFF	; 255
    2d32:	9f 4f       	sbci	r25, 0xFF	; 255
    2d34:	99 23       	and	r25, r25
    2d36:	a9 f0       	breq	.+42     	; 0x2d62 <__floatsisf+0x40>
    2d38:	f9 2f       	mov	r31, r25
    2d3a:	96 e9       	ldi	r25, 0x96	; 150
    2d3c:	bb 27       	eor	r27, r27
    2d3e:	93 95       	inc	r25
    2d40:	f6 95       	lsr	r31
    2d42:	87 95       	ror	r24
    2d44:	77 95       	ror	r23
    2d46:	67 95       	ror	r22
    2d48:	b7 95       	ror	r27
    2d4a:	f1 11       	cpse	r31, r1
    2d4c:	f8 cf       	rjmp	.-16     	; 0x2d3e <__floatsisf+0x1c>
    2d4e:	fa f4       	brpl	.+62     	; 0x2d8e <__floatsisf+0x6c>
    2d50:	bb 0f       	add	r27, r27
    2d52:	11 f4       	brne	.+4      	; 0x2d58 <__floatsisf+0x36>
    2d54:	60 ff       	sbrs	r22, 0
    2d56:	1b c0       	rjmp	.+54     	; 0x2d8e <__floatsisf+0x6c>
    2d58:	6f 5f       	subi	r22, 0xFF	; 255
    2d5a:	7f 4f       	sbci	r23, 0xFF	; 255
    2d5c:	8f 4f       	sbci	r24, 0xFF	; 255
    2d5e:	9f 4f       	sbci	r25, 0xFF	; 255
    2d60:	16 c0       	rjmp	.+44     	; 0x2d8e <__floatsisf+0x6c>
    2d62:	88 23       	and	r24, r24
    2d64:	11 f0       	breq	.+4      	; 0x2d6a <__floatsisf+0x48>
    2d66:	96 e9       	ldi	r25, 0x96	; 150
    2d68:	11 c0       	rjmp	.+34     	; 0x2d8c <__floatsisf+0x6a>
    2d6a:	77 23       	and	r23, r23
    2d6c:	21 f0       	breq	.+8      	; 0x2d76 <__floatsisf+0x54>
    2d6e:	9e e8       	ldi	r25, 0x8E	; 142
    2d70:	87 2f       	mov	r24, r23
    2d72:	76 2f       	mov	r23, r22
    2d74:	05 c0       	rjmp	.+10     	; 0x2d80 <__floatsisf+0x5e>
    2d76:	66 23       	and	r22, r22
    2d78:	71 f0       	breq	.+28     	; 0x2d96 <__floatsisf+0x74>
    2d7a:	96 e8       	ldi	r25, 0x86	; 134
    2d7c:	86 2f       	mov	r24, r22
    2d7e:	70 e0       	ldi	r23, 0x00	; 0
    2d80:	60 e0       	ldi	r22, 0x00	; 0
    2d82:	2a f0       	brmi	.+10     	; 0x2d8e <__floatsisf+0x6c>
    2d84:	9a 95       	dec	r25
    2d86:	66 0f       	add	r22, r22
    2d88:	77 1f       	adc	r23, r23
    2d8a:	88 1f       	adc	r24, r24
    2d8c:	da f7       	brpl	.-10     	; 0x2d84 <__floatsisf+0x62>
    2d8e:	88 0f       	add	r24, r24
    2d90:	96 95       	lsr	r25
    2d92:	87 95       	ror	r24
    2d94:	97 f9       	bld	r25, 7
    2d96:	08 95       	ret

00002d98 <__fp_inf>:
    2d98:	97 f9       	bld	r25, 7
    2d9a:	9f 67       	ori	r25, 0x7F	; 127
    2d9c:	80 e8       	ldi	r24, 0x80	; 128
    2d9e:	70 e0       	ldi	r23, 0x00	; 0
    2da0:	60 e0       	ldi	r22, 0x00	; 0
    2da2:	08 95       	ret

00002da4 <__fp_nan>:
    2da4:	9f ef       	ldi	r25, 0xFF	; 255
    2da6:	80 ec       	ldi	r24, 0xC0	; 192
    2da8:	08 95       	ret

00002daa <__fp_pscA>:
    2daa:	00 24       	eor	r0, r0
    2dac:	0a 94       	dec	r0
    2dae:	16 16       	cp	r1, r22
    2db0:	17 06       	cpc	r1, r23
    2db2:	18 06       	cpc	r1, r24
    2db4:	09 06       	cpc	r0, r25
    2db6:	08 95       	ret

00002db8 <__fp_pscB>:
    2db8:	00 24       	eor	r0, r0
    2dba:	0a 94       	dec	r0
    2dbc:	12 16       	cp	r1, r18
    2dbe:	13 06       	cpc	r1, r19
    2dc0:	14 06       	cpc	r1, r20
    2dc2:	05 06       	cpc	r0, r21
    2dc4:	08 95       	ret

00002dc6 <__fp_round>:
    2dc6:	09 2e       	mov	r0, r25
    2dc8:	03 94       	inc	r0
    2dca:	00 0c       	add	r0, r0
    2dcc:	11 f4       	brne	.+4      	; 0x2dd2 <__fp_round+0xc>
    2dce:	88 23       	and	r24, r24
    2dd0:	52 f0       	brmi	.+20     	; 0x2de6 <__fp_round+0x20>
    2dd2:	bb 0f       	add	r27, r27
    2dd4:	40 f4       	brcc	.+16     	; 0x2de6 <__fp_round+0x20>
    2dd6:	bf 2b       	or	r27, r31
    2dd8:	11 f4       	brne	.+4      	; 0x2dde <__fp_round+0x18>
    2dda:	60 ff       	sbrs	r22, 0
    2ddc:	04 c0       	rjmp	.+8      	; 0x2de6 <__fp_round+0x20>
    2dde:	6f 5f       	subi	r22, 0xFF	; 255
    2de0:	7f 4f       	sbci	r23, 0xFF	; 255
    2de2:	8f 4f       	sbci	r24, 0xFF	; 255
    2de4:	9f 4f       	sbci	r25, 0xFF	; 255
    2de6:	08 95       	ret

00002de8 <__fp_split3>:
    2de8:	57 fd       	sbrc	r21, 7
    2dea:	90 58       	subi	r25, 0x80	; 128
    2dec:	44 0f       	add	r20, r20
    2dee:	55 1f       	adc	r21, r21
    2df0:	59 f0       	breq	.+22     	; 0x2e08 <__fp_splitA+0x10>
    2df2:	5f 3f       	cpi	r21, 0xFF	; 255
    2df4:	71 f0       	breq	.+28     	; 0x2e12 <__fp_splitA+0x1a>
    2df6:	47 95       	ror	r20

00002df8 <__fp_splitA>:
    2df8:	88 0f       	add	r24, r24
    2dfa:	97 fb       	bst	r25, 7
    2dfc:	99 1f       	adc	r25, r25
    2dfe:	61 f0       	breq	.+24     	; 0x2e18 <__fp_splitA+0x20>
    2e00:	9f 3f       	cpi	r25, 0xFF	; 255
    2e02:	79 f0       	breq	.+30     	; 0x2e22 <__fp_splitA+0x2a>
    2e04:	87 95       	ror	r24
    2e06:	08 95       	ret
    2e08:	12 16       	cp	r1, r18
    2e0a:	13 06       	cpc	r1, r19
    2e0c:	14 06       	cpc	r1, r20
    2e0e:	55 1f       	adc	r21, r21
    2e10:	f2 cf       	rjmp	.-28     	; 0x2df6 <__fp_split3+0xe>
    2e12:	46 95       	lsr	r20
    2e14:	f1 df       	rcall	.-30     	; 0x2df8 <__fp_splitA>
    2e16:	08 c0       	rjmp	.+16     	; 0x2e28 <__fp_splitA+0x30>
    2e18:	16 16       	cp	r1, r22
    2e1a:	17 06       	cpc	r1, r23
    2e1c:	18 06       	cpc	r1, r24
    2e1e:	99 1f       	adc	r25, r25
    2e20:	f1 cf       	rjmp	.-30     	; 0x2e04 <__fp_splitA+0xc>
    2e22:	86 95       	lsr	r24
    2e24:	71 05       	cpc	r23, r1
    2e26:	61 05       	cpc	r22, r1
    2e28:	08 94       	sec
    2e2a:	08 95       	ret

00002e2c <__fp_zero>:
    2e2c:	e8 94       	clt

00002e2e <__fp_szero>:
    2e2e:	bb 27       	eor	r27, r27
    2e30:	66 27       	eor	r22, r22
    2e32:	77 27       	eor	r23, r23
    2e34:	cb 01       	movw	r24, r22
    2e36:	97 f9       	bld	r25, 7
    2e38:	08 95       	ret

00002e3a <pow>:
    2e3a:	fa 01       	movw	r30, r20
    2e3c:	ee 0f       	add	r30, r30
    2e3e:	ff 1f       	adc	r31, r31
    2e40:	30 96       	adiw	r30, 0x00	; 0
    2e42:	21 05       	cpc	r18, r1
    2e44:	31 05       	cpc	r19, r1
    2e46:	99 f1       	breq	.+102    	; 0x2eae <pow+0x74>
    2e48:	61 15       	cp	r22, r1
    2e4a:	71 05       	cpc	r23, r1
    2e4c:	61 f4       	brne	.+24     	; 0x2e66 <pow+0x2c>
    2e4e:	80 38       	cpi	r24, 0x80	; 128
    2e50:	bf e3       	ldi	r27, 0x3F	; 63
    2e52:	9b 07       	cpc	r25, r27
    2e54:	49 f1       	breq	.+82     	; 0x2ea8 <pow+0x6e>
    2e56:	68 94       	set
    2e58:	90 38       	cpi	r25, 0x80	; 128
    2e5a:	81 05       	cpc	r24, r1
    2e5c:	61 f0       	breq	.+24     	; 0x2e76 <pow+0x3c>
    2e5e:	80 38       	cpi	r24, 0x80	; 128
    2e60:	bf ef       	ldi	r27, 0xFF	; 255
    2e62:	9b 07       	cpc	r25, r27
    2e64:	41 f0       	breq	.+16     	; 0x2e76 <pow+0x3c>
    2e66:	99 23       	and	r25, r25
    2e68:	42 f5       	brpl	.+80     	; 0x2eba <pow+0x80>
    2e6a:	ff 3f       	cpi	r31, 0xFF	; 255
    2e6c:	e1 05       	cpc	r30, r1
    2e6e:	31 05       	cpc	r19, r1
    2e70:	21 05       	cpc	r18, r1
    2e72:	11 f1       	breq	.+68     	; 0x2eb8 <pow+0x7e>
    2e74:	e8 94       	clt
    2e76:	08 94       	sec
    2e78:	e7 95       	ror	r30
    2e7a:	d9 01       	movw	r26, r18
    2e7c:	aa 23       	and	r26, r26
    2e7e:	29 f4       	brne	.+10     	; 0x2e8a <pow+0x50>
    2e80:	ab 2f       	mov	r26, r27
    2e82:	be 2f       	mov	r27, r30
    2e84:	f8 5f       	subi	r31, 0xF8	; 248
    2e86:	d0 f3       	brcs	.-12     	; 0x2e7c <pow+0x42>
    2e88:	10 c0       	rjmp	.+32     	; 0x2eaa <pow+0x70>
    2e8a:	ff 5f       	subi	r31, 0xFF	; 255
    2e8c:	70 f4       	brcc	.+28     	; 0x2eaa <pow+0x70>
    2e8e:	a6 95       	lsr	r26
    2e90:	e0 f7       	brcc	.-8      	; 0x2e8a <pow+0x50>
    2e92:	f7 39       	cpi	r31, 0x97	; 151
    2e94:	50 f0       	brcs	.+20     	; 0x2eaa <pow+0x70>
    2e96:	19 f0       	breq	.+6      	; 0x2e9e <pow+0x64>
    2e98:	ff 3a       	cpi	r31, 0xAF	; 175
    2e9a:	38 f4       	brcc	.+14     	; 0x2eaa <pow+0x70>
    2e9c:	9f 77       	andi	r25, 0x7F	; 127
    2e9e:	9f 93       	push	r25
    2ea0:	0c d0       	rcall	.+24     	; 0x2eba <pow+0x80>
    2ea2:	0f 90       	pop	r0
    2ea4:	07 fc       	sbrc	r0, 7
    2ea6:	90 58       	subi	r25, 0x80	; 128
    2ea8:	08 95       	ret
    2eaa:	3e f0       	brts	.+14     	; 0x2eba <pow+0x80>
    2eac:	7b cf       	rjmp	.-266    	; 0x2da4 <__fp_nan>
    2eae:	60 e0       	ldi	r22, 0x00	; 0
    2eb0:	70 e0       	ldi	r23, 0x00	; 0
    2eb2:	80 e8       	ldi	r24, 0x80	; 128
    2eb4:	9f e3       	ldi	r25, 0x3F	; 63
    2eb6:	08 95       	ret
    2eb8:	4f e7       	ldi	r20, 0x7F	; 127
    2eba:	9f 77       	andi	r25, 0x7F	; 127
    2ebc:	5f 93       	push	r21
    2ebe:	4f 93       	push	r20
    2ec0:	3f 93       	push	r19
    2ec2:	2f 93       	push	r18
    2ec4:	9e d0       	rcall	.+316    	; 0x3002 <log>
    2ec6:	2f 91       	pop	r18
    2ec8:	3f 91       	pop	r19
    2eca:	4f 91       	pop	r20
    2ecc:	5f 91       	pop	r21
    2ece:	0c d1       	rcall	.+536    	; 0x30e8 <__mulsf3>
    2ed0:	05 c0       	rjmp	.+10     	; 0x2edc <exp>
    2ed2:	19 f4       	brne	.+6      	; 0x2eda <pow+0xa0>
    2ed4:	0e f0       	brts	.+2      	; 0x2ed8 <pow+0x9e>
    2ed6:	60 cf       	rjmp	.-320    	; 0x2d98 <__fp_inf>
    2ed8:	a9 cf       	rjmp	.-174    	; 0x2e2c <__fp_zero>
    2eda:	64 cf       	rjmp	.-312    	; 0x2da4 <__fp_nan>

00002edc <exp>:
    2edc:	8d df       	rcall	.-230    	; 0x2df8 <__fp_splitA>
    2ede:	c8 f3       	brcs	.-14     	; 0x2ed2 <pow+0x98>
    2ee0:	96 38       	cpi	r25, 0x86	; 134
    2ee2:	c0 f7       	brcc	.-16     	; 0x2ed4 <pow+0x9a>
    2ee4:	07 f8       	bld	r0, 7
    2ee6:	0f 92       	push	r0
    2ee8:	e8 94       	clt
    2eea:	2b e3       	ldi	r18, 0x3B	; 59
    2eec:	3a ea       	ldi	r19, 0xAA	; 170
    2eee:	48 eb       	ldi	r20, 0xB8	; 184
    2ef0:	5f e7       	ldi	r21, 0x7F	; 127
    2ef2:	08 d1       	rcall	.+528    	; 0x3104 <__mulsf3_pse>
    2ef4:	0f 92       	push	r0
    2ef6:	0f 92       	push	r0
    2ef8:	0f 92       	push	r0
    2efa:	4d b7       	in	r20, 0x3d	; 61
    2efc:	5e b7       	in	r21, 0x3e	; 62
    2efe:	0f 92       	push	r0
    2f00:	c0 d0       	rcall	.+384    	; 0x3082 <modf>
    2f02:	e8 e6       	ldi	r30, 0x68	; 104
    2f04:	f0 e0       	ldi	r31, 0x00	; 0
    2f06:	16 d0       	rcall	.+44     	; 0x2f34 <__fp_powser>
    2f08:	4f 91       	pop	r20
    2f0a:	5f 91       	pop	r21
    2f0c:	ef 91       	pop	r30
    2f0e:	ff 91       	pop	r31
    2f10:	e5 95       	asr	r30
    2f12:	ee 1f       	adc	r30, r30
    2f14:	ff 1f       	adc	r31, r31
    2f16:	49 f0       	breq	.+18     	; 0x2f2a <exp+0x4e>
    2f18:	fe 57       	subi	r31, 0x7E	; 126
    2f1a:	e0 68       	ori	r30, 0x80	; 128
    2f1c:	44 27       	eor	r20, r20
    2f1e:	ee 0f       	add	r30, r30
    2f20:	44 1f       	adc	r20, r20
    2f22:	fa 95       	dec	r31
    2f24:	e1 f7       	brne	.-8      	; 0x2f1e <exp+0x42>
    2f26:	41 95       	neg	r20
    2f28:	55 0b       	sbc	r21, r21
    2f2a:	32 d0       	rcall	.+100    	; 0x2f90 <ldexp>
    2f2c:	0f 90       	pop	r0
    2f2e:	07 fe       	sbrs	r0, 7
    2f30:	26 c0       	rjmp	.+76     	; 0x2f7e <inverse>
    2f32:	08 95       	ret

00002f34 <__fp_powser>:
    2f34:	df 93       	push	r29
    2f36:	cf 93       	push	r28
    2f38:	1f 93       	push	r17
    2f3a:	0f 93       	push	r16
    2f3c:	ff 92       	push	r15
    2f3e:	ef 92       	push	r14
    2f40:	df 92       	push	r13
    2f42:	7b 01       	movw	r14, r22
    2f44:	8c 01       	movw	r16, r24
    2f46:	68 94       	set
    2f48:	05 c0       	rjmp	.+10     	; 0x2f54 <__fp_powser+0x20>
    2f4a:	da 2e       	mov	r13, r26
    2f4c:	ef 01       	movw	r28, r30
    2f4e:	d8 d0       	rcall	.+432    	; 0x3100 <__mulsf3x>
    2f50:	fe 01       	movw	r30, r28
    2f52:	e8 94       	clt
    2f54:	a5 91       	lpm	r26, Z+
    2f56:	25 91       	lpm	r18, Z+
    2f58:	35 91       	lpm	r19, Z+
    2f5a:	45 91       	lpm	r20, Z+
    2f5c:	55 91       	lpm	r21, Z+
    2f5e:	ae f3       	brts	.-22     	; 0x2f4a <__fp_powser+0x16>
    2f60:	ef 01       	movw	r28, r30
    2f62:	22 de       	rcall	.-956    	; 0x2ba8 <__addsf3x>
    2f64:	fe 01       	movw	r30, r28
    2f66:	97 01       	movw	r18, r14
    2f68:	a8 01       	movw	r20, r16
    2f6a:	da 94       	dec	r13
    2f6c:	79 f7       	brne	.-34     	; 0x2f4c <__fp_powser+0x18>
    2f6e:	df 90       	pop	r13
    2f70:	ef 90       	pop	r14
    2f72:	ff 90       	pop	r15
    2f74:	0f 91       	pop	r16
    2f76:	1f 91       	pop	r17
    2f78:	cf 91       	pop	r28
    2f7a:	df 91       	pop	r29
    2f7c:	08 95       	ret

00002f7e <inverse>:
    2f7e:	9b 01       	movw	r18, r22
    2f80:	ac 01       	movw	r20, r24
    2f82:	60 e0       	ldi	r22, 0x00	; 0
    2f84:	70 e0       	ldi	r23, 0x00	; 0
    2f86:	80 e8       	ldi	r24, 0x80	; 128
    2f88:	9f e3       	ldi	r25, 0x3F	; 63
    2f8a:	61 ce       	rjmp	.-830    	; 0x2c4e <__divsf3>
    2f8c:	05 cf       	rjmp	.-502    	; 0x2d98 <__fp_inf>
    2f8e:	0f c1       	rjmp	.+542    	; 0x31ae <__fp_mpack>

00002f90 <ldexp>:
    2f90:	33 df       	rcall	.-410    	; 0x2df8 <__fp_splitA>
    2f92:	e8 f3       	brcs	.-6      	; 0x2f8e <inverse+0x10>
    2f94:	99 23       	and	r25, r25
    2f96:	d9 f3       	breq	.-10     	; 0x2f8e <inverse+0x10>
    2f98:	94 0f       	add	r25, r20
    2f9a:	51 1d       	adc	r21, r1
    2f9c:	bb f3       	brvs	.-18     	; 0x2f8c <inverse+0xe>
    2f9e:	91 50       	subi	r25, 0x01	; 1
    2fa0:	50 40       	sbci	r21, 0x00	; 0
    2fa2:	94 f0       	brlt	.+36     	; 0x2fc8 <ldexp+0x38>
    2fa4:	59 f0       	breq	.+22     	; 0x2fbc <ldexp+0x2c>
    2fa6:	88 23       	and	r24, r24
    2fa8:	32 f0       	brmi	.+12     	; 0x2fb6 <ldexp+0x26>
    2faa:	66 0f       	add	r22, r22
    2fac:	77 1f       	adc	r23, r23
    2fae:	88 1f       	adc	r24, r24
    2fb0:	91 50       	subi	r25, 0x01	; 1
    2fb2:	50 40       	sbci	r21, 0x00	; 0
    2fb4:	c1 f7       	brne	.-16     	; 0x2fa6 <ldexp+0x16>
    2fb6:	9e 3f       	cpi	r25, 0xFE	; 254
    2fb8:	51 05       	cpc	r21, r1
    2fba:	44 f7       	brge	.-48     	; 0x2f8c <inverse+0xe>
    2fbc:	88 0f       	add	r24, r24
    2fbe:	91 1d       	adc	r25, r1
    2fc0:	96 95       	lsr	r25
    2fc2:	87 95       	ror	r24
    2fc4:	97 f9       	bld	r25, 7
    2fc6:	08 95       	ret
    2fc8:	5f 3f       	cpi	r21, 0xFF	; 255
    2fca:	ac f0       	brlt	.+42     	; 0x2ff6 <ldexp+0x66>
    2fcc:	98 3e       	cpi	r25, 0xE8	; 232
    2fce:	9c f0       	brlt	.+38     	; 0x2ff6 <ldexp+0x66>
    2fd0:	bb 27       	eor	r27, r27
    2fd2:	86 95       	lsr	r24
    2fd4:	77 95       	ror	r23
    2fd6:	67 95       	ror	r22
    2fd8:	b7 95       	ror	r27
    2fda:	08 f4       	brcc	.+2      	; 0x2fde <ldexp+0x4e>
    2fdc:	b1 60       	ori	r27, 0x01	; 1
    2fde:	93 95       	inc	r25
    2fe0:	c1 f7       	brne	.-16     	; 0x2fd2 <ldexp+0x42>
    2fe2:	bb 0f       	add	r27, r27
    2fe4:	58 f7       	brcc	.-42     	; 0x2fbc <ldexp+0x2c>
    2fe6:	11 f4       	brne	.+4      	; 0x2fec <ldexp+0x5c>
    2fe8:	60 ff       	sbrs	r22, 0
    2fea:	e8 cf       	rjmp	.-48     	; 0x2fbc <ldexp+0x2c>
    2fec:	6f 5f       	subi	r22, 0xFF	; 255
    2fee:	7f 4f       	sbci	r23, 0xFF	; 255
    2ff0:	8f 4f       	sbci	r24, 0xFF	; 255
    2ff2:	9f 4f       	sbci	r25, 0xFF	; 255
    2ff4:	e3 cf       	rjmp	.-58     	; 0x2fbc <ldexp+0x2c>
    2ff6:	1b cf       	rjmp	.-458    	; 0x2e2e <__fp_szero>
    2ff8:	0e f0       	brts	.+2      	; 0x2ffc <ldexp+0x6c>
    2ffa:	d9 c0       	rjmp	.+434    	; 0x31ae <__fp_mpack>
    2ffc:	d3 ce       	rjmp	.-602    	; 0x2da4 <__fp_nan>
    2ffe:	68 94       	set
    3000:	cb ce       	rjmp	.-618    	; 0x2d98 <__fp_inf>

00003002 <log>:
    3002:	fa de       	rcall	.-524    	; 0x2df8 <__fp_splitA>
    3004:	c8 f3       	brcs	.-14     	; 0x2ff8 <ldexp+0x68>
    3006:	99 23       	and	r25, r25
    3008:	d1 f3       	breq	.-12     	; 0x2ffe <ldexp+0x6e>
    300a:	c6 f3       	brts	.-16     	; 0x2ffc <ldexp+0x6c>
    300c:	df 93       	push	r29
    300e:	cf 93       	push	r28
    3010:	1f 93       	push	r17
    3012:	0f 93       	push	r16
    3014:	ff 92       	push	r15
    3016:	c9 2f       	mov	r28, r25
    3018:	dd 27       	eor	r29, r29
    301a:	88 23       	and	r24, r24
    301c:	2a f0       	brmi	.+10     	; 0x3028 <log+0x26>
    301e:	21 97       	sbiw	r28, 0x01	; 1
    3020:	66 0f       	add	r22, r22
    3022:	77 1f       	adc	r23, r23
    3024:	88 1f       	adc	r24, r24
    3026:	da f7       	brpl	.-10     	; 0x301e <log+0x1c>
    3028:	20 e0       	ldi	r18, 0x00	; 0
    302a:	30 e0       	ldi	r19, 0x00	; 0
    302c:	40 e8       	ldi	r20, 0x80	; 128
    302e:	5f eb       	ldi	r21, 0xBF	; 191
    3030:	9f e3       	ldi	r25, 0x3F	; 63
    3032:	88 39       	cpi	r24, 0x98	; 152
    3034:	20 f0       	brcs	.+8      	; 0x303e <log+0x3c>
    3036:	80 3e       	cpi	r24, 0xE0	; 224
    3038:	30 f0       	brcs	.+12     	; 0x3046 <log+0x44>
    303a:	21 96       	adiw	r28, 0x01	; 1
    303c:	8f 77       	andi	r24, 0x7F	; 127
    303e:	a3 dd       	rcall	.-1210   	; 0x2b86 <__addsf3>
    3040:	e0 e9       	ldi	r30, 0x90	; 144
    3042:	f0 e0       	ldi	r31, 0x00	; 0
    3044:	03 c0       	rjmp	.+6      	; 0x304c <log+0x4a>
    3046:	9f dd       	rcall	.-1218   	; 0x2b86 <__addsf3>
    3048:	ed eb       	ldi	r30, 0xBD	; 189
    304a:	f0 e0       	ldi	r31, 0x00	; 0
    304c:	73 df       	rcall	.-282    	; 0x2f34 <__fp_powser>
    304e:	8b 01       	movw	r16, r22
    3050:	be 01       	movw	r22, r28
    3052:	ec 01       	movw	r28, r24
    3054:	fb 2e       	mov	r15, r27
    3056:	6f 57       	subi	r22, 0x7F	; 127
    3058:	71 09       	sbc	r23, r1
    305a:	75 95       	asr	r23
    305c:	77 1f       	adc	r23, r23
    305e:	88 0b       	sbc	r24, r24
    3060:	99 0b       	sbc	r25, r25
    3062:	5f de       	rcall	.-834    	; 0x2d22 <__floatsisf>
    3064:	28 e1       	ldi	r18, 0x18	; 24
    3066:	32 e7       	ldi	r19, 0x72	; 114
    3068:	41 e3       	ldi	r20, 0x31	; 49
    306a:	5f e3       	ldi	r21, 0x3F	; 63
    306c:	49 d0       	rcall	.+146    	; 0x3100 <__mulsf3x>
    306e:	af 2d       	mov	r26, r15
    3070:	98 01       	movw	r18, r16
    3072:	ae 01       	movw	r20, r28
    3074:	ff 90       	pop	r15
    3076:	0f 91       	pop	r16
    3078:	1f 91       	pop	r17
    307a:	cf 91       	pop	r28
    307c:	df 91       	pop	r29
    307e:	94 dd       	rcall	.-1240   	; 0x2ba8 <__addsf3x>
    3080:	a2 ce       	rjmp	.-700    	; 0x2dc6 <__fp_round>

00003082 <modf>:
    3082:	fa 01       	movw	r30, r20
    3084:	dc 01       	movw	r26, r24
    3086:	aa 0f       	add	r26, r26
    3088:	bb 1f       	adc	r27, r27
    308a:	9b 01       	movw	r18, r22
    308c:	ac 01       	movw	r20, r24
    308e:	bf 57       	subi	r27, 0x7F	; 127
    3090:	28 f4       	brcc	.+10     	; 0x309c <modf+0x1a>
    3092:	22 27       	eor	r18, r18
    3094:	33 27       	eor	r19, r19
    3096:	44 27       	eor	r20, r20
    3098:	50 78       	andi	r21, 0x80	; 128
    309a:	1f c0       	rjmp	.+62     	; 0x30da <modf+0x58>
    309c:	b7 51       	subi	r27, 0x17	; 23
    309e:	88 f4       	brcc	.+34     	; 0x30c2 <modf+0x40>
    30a0:	ab 2f       	mov	r26, r27
    30a2:	00 24       	eor	r0, r0
    30a4:	46 95       	lsr	r20
    30a6:	37 95       	ror	r19
    30a8:	27 95       	ror	r18
    30aa:	01 1c       	adc	r0, r1
    30ac:	a3 95       	inc	r26
    30ae:	d2 f3       	brmi	.-12     	; 0x30a4 <modf+0x22>
    30b0:	00 20       	and	r0, r0
    30b2:	69 f0       	breq	.+26     	; 0x30ce <modf+0x4c>
    30b4:	22 0f       	add	r18, r18
    30b6:	33 1f       	adc	r19, r19
    30b8:	44 1f       	adc	r20, r20
    30ba:	b3 95       	inc	r27
    30bc:	da f3       	brmi	.-10     	; 0x30b4 <modf+0x32>
    30be:	0d d0       	rcall	.+26     	; 0x30da <modf+0x58>
    30c0:	61 cd       	rjmp	.-1342   	; 0x2b84 <__subsf3>
    30c2:	61 30       	cpi	r22, 0x01	; 1
    30c4:	71 05       	cpc	r23, r1
    30c6:	a0 e8       	ldi	r26, 0x80	; 128
    30c8:	8a 07       	cpc	r24, r26
    30ca:	b9 46       	sbci	r27, 0x69	; 105
    30cc:	30 f4       	brcc	.+12     	; 0x30da <modf+0x58>
    30ce:	9b 01       	movw	r18, r22
    30d0:	ac 01       	movw	r20, r24
    30d2:	66 27       	eor	r22, r22
    30d4:	77 27       	eor	r23, r23
    30d6:	88 27       	eor	r24, r24
    30d8:	90 78       	andi	r25, 0x80	; 128
    30da:	30 96       	adiw	r30, 0x00	; 0
    30dc:	21 f0       	breq	.+8      	; 0x30e6 <modf+0x64>
    30de:	20 83       	st	Z, r18
    30e0:	31 83       	std	Z+1, r19	; 0x01
    30e2:	42 83       	std	Z+2, r20	; 0x02
    30e4:	53 83       	std	Z+3, r21	; 0x03
    30e6:	08 95       	ret

000030e8 <__mulsf3>:
    30e8:	0b d0       	rcall	.+22     	; 0x3100 <__mulsf3x>
    30ea:	6d ce       	rjmp	.-806    	; 0x2dc6 <__fp_round>
    30ec:	5e de       	rcall	.-836    	; 0x2daa <__fp_pscA>
    30ee:	28 f0       	brcs	.+10     	; 0x30fa <__mulsf3+0x12>
    30f0:	63 de       	rcall	.-826    	; 0x2db8 <__fp_pscB>
    30f2:	18 f0       	brcs	.+6      	; 0x30fa <__mulsf3+0x12>
    30f4:	95 23       	and	r25, r21
    30f6:	09 f0       	breq	.+2      	; 0x30fa <__mulsf3+0x12>
    30f8:	4f ce       	rjmp	.-866    	; 0x2d98 <__fp_inf>
    30fa:	54 ce       	rjmp	.-856    	; 0x2da4 <__fp_nan>
    30fc:	11 24       	eor	r1, r1
    30fe:	97 ce       	rjmp	.-722    	; 0x2e2e <__fp_szero>

00003100 <__mulsf3x>:
    3100:	73 de       	rcall	.-794    	; 0x2de8 <__fp_split3>
    3102:	a0 f3       	brcs	.-24     	; 0x30ec <__mulsf3+0x4>

00003104 <__mulsf3_pse>:
    3104:	95 9f       	mul	r25, r21
    3106:	d1 f3       	breq	.-12     	; 0x30fc <__mulsf3+0x14>
    3108:	95 0f       	add	r25, r21
    310a:	50 e0       	ldi	r21, 0x00	; 0
    310c:	55 1f       	adc	r21, r21
    310e:	62 9f       	mul	r22, r18
    3110:	f0 01       	movw	r30, r0
    3112:	72 9f       	mul	r23, r18
    3114:	bb 27       	eor	r27, r27
    3116:	f0 0d       	add	r31, r0
    3118:	b1 1d       	adc	r27, r1
    311a:	63 9f       	mul	r22, r19
    311c:	aa 27       	eor	r26, r26
    311e:	f0 0d       	add	r31, r0
    3120:	b1 1d       	adc	r27, r1
    3122:	aa 1f       	adc	r26, r26
    3124:	64 9f       	mul	r22, r20
    3126:	66 27       	eor	r22, r22
    3128:	b0 0d       	add	r27, r0
    312a:	a1 1d       	adc	r26, r1
    312c:	66 1f       	adc	r22, r22
    312e:	82 9f       	mul	r24, r18
    3130:	22 27       	eor	r18, r18
    3132:	b0 0d       	add	r27, r0
    3134:	a1 1d       	adc	r26, r1
    3136:	62 1f       	adc	r22, r18
    3138:	73 9f       	mul	r23, r19
    313a:	b0 0d       	add	r27, r0
    313c:	a1 1d       	adc	r26, r1
    313e:	62 1f       	adc	r22, r18
    3140:	83 9f       	mul	r24, r19
    3142:	a0 0d       	add	r26, r0
    3144:	61 1d       	adc	r22, r1
    3146:	22 1f       	adc	r18, r18
    3148:	74 9f       	mul	r23, r20
    314a:	33 27       	eor	r19, r19
    314c:	a0 0d       	add	r26, r0
    314e:	61 1d       	adc	r22, r1
    3150:	23 1f       	adc	r18, r19
    3152:	84 9f       	mul	r24, r20
    3154:	60 0d       	add	r22, r0
    3156:	21 1d       	adc	r18, r1
    3158:	82 2f       	mov	r24, r18
    315a:	76 2f       	mov	r23, r22
    315c:	6a 2f       	mov	r22, r26
    315e:	11 24       	eor	r1, r1
    3160:	9f 57       	subi	r25, 0x7F	; 127
    3162:	50 40       	sbci	r21, 0x00	; 0
    3164:	8a f0       	brmi	.+34     	; 0x3188 <__mulsf3_pse+0x84>
    3166:	e1 f0       	breq	.+56     	; 0x31a0 <__mulsf3_pse+0x9c>
    3168:	88 23       	and	r24, r24
    316a:	4a f0       	brmi	.+18     	; 0x317e <__mulsf3_pse+0x7a>
    316c:	ee 0f       	add	r30, r30
    316e:	ff 1f       	adc	r31, r31
    3170:	bb 1f       	adc	r27, r27
    3172:	66 1f       	adc	r22, r22
    3174:	77 1f       	adc	r23, r23
    3176:	88 1f       	adc	r24, r24
    3178:	91 50       	subi	r25, 0x01	; 1
    317a:	50 40       	sbci	r21, 0x00	; 0
    317c:	a9 f7       	brne	.-22     	; 0x3168 <__mulsf3_pse+0x64>
    317e:	9e 3f       	cpi	r25, 0xFE	; 254
    3180:	51 05       	cpc	r21, r1
    3182:	70 f0       	brcs	.+28     	; 0x31a0 <__mulsf3_pse+0x9c>
    3184:	09 ce       	rjmp	.-1006   	; 0x2d98 <__fp_inf>
    3186:	53 ce       	rjmp	.-858    	; 0x2e2e <__fp_szero>
    3188:	5f 3f       	cpi	r21, 0xFF	; 255
    318a:	ec f3       	brlt	.-6      	; 0x3186 <__mulsf3_pse+0x82>
    318c:	98 3e       	cpi	r25, 0xE8	; 232
    318e:	dc f3       	brlt	.-10     	; 0x3186 <__mulsf3_pse+0x82>
    3190:	86 95       	lsr	r24
    3192:	77 95       	ror	r23
    3194:	67 95       	ror	r22
    3196:	b7 95       	ror	r27
    3198:	f7 95       	ror	r31
    319a:	e7 95       	ror	r30
    319c:	9f 5f       	subi	r25, 0xFF	; 255
    319e:	c1 f7       	brne	.-16     	; 0x3190 <__mulsf3_pse+0x8c>
    31a0:	fe 2b       	or	r31, r30
    31a2:	88 0f       	add	r24, r24
    31a4:	91 1d       	adc	r25, r1
    31a6:	96 95       	lsr	r25
    31a8:	87 95       	ror	r24
    31aa:	97 f9       	bld	r25, 7
    31ac:	08 95       	ret

000031ae <__fp_mpack>:
    31ae:	9f 3f       	cpi	r25, 0xFF	; 255
    31b0:	31 f0       	breq	.+12     	; 0x31be <__fp_mpack_finite+0xc>

000031b2 <__fp_mpack_finite>:
    31b2:	91 50       	subi	r25, 0x01	; 1
    31b4:	20 f4       	brcc	.+8      	; 0x31be <__fp_mpack_finite+0xc>
    31b6:	87 95       	ror	r24
    31b8:	77 95       	ror	r23
    31ba:	67 95       	ror	r22
    31bc:	b7 95       	ror	r27
    31be:	88 0f       	add	r24, r24
    31c0:	91 1d       	adc	r25, r1
    31c2:	96 95       	lsr	r25
    31c4:	87 95       	ror	r24
    31c6:	97 f9       	bld	r25, 7
    31c8:	08 95       	ret

000031ca <dtostrf>:
    31ca:	ef 92       	push	r14
    31cc:	0f 93       	push	r16
    31ce:	1f 93       	push	r17
    31d0:	cf 93       	push	r28
    31d2:	df 93       	push	r29
    31d4:	e8 01       	movw	r28, r16
    31d6:	47 ff       	sbrs	r20, 7
    31d8:	02 c0       	rjmp	.+4      	; 0x31de <dtostrf+0x14>
    31da:	34 e1       	ldi	r19, 0x14	; 20
    31dc:	01 c0       	rjmp	.+2      	; 0x31e0 <dtostrf+0x16>
    31de:	34 e0       	ldi	r19, 0x04	; 4
    31e0:	e4 2f       	mov	r30, r20
    31e2:	ff 27       	eor	r31, r31
    31e4:	e7 fd       	sbrc	r30, 7
    31e6:	f0 95       	com	r31
    31e8:	f7 ff       	sbrs	r31, 7
    31ea:	03 c0       	rjmp	.+6      	; 0x31f2 <dtostrf+0x28>
    31ec:	f1 95       	neg	r31
    31ee:	e1 95       	neg	r30
    31f0:	f1 09       	sbc	r31, r1
    31f2:	e3 2e       	mov	r14, r19
    31f4:	02 2f       	mov	r16, r18
    31f6:	2e 2f       	mov	r18, r30
    31f8:	ae 01       	movw	r20, r28
    31fa:	0e 94 96 1b 	call	0x372c	; 0x372c <dtoa_prf>
    31fe:	ce 01       	movw	r24, r28
    3200:	df 91       	pop	r29
    3202:	cf 91       	pop	r28
    3204:	1f 91       	pop	r17
    3206:	0f 91       	pop	r16
    3208:	ef 90       	pop	r14
    320a:	08 95       	ret

0000320c <itoa>:
    320c:	45 32       	cpi	r20, 0x25	; 37
    320e:	51 05       	cpc	r21, r1
    3210:	20 f4       	brcc	.+8      	; 0x321a <itoa+0xe>
    3212:	42 30       	cpi	r20, 0x02	; 2
    3214:	10 f0       	brcs	.+4      	; 0x321a <itoa+0xe>
    3216:	0c 94 11 19 	jmp	0x3222	; 0x3222 <__itoa_ncheck>
    321a:	fb 01       	movw	r30, r22
    321c:	10 82       	st	Z, r1
    321e:	cb 01       	movw	r24, r22
    3220:	08 95       	ret

00003222 <__itoa_ncheck>:
    3222:	bb 27       	eor	r27, r27
    3224:	4a 30       	cpi	r20, 0x0A	; 10
    3226:	31 f4       	brne	.+12     	; 0x3234 <__itoa_ncheck+0x12>
    3228:	99 23       	and	r25, r25
    322a:	22 f4       	brpl	.+8      	; 0x3234 <__itoa_ncheck+0x12>
    322c:	bd e2       	ldi	r27, 0x2D	; 45
    322e:	90 95       	com	r25
    3230:	81 95       	neg	r24
    3232:	9f 4f       	sbci	r25, 0xFF	; 255
    3234:	0c 94 4e 19 	jmp	0x329c	; 0x329c <__utoa_common>

00003238 <__ltoa_ncheck>:
    3238:	bb 27       	eor	r27, r27
    323a:	2a 30       	cpi	r18, 0x0A	; 10
    323c:	51 f4       	brne	.+20     	; 0x3252 <__ltoa_ncheck+0x1a>
    323e:	99 23       	and	r25, r25
    3240:	42 f4       	brpl	.+16     	; 0x3252 <__ltoa_ncheck+0x1a>
    3242:	bd e2       	ldi	r27, 0x2D	; 45
    3244:	90 95       	com	r25
    3246:	80 95       	com	r24
    3248:	70 95       	com	r23
    324a:	61 95       	neg	r22
    324c:	7f 4f       	sbci	r23, 0xFF	; 255
    324e:	8f 4f       	sbci	r24, 0xFF	; 255
    3250:	9f 4f       	sbci	r25, 0xFF	; 255
    3252:	0c 94 2c 19 	jmp	0x3258	; 0x3258 <__ultoa_common>

00003256 <__ultoa_ncheck>:
    3256:	bb 27       	eor	r27, r27

00003258 <__ultoa_common>:
    3258:	fa 01       	movw	r30, r20
    325a:	a6 2f       	mov	r26, r22
    325c:	62 17       	cp	r22, r18
    325e:	71 05       	cpc	r23, r1
    3260:	81 05       	cpc	r24, r1
    3262:	91 05       	cpc	r25, r1
    3264:	33 0b       	sbc	r19, r19
    3266:	30 fb       	bst	r19, 0
    3268:	66 f0       	brts	.+24     	; 0x3282 <__ultoa_common+0x2a>
    326a:	aa 27       	eor	r26, r26
    326c:	66 0f       	add	r22, r22
    326e:	77 1f       	adc	r23, r23
    3270:	88 1f       	adc	r24, r24
    3272:	99 1f       	adc	r25, r25
    3274:	aa 1f       	adc	r26, r26
    3276:	a2 17       	cp	r26, r18
    3278:	10 f0       	brcs	.+4      	; 0x327e <__ultoa_common+0x26>
    327a:	a2 1b       	sub	r26, r18
    327c:	63 95       	inc	r22
    327e:	38 50       	subi	r19, 0x08	; 8
    3280:	a9 f7       	brne	.-22     	; 0x326c <__ultoa_common+0x14>
    3282:	a0 5d       	subi	r26, 0xD0	; 208
    3284:	aa 33       	cpi	r26, 0x3A	; 58
    3286:	08 f0       	brcs	.+2      	; 0x328a <__ultoa_common+0x32>
    3288:	a9 5d       	subi	r26, 0xD9	; 217
    328a:	a1 93       	st	Z+, r26
    328c:	36 f7       	brtc	.-52     	; 0x325a <__ultoa_common+0x2>
    328e:	b1 11       	cpse	r27, r1
    3290:	b1 93       	st	Z+, r27
    3292:	10 82       	st	Z, r1
    3294:	ca 01       	movw	r24, r20
    3296:	0c 94 02 1e 	jmp	0x3c04	; 0x3c04 <strrev>

0000329a <__utoa_ncheck>:
    329a:	bb 27       	eor	r27, r27

0000329c <__utoa_common>:
    329c:	fb 01       	movw	r30, r22
    329e:	55 27       	eor	r21, r21
    32a0:	aa 27       	eor	r26, r26
    32a2:	88 0f       	add	r24, r24
    32a4:	99 1f       	adc	r25, r25
    32a6:	aa 1f       	adc	r26, r26
    32a8:	a4 17       	cp	r26, r20
    32aa:	10 f0       	brcs	.+4      	; 0x32b0 <__utoa_common+0x14>
    32ac:	a4 1b       	sub	r26, r20
    32ae:	83 95       	inc	r24
    32b0:	50 51       	subi	r21, 0x10	; 16
    32b2:	b9 f7       	brne	.-18     	; 0x32a2 <__utoa_common+0x6>
    32b4:	a0 5d       	subi	r26, 0xD0	; 208
    32b6:	aa 33       	cpi	r26, 0x3A	; 58
    32b8:	08 f0       	brcs	.+2      	; 0x32bc <__utoa_common+0x20>
    32ba:	a9 5d       	subi	r26, 0xD9	; 217
    32bc:	a1 93       	st	Z+, r26
    32be:	00 97       	sbiw	r24, 0x00	; 0
    32c0:	79 f7       	brne	.-34     	; 0x32a0 <__utoa_common+0x4>
    32c2:	b1 11       	cpse	r27, r1
    32c4:	b1 93       	st	Z+, r27
    32c6:	11 92       	st	Z+, r1
    32c8:	cb 01       	movw	r24, r22
    32ca:	0c 94 02 1e 	jmp	0x3c04	; 0x3c04 <strrev>

000032ce <sprintf>:
    32ce:	ae e0       	ldi	r26, 0x0E	; 14
    32d0:	b0 e0       	ldi	r27, 0x00	; 0
    32d2:	ed e6       	ldi	r30, 0x6D	; 109
    32d4:	f9 e1       	ldi	r31, 0x19	; 25
    32d6:	0c 94 b0 1e 	jmp	0x3d60	; 0x3d60 <__prologue_saves__+0x1c>
    32da:	0d 89       	ldd	r16, Y+21	; 0x15
    32dc:	1e 89       	ldd	r17, Y+22	; 0x16
    32de:	86 e0       	ldi	r24, 0x06	; 6
    32e0:	8c 83       	std	Y+4, r24	; 0x04
    32e2:	1a 83       	std	Y+2, r17	; 0x02
    32e4:	09 83       	std	Y+1, r16	; 0x01
    32e6:	8f ef       	ldi	r24, 0xFF	; 255
    32e8:	9f e7       	ldi	r25, 0x7F	; 127
    32ea:	9e 83       	std	Y+6, r25	; 0x06
    32ec:	8d 83       	std	Y+5, r24	; 0x05
    32ee:	ae 01       	movw	r20, r28
    32f0:	47 5e       	subi	r20, 0xE7	; 231
    32f2:	5f 4f       	sbci	r21, 0xFF	; 255
    32f4:	6f 89       	ldd	r22, Y+23	; 0x17
    32f6:	78 8d       	ldd	r23, Y+24	; 0x18
    32f8:	ce 01       	movw	r24, r28
    32fa:	01 96       	adiw	r24, 0x01	; 1
    32fc:	0e 94 89 19 	call	0x3312	; 0x3312 <vfprintf>
    3300:	ef 81       	ldd	r30, Y+7	; 0x07
    3302:	f8 85       	ldd	r31, Y+8	; 0x08
    3304:	e0 0f       	add	r30, r16
    3306:	f1 1f       	adc	r31, r17
    3308:	10 82       	st	Z, r1
    330a:	2e 96       	adiw	r28, 0x0e	; 14
    330c:	e4 e0       	ldi	r30, 0x04	; 4
    330e:	0c 94 cc 1e 	jmp	0x3d98	; 0x3d98 <__epilogue_restores__+0x1c>

00003312 <vfprintf>:
    3312:	ac e0       	ldi	r26, 0x0C	; 12
    3314:	b0 e0       	ldi	r27, 0x00	; 0
    3316:	ef e8       	ldi	r30, 0x8F	; 143
    3318:	f9 e1       	ldi	r31, 0x19	; 25
    331a:	0c 94 a2 1e 	jmp	0x3d44	; 0x3d44 <__prologue_saves__>
    331e:	7c 01       	movw	r14, r24
    3320:	6b 01       	movw	r12, r22
    3322:	8a 01       	movw	r16, r20
    3324:	fc 01       	movw	r30, r24
    3326:	17 82       	std	Z+7, r1	; 0x07
    3328:	16 82       	std	Z+6, r1	; 0x06
    332a:	83 81       	ldd	r24, Z+3	; 0x03
    332c:	81 ff       	sbrs	r24, 1
    332e:	bd c1       	rjmp	.+890    	; 0x36aa <vfprintf+0x398>
    3330:	ce 01       	movw	r24, r28
    3332:	01 96       	adiw	r24, 0x01	; 1
    3334:	4c 01       	movw	r8, r24
    3336:	f7 01       	movw	r30, r14
    3338:	93 81       	ldd	r25, Z+3	; 0x03
    333a:	f6 01       	movw	r30, r12
    333c:	93 fd       	sbrc	r25, 3
    333e:	85 91       	lpm	r24, Z+
    3340:	93 ff       	sbrs	r25, 3
    3342:	81 91       	ld	r24, Z+
    3344:	6f 01       	movw	r12, r30
    3346:	88 23       	and	r24, r24
    3348:	09 f4       	brne	.+2      	; 0x334c <vfprintf+0x3a>
    334a:	ab c1       	rjmp	.+854    	; 0x36a2 <vfprintf+0x390>
    334c:	85 32       	cpi	r24, 0x25	; 37
    334e:	39 f4       	brne	.+14     	; 0x335e <vfprintf+0x4c>
    3350:	93 fd       	sbrc	r25, 3
    3352:	85 91       	lpm	r24, Z+
    3354:	93 ff       	sbrs	r25, 3
    3356:	81 91       	ld	r24, Z+
    3358:	6f 01       	movw	r12, r30
    335a:	85 32       	cpi	r24, 0x25	; 37
    335c:	29 f4       	brne	.+10     	; 0x3368 <vfprintf+0x56>
    335e:	b7 01       	movw	r22, r14
    3360:	90 e0       	ldi	r25, 0x00	; 0
    3362:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <fputc>
    3366:	e7 cf       	rjmp	.-50     	; 0x3336 <vfprintf+0x24>
    3368:	51 2c       	mov	r5, r1
    336a:	31 2c       	mov	r3, r1
    336c:	20 e0       	ldi	r18, 0x00	; 0
    336e:	20 32       	cpi	r18, 0x20	; 32
    3370:	a0 f4       	brcc	.+40     	; 0x339a <vfprintf+0x88>
    3372:	8b 32       	cpi	r24, 0x2B	; 43
    3374:	69 f0       	breq	.+26     	; 0x3390 <vfprintf+0x7e>
    3376:	30 f4       	brcc	.+12     	; 0x3384 <vfprintf+0x72>
    3378:	80 32       	cpi	r24, 0x20	; 32
    337a:	59 f0       	breq	.+22     	; 0x3392 <vfprintf+0x80>
    337c:	83 32       	cpi	r24, 0x23	; 35
    337e:	69 f4       	brne	.+26     	; 0x339a <vfprintf+0x88>
    3380:	20 61       	ori	r18, 0x10	; 16
    3382:	2c c0       	rjmp	.+88     	; 0x33dc <vfprintf+0xca>
    3384:	8d 32       	cpi	r24, 0x2D	; 45
    3386:	39 f0       	breq	.+14     	; 0x3396 <vfprintf+0x84>
    3388:	80 33       	cpi	r24, 0x30	; 48
    338a:	39 f4       	brne	.+14     	; 0x339a <vfprintf+0x88>
    338c:	21 60       	ori	r18, 0x01	; 1
    338e:	26 c0       	rjmp	.+76     	; 0x33dc <vfprintf+0xca>
    3390:	22 60       	ori	r18, 0x02	; 2
    3392:	24 60       	ori	r18, 0x04	; 4
    3394:	23 c0       	rjmp	.+70     	; 0x33dc <vfprintf+0xca>
    3396:	28 60       	ori	r18, 0x08	; 8
    3398:	21 c0       	rjmp	.+66     	; 0x33dc <vfprintf+0xca>
    339a:	27 fd       	sbrc	r18, 7
    339c:	27 c0       	rjmp	.+78     	; 0x33ec <vfprintf+0xda>
    339e:	30 ed       	ldi	r19, 0xD0	; 208
    33a0:	38 0f       	add	r19, r24
    33a2:	3a 30       	cpi	r19, 0x0A	; 10
    33a4:	78 f4       	brcc	.+30     	; 0x33c4 <vfprintf+0xb2>
    33a6:	26 ff       	sbrs	r18, 6
    33a8:	06 c0       	rjmp	.+12     	; 0x33b6 <vfprintf+0xa4>
    33aa:	fa e0       	ldi	r31, 0x0A	; 10
    33ac:	5f 9e       	mul	r5, r31
    33ae:	30 0d       	add	r19, r0
    33b0:	11 24       	eor	r1, r1
    33b2:	53 2e       	mov	r5, r19
    33b4:	13 c0       	rjmp	.+38     	; 0x33dc <vfprintf+0xca>
    33b6:	8a e0       	ldi	r24, 0x0A	; 10
    33b8:	38 9e       	mul	r3, r24
    33ba:	30 0d       	add	r19, r0
    33bc:	11 24       	eor	r1, r1
    33be:	33 2e       	mov	r3, r19
    33c0:	20 62       	ori	r18, 0x20	; 32
    33c2:	0c c0       	rjmp	.+24     	; 0x33dc <vfprintf+0xca>
    33c4:	8e 32       	cpi	r24, 0x2E	; 46
    33c6:	21 f4       	brne	.+8      	; 0x33d0 <vfprintf+0xbe>
    33c8:	26 fd       	sbrc	r18, 6
    33ca:	6b c1       	rjmp	.+726    	; 0x36a2 <vfprintf+0x390>
    33cc:	20 64       	ori	r18, 0x40	; 64
    33ce:	06 c0       	rjmp	.+12     	; 0x33dc <vfprintf+0xca>
    33d0:	8c 36       	cpi	r24, 0x6C	; 108
    33d2:	11 f4       	brne	.+4      	; 0x33d8 <vfprintf+0xc6>
    33d4:	20 68       	ori	r18, 0x80	; 128
    33d6:	02 c0       	rjmp	.+4      	; 0x33dc <vfprintf+0xca>
    33d8:	88 36       	cpi	r24, 0x68	; 104
    33da:	41 f4       	brne	.+16     	; 0x33ec <vfprintf+0xda>
    33dc:	f6 01       	movw	r30, r12
    33de:	93 fd       	sbrc	r25, 3
    33e0:	85 91       	lpm	r24, Z+
    33e2:	93 ff       	sbrs	r25, 3
    33e4:	81 91       	ld	r24, Z+
    33e6:	6f 01       	movw	r12, r30
    33e8:	81 11       	cpse	r24, r1
    33ea:	c1 cf       	rjmp	.-126    	; 0x336e <vfprintf+0x5c>
    33ec:	98 2f       	mov	r25, r24
    33ee:	9f 7d       	andi	r25, 0xDF	; 223
    33f0:	95 54       	subi	r25, 0x45	; 69
    33f2:	93 30       	cpi	r25, 0x03	; 3
    33f4:	28 f4       	brcc	.+10     	; 0x3400 <vfprintf+0xee>
    33f6:	0c 5f       	subi	r16, 0xFC	; 252
    33f8:	1f 4f       	sbci	r17, 0xFF	; 255
    33fa:	ff e3       	ldi	r31, 0x3F	; 63
    33fc:	f9 83       	std	Y+1, r31	; 0x01
    33fe:	0d c0       	rjmp	.+26     	; 0x341a <vfprintf+0x108>
    3400:	83 36       	cpi	r24, 0x63	; 99
    3402:	31 f0       	breq	.+12     	; 0x3410 <vfprintf+0xfe>
    3404:	83 37       	cpi	r24, 0x73	; 115
    3406:	71 f0       	breq	.+28     	; 0x3424 <vfprintf+0x112>
    3408:	83 35       	cpi	r24, 0x53	; 83
    340a:	09 f0       	breq	.+2      	; 0x340e <vfprintf+0xfc>
    340c:	5b c0       	rjmp	.+182    	; 0x34c4 <vfprintf+0x1b2>
    340e:	22 c0       	rjmp	.+68     	; 0x3454 <vfprintf+0x142>
    3410:	f8 01       	movw	r30, r16
    3412:	80 81       	ld	r24, Z
    3414:	89 83       	std	Y+1, r24	; 0x01
    3416:	0e 5f       	subi	r16, 0xFE	; 254
    3418:	1f 4f       	sbci	r17, 0xFF	; 255
    341a:	44 24       	eor	r4, r4
    341c:	43 94       	inc	r4
    341e:	51 2c       	mov	r5, r1
    3420:	54 01       	movw	r10, r8
    3422:	15 c0       	rjmp	.+42     	; 0x344e <vfprintf+0x13c>
    3424:	38 01       	movw	r6, r16
    3426:	f2 e0       	ldi	r31, 0x02	; 2
    3428:	6f 0e       	add	r6, r31
    342a:	71 1c       	adc	r7, r1
    342c:	f8 01       	movw	r30, r16
    342e:	a0 80       	ld	r10, Z
    3430:	b1 80       	ldd	r11, Z+1	; 0x01
    3432:	26 ff       	sbrs	r18, 6
    3434:	03 c0       	rjmp	.+6      	; 0x343c <vfprintf+0x12a>
    3436:	65 2d       	mov	r22, r5
    3438:	70 e0       	ldi	r23, 0x00	; 0
    343a:	02 c0       	rjmp	.+4      	; 0x3440 <vfprintf+0x12e>
    343c:	6f ef       	ldi	r22, 0xFF	; 255
    343e:	7f ef       	ldi	r23, 0xFF	; 255
    3440:	c5 01       	movw	r24, r10
    3442:	2c 87       	std	Y+12, r18	; 0x0c
    3444:	0e 94 f7 1d 	call	0x3bee	; 0x3bee <strnlen>
    3448:	2c 01       	movw	r4, r24
    344a:	83 01       	movw	r16, r6
    344c:	2c 85       	ldd	r18, Y+12	; 0x0c
    344e:	2f 77       	andi	r18, 0x7F	; 127
    3450:	22 2e       	mov	r2, r18
    3452:	17 c0       	rjmp	.+46     	; 0x3482 <vfprintf+0x170>
    3454:	38 01       	movw	r6, r16
    3456:	f2 e0       	ldi	r31, 0x02	; 2
    3458:	6f 0e       	add	r6, r31
    345a:	71 1c       	adc	r7, r1
    345c:	f8 01       	movw	r30, r16
    345e:	a0 80       	ld	r10, Z
    3460:	b1 80       	ldd	r11, Z+1	; 0x01
    3462:	26 ff       	sbrs	r18, 6
    3464:	03 c0       	rjmp	.+6      	; 0x346c <vfprintf+0x15a>
    3466:	65 2d       	mov	r22, r5
    3468:	70 e0       	ldi	r23, 0x00	; 0
    346a:	02 c0       	rjmp	.+4      	; 0x3470 <vfprintf+0x15e>
    346c:	6f ef       	ldi	r22, 0xFF	; 255
    346e:	7f ef       	ldi	r23, 0xFF	; 255
    3470:	c5 01       	movw	r24, r10
    3472:	2c 87       	std	Y+12, r18	; 0x0c
    3474:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <strnlen_P>
    3478:	2c 01       	movw	r4, r24
    347a:	2c 85       	ldd	r18, Y+12	; 0x0c
    347c:	20 68       	ori	r18, 0x80	; 128
    347e:	22 2e       	mov	r2, r18
    3480:	83 01       	movw	r16, r6
    3482:	23 fc       	sbrc	r2, 3
    3484:	1b c0       	rjmp	.+54     	; 0x34bc <vfprintf+0x1aa>
    3486:	83 2d       	mov	r24, r3
    3488:	90 e0       	ldi	r25, 0x00	; 0
    348a:	48 16       	cp	r4, r24
    348c:	59 06       	cpc	r5, r25
    348e:	b0 f4       	brcc	.+44     	; 0x34bc <vfprintf+0x1aa>
    3490:	b7 01       	movw	r22, r14
    3492:	80 e2       	ldi	r24, 0x20	; 32
    3494:	90 e0       	ldi	r25, 0x00	; 0
    3496:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <fputc>
    349a:	3a 94       	dec	r3
    349c:	f4 cf       	rjmp	.-24     	; 0x3486 <vfprintf+0x174>
    349e:	f5 01       	movw	r30, r10
    34a0:	27 fc       	sbrc	r2, 7
    34a2:	85 91       	lpm	r24, Z+
    34a4:	27 fe       	sbrs	r2, 7
    34a6:	81 91       	ld	r24, Z+
    34a8:	5f 01       	movw	r10, r30
    34aa:	b7 01       	movw	r22, r14
    34ac:	90 e0       	ldi	r25, 0x00	; 0
    34ae:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <fputc>
    34b2:	31 10       	cpse	r3, r1
    34b4:	3a 94       	dec	r3
    34b6:	f1 e0       	ldi	r31, 0x01	; 1
    34b8:	4f 1a       	sub	r4, r31
    34ba:	51 08       	sbc	r5, r1
    34bc:	41 14       	cp	r4, r1
    34be:	51 04       	cpc	r5, r1
    34c0:	71 f7       	brne	.-36     	; 0x349e <vfprintf+0x18c>
    34c2:	e5 c0       	rjmp	.+458    	; 0x368e <vfprintf+0x37c>
    34c4:	84 36       	cpi	r24, 0x64	; 100
    34c6:	11 f0       	breq	.+4      	; 0x34cc <vfprintf+0x1ba>
    34c8:	89 36       	cpi	r24, 0x69	; 105
    34ca:	39 f5       	brne	.+78     	; 0x351a <vfprintf+0x208>
    34cc:	f8 01       	movw	r30, r16
    34ce:	27 ff       	sbrs	r18, 7
    34d0:	07 c0       	rjmp	.+14     	; 0x34e0 <vfprintf+0x1ce>
    34d2:	60 81       	ld	r22, Z
    34d4:	71 81       	ldd	r23, Z+1	; 0x01
    34d6:	82 81       	ldd	r24, Z+2	; 0x02
    34d8:	93 81       	ldd	r25, Z+3	; 0x03
    34da:	0c 5f       	subi	r16, 0xFC	; 252
    34dc:	1f 4f       	sbci	r17, 0xFF	; 255
    34de:	08 c0       	rjmp	.+16     	; 0x34f0 <vfprintf+0x1de>
    34e0:	60 81       	ld	r22, Z
    34e2:	71 81       	ldd	r23, Z+1	; 0x01
    34e4:	88 27       	eor	r24, r24
    34e6:	77 fd       	sbrc	r23, 7
    34e8:	80 95       	com	r24
    34ea:	98 2f       	mov	r25, r24
    34ec:	0e 5f       	subi	r16, 0xFE	; 254
    34ee:	1f 4f       	sbci	r17, 0xFF	; 255
    34f0:	2f 76       	andi	r18, 0x6F	; 111
    34f2:	b2 2e       	mov	r11, r18
    34f4:	97 ff       	sbrs	r25, 7
    34f6:	09 c0       	rjmp	.+18     	; 0x350a <vfprintf+0x1f8>
    34f8:	90 95       	com	r25
    34fa:	80 95       	com	r24
    34fc:	70 95       	com	r23
    34fe:	61 95       	neg	r22
    3500:	7f 4f       	sbci	r23, 0xFF	; 255
    3502:	8f 4f       	sbci	r24, 0xFF	; 255
    3504:	9f 4f       	sbci	r25, 0xFF	; 255
    3506:	20 68       	ori	r18, 0x80	; 128
    3508:	b2 2e       	mov	r11, r18
    350a:	2a e0       	ldi	r18, 0x0A	; 10
    350c:	30 e0       	ldi	r19, 0x00	; 0
    350e:	a4 01       	movw	r20, r8
    3510:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <__ultoa_invert>
    3514:	a8 2e       	mov	r10, r24
    3516:	a8 18       	sub	r10, r8
    3518:	44 c0       	rjmp	.+136    	; 0x35a2 <vfprintf+0x290>
    351a:	85 37       	cpi	r24, 0x75	; 117
    351c:	29 f4       	brne	.+10     	; 0x3528 <vfprintf+0x216>
    351e:	2f 7e       	andi	r18, 0xEF	; 239
    3520:	b2 2e       	mov	r11, r18
    3522:	2a e0       	ldi	r18, 0x0A	; 10
    3524:	30 e0       	ldi	r19, 0x00	; 0
    3526:	25 c0       	rjmp	.+74     	; 0x3572 <vfprintf+0x260>
    3528:	f2 2f       	mov	r31, r18
    352a:	f9 7f       	andi	r31, 0xF9	; 249
    352c:	bf 2e       	mov	r11, r31
    352e:	8f 36       	cpi	r24, 0x6F	; 111
    3530:	c1 f0       	breq	.+48     	; 0x3562 <vfprintf+0x250>
    3532:	18 f4       	brcc	.+6      	; 0x353a <vfprintf+0x228>
    3534:	88 35       	cpi	r24, 0x58	; 88
    3536:	79 f0       	breq	.+30     	; 0x3556 <vfprintf+0x244>
    3538:	b4 c0       	rjmp	.+360    	; 0x36a2 <vfprintf+0x390>
    353a:	80 37       	cpi	r24, 0x70	; 112
    353c:	19 f0       	breq	.+6      	; 0x3544 <vfprintf+0x232>
    353e:	88 37       	cpi	r24, 0x78	; 120
    3540:	21 f0       	breq	.+8      	; 0x354a <vfprintf+0x238>
    3542:	af c0       	rjmp	.+350    	; 0x36a2 <vfprintf+0x390>
    3544:	2f 2f       	mov	r18, r31
    3546:	20 61       	ori	r18, 0x10	; 16
    3548:	b2 2e       	mov	r11, r18
    354a:	b4 fe       	sbrs	r11, 4
    354c:	0d c0       	rjmp	.+26     	; 0x3568 <vfprintf+0x256>
    354e:	8b 2d       	mov	r24, r11
    3550:	84 60       	ori	r24, 0x04	; 4
    3552:	b8 2e       	mov	r11, r24
    3554:	09 c0       	rjmp	.+18     	; 0x3568 <vfprintf+0x256>
    3556:	24 ff       	sbrs	r18, 4
    3558:	0a c0       	rjmp	.+20     	; 0x356e <vfprintf+0x25c>
    355a:	9f 2f       	mov	r25, r31
    355c:	96 60       	ori	r25, 0x06	; 6
    355e:	b9 2e       	mov	r11, r25
    3560:	06 c0       	rjmp	.+12     	; 0x356e <vfprintf+0x25c>
    3562:	28 e0       	ldi	r18, 0x08	; 8
    3564:	30 e0       	ldi	r19, 0x00	; 0
    3566:	05 c0       	rjmp	.+10     	; 0x3572 <vfprintf+0x260>
    3568:	20 e1       	ldi	r18, 0x10	; 16
    356a:	30 e0       	ldi	r19, 0x00	; 0
    356c:	02 c0       	rjmp	.+4      	; 0x3572 <vfprintf+0x260>
    356e:	20 e1       	ldi	r18, 0x10	; 16
    3570:	32 e0       	ldi	r19, 0x02	; 2
    3572:	f8 01       	movw	r30, r16
    3574:	b7 fe       	sbrs	r11, 7
    3576:	07 c0       	rjmp	.+14     	; 0x3586 <vfprintf+0x274>
    3578:	60 81       	ld	r22, Z
    357a:	71 81       	ldd	r23, Z+1	; 0x01
    357c:	82 81       	ldd	r24, Z+2	; 0x02
    357e:	93 81       	ldd	r25, Z+3	; 0x03
    3580:	0c 5f       	subi	r16, 0xFC	; 252
    3582:	1f 4f       	sbci	r17, 0xFF	; 255
    3584:	06 c0       	rjmp	.+12     	; 0x3592 <vfprintf+0x280>
    3586:	60 81       	ld	r22, Z
    3588:	71 81       	ldd	r23, Z+1	; 0x01
    358a:	80 e0       	ldi	r24, 0x00	; 0
    358c:	90 e0       	ldi	r25, 0x00	; 0
    358e:	0e 5f       	subi	r16, 0xFE	; 254
    3590:	1f 4f       	sbci	r17, 0xFF	; 255
    3592:	a4 01       	movw	r20, r8
    3594:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <__ultoa_invert>
    3598:	a8 2e       	mov	r10, r24
    359a:	a8 18       	sub	r10, r8
    359c:	fb 2d       	mov	r31, r11
    359e:	ff 77       	andi	r31, 0x7F	; 127
    35a0:	bf 2e       	mov	r11, r31
    35a2:	b6 fe       	sbrs	r11, 6
    35a4:	0b c0       	rjmp	.+22     	; 0x35bc <vfprintf+0x2aa>
    35a6:	2b 2d       	mov	r18, r11
    35a8:	2e 7f       	andi	r18, 0xFE	; 254
    35aa:	a5 14       	cp	r10, r5
    35ac:	50 f4       	brcc	.+20     	; 0x35c2 <vfprintf+0x2b0>
    35ae:	b4 fe       	sbrs	r11, 4
    35b0:	0a c0       	rjmp	.+20     	; 0x35c6 <vfprintf+0x2b4>
    35b2:	b2 fc       	sbrc	r11, 2
    35b4:	08 c0       	rjmp	.+16     	; 0x35c6 <vfprintf+0x2b4>
    35b6:	2b 2d       	mov	r18, r11
    35b8:	2e 7e       	andi	r18, 0xEE	; 238
    35ba:	05 c0       	rjmp	.+10     	; 0x35c6 <vfprintf+0x2b4>
    35bc:	7a 2c       	mov	r7, r10
    35be:	2b 2d       	mov	r18, r11
    35c0:	03 c0       	rjmp	.+6      	; 0x35c8 <vfprintf+0x2b6>
    35c2:	7a 2c       	mov	r7, r10
    35c4:	01 c0       	rjmp	.+2      	; 0x35c8 <vfprintf+0x2b6>
    35c6:	75 2c       	mov	r7, r5
    35c8:	24 ff       	sbrs	r18, 4
    35ca:	0d c0       	rjmp	.+26     	; 0x35e6 <vfprintf+0x2d4>
    35cc:	fe 01       	movw	r30, r28
    35ce:	ea 0d       	add	r30, r10
    35d0:	f1 1d       	adc	r31, r1
    35d2:	80 81       	ld	r24, Z
    35d4:	80 33       	cpi	r24, 0x30	; 48
    35d6:	11 f4       	brne	.+4      	; 0x35dc <vfprintf+0x2ca>
    35d8:	29 7e       	andi	r18, 0xE9	; 233
    35da:	09 c0       	rjmp	.+18     	; 0x35ee <vfprintf+0x2dc>
    35dc:	22 ff       	sbrs	r18, 2
    35de:	06 c0       	rjmp	.+12     	; 0x35ec <vfprintf+0x2da>
    35e0:	73 94       	inc	r7
    35e2:	73 94       	inc	r7
    35e4:	04 c0       	rjmp	.+8      	; 0x35ee <vfprintf+0x2dc>
    35e6:	82 2f       	mov	r24, r18
    35e8:	86 78       	andi	r24, 0x86	; 134
    35ea:	09 f0       	breq	.+2      	; 0x35ee <vfprintf+0x2dc>
    35ec:	73 94       	inc	r7
    35ee:	23 fd       	sbrc	r18, 3
    35f0:	13 c0       	rjmp	.+38     	; 0x3618 <vfprintf+0x306>
    35f2:	20 ff       	sbrs	r18, 0
    35f4:	06 c0       	rjmp	.+12     	; 0x3602 <vfprintf+0x2f0>
    35f6:	5a 2c       	mov	r5, r10
    35f8:	73 14       	cp	r7, r3
    35fa:	18 f4       	brcc	.+6      	; 0x3602 <vfprintf+0x2f0>
    35fc:	53 0c       	add	r5, r3
    35fe:	57 18       	sub	r5, r7
    3600:	73 2c       	mov	r7, r3
    3602:	73 14       	cp	r7, r3
    3604:	68 f4       	brcc	.+26     	; 0x3620 <vfprintf+0x30e>
    3606:	b7 01       	movw	r22, r14
    3608:	80 e2       	ldi	r24, 0x20	; 32
    360a:	90 e0       	ldi	r25, 0x00	; 0
    360c:	2c 87       	std	Y+12, r18	; 0x0c
    360e:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <fputc>
    3612:	73 94       	inc	r7
    3614:	2c 85       	ldd	r18, Y+12	; 0x0c
    3616:	f5 cf       	rjmp	.-22     	; 0x3602 <vfprintf+0x2f0>
    3618:	73 14       	cp	r7, r3
    361a:	10 f4       	brcc	.+4      	; 0x3620 <vfprintf+0x30e>
    361c:	37 18       	sub	r3, r7
    361e:	01 c0       	rjmp	.+2      	; 0x3622 <vfprintf+0x310>
    3620:	31 2c       	mov	r3, r1
    3622:	24 ff       	sbrs	r18, 4
    3624:	12 c0       	rjmp	.+36     	; 0x364a <vfprintf+0x338>
    3626:	b7 01       	movw	r22, r14
    3628:	80 e3       	ldi	r24, 0x30	; 48
    362a:	90 e0       	ldi	r25, 0x00	; 0
    362c:	2c 87       	std	Y+12, r18	; 0x0c
    362e:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <fputc>
    3632:	2c 85       	ldd	r18, Y+12	; 0x0c
    3634:	22 ff       	sbrs	r18, 2
    3636:	17 c0       	rjmp	.+46     	; 0x3666 <vfprintf+0x354>
    3638:	21 ff       	sbrs	r18, 1
    363a:	03 c0       	rjmp	.+6      	; 0x3642 <vfprintf+0x330>
    363c:	88 e5       	ldi	r24, 0x58	; 88
    363e:	90 e0       	ldi	r25, 0x00	; 0
    3640:	02 c0       	rjmp	.+4      	; 0x3646 <vfprintf+0x334>
    3642:	88 e7       	ldi	r24, 0x78	; 120
    3644:	90 e0       	ldi	r25, 0x00	; 0
    3646:	b7 01       	movw	r22, r14
    3648:	0c c0       	rjmp	.+24     	; 0x3662 <vfprintf+0x350>
    364a:	82 2f       	mov	r24, r18
    364c:	86 78       	andi	r24, 0x86	; 134
    364e:	59 f0       	breq	.+22     	; 0x3666 <vfprintf+0x354>
    3650:	21 fd       	sbrc	r18, 1
    3652:	02 c0       	rjmp	.+4      	; 0x3658 <vfprintf+0x346>
    3654:	80 e2       	ldi	r24, 0x20	; 32
    3656:	01 c0       	rjmp	.+2      	; 0x365a <vfprintf+0x348>
    3658:	8b e2       	ldi	r24, 0x2B	; 43
    365a:	27 fd       	sbrc	r18, 7
    365c:	8d e2       	ldi	r24, 0x2D	; 45
    365e:	b7 01       	movw	r22, r14
    3660:	90 e0       	ldi	r25, 0x00	; 0
    3662:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <fputc>
    3666:	a5 14       	cp	r10, r5
    3668:	38 f4       	brcc	.+14     	; 0x3678 <vfprintf+0x366>
    366a:	b7 01       	movw	r22, r14
    366c:	80 e3       	ldi	r24, 0x30	; 48
    366e:	90 e0       	ldi	r25, 0x00	; 0
    3670:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <fputc>
    3674:	5a 94       	dec	r5
    3676:	f7 cf       	rjmp	.-18     	; 0x3666 <vfprintf+0x354>
    3678:	aa 94       	dec	r10
    367a:	f4 01       	movw	r30, r8
    367c:	ea 0d       	add	r30, r10
    367e:	f1 1d       	adc	r31, r1
    3680:	80 81       	ld	r24, Z
    3682:	b7 01       	movw	r22, r14
    3684:	90 e0       	ldi	r25, 0x00	; 0
    3686:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <fputc>
    368a:	a1 10       	cpse	r10, r1
    368c:	f5 cf       	rjmp	.-22     	; 0x3678 <vfprintf+0x366>
    368e:	33 20       	and	r3, r3
    3690:	09 f4       	brne	.+2      	; 0x3694 <vfprintf+0x382>
    3692:	51 ce       	rjmp	.-862    	; 0x3336 <vfprintf+0x24>
    3694:	b7 01       	movw	r22, r14
    3696:	80 e2       	ldi	r24, 0x20	; 32
    3698:	90 e0       	ldi	r25, 0x00	; 0
    369a:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <fputc>
    369e:	3a 94       	dec	r3
    36a0:	f6 cf       	rjmp	.-20     	; 0x368e <vfprintf+0x37c>
    36a2:	f7 01       	movw	r30, r14
    36a4:	86 81       	ldd	r24, Z+6	; 0x06
    36a6:	97 81       	ldd	r25, Z+7	; 0x07
    36a8:	02 c0       	rjmp	.+4      	; 0x36ae <vfprintf+0x39c>
    36aa:	8f ef       	ldi	r24, 0xFF	; 255
    36ac:	9f ef       	ldi	r25, 0xFF	; 255
    36ae:	2c 96       	adiw	r28, 0x0c	; 12
    36b0:	e2 e1       	ldi	r30, 0x12	; 18
    36b2:	0c 94 be 1e 	jmp	0x3d7c	; 0x3d7c <__epilogue_restores__>

000036b6 <__eerd_block_m168>:
    36b6:	dc 01       	movw	r26, r24
    36b8:	cb 01       	movw	r24, r22

000036ba <__eerd_blraw_m168>:
    36ba:	fc 01       	movw	r30, r24
    36bc:	f9 99       	sbic	0x1f, 1	; 31
    36be:	fe cf       	rjmp	.-4      	; 0x36bc <__eerd_blraw_m168+0x2>
    36c0:	06 c0       	rjmp	.+12     	; 0x36ce <__eerd_blraw_m168+0x14>
    36c2:	f2 bd       	out	0x22, r31	; 34
    36c4:	e1 bd       	out	0x21, r30	; 33
    36c6:	f8 9a       	sbi	0x1f, 0	; 31
    36c8:	31 96       	adiw	r30, 0x01	; 1
    36ca:	00 b4       	in	r0, 0x20	; 32
    36cc:	0d 92       	st	X+, r0
    36ce:	41 50       	subi	r20, 0x01	; 1
    36d0:	50 40       	sbci	r21, 0x00	; 0
    36d2:	b8 f7       	brcc	.-18     	; 0x36c2 <__eerd_blraw_m168+0x8>
    36d4:	08 95       	ret

000036d6 <__eerd_byte_m168>:
    36d6:	f9 99       	sbic	0x1f, 1	; 31
    36d8:	fe cf       	rjmp	.-4      	; 0x36d6 <__eerd_byte_m168>
    36da:	92 bd       	out	0x22, r25	; 34
    36dc:	81 bd       	out	0x21, r24	; 33
    36de:	f8 9a       	sbi	0x1f, 0	; 31
    36e0:	99 27       	eor	r25, r25
    36e2:	80 b5       	in	r24, 0x20	; 32
    36e4:	08 95       	ret

000036e6 <__eerd_word_m168>:
    36e6:	a8 e1       	ldi	r26, 0x18	; 24
    36e8:	b0 e0       	ldi	r27, 0x00	; 0
    36ea:	42 e0       	ldi	r20, 0x02	; 2
    36ec:	50 e0       	ldi	r21, 0x00	; 0
    36ee:	0c 94 5d 1b 	jmp	0x36ba	; 0x36ba <__eerd_blraw_m168>

000036f2 <__eewr_block_m168>:
    36f2:	dc 01       	movw	r26, r24
    36f4:	cb 01       	movw	r24, r22
    36f6:	03 c0       	rjmp	.+6      	; 0x36fe <__eewr_block_m168+0xc>
    36f8:	2d 91       	ld	r18, X+
    36fa:	0e 94 84 1b 	call	0x3708	; 0x3708 <__eewr_r18_m168>
    36fe:	41 50       	subi	r20, 0x01	; 1
    3700:	50 40       	sbci	r21, 0x00	; 0
    3702:	d0 f7       	brcc	.-12     	; 0x36f8 <__eewr_block_m168+0x6>
    3704:	08 95       	ret

00003706 <__eewr_byte_m168>:
    3706:	26 2f       	mov	r18, r22

00003708 <__eewr_r18_m168>:
    3708:	f9 99       	sbic	0x1f, 1	; 31
    370a:	fe cf       	rjmp	.-4      	; 0x3708 <__eewr_r18_m168>
    370c:	1f ba       	out	0x1f, r1	; 31
    370e:	92 bd       	out	0x22, r25	; 34
    3710:	81 bd       	out	0x21, r24	; 33
    3712:	20 bd       	out	0x20, r18	; 32
    3714:	0f b6       	in	r0, 0x3f	; 63
    3716:	f8 94       	cli
    3718:	fa 9a       	sbi	0x1f, 2	; 31
    371a:	f9 9a       	sbi	0x1f, 1	; 31
    371c:	0f be       	out	0x3f, r0	; 63
    371e:	01 96       	adiw	r24, 0x01	; 1
    3720:	08 95       	ret

00003722 <__eewr_word_m168>:
    3722:	0e 94 83 1b 	call	0x3706	; 0x3706 <__eewr_byte_m168>
    3726:	27 2f       	mov	r18, r23
    3728:	0c 94 84 1b 	jmp	0x3708	; 0x3708 <__eewr_r18_m168>

0000372c <dtoa_prf>:
    372c:	6f 92       	push	r6
    372e:	7f 92       	push	r7
    3730:	9f 92       	push	r9
    3732:	af 92       	push	r10
    3734:	bf 92       	push	r11
    3736:	cf 92       	push	r12
    3738:	df 92       	push	r13
    373a:	ef 92       	push	r14
    373c:	ff 92       	push	r15
    373e:	0f 93       	push	r16
    3740:	1f 93       	push	r17
    3742:	cf 93       	push	r28
    3744:	df 93       	push	r29
    3746:	cd b7       	in	r28, 0x3d	; 61
    3748:	de b7       	in	r29, 0x3e	; 62
    374a:	29 97       	sbiw	r28, 0x09	; 9
    374c:	0f b6       	in	r0, 0x3f	; 63
    374e:	f8 94       	cli
    3750:	de bf       	out	0x3e, r29	; 62
    3752:	0f be       	out	0x3f, r0	; 63
    3754:	cd bf       	out	0x3d, r28	; 61
    3756:	6a 01       	movw	r12, r20
    3758:	b2 2e       	mov	r11, r18
    375a:	10 2f       	mov	r17, r16
    375c:	0c 33       	cpi	r16, 0x3C	; 60
    375e:	20 f4       	brcc	.+8      	; 0x3768 <dtoa_prf+0x3c>
    3760:	ff 24       	eor	r15, r15
    3762:	f3 94       	inc	r15
    3764:	f0 0e       	add	r15, r16
    3766:	02 c0       	rjmp	.+4      	; 0x376c <dtoa_prf+0x40>
    3768:	4c e3       	ldi	r20, 0x3C	; 60
    376a:	f4 2e       	mov	r15, r20
    376c:	0f 2d       	mov	r16, r15
    376e:	27 e0       	ldi	r18, 0x07	; 7
    3770:	ae 01       	movw	r20, r28
    3772:	4f 5f       	subi	r20, 0xFF	; 255
    3774:	5f 4f       	sbci	r21, 0xFF	; 255
    3776:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <__ftoa_engine>
    377a:	79 81       	ldd	r23, Y+1	; 0x01
    377c:	27 2f       	mov	r18, r23
    377e:	29 70       	andi	r18, 0x09	; 9
    3780:	21 30       	cpi	r18, 0x01	; 1
    3782:	31 f0       	breq	.+12     	; 0x3790 <dtoa_prf+0x64>
    3784:	e1 fc       	sbrc	r14, 1
    3786:	06 c0       	rjmp	.+12     	; 0x3794 <dtoa_prf+0x68>
    3788:	e0 fc       	sbrc	r14, 0
    378a:	06 c0       	rjmp	.+12     	; 0x3798 <dtoa_prf+0x6c>
    378c:	60 e0       	ldi	r22, 0x00	; 0
    378e:	05 c0       	rjmp	.+10     	; 0x379a <dtoa_prf+0x6e>
    3790:	6d e2       	ldi	r22, 0x2D	; 45
    3792:	03 c0       	rjmp	.+6      	; 0x379a <dtoa_prf+0x6e>
    3794:	6b e2       	ldi	r22, 0x2B	; 43
    3796:	01 c0       	rjmp	.+2      	; 0x379a <dtoa_prf+0x6e>
    3798:	60 e2       	ldi	r22, 0x20	; 32
    379a:	ae 2d       	mov	r26, r14
    379c:	a0 71       	andi	r26, 0x10	; 16
    379e:	73 ff       	sbrs	r23, 3
    37a0:	36 c0       	rjmp	.+108    	; 0x380e <dtoa_prf+0xe2>
    37a2:	66 23       	and	r22, r22
    37a4:	11 f0       	breq	.+4      	; 0x37aa <dtoa_prf+0x7e>
    37a6:	84 e0       	ldi	r24, 0x04	; 4
    37a8:	01 c0       	rjmp	.+2      	; 0x37ac <dtoa_prf+0x80>
    37aa:	83 e0       	ldi	r24, 0x03	; 3
    37ac:	8b 15       	cp	r24, r11
    37ae:	10 f4       	brcc	.+4      	; 0x37b4 <dtoa_prf+0x88>
    37b0:	b8 1a       	sub	r11, r24
    37b2:	01 c0       	rjmp	.+2      	; 0x37b6 <dtoa_prf+0x8a>
    37b4:	b1 2c       	mov	r11, r1
    37b6:	a1 11       	cpse	r26, r1
    37b8:	0b c0       	rjmp	.+22     	; 0x37d0 <dtoa_prf+0xa4>
    37ba:	f6 01       	movw	r30, r12
    37bc:	8b 2d       	mov	r24, r11
    37be:	90 e2       	ldi	r25, 0x20	; 32
    37c0:	88 23       	and	r24, r24
    37c2:	19 f0       	breq	.+6      	; 0x37ca <dtoa_prf+0x9e>
    37c4:	91 93       	st	Z+, r25
    37c6:	81 50       	subi	r24, 0x01	; 1
    37c8:	fb cf       	rjmp	.-10     	; 0x37c0 <dtoa_prf+0x94>
    37ca:	cb 0c       	add	r12, r11
    37cc:	d1 1c       	adc	r13, r1
    37ce:	b1 2c       	mov	r11, r1
    37d0:	66 23       	and	r22, r22
    37d2:	31 f0       	breq	.+12     	; 0x37e0 <dtoa_prf+0xb4>
    37d4:	f6 01       	movw	r30, r12
    37d6:	60 83       	st	Z, r22
    37d8:	96 01       	movw	r18, r12
    37da:	2f 5f       	subi	r18, 0xFF	; 255
    37dc:	3f 4f       	sbci	r19, 0xFF	; 255
    37de:	69 01       	movw	r12, r18
    37e0:	c6 01       	movw	r24, r12
    37e2:	03 96       	adiw	r24, 0x03	; 3
    37e4:	e2 fe       	sbrs	r14, 2
    37e6:	05 c0       	rjmp	.+10     	; 0x37f2 <dtoa_prf+0xc6>
    37e8:	2e e4       	ldi	r18, 0x4E	; 78
    37ea:	f6 01       	movw	r30, r12
    37ec:	20 83       	st	Z, r18
    37ee:	31 e4       	ldi	r19, 0x41	; 65
    37f0:	04 c0       	rjmp	.+8      	; 0x37fa <dtoa_prf+0xce>
    37f2:	2e e6       	ldi	r18, 0x6E	; 110
    37f4:	f6 01       	movw	r30, r12
    37f6:	20 83       	st	Z, r18
    37f8:	31 e6       	ldi	r19, 0x61	; 97
    37fa:	31 83       	std	Z+1, r19	; 0x01
    37fc:	22 83       	std	Z+2, r18	; 0x02
    37fe:	fc 01       	movw	r30, r24
    3800:	2b 2d       	mov	r18, r11
    3802:	30 e2       	ldi	r19, 0x20	; 32
    3804:	22 23       	and	r18, r18
    3806:	f1 f1       	breq	.+124    	; 0x3884 <dtoa_prf+0x158>
    3808:	31 93       	st	Z+, r19
    380a:	21 50       	subi	r18, 0x01	; 1
    380c:	fb cf       	rjmp	.-10     	; 0x3804 <dtoa_prf+0xd8>
    380e:	72 ff       	sbrs	r23, 2
    3810:	40 c0       	rjmp	.+128    	; 0x3892 <dtoa_prf+0x166>
    3812:	66 23       	and	r22, r22
    3814:	11 f0       	breq	.+4      	; 0x381a <dtoa_prf+0xee>
    3816:	84 e0       	ldi	r24, 0x04	; 4
    3818:	01 c0       	rjmp	.+2      	; 0x381c <dtoa_prf+0xf0>
    381a:	83 e0       	ldi	r24, 0x03	; 3
    381c:	8b 15       	cp	r24, r11
    381e:	10 f4       	brcc	.+4      	; 0x3824 <dtoa_prf+0xf8>
    3820:	b8 1a       	sub	r11, r24
    3822:	01 c0       	rjmp	.+2      	; 0x3826 <dtoa_prf+0xfa>
    3824:	b1 2c       	mov	r11, r1
    3826:	a1 11       	cpse	r26, r1
    3828:	0b c0       	rjmp	.+22     	; 0x3840 <dtoa_prf+0x114>
    382a:	f6 01       	movw	r30, r12
    382c:	8b 2d       	mov	r24, r11
    382e:	90 e2       	ldi	r25, 0x20	; 32
    3830:	88 23       	and	r24, r24
    3832:	19 f0       	breq	.+6      	; 0x383a <dtoa_prf+0x10e>
    3834:	91 93       	st	Z+, r25
    3836:	81 50       	subi	r24, 0x01	; 1
    3838:	fb cf       	rjmp	.-10     	; 0x3830 <dtoa_prf+0x104>
    383a:	cb 0c       	add	r12, r11
    383c:	d1 1c       	adc	r13, r1
    383e:	b1 2c       	mov	r11, r1
    3840:	66 23       	and	r22, r22
    3842:	31 f0       	breq	.+12     	; 0x3850 <dtoa_prf+0x124>
    3844:	f6 01       	movw	r30, r12
    3846:	60 83       	st	Z, r22
    3848:	96 01       	movw	r18, r12
    384a:	2f 5f       	subi	r18, 0xFF	; 255
    384c:	3f 4f       	sbci	r19, 0xFF	; 255
    384e:	69 01       	movw	r12, r18
    3850:	c6 01       	movw	r24, r12
    3852:	03 96       	adiw	r24, 0x03	; 3
    3854:	e2 fe       	sbrs	r14, 2
    3856:	07 c0       	rjmp	.+14     	; 0x3866 <dtoa_prf+0x13a>
    3858:	29 e4       	ldi	r18, 0x49	; 73
    385a:	f6 01       	movw	r30, r12
    385c:	20 83       	st	Z, r18
    385e:	2e e4       	ldi	r18, 0x4E	; 78
    3860:	21 83       	std	Z+1, r18	; 0x01
    3862:	26 e4       	ldi	r18, 0x46	; 70
    3864:	06 c0       	rjmp	.+12     	; 0x3872 <dtoa_prf+0x146>
    3866:	29 e6       	ldi	r18, 0x69	; 105
    3868:	f6 01       	movw	r30, r12
    386a:	20 83       	st	Z, r18
    386c:	2e e6       	ldi	r18, 0x6E	; 110
    386e:	21 83       	std	Z+1, r18	; 0x01
    3870:	26 e6       	ldi	r18, 0x66	; 102
    3872:	22 83       	std	Z+2, r18	; 0x02
    3874:	fc 01       	movw	r30, r24
    3876:	2b 2d       	mov	r18, r11
    3878:	30 e2       	ldi	r19, 0x20	; 32
    387a:	22 23       	and	r18, r18
    387c:	19 f0       	breq	.+6      	; 0x3884 <dtoa_prf+0x158>
    387e:	31 93       	st	Z+, r19
    3880:	21 50       	subi	r18, 0x01	; 1
    3882:	fb cf       	rjmp	.-10     	; 0x387a <dtoa_prf+0x14e>
    3884:	fc 01       	movw	r30, r24
    3886:	eb 0d       	add	r30, r11
    3888:	f1 1d       	adc	r31, r1
    388a:	10 82       	st	Z, r1
    388c:	8e ef       	ldi	r24, 0xFE	; 254
    388e:	9f ef       	ldi	r25, 0xFF	; 255
    3890:	b7 c0       	rjmp	.+366    	; 0x3a00 <dtoa_prf+0x2d4>
    3892:	b1 e0       	ldi	r27, 0x01	; 1
    3894:	61 11       	cpse	r22, r1
    3896:	01 c0       	rjmp	.+2      	; 0x389a <dtoa_prf+0x16e>
    3898:	b0 e0       	ldi	r27, 0x00	; 0
    389a:	4b 2f       	mov	r20, r27
    389c:	50 e0       	ldi	r21, 0x00	; 0
    389e:	18 16       	cp	r1, r24
    38a0:	19 06       	cpc	r1, r25
    38a2:	24 f4       	brge	.+8      	; 0x38ac <dtoa_prf+0x180>
    38a4:	9c 01       	movw	r18, r24
    38a6:	2f 5f       	subi	r18, 0xFF	; 255
    38a8:	3f 4f       	sbci	r19, 0xFF	; 255
    38aa:	02 c0       	rjmp	.+4      	; 0x38b0 <dtoa_prf+0x184>
    38ac:	21 e0       	ldi	r18, 0x01	; 1
    38ae:	30 e0       	ldi	r19, 0x00	; 0
    38b0:	24 0f       	add	r18, r20
    38b2:	35 1f       	adc	r19, r21
    38b4:	11 23       	and	r17, r17
    38b6:	29 f0       	breq	.+10     	; 0x38c2 <dtoa_prf+0x196>
    38b8:	41 2f       	mov	r20, r17
    38ba:	50 e0       	ldi	r21, 0x00	; 0
    38bc:	4f 5f       	subi	r20, 0xFF	; 255
    38be:	5f 4f       	sbci	r21, 0xFF	; 255
    38c0:	02 c0       	rjmp	.+4      	; 0x38c6 <dtoa_prf+0x19a>
    38c2:	40 e0       	ldi	r20, 0x00	; 0
    38c4:	50 e0       	ldi	r21, 0x00	; 0
    38c6:	42 0f       	add	r20, r18
    38c8:	53 1f       	adc	r21, r19
    38ca:	2b 2d       	mov	r18, r11
    38cc:	30 e0       	ldi	r19, 0x00	; 0
    38ce:	42 17       	cp	r20, r18
    38d0:	53 07       	cpc	r21, r19
    38d2:	14 f4       	brge	.+4      	; 0x38d8 <dtoa_prf+0x1ac>
    38d4:	b4 1a       	sub	r11, r20
    38d6:	01 c0       	rjmp	.+2      	; 0x38da <dtoa_prf+0x1ae>
    38d8:	b1 2c       	mov	r11, r1
    38da:	2e 2d       	mov	r18, r14
    38dc:	28 71       	andi	r18, 0x18	; 24
    38de:	59 f4       	brne	.+22     	; 0x38f6 <dtoa_prf+0x1ca>
    38e0:	f6 01       	movw	r30, r12
    38e2:	2b 2d       	mov	r18, r11
    38e4:	30 e2       	ldi	r19, 0x20	; 32
    38e6:	22 23       	and	r18, r18
    38e8:	19 f0       	breq	.+6      	; 0x38f0 <dtoa_prf+0x1c4>
    38ea:	31 93       	st	Z+, r19
    38ec:	21 50       	subi	r18, 0x01	; 1
    38ee:	fb cf       	rjmp	.-10     	; 0x38e6 <dtoa_prf+0x1ba>
    38f0:	cb 0c       	add	r12, r11
    38f2:	d1 1c       	adc	r13, r1
    38f4:	b1 2c       	mov	r11, r1
    38f6:	bb 23       	and	r27, r27
    38f8:	31 f0       	breq	.+12     	; 0x3906 <dtoa_prf+0x1da>
    38fa:	f6 01       	movw	r30, r12
    38fc:	60 83       	st	Z, r22
    38fe:	96 01       	movw	r18, r12
    3900:	2f 5f       	subi	r18, 0xFF	; 255
    3902:	3f 4f       	sbci	r19, 0xFF	; 255
    3904:	69 01       	movw	r12, r18
    3906:	a1 11       	cpse	r26, r1
    3908:	0b c0       	rjmp	.+22     	; 0x3920 <dtoa_prf+0x1f4>
    390a:	f6 01       	movw	r30, r12
    390c:	2b 2d       	mov	r18, r11
    390e:	30 e3       	ldi	r19, 0x30	; 48
    3910:	22 23       	and	r18, r18
    3912:	19 f0       	breq	.+6      	; 0x391a <dtoa_prf+0x1ee>
    3914:	31 93       	st	Z+, r19
    3916:	21 50       	subi	r18, 0x01	; 1
    3918:	fb cf       	rjmp	.-10     	; 0x3910 <dtoa_prf+0x1e4>
    391a:	cb 0c       	add	r12, r11
    391c:	d1 1c       	adc	r13, r1
    391e:	b1 2c       	mov	r11, r1
    3920:	f8 0e       	add	r15, r24
    3922:	0a 81       	ldd	r16, Y+2	; 0x02
    3924:	37 2f       	mov	r19, r23
    3926:	30 71       	andi	r19, 0x10	; 16
    3928:	a3 2e       	mov	r10, r19
    392a:	74 ff       	sbrs	r23, 4
    392c:	03 c0       	rjmp	.+6      	; 0x3934 <dtoa_prf+0x208>
    392e:	01 33       	cpi	r16, 0x31	; 49
    3930:	09 f4       	brne	.+2      	; 0x3934 <dtoa_prf+0x208>
    3932:	fa 94       	dec	r15
    3934:	1f 14       	cp	r1, r15
    3936:	2c f4       	brge	.+10     	; 0x3942 <dtoa_prf+0x216>
    3938:	2f 2d       	mov	r18, r15
    393a:	29 30       	cpi	r18, 0x09	; 9
    393c:	18 f0       	brcs	.+6      	; 0x3944 <dtoa_prf+0x218>
    393e:	28 e0       	ldi	r18, 0x08	; 8
    3940:	01 c0       	rjmp	.+2      	; 0x3944 <dtoa_prf+0x218>
    3942:	21 e0       	ldi	r18, 0x01	; 1
    3944:	68 2f       	mov	r22, r24
    3946:	39 2f       	mov	r19, r25
    3948:	97 ff       	sbrs	r25, 7
    394a:	02 c0       	rjmp	.+4      	; 0x3950 <dtoa_prf+0x224>
    394c:	60 e0       	ldi	r22, 0x00	; 0
    394e:	30 e0       	ldi	r19, 0x00	; 0
    3950:	46 2f       	mov	r20, r22
    3952:	53 2f       	mov	r21, r19
    3954:	61 2c       	mov	r6, r1
    3956:	71 2c       	mov	r7, r1
    3958:	3e e2       	ldi	r19, 0x2E	; 46
    395a:	93 2e       	mov	r9, r19
    395c:	bc 01       	movw	r22, r24
    395e:	62 1b       	sub	r22, r18
    3960:	71 09       	sbc	r23, r1
    3962:	9b 01       	movw	r18, r22
    3964:	dc 01       	movw	r26, r24
    3966:	a4 1b       	sub	r26, r20
    3968:	b5 0b       	sbc	r27, r21
    396a:	e1 e0       	ldi	r30, 0x01	; 1
    396c:	f0 e0       	ldi	r31, 0x00	; 0
    396e:	ec 0f       	add	r30, r28
    3970:	fd 1f       	adc	r31, r29
    3972:	ae 0f       	add	r26, r30
    3974:	bf 1f       	adc	r27, r31
    3976:	e1 2e       	mov	r14, r17
    3978:	f1 2c       	mov	r15, r1
    397a:	f1 94       	neg	r15
    397c:	e1 94       	neg	r14
    397e:	f1 08       	sbc	r15, r1
    3980:	4f 3f       	cpi	r20, 0xFF	; 255
    3982:	ff ef       	ldi	r31, 0xFF	; 255
    3984:	5f 07       	cpc	r21, r31
    3986:	31 f4       	brne	.+12     	; 0x3994 <dtoa_prf+0x268>
    3988:	f6 01       	movw	r30, r12
    398a:	90 82       	st	Z, r9
    398c:	b6 01       	movw	r22, r12
    398e:	6f 5f       	subi	r22, 0xFF	; 255
    3990:	7f 4f       	sbci	r23, 0xFF	; 255
    3992:	6b 01       	movw	r12, r22
    3994:	84 17       	cp	r24, r20
    3996:	95 07       	cpc	r25, r21
    3998:	4c f0       	brlt	.+18     	; 0x39ac <dtoa_prf+0x280>
    399a:	24 17       	cp	r18, r20
    399c:	35 07       	cpc	r19, r21
    399e:	34 f4       	brge	.+12     	; 0x39ac <dtoa_prf+0x280>
    39a0:	bd 01       	movw	r22, r26
    39a2:	66 0d       	add	r22, r6
    39a4:	77 1d       	adc	r23, r7
    39a6:	fb 01       	movw	r30, r22
    39a8:	11 81       	ldd	r17, Z+1	; 0x01
    39aa:	01 c0       	rjmp	.+2      	; 0x39ae <dtoa_prf+0x282>
    39ac:	10 e3       	ldi	r17, 0x30	; 48
    39ae:	41 50       	subi	r20, 0x01	; 1
    39b0:	51 09       	sbc	r21, r1
    39b2:	ff ef       	ldi	r31, 0xFF	; 255
    39b4:	6f 1a       	sub	r6, r31
    39b6:	7f 0a       	sbc	r7, r31
    39b8:	b6 01       	movw	r22, r12
    39ba:	6f 5f       	subi	r22, 0xFF	; 255
    39bc:	7f 4f       	sbci	r23, 0xFF	; 255
    39be:	4e 15       	cp	r20, r14
    39c0:	5f 05       	cpc	r21, r15
    39c2:	24 f0       	brlt	.+8      	; 0x39cc <dtoa_prf+0x2a0>
    39c4:	f6 01       	movw	r30, r12
    39c6:	10 83       	st	Z, r17
    39c8:	6b 01       	movw	r12, r22
    39ca:	da cf       	rjmp	.-76     	; 0x3980 <dtoa_prf+0x254>
    39cc:	48 17       	cp	r20, r24
    39ce:	59 07       	cpc	r21, r25
    39d0:	39 f4       	brne	.+14     	; 0x39e0 <dtoa_prf+0x2b4>
    39d2:	06 33       	cpi	r16, 0x36	; 54
    39d4:	20 f4       	brcc	.+8      	; 0x39de <dtoa_prf+0x2b2>
    39d6:	05 33       	cpi	r16, 0x35	; 53
    39d8:	19 f4       	brne	.+6      	; 0x39e0 <dtoa_prf+0x2b4>
    39da:	a1 10       	cpse	r10, r1
    39dc:	01 c0       	rjmp	.+2      	; 0x39e0 <dtoa_prf+0x2b4>
    39de:	11 e3       	ldi	r17, 0x31	; 49
    39e0:	f6 01       	movw	r30, r12
    39e2:	10 83       	st	Z, r17
    39e4:	fb 01       	movw	r30, r22
    39e6:	8b 2d       	mov	r24, r11
    39e8:	90 e2       	ldi	r25, 0x20	; 32
    39ea:	88 23       	and	r24, r24
    39ec:	19 f0       	breq	.+6      	; 0x39f4 <dtoa_prf+0x2c8>
    39ee:	91 93       	st	Z+, r25
    39f0:	81 50       	subi	r24, 0x01	; 1
    39f2:	fb cf       	rjmp	.-10     	; 0x39ea <dtoa_prf+0x2be>
    39f4:	fb 01       	movw	r30, r22
    39f6:	eb 0d       	add	r30, r11
    39f8:	f1 1d       	adc	r31, r1
    39fa:	10 82       	st	Z, r1
    39fc:	80 e0       	ldi	r24, 0x00	; 0
    39fe:	90 e0       	ldi	r25, 0x00	; 0
    3a00:	29 96       	adiw	r28, 0x09	; 9
    3a02:	0f b6       	in	r0, 0x3f	; 63
    3a04:	f8 94       	cli
    3a06:	de bf       	out	0x3e, r29	; 62
    3a08:	0f be       	out	0x3f, r0	; 63
    3a0a:	cd bf       	out	0x3d, r28	; 61
    3a0c:	df 91       	pop	r29
    3a0e:	cf 91       	pop	r28
    3a10:	1f 91       	pop	r17
    3a12:	0f 91       	pop	r16
    3a14:	ff 90       	pop	r15
    3a16:	ef 90       	pop	r14
    3a18:	df 90       	pop	r13
    3a1a:	cf 90       	pop	r12
    3a1c:	bf 90       	pop	r11
    3a1e:	af 90       	pop	r10
    3a20:	9f 90       	pop	r9
    3a22:	7f 90       	pop	r7
    3a24:	6f 90       	pop	r6
    3a26:	08 95       	ret

00003a28 <__ftoa_engine>:
    3a28:	28 30       	cpi	r18, 0x08	; 8
    3a2a:	08 f0       	brcs	.+2      	; 0x3a2e <__ftoa_engine+0x6>
    3a2c:	27 e0       	ldi	r18, 0x07	; 7
    3a2e:	33 27       	eor	r19, r19
    3a30:	da 01       	movw	r26, r20
    3a32:	99 0f       	add	r25, r25
    3a34:	31 1d       	adc	r19, r1
    3a36:	87 fd       	sbrc	r24, 7
    3a38:	91 60       	ori	r25, 0x01	; 1
    3a3a:	00 96       	adiw	r24, 0x00	; 0
    3a3c:	61 05       	cpc	r22, r1
    3a3e:	71 05       	cpc	r23, r1
    3a40:	39 f4       	brne	.+14     	; 0x3a50 <__ftoa_engine+0x28>
    3a42:	32 60       	ori	r19, 0x02	; 2
    3a44:	2e 5f       	subi	r18, 0xFE	; 254
    3a46:	3d 93       	st	X+, r19
    3a48:	30 e3       	ldi	r19, 0x30	; 48
    3a4a:	2a 95       	dec	r18
    3a4c:	e1 f7       	brne	.-8      	; 0x3a46 <__ftoa_engine+0x1e>
    3a4e:	08 95       	ret
    3a50:	9f 3f       	cpi	r25, 0xFF	; 255
    3a52:	30 f0       	brcs	.+12     	; 0x3a60 <__ftoa_engine+0x38>
    3a54:	80 38       	cpi	r24, 0x80	; 128
    3a56:	71 05       	cpc	r23, r1
    3a58:	61 05       	cpc	r22, r1
    3a5a:	09 f0       	breq	.+2      	; 0x3a5e <__ftoa_engine+0x36>
    3a5c:	3c 5f       	subi	r19, 0xFC	; 252
    3a5e:	3c 5f       	subi	r19, 0xFC	; 252
    3a60:	3d 93       	st	X+, r19
    3a62:	91 30       	cpi	r25, 0x01	; 1
    3a64:	08 f0       	brcs	.+2      	; 0x3a68 <__ftoa_engine+0x40>
    3a66:	80 68       	ori	r24, 0x80	; 128
    3a68:	91 1d       	adc	r25, r1
    3a6a:	df 93       	push	r29
    3a6c:	cf 93       	push	r28
    3a6e:	1f 93       	push	r17
    3a70:	0f 93       	push	r16
    3a72:	ff 92       	push	r15
    3a74:	ef 92       	push	r14
    3a76:	19 2f       	mov	r17, r25
    3a78:	98 7f       	andi	r25, 0xF8	; 248
    3a7a:	96 95       	lsr	r25
    3a7c:	e9 2f       	mov	r30, r25
    3a7e:	96 95       	lsr	r25
    3a80:	96 95       	lsr	r25
    3a82:	e9 0f       	add	r30, r25
    3a84:	ff 27       	eor	r31, r31
    3a86:	e5 58       	subi	r30, 0x85	; 133
    3a88:	fc 4f       	sbci	r31, 0xFC	; 252
    3a8a:	99 27       	eor	r25, r25
    3a8c:	33 27       	eor	r19, r19
    3a8e:	ee 24       	eor	r14, r14
    3a90:	ff 24       	eor	r15, r15
    3a92:	a7 01       	movw	r20, r14
    3a94:	e7 01       	movw	r28, r14
    3a96:	05 90       	lpm	r0, Z+
    3a98:	08 94       	sec
    3a9a:	07 94       	ror	r0
    3a9c:	28 f4       	brcc	.+10     	; 0x3aa8 <__ftoa_engine+0x80>
    3a9e:	36 0f       	add	r19, r22
    3aa0:	e7 1e       	adc	r14, r23
    3aa2:	f8 1e       	adc	r15, r24
    3aa4:	49 1f       	adc	r20, r25
    3aa6:	51 1d       	adc	r21, r1
    3aa8:	66 0f       	add	r22, r22
    3aaa:	77 1f       	adc	r23, r23
    3aac:	88 1f       	adc	r24, r24
    3aae:	99 1f       	adc	r25, r25
    3ab0:	06 94       	lsr	r0
    3ab2:	a1 f7       	brne	.-24     	; 0x3a9c <__ftoa_engine+0x74>
    3ab4:	05 90       	lpm	r0, Z+
    3ab6:	07 94       	ror	r0
    3ab8:	28 f4       	brcc	.+10     	; 0x3ac4 <__ftoa_engine+0x9c>
    3aba:	e7 0e       	add	r14, r23
    3abc:	f8 1e       	adc	r15, r24
    3abe:	49 1f       	adc	r20, r25
    3ac0:	56 1f       	adc	r21, r22
    3ac2:	c1 1d       	adc	r28, r1
    3ac4:	77 0f       	add	r23, r23
    3ac6:	88 1f       	adc	r24, r24
    3ac8:	99 1f       	adc	r25, r25
    3aca:	66 1f       	adc	r22, r22
    3acc:	06 94       	lsr	r0
    3ace:	a1 f7       	brne	.-24     	; 0x3ab8 <__ftoa_engine+0x90>
    3ad0:	05 90       	lpm	r0, Z+
    3ad2:	07 94       	ror	r0
    3ad4:	28 f4       	brcc	.+10     	; 0x3ae0 <__ftoa_engine+0xb8>
    3ad6:	f8 0e       	add	r15, r24
    3ad8:	49 1f       	adc	r20, r25
    3ada:	56 1f       	adc	r21, r22
    3adc:	c7 1f       	adc	r28, r23
    3ade:	d1 1d       	adc	r29, r1
    3ae0:	88 0f       	add	r24, r24
    3ae2:	99 1f       	adc	r25, r25
    3ae4:	66 1f       	adc	r22, r22
    3ae6:	77 1f       	adc	r23, r23
    3ae8:	06 94       	lsr	r0
    3aea:	a1 f7       	brne	.-24     	; 0x3ad4 <__ftoa_engine+0xac>
    3aec:	05 90       	lpm	r0, Z+
    3aee:	07 94       	ror	r0
    3af0:	20 f4       	brcc	.+8      	; 0x3afa <__ftoa_engine+0xd2>
    3af2:	49 0f       	add	r20, r25
    3af4:	56 1f       	adc	r21, r22
    3af6:	c7 1f       	adc	r28, r23
    3af8:	d8 1f       	adc	r29, r24
    3afa:	99 0f       	add	r25, r25
    3afc:	66 1f       	adc	r22, r22
    3afe:	77 1f       	adc	r23, r23
    3b00:	88 1f       	adc	r24, r24
    3b02:	06 94       	lsr	r0
    3b04:	a9 f7       	brne	.-22     	; 0x3af0 <__ftoa_engine+0xc8>
    3b06:	84 91       	lpm	r24, Z
    3b08:	10 95       	com	r17
    3b0a:	17 70       	andi	r17, 0x07	; 7
    3b0c:	41 f0       	breq	.+16     	; 0x3b1e <__ftoa_engine+0xf6>
    3b0e:	d6 95       	lsr	r29
    3b10:	c7 95       	ror	r28
    3b12:	57 95       	ror	r21
    3b14:	47 95       	ror	r20
    3b16:	f7 94       	ror	r15
    3b18:	e7 94       	ror	r14
    3b1a:	1a 95       	dec	r17
    3b1c:	c1 f7       	brne	.-16     	; 0x3b0e <__ftoa_engine+0xe6>
    3b1e:	e1 e2       	ldi	r30, 0x21	; 33
    3b20:	f3 e0       	ldi	r31, 0x03	; 3
    3b22:	68 94       	set
    3b24:	15 90       	lpm	r1, Z+
    3b26:	15 91       	lpm	r17, Z+
    3b28:	35 91       	lpm	r19, Z+
    3b2a:	65 91       	lpm	r22, Z+
    3b2c:	95 91       	lpm	r25, Z+
    3b2e:	05 90       	lpm	r0, Z+
    3b30:	7f e2       	ldi	r23, 0x2F	; 47
    3b32:	73 95       	inc	r23
    3b34:	e1 18       	sub	r14, r1
    3b36:	f1 0a       	sbc	r15, r17
    3b38:	43 0b       	sbc	r20, r19
    3b3a:	56 0b       	sbc	r21, r22
    3b3c:	c9 0b       	sbc	r28, r25
    3b3e:	d0 09       	sbc	r29, r0
    3b40:	c0 f7       	brcc	.-16     	; 0x3b32 <__ftoa_engine+0x10a>
    3b42:	e1 0c       	add	r14, r1
    3b44:	f1 1e       	adc	r15, r17
    3b46:	43 1f       	adc	r20, r19
    3b48:	56 1f       	adc	r21, r22
    3b4a:	c9 1f       	adc	r28, r25
    3b4c:	d0 1d       	adc	r29, r0
    3b4e:	7e f4       	brtc	.+30     	; 0x3b6e <__ftoa_engine+0x146>
    3b50:	70 33       	cpi	r23, 0x30	; 48
    3b52:	11 f4       	brne	.+4      	; 0x3b58 <__ftoa_engine+0x130>
    3b54:	8a 95       	dec	r24
    3b56:	e6 cf       	rjmp	.-52     	; 0x3b24 <__ftoa_engine+0xfc>
    3b58:	e8 94       	clt
    3b5a:	01 50       	subi	r16, 0x01	; 1
    3b5c:	30 f0       	brcs	.+12     	; 0x3b6a <__ftoa_engine+0x142>
    3b5e:	08 0f       	add	r16, r24
    3b60:	0a f4       	brpl	.+2      	; 0x3b64 <__ftoa_engine+0x13c>
    3b62:	00 27       	eor	r16, r16
    3b64:	02 17       	cp	r16, r18
    3b66:	08 f4       	brcc	.+2      	; 0x3b6a <__ftoa_engine+0x142>
    3b68:	20 2f       	mov	r18, r16
    3b6a:	23 95       	inc	r18
    3b6c:	02 2f       	mov	r16, r18
    3b6e:	7a 33       	cpi	r23, 0x3A	; 58
    3b70:	28 f0       	brcs	.+10     	; 0x3b7c <__ftoa_engine+0x154>
    3b72:	79 e3       	ldi	r23, 0x39	; 57
    3b74:	7d 93       	st	X+, r23
    3b76:	2a 95       	dec	r18
    3b78:	e9 f7       	brne	.-6      	; 0x3b74 <__ftoa_engine+0x14c>
    3b7a:	10 c0       	rjmp	.+32     	; 0x3b9c <__ftoa_engine+0x174>
    3b7c:	7d 93       	st	X+, r23
    3b7e:	2a 95       	dec	r18
    3b80:	89 f6       	brne	.-94     	; 0x3b24 <__ftoa_engine+0xfc>
    3b82:	06 94       	lsr	r0
    3b84:	97 95       	ror	r25
    3b86:	67 95       	ror	r22
    3b88:	37 95       	ror	r19
    3b8a:	17 95       	ror	r17
    3b8c:	17 94       	ror	r1
    3b8e:	e1 18       	sub	r14, r1
    3b90:	f1 0a       	sbc	r15, r17
    3b92:	43 0b       	sbc	r20, r19
    3b94:	56 0b       	sbc	r21, r22
    3b96:	c9 0b       	sbc	r28, r25
    3b98:	d0 09       	sbc	r29, r0
    3b9a:	98 f0       	brcs	.+38     	; 0x3bc2 <__ftoa_engine+0x19a>
    3b9c:	23 95       	inc	r18
    3b9e:	7e 91       	ld	r23, -X
    3ba0:	73 95       	inc	r23
    3ba2:	7a 33       	cpi	r23, 0x3A	; 58
    3ba4:	08 f0       	brcs	.+2      	; 0x3ba8 <__ftoa_engine+0x180>
    3ba6:	70 e3       	ldi	r23, 0x30	; 48
    3ba8:	7c 93       	st	X, r23
    3baa:	20 13       	cpse	r18, r16
    3bac:	b8 f7       	brcc	.-18     	; 0x3b9c <__ftoa_engine+0x174>
    3bae:	7e 91       	ld	r23, -X
    3bb0:	70 61       	ori	r23, 0x10	; 16
    3bb2:	7d 93       	st	X+, r23
    3bb4:	30 f0       	brcs	.+12     	; 0x3bc2 <__ftoa_engine+0x19a>
    3bb6:	83 95       	inc	r24
    3bb8:	71 e3       	ldi	r23, 0x31	; 49
    3bba:	7d 93       	st	X+, r23
    3bbc:	70 e3       	ldi	r23, 0x30	; 48
    3bbe:	2a 95       	dec	r18
    3bc0:	e1 f7       	brne	.-8      	; 0x3bba <__ftoa_engine+0x192>
    3bc2:	11 24       	eor	r1, r1
    3bc4:	ef 90       	pop	r14
    3bc6:	ff 90       	pop	r15
    3bc8:	0f 91       	pop	r16
    3bca:	1f 91       	pop	r17
    3bcc:	cf 91       	pop	r28
    3bce:	df 91       	pop	r29
    3bd0:	99 27       	eor	r25, r25
    3bd2:	87 fd       	sbrc	r24, 7
    3bd4:	90 95       	com	r25
    3bd6:	08 95       	ret

00003bd8 <strnlen_P>:
    3bd8:	fc 01       	movw	r30, r24
    3bda:	05 90       	lpm	r0, Z+
    3bdc:	61 50       	subi	r22, 0x01	; 1
    3bde:	70 40       	sbci	r23, 0x00	; 0
    3be0:	01 10       	cpse	r0, r1
    3be2:	d8 f7       	brcc	.-10     	; 0x3bda <strnlen_P+0x2>
    3be4:	80 95       	com	r24
    3be6:	90 95       	com	r25
    3be8:	8e 0f       	add	r24, r30
    3bea:	9f 1f       	adc	r25, r31
    3bec:	08 95       	ret

00003bee <strnlen>:
    3bee:	fc 01       	movw	r30, r24
    3bf0:	61 50       	subi	r22, 0x01	; 1
    3bf2:	70 40       	sbci	r23, 0x00	; 0
    3bf4:	01 90       	ld	r0, Z+
    3bf6:	01 10       	cpse	r0, r1
    3bf8:	d8 f7       	brcc	.-10     	; 0x3bf0 <strnlen+0x2>
    3bfa:	80 95       	com	r24
    3bfc:	90 95       	com	r25
    3bfe:	8e 0f       	add	r24, r30
    3c00:	9f 1f       	adc	r25, r31
    3c02:	08 95       	ret

00003c04 <strrev>:
    3c04:	dc 01       	movw	r26, r24
    3c06:	fc 01       	movw	r30, r24
    3c08:	67 2f       	mov	r22, r23
    3c0a:	71 91       	ld	r23, Z+
    3c0c:	77 23       	and	r23, r23
    3c0e:	e1 f7       	brne	.-8      	; 0x3c08 <strrev+0x4>
    3c10:	32 97       	sbiw	r30, 0x02	; 2
    3c12:	04 c0       	rjmp	.+8      	; 0x3c1c <strrev+0x18>
    3c14:	7c 91       	ld	r23, X
    3c16:	6d 93       	st	X+, r22
    3c18:	70 83       	st	Z, r23
    3c1a:	62 91       	ld	r22, -Z
    3c1c:	ae 17       	cp	r26, r30
    3c1e:	bf 07       	cpc	r27, r31
    3c20:	c8 f3       	brcs	.-14     	; 0x3c14 <strrev+0x10>
    3c22:	08 95       	ret

00003c24 <fputc>:
    3c24:	0f 93       	push	r16
    3c26:	1f 93       	push	r17
    3c28:	cf 93       	push	r28
    3c2a:	df 93       	push	r29
    3c2c:	18 2f       	mov	r17, r24
    3c2e:	09 2f       	mov	r16, r25
    3c30:	eb 01       	movw	r28, r22
    3c32:	8b 81       	ldd	r24, Y+3	; 0x03
    3c34:	81 fd       	sbrc	r24, 1
    3c36:	03 c0       	rjmp	.+6      	; 0x3c3e <fputc+0x1a>
    3c38:	8f ef       	ldi	r24, 0xFF	; 255
    3c3a:	9f ef       	ldi	r25, 0xFF	; 255
    3c3c:	20 c0       	rjmp	.+64     	; 0x3c7e <fputc+0x5a>
    3c3e:	82 ff       	sbrs	r24, 2
    3c40:	10 c0       	rjmp	.+32     	; 0x3c62 <fputc+0x3e>
    3c42:	4e 81       	ldd	r20, Y+6	; 0x06
    3c44:	5f 81       	ldd	r21, Y+7	; 0x07
    3c46:	2c 81       	ldd	r18, Y+4	; 0x04
    3c48:	3d 81       	ldd	r19, Y+5	; 0x05
    3c4a:	42 17       	cp	r20, r18
    3c4c:	53 07       	cpc	r21, r19
    3c4e:	7c f4       	brge	.+30     	; 0x3c6e <fputc+0x4a>
    3c50:	e8 81       	ld	r30, Y
    3c52:	f9 81       	ldd	r31, Y+1	; 0x01
    3c54:	9f 01       	movw	r18, r30
    3c56:	2f 5f       	subi	r18, 0xFF	; 255
    3c58:	3f 4f       	sbci	r19, 0xFF	; 255
    3c5a:	39 83       	std	Y+1, r19	; 0x01
    3c5c:	28 83       	st	Y, r18
    3c5e:	10 83       	st	Z, r17
    3c60:	06 c0       	rjmp	.+12     	; 0x3c6e <fputc+0x4a>
    3c62:	e8 85       	ldd	r30, Y+8	; 0x08
    3c64:	f9 85       	ldd	r31, Y+9	; 0x09
    3c66:	81 2f       	mov	r24, r17
    3c68:	09 95       	icall
    3c6a:	89 2b       	or	r24, r25
    3c6c:	29 f7       	brne	.-54     	; 0x3c38 <fputc+0x14>
    3c6e:	2e 81       	ldd	r18, Y+6	; 0x06
    3c70:	3f 81       	ldd	r19, Y+7	; 0x07
    3c72:	2f 5f       	subi	r18, 0xFF	; 255
    3c74:	3f 4f       	sbci	r19, 0xFF	; 255
    3c76:	3f 83       	std	Y+7, r19	; 0x07
    3c78:	2e 83       	std	Y+6, r18	; 0x06
    3c7a:	81 2f       	mov	r24, r17
    3c7c:	90 2f       	mov	r25, r16
    3c7e:	df 91       	pop	r29
    3c80:	cf 91       	pop	r28
    3c82:	1f 91       	pop	r17
    3c84:	0f 91       	pop	r16
    3c86:	08 95       	ret

00003c88 <__ultoa_invert>:
    3c88:	fa 01       	movw	r30, r20
    3c8a:	aa 27       	eor	r26, r26
    3c8c:	28 30       	cpi	r18, 0x08	; 8
    3c8e:	51 f1       	breq	.+84     	; 0x3ce4 <__ultoa_invert+0x5c>
    3c90:	20 31       	cpi	r18, 0x10	; 16
    3c92:	81 f1       	breq	.+96     	; 0x3cf4 <__ultoa_invert+0x6c>
    3c94:	e8 94       	clt
    3c96:	6f 93       	push	r22
    3c98:	6e 7f       	andi	r22, 0xFE	; 254
    3c9a:	6e 5f       	subi	r22, 0xFE	; 254
    3c9c:	7f 4f       	sbci	r23, 0xFF	; 255
    3c9e:	8f 4f       	sbci	r24, 0xFF	; 255
    3ca0:	9f 4f       	sbci	r25, 0xFF	; 255
    3ca2:	af 4f       	sbci	r26, 0xFF	; 255
    3ca4:	b1 e0       	ldi	r27, 0x01	; 1
    3ca6:	3e d0       	rcall	.+124    	; 0x3d24 <__ultoa_invert+0x9c>
    3ca8:	b4 e0       	ldi	r27, 0x04	; 4
    3caa:	3c d0       	rcall	.+120    	; 0x3d24 <__ultoa_invert+0x9c>
    3cac:	67 0f       	add	r22, r23
    3cae:	78 1f       	adc	r23, r24
    3cb0:	89 1f       	adc	r24, r25
    3cb2:	9a 1f       	adc	r25, r26
    3cb4:	a1 1d       	adc	r26, r1
    3cb6:	68 0f       	add	r22, r24
    3cb8:	79 1f       	adc	r23, r25
    3cba:	8a 1f       	adc	r24, r26
    3cbc:	91 1d       	adc	r25, r1
    3cbe:	a1 1d       	adc	r26, r1
    3cc0:	6a 0f       	add	r22, r26
    3cc2:	71 1d       	adc	r23, r1
    3cc4:	81 1d       	adc	r24, r1
    3cc6:	91 1d       	adc	r25, r1
    3cc8:	a1 1d       	adc	r26, r1
    3cca:	20 d0       	rcall	.+64     	; 0x3d0c <__ultoa_invert+0x84>
    3ccc:	09 f4       	brne	.+2      	; 0x3cd0 <__ultoa_invert+0x48>
    3cce:	68 94       	set
    3cd0:	3f 91       	pop	r19
    3cd2:	2a e0       	ldi	r18, 0x0A	; 10
    3cd4:	26 9f       	mul	r18, r22
    3cd6:	11 24       	eor	r1, r1
    3cd8:	30 19       	sub	r19, r0
    3cda:	30 5d       	subi	r19, 0xD0	; 208
    3cdc:	31 93       	st	Z+, r19
    3cde:	de f6       	brtc	.-74     	; 0x3c96 <__ultoa_invert+0xe>
    3ce0:	cf 01       	movw	r24, r30
    3ce2:	08 95       	ret
    3ce4:	46 2f       	mov	r20, r22
    3ce6:	47 70       	andi	r20, 0x07	; 7
    3ce8:	40 5d       	subi	r20, 0xD0	; 208
    3cea:	41 93       	st	Z+, r20
    3cec:	b3 e0       	ldi	r27, 0x03	; 3
    3cee:	0f d0       	rcall	.+30     	; 0x3d0e <__ultoa_invert+0x86>
    3cf0:	c9 f7       	brne	.-14     	; 0x3ce4 <__ultoa_invert+0x5c>
    3cf2:	f6 cf       	rjmp	.-20     	; 0x3ce0 <__ultoa_invert+0x58>
    3cf4:	46 2f       	mov	r20, r22
    3cf6:	4f 70       	andi	r20, 0x0F	; 15
    3cf8:	40 5d       	subi	r20, 0xD0	; 208
    3cfa:	4a 33       	cpi	r20, 0x3A	; 58
    3cfc:	18 f0       	brcs	.+6      	; 0x3d04 <__ultoa_invert+0x7c>
    3cfe:	49 5d       	subi	r20, 0xD9	; 217
    3d00:	31 fd       	sbrc	r19, 1
    3d02:	40 52       	subi	r20, 0x20	; 32
    3d04:	41 93       	st	Z+, r20
    3d06:	02 d0       	rcall	.+4      	; 0x3d0c <__ultoa_invert+0x84>
    3d08:	a9 f7       	brne	.-22     	; 0x3cf4 <__ultoa_invert+0x6c>
    3d0a:	ea cf       	rjmp	.-44     	; 0x3ce0 <__ultoa_invert+0x58>
    3d0c:	b4 e0       	ldi	r27, 0x04	; 4
    3d0e:	a6 95       	lsr	r26
    3d10:	97 95       	ror	r25
    3d12:	87 95       	ror	r24
    3d14:	77 95       	ror	r23
    3d16:	67 95       	ror	r22
    3d18:	ba 95       	dec	r27
    3d1a:	c9 f7       	brne	.-14     	; 0x3d0e <__ultoa_invert+0x86>
    3d1c:	00 97       	sbiw	r24, 0x00	; 0
    3d1e:	61 05       	cpc	r22, r1
    3d20:	71 05       	cpc	r23, r1
    3d22:	08 95       	ret
    3d24:	9b 01       	movw	r18, r22
    3d26:	ac 01       	movw	r20, r24
    3d28:	0a 2e       	mov	r0, r26
    3d2a:	06 94       	lsr	r0
    3d2c:	57 95       	ror	r21
    3d2e:	47 95       	ror	r20
    3d30:	37 95       	ror	r19
    3d32:	27 95       	ror	r18
    3d34:	ba 95       	dec	r27
    3d36:	c9 f7       	brne	.-14     	; 0x3d2a <__ultoa_invert+0xa2>
    3d38:	62 0f       	add	r22, r18
    3d3a:	73 1f       	adc	r23, r19
    3d3c:	84 1f       	adc	r24, r20
    3d3e:	95 1f       	adc	r25, r21
    3d40:	a0 1d       	adc	r26, r0
    3d42:	08 95       	ret

00003d44 <__prologue_saves__>:
    3d44:	2f 92       	push	r2
    3d46:	3f 92       	push	r3
    3d48:	4f 92       	push	r4
    3d4a:	5f 92       	push	r5
    3d4c:	6f 92       	push	r6
    3d4e:	7f 92       	push	r7
    3d50:	8f 92       	push	r8
    3d52:	9f 92       	push	r9
    3d54:	af 92       	push	r10
    3d56:	bf 92       	push	r11
    3d58:	cf 92       	push	r12
    3d5a:	df 92       	push	r13
    3d5c:	ef 92       	push	r14
    3d5e:	ff 92       	push	r15
    3d60:	0f 93       	push	r16
    3d62:	1f 93       	push	r17
    3d64:	cf 93       	push	r28
    3d66:	df 93       	push	r29
    3d68:	cd b7       	in	r28, 0x3d	; 61
    3d6a:	de b7       	in	r29, 0x3e	; 62
    3d6c:	ca 1b       	sub	r28, r26
    3d6e:	db 0b       	sbc	r29, r27
    3d70:	0f b6       	in	r0, 0x3f	; 63
    3d72:	f8 94       	cli
    3d74:	de bf       	out	0x3e, r29	; 62
    3d76:	0f be       	out	0x3f, r0	; 63
    3d78:	cd bf       	out	0x3d, r28	; 61
    3d7a:	09 94       	ijmp

00003d7c <__epilogue_restores__>:
    3d7c:	2a 88       	ldd	r2, Y+18	; 0x12
    3d7e:	39 88       	ldd	r3, Y+17	; 0x11
    3d80:	48 88       	ldd	r4, Y+16	; 0x10
    3d82:	5f 84       	ldd	r5, Y+15	; 0x0f
    3d84:	6e 84       	ldd	r6, Y+14	; 0x0e
    3d86:	7d 84       	ldd	r7, Y+13	; 0x0d
    3d88:	8c 84       	ldd	r8, Y+12	; 0x0c
    3d8a:	9b 84       	ldd	r9, Y+11	; 0x0b
    3d8c:	aa 84       	ldd	r10, Y+10	; 0x0a
    3d8e:	b9 84       	ldd	r11, Y+9	; 0x09
    3d90:	c8 84       	ldd	r12, Y+8	; 0x08
    3d92:	df 80       	ldd	r13, Y+7	; 0x07
    3d94:	ee 80       	ldd	r14, Y+6	; 0x06
    3d96:	fd 80       	ldd	r15, Y+5	; 0x05
    3d98:	0c 81       	ldd	r16, Y+4	; 0x04
    3d9a:	1b 81       	ldd	r17, Y+3	; 0x03
    3d9c:	aa 81       	ldd	r26, Y+2	; 0x02
    3d9e:	b9 81       	ldd	r27, Y+1	; 0x01
    3da0:	ce 0f       	add	r28, r30
    3da2:	d1 1d       	adc	r29, r1
    3da4:	0f b6       	in	r0, 0x3f	; 63
    3da6:	f8 94       	cli
    3da8:	de bf       	out	0x3e, r29	; 62
    3daa:	0f be       	out	0x3f, r0	; 63
    3dac:	cd bf       	out	0x3d, r28	; 61
    3dae:	ed 01       	movw	r28, r26
    3db0:	08 95       	ret

00003db2 <_exit>:
    3db2:	f8 94       	cli

00003db4 <__stop_program>:
    3db4:	ff cf       	rjmp	.-2      	; 0x3db4 <__stop_program>
