
8xDS18x20_BMP180_LCD_UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000f2  00800100  00003d80  00003e34  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003d80  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000161  008001f2  008001f2  00003f26  2**0
                  ALLOC
  3 .eeprom       0000004c  00810000  00810000  00003f26  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005c  00000000  00000000  00003f72  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  00003fce  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003c10  00000000  00000000  00004136  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001045  00000000  00000000  00007d46  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dcf  00000000  00000000  00008d8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000af0  00000000  00000000  00009b5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a6c  00000000  00000000  0000a64c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000035cb  00000000  00000000  0000b0b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  0000e683  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 03 02 	jmp	0x406	; 0x406 <__ctors_end>
       4:	0c 94 20 02 	jmp	0x440	; 0x440 <__bad_interrupt>
       8:	0c 94 20 02 	jmp	0x440	; 0x440 <__bad_interrupt>
       c:	0c 94 20 02 	jmp	0x440	; 0x440 <__bad_interrupt>
      10:	0c 94 20 02 	jmp	0x440	; 0x440 <__bad_interrupt>
      14:	0c 94 20 02 	jmp	0x440	; 0x440 <__bad_interrupt>
      18:	0c 94 20 02 	jmp	0x440	; 0x440 <__bad_interrupt>
      1c:	0c 94 20 02 	jmp	0x440	; 0x440 <__bad_interrupt>
      20:	0c 94 20 02 	jmp	0x440	; 0x440 <__bad_interrupt>
      24:	0c 94 20 02 	jmp	0x440	; 0x440 <__bad_interrupt>
      28:	0c 94 20 02 	jmp	0x440	; 0x440 <__bad_interrupt>
      2c:	0c 94 22 02 	jmp	0x444	; 0x444 <__vector_11>
      30:	0c 94 20 02 	jmp	0x440	; 0x440 <__bad_interrupt>
      34:	0c 94 20 02 	jmp	0x440	; 0x440 <__bad_interrupt>
      38:	0c 94 20 02 	jmp	0x440	; 0x440 <__bad_interrupt>
      3c:	0c 94 20 02 	jmp	0x440	; 0x440 <__bad_interrupt>
      40:	0c 94 20 02 	jmp	0x440	; 0x440 <__bad_interrupt>
      44:	0c 94 20 02 	jmp	0x440	; 0x440 <__bad_interrupt>
      48:	0c 94 4c 09 	jmp	0x1298	; 0x1298 <__vector_18>
      4c:	0c 94 7a 09 	jmp	0x12f4	; 0x12f4 <__vector_19>
      50:	0c 94 20 02 	jmp	0x440	; 0x440 <__bad_interrupt>
      54:	0c 94 20 02 	jmp	0x440	; 0x440 <__bad_interrupt>
      58:	0c 94 20 02 	jmp	0x440	; 0x440 <__bad_interrupt>
      5c:	0c 94 20 02 	jmp	0x440	; 0x440 <__bad_interrupt>
      60:	0c 94 20 02 	jmp	0x440	; 0x440 <__bad_interrupt>
      64:	0c 94 20 02 	jmp	0x440	; 0x440 <__bad_interrupt>
      68:	07 63       	ori	r16, 0x37	; 55
      6a:	42 36       	cpi	r20, 0x62	; 98
      6c:	b7 9b       	sbis	0x16, 7	; 22
      6e:	d8 a7       	std	Y+40, r29	; 0x28
      70:	1a 39       	cpi	r17, 0x9A	; 154
      72:	68 56       	subi	r22, 0x68	; 104
      74:	18 ae       	std	Y+56, r1	; 0x38
      76:	ba ab       	std	Y+50, r27	; 0x32
      78:	55 8c       	ldd	r5, Z+29	; 0x1d
      7a:	1d 3c       	cpi	r17, 0xCD	; 205
      7c:	b7 cc       	rjmp	.-1682   	; 0xfffff9ec <__eeprom_end+0xff7ef9a0>
      7e:	57 63       	ori	r21, 0x37	; 55
      80:	bd 6d       	ori	r27, 0xDD	; 221
      82:	ed fd       	.word	0xfded	; ????
      84:	75 3e       	cpi	r23, 0xE5	; 229
      86:	f6 17       	cp	r31, r22
      88:	72 31       	cpi	r23, 0x12	; 18
      8a:	bf 00       	.word	0x00bf	; ????
      8c:	00 00       	nop
      8e:	80 3f       	cpi	r24, 0xF0	; 240
      90:	08 00       	.word	0x0008	; ????
      92:	00 00       	nop
      94:	be 92       	st	-X, r11
      96:	24 49       	sbci	r18, 0x94	; 148
      98:	12 3e       	cpi	r17, 0xE2	; 226
      9a:	ab aa       	std	Y+51, r10	; 0x33
      9c:	aa 2a       	or	r10, r26
      9e:	be cd       	rjmp	.-1156   	; 0xfffffc1c <__eeprom_end+0xff7efbd0>
      a0:	cc cc       	rjmp	.-1640   	; 0xfffffa3a <__eeprom_end+0xff7ef9ee>
      a2:	4c 3e       	cpi	r20, 0xEC	; 236
      a4:	00 00       	nop
      a6:	00 80       	ld	r0, Z
      a8:	be ab       	std	Y+54, r27	; 0x36
      aa:	aa aa       	std	Y+50, r10	; 0x32
      ac:	aa 3e       	cpi	r26, 0xEA	; 234
      ae:	00 00       	nop
      b0:	00 00       	nop
      b2:	bf 00       	.word	0x00bf	; ????
      b4:	00 00       	nop
      b6:	80 3f       	cpi	r24, 0xF0	; 240
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	00 08       	sbc	r0, r0
      be:	41 78       	andi	r20, 0x81	; 129
      c0:	d3 bb       	out	0x13, r29	; 19
      c2:	43 87       	std	Z+11, r20	; 0x0b
      c4:	d1 13       	cpse	r29, r17
      c6:	3d 19       	sub	r19, r13
      c8:	0e 3c       	cpi	r16, 0xCE	; 206
      ca:	c3 bd       	out	0x23, r28	; 35
      cc:	42 82       	std	Z+2, r4	; 0x02
      ce:	ad 2b       	or	r26, r29
      d0:	3e 68       	ori	r19, 0x8E	; 142
      d2:	ec 82       	std	Y+4, r14	; 0x04
      d4:	76 be       	out	0x36, r7	; 54
      d6:	d9 8f       	std	Y+25, r29	; 0x19
      d8:	e1 a9       	ldd	r30, Z+49	; 0x31
      da:	3e 4c       	sbci	r19, 0xCE	; 206
      dc:	80 ef       	ldi	r24, 0xF0	; 240
      de:	ff be       	out	0x3f, r15	; 63
      e0:	01 c4       	rjmp	.+2050   	; 0x8e4 <display_temperatures+0x2ca>
      e2:	ff 7f       	andi	r31, 0xFF	; 255
      e4:	3f 00       	.word	0x003f	; ????
      e6:	00 00       	nop
	...

000000ea <__trampolines_end>:
      ea:	3f 3a       	cpi	r19, 0xAF	; 175
	...

000000ed <__c.2625>:
      ed:	31 38 42 3a 00                                      18B:.

000000f2 <__c.2623>:
      f2:	31 38 53 3a 00                                      18S:.

000000f7 <__c.2621>:
      f7:	20 20 20 20 20 20 20 00                                    .

000000ff <__c.2619>:
      ff:	2f 42 75 73 00                                      /Bus.

00000104 <__c.2617>:
     104:	44 73 70 00                                         Dsp.

00000108 <__c.2607>:
     108:	28 3f 29 00                                         (?).

0000010c <__c.2605>:
     10c:	28 31 38 42 29 00                                   (18B).

00000112 <__c.2603>:
     112:	28 31 38 53 29 00                                   (18S).

00000118 <__c.2601>:
     118:	20 53 4e 3a 00                                       SN:.

0000011d <__c.2599>:
     11d:	20 43 52 43 3a 00                                    CRC:.

00000123 <__c.2597>:
     123:	46 43 3a 00                                         FC:.

00000127 <__c.2591>:
     127:	53 74 61 72 74 20 6d 65 61 73 2e 20 66 61 69 6c     Start meas. fail
     137:	0d 00                                               ..

00000139 <__c.2579>:
     139:	0d 00                                               ..

0000013b <__c.2569>:
     13b:	68 50 61 00                                         hPa.

0000013f <__c.2567>:
     13f:	20 20 20 20 20 20 20 20 20 20 20 20 00                          .

0000014c <__c.2565>:
     14c:	20 20 20 20 20 20 20 20 20 20 20 20 00                          .

00000159 <__c.2563>:
     159:	20 20 20 20 20 20 20 20 20 20 20 20 00                          .

00000166 <__c.2552>:
     166:	0d 00                                               ..

00000168 <__c.2547>:
     168:	43 52 43 20 66 61 69 6c 65 64 20 2d 20 69 67 6e     CRC failed - ign
     178:	6f 72 69 6e 67 20 73 65 6e 73 6f 72 3a 20 00        oring sensor: .

00000187 <__c.2539>:
     187:	42 75 73 20 45 72 72 6f 72 0d 00                    Bus Error..

00000192 <__c.2537>:
     192:	42 75 73 20 45 72 72 6f 72 00                       Bus Error.

0000019c <__c.2534>:
     19c:	4e 6f 20 6f 77 20 53 65 6e 73 6f 72 73 20 66 6f     No ow Sensors fo
     1ac:	75 6e 64 0d 00                                      und..

000001b1 <__c.2532>:
     1b1:	4e 6f 20 6f 77 20 53 65 6e 73 6f 72 73 20 66 6f     No ow Sensors fo
     1c1:	75 6e 64 00                                         und.

000001c5 <__c.2504>:
     1c5:	4c 43 44 20 62 72 69 67 68 74 6e 65 73 73 0a 00     LCD brightness..

000001d5 <__c.2476>:
     1d5:	4c 6f 67 67 69 6e 67 20 69 6e 74 65 72 76 61 6c     Logging interval
     1e5:	0a 00                                               ..

000001e7 <__c.2449>:
     1e7:	31 57 69 72 65 20 64 69 73 70 6c 61 79 20 6f 72     1Wire display or
     1f7:	64 65 72 00                                         der.

000001fb <__c.2447>:
     1fb:	77 72 69 74 65 20 74 6f 20 45 45 50 52 4f 4d 00     write to EEPROM.

0000020b <__c.2444>:
     20b:	0d 0d 00                                            ...

0000020e <__c.2439>:
     20e:	0d 00                                               ..

00000210 <__c.2437>:
     210:	20 3d 20 00                                          = .

00000214 <__c.2435>:
     214:	44 53 31 38 42 32 30 00                             DS18B20.

0000021c <__c.2433>:
     21c:	44 53 31 38 53 32 30 2f 44 53 31 38 32 30 00        DS18S20/DS1820.

0000022b <__c.2431>:
     22b:	20 69 73 20 61 20 00                                 is a .

00000232 <__c.2429>:
     232:	20 2f 20 42 75 73 00                                 / Bus.

00000239 <__c.2427>:
     239:	53 65 6e 73 6f 72 20 44 69 73 70 6c 61 79 00        Sensor Display.

00000248 <__c.2425>:
     248:	0d 0d 00                                            ...

0000024b <__c.2414>:
     24b:	70 72 65 73 73 20 4d 4f 44 45 20 74 6f 20 6f 74     press MODE to ot
     25b:	68 65 72 00                                         her.

0000025f <__c.2412>:
     25f:	20 74 6f 20 73 74 61 72 74 0a 0a 00                  to start...

0000026b <__c.2410>:
     26b:	20 6f 72 20 00                                       or .

00000270 <__c.2408>:
     270:	53 74 61 72 74 20 4c 6f 67 67 69 6e 67 3f 0a 00     Start Logging?..

00000280 <__c.2383>:
     280:	20 44 53 31 38 58 32 30 20 53 65 6e 73 6f 72 28      DS18X20 Sensor(
     290:	73 29 20 61 76 61 69 6c 61 62 6c 65 0d 00           s) available..

0000029e <__c.2381>:
     29e:	20 53 65 6e 73 6f 72 28 73 29 00                     Sensor(s).

000002a9 <__c.2379>:
     2a9:	4e 6f 20 53 65 6e 73 6f 72 73 20 46 6f 75 6e 64     No Sensors Found
	...

000002ba <__c.2377>:
     2ba:	4e 6f 20 44 53 20 53 65 6e 73 6f 72 73 20 46 6f     No DS Sensors Fo
     2ca:	75 6e 64 00                                         und.

000002ce <__c.2375>:
     2ce:	44 53 31 38 78 32 30 20 4c 6f 67 67 65 72 20 76     DS18x20 Logger v
     2de:	31 2e 30 31 00                                      1.01.

000002e3 <__c.2373>:
     2e3:	44 53 31 38 32 30 20 4c 6f 67 67 65 72 20 76 31     DS1820 Logger v1
     2f3:	2e 30 31 2e 31 31 34 0d 00                          .01.114..

000002fc <lcdChars>:
     2fc:	04 04 04 04 15 1f 0e 04 04 0e 1f 15 04 04 04 04     ................
     30c:	00 40 7a 10 f3 5a 00 a0 72 4e 18 09 00 10 a5 d4     .@z..Z..rN......
     31c:	e8 00 00 e8 76 48 17 00 00 e4 0b 54 02 00 00 ca     ....vH.....T....
     32c:	9a 3b 00 00 00 e1 f5 05 00 00 80 96 98 00 00 00     .;..............
     33c:	40 42 0f 00 00 00 a0 86 01 00 00 00 10 27 00 00     @B...........'..
     34c:	00 00 e8 03 00 00 00 00 64 00 00 00 00 00 0a 00     ........d.......
     35c:	00 00 00 00 01 00 00 00 00 00 2c 76 d8 88 dc 67     ..........,v...g
     36c:	4f 08 23 df c1 df ae 59 e1 b1 b7 96 e5 e3 e4 53     O.#....Y.......S
     37c:	c6 3a e6 51 99 76 96 e8 e6 c2 84 26 eb 89 8c 9b     .:.Q.v.....&....
     38c:	62 ed 40 7c 6f fc ef bc 9c 9f 40 f2 ba a5 6f a5     b.@|o.....@...o.
     39c:	f4 90 05 5a 2a f7 5c 93 6b 6c f9 67 6d c1 1b fc     ...Z*.\.kl.gm...
     3ac:	e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed 90 2e 03 00     ...G.. .........
     3bc:	94 35 77 05 00 80 84 1e 08 00 00 20 4e 0a 00 00     .5w........ N...
     3cc:	00 c8 0c 33 33 33 33 0f 98 6e 12 83 11 41 ef 8d     ...3333..n...A..
     3dc:	21 14 89 3b e6 55 16 cf fe e6 db 18 d1 84 4b 38     !..;.U........K8
     3ec:	1b f7 7c 1d 90 1d a4 bb e4 24 20 32 84 72 5e 22     ..|......$ 2.r^"
     3fc:	81 00 c9 f1 24 ec a1 e5 3d 27                       ....$...='

00000406 <__ctors_end>:
     406:	11 24       	eor	r1, r1
     408:	1f be       	out	0x3f, r1	; 63
     40a:	cf ef       	ldi	r28, 0xFF	; 255
     40c:	d4 e0       	ldi	r29, 0x04	; 4
     40e:	de bf       	out	0x3e, r29	; 62
     410:	cd bf       	out	0x3d, r28	; 61

00000412 <__do_copy_data>:
     412:	11 e0       	ldi	r17, 0x01	; 1
     414:	a0 e0       	ldi	r26, 0x00	; 0
     416:	b1 e0       	ldi	r27, 0x01	; 1
     418:	e0 e8       	ldi	r30, 0x80	; 128
     41a:	fd e3       	ldi	r31, 0x3D	; 61
     41c:	02 c0       	rjmp	.+4      	; 0x422 <__do_copy_data+0x10>
     41e:	05 90       	lpm	r0, Z+
     420:	0d 92       	st	X+, r0
     422:	a2 3f       	cpi	r26, 0xF2	; 242
     424:	b1 07       	cpc	r27, r17
     426:	d9 f7       	brne	.-10     	; 0x41e <__do_copy_data+0xc>

00000428 <__do_clear_bss>:
     428:	23 e0       	ldi	r18, 0x03	; 3
     42a:	a2 ef       	ldi	r26, 0xF2	; 242
     42c:	b1 e0       	ldi	r27, 0x01	; 1
     42e:	01 c0       	rjmp	.+2      	; 0x432 <.do_clear_bss_start>

00000430 <.do_clear_bss_loop>:
     430:	1d 92       	st	X+, r1

00000432 <.do_clear_bss_start>:
     432:	a3 35       	cpi	r26, 0x53	; 83
     434:	b2 07       	cpc	r27, r18
     436:	e1 f7       	brne	.-8      	; 0x430 <.do_clear_bss_loop>
     438:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <main>
     43c:	0c 94 be 1e 	jmp	0x3d7c	; 0x3d7c <_exit>

00000440 <__bad_interrupt>:
     440:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000444 <__vector_11>:
 *                                                                                      *
 ***************************************************************************************/

// service routine should occur every 1/TMR_TICK seconds.
ISR( TIMER1_COMPA_vect)
{
     444:	1f 92       	push	r1
     446:	0f 92       	push	r0
     448:	0f b6       	in	r0, 0x3f	; 63
     44a:	0f 92       	push	r0
     44c:	11 24       	eor	r1, r1
     44e:	8f 93       	push	r24
     450:	9f 93       	push	r25
     452:	af 93       	push	r26
     454:	bf 93       	push	r27
	static uint8_t second_counter;	// second_counter == TMR_TICK = 1 second
//static uint8_t tcounter = 0; // pocita interval
	// increment the counters
	if( ++second_counter >= TMR_TICK)	// one second elapsed?
     456:	80 91 f2 01 	lds	r24, 0x01F2
     45a:	8f 5f       	subi	r24, 0xFF	; 255
     45c:	80 93 f2 01 	sts	0x01F2, r24
     460:	88 3c       	cpi	r24, 0xC8	; 200
     462:	10 f1       	brcs	.+68     	; 0x4a8 <__vector_11+0x64>
	{
		gElapsed++;
     464:	80 91 f3 01 	lds	r24, 0x01F3
     468:	90 91 f4 01 	lds	r25, 0x01F4
     46c:	01 96       	adiw	r24, 0x01	; 1
     46e:	90 93 f4 01 	sts	0x01F4, r25
     472:	80 93 f3 01 	sts	0x01F3, r24
		second_counter = 0;
     476:	10 92 f2 01 	sts	0x01F2, r1
		//tcounter++;
		//if (tcounter >= 60)
		//	{tcounter = 0; // nulovanie pocitadla po 1 min
		//	min_counter++;
		//	}
		if( gRTC_status == 0) gRTC_clk++;
     47a:	80 91 f9 01 	lds	r24, 0x01F9
     47e:	81 11       	cpse	r24, r1
     480:	13 c0       	rjmp	.+38     	; 0x4a8 <__vector_11+0x64>
     482:	80 91 f5 01 	lds	r24, 0x01F5
     486:	90 91 f6 01 	lds	r25, 0x01F6
     48a:	a0 91 f7 01 	lds	r26, 0x01F7
     48e:	b0 91 f8 01 	lds	r27, 0x01F8
     492:	01 96       	adiw	r24, 0x01	; 1
     494:	a1 1d       	adc	r26, r1
     496:	b1 1d       	adc	r27, r1
     498:	80 93 f5 01 	sts	0x01F5, r24
     49c:	90 93 f6 01 	sts	0x01F6, r25
     4a0:	a0 93 f7 01 	sts	0x01F7, r26
     4a4:	b0 93 f8 01 	sts	0x01F8, r27
	}
}
     4a8:	bf 91       	pop	r27
     4aa:	af 91       	pop	r26
     4ac:	9f 91       	pop	r25
     4ae:	8f 91       	pop	r24
     4b0:	0f 90       	pop	r0
     4b2:	0f be       	out	0x3f, r0	; 63
     4b4:	0f 90       	pop	r0
     4b6:	1f 90       	pop	r1
     4b8:	18 95       	reti

000004ba <onewire_search>:
/********************************************************/
// search 1-wire bus for active devices
uint8_t onewire_search( void)
{
     4ba:	cf 92       	push	r12
     4bc:	df 92       	push	r13
     4be:	ef 92       	push	r14
     4c0:	ff 92       	push	r15
     4c2:	0f 93       	push	r16
     4c4:	1f 93       	push	r17
     4c6:	cf 93       	push	r28
     4c8:	df 93       	push	r29
     4ca:	cd b7       	in	r28, 0x3d	; 61
     4cc:	de b7       	in	r29, 0x3e	; 62
     4ce:	28 97       	sbiw	r28, 0x08	; 8
     4d0:	0f b6       	in	r0, 0x3f	; 63
     4d2:	f8 94       	cli
     4d4:	de bf       	out	0x3e, r29	; 62
     4d6:	0f be       	out	0x3f, r0	; 63
     4d8:	cd bf       	out	0x3d, r28	; 61
	uint8_t i, diff, num_sensors;
	uint8_t id[OWI_ROMCODE_SIZE];
	
	num_sensors = 0;
     4da:	d1 2c       	mov	r13, r1
	
	for( diff = OWI_SEARCH_FIRST; 
     4dc:	cc 24       	eor	r12, r12
     4de:	ca 94       	dec	r12
     4e0:	7e 01       	movw	r14, r28
     4e2:	89 e0       	ldi	r24, 0x09	; 9
     4e4:	e8 0e       	add	r14, r24
     4e6:	f1 1c       	adc	r15, r1
			diff != OWI_LAST_DEVICE && num_sensors < MAX_SENSORS ;)
	{
		diff = owi_search( diff, &id[0], OWI_SEARCH_ROM);	// search all sensors
     4e8:	40 ef       	ldi	r20, 0xF0	; 240
     4ea:	be 01       	movw	r22, r28
     4ec:	6f 5f       	subi	r22, 0xFF	; 255
     4ee:	7f 4f       	sbci	r23, 0xFF	; 255
     4f0:	8c 2d       	mov	r24, r12
     4f2:	0e 94 76 08 	call	0x10ec	; 0x10ec <owi_search>
     4f6:	c8 2e       	mov	r12, r24
		
		if( diff == OWI_PRESENCE_ERROR)
     4f8:	ee ef       	ldi	r30, 0xFE	; 254
     4fa:	8e 13       	cpse	r24, r30
     4fc:	0b c0       	rjmp	.+22     	; 0x514 <__stack+0x15>
		{
			lcd_gotoxy(0,1);
     4fe:	61 e0       	ldi	r22, 0x01	; 1
     500:	80 e0       	ldi	r24, 0x00	; 0
     502:	0e 94 8c 07 	call	0xf18	; 0xf18 <lcd_gotoxy>
			lcd_puts_P( "No ow Sensors found");
     506:	81 eb       	ldi	r24, 0xB1	; 177
     508:	91 e0       	ldi	r25, 0x01	; 1
     50a:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <lcd_puts_p>
			uart_puts_P( "No ow Sensors found\r"); 	
     50e:	8c e9       	ldi	r24, 0x9C	; 156
     510:	91 e0       	ldi	r25, 0x01	; 1
     512:	0d c0       	rjmp	.+26     	; 0x52e <__stack+0x2f>
			break;
		}
		else if( diff == OWI_DATA_ERR)
     514:	fd ef       	ldi	r31, 0xFD	; 253
     516:	8f 13       	cpse	r24, r31
     518:	0d c0       	rjmp	.+26     	; 0x534 <__stack+0x35>
		{
			lcd_gotoxy(0,1);
     51a:	61 e0       	ldi	r22, 0x01	; 1
     51c:	80 e0       	ldi	r24, 0x00	; 0
     51e:	0e 94 8c 07 	call	0xf18	; 0xf18 <lcd_gotoxy>
			lcd_puts_P( "Bus Error");
     522:	82 e9       	ldi	r24, 0x92	; 146
     524:	91 e0       	ldi	r25, 0x01	; 1
     526:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <lcd_puts_p>
			uart_puts_P( "Bus Error\r"); 	
     52a:	87 e8       	ldi	r24, 0x87	; 135
     52c:	91 e0       	ldi	r25, 0x01	; 1
     52e:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <uart_puts_p>
			break;
     532:	63 c0       	rjmp	.+198    	; 0x5fa <__stack+0xfb>
		}
		else if( ! crc8( id, OWI_ROMCODE_SIZE))	// is it a valid id?
     534:	68 e0       	ldi	r22, 0x08	; 8
     536:	ce 01       	movw	r24, r28
     538:	01 96       	adiw	r24, 0x01	; 1
     53a:	0e 94 fe 05 	call	0xbfc	; 0xbfc <crc8>
     53e:	81 11       	cpse	r24, r1
     540:	43 c0       	rjmp	.+134    	; 0x5c8 <__stack+0xc9>
		{
			if( OWI_FAMILY( id[0]) == DS18B20_FAMILY_CODE || OWI_FAMILY( id[0]) == DS18S20_FAMILY_CODE)
     542:	89 81       	ldd	r24, Y+1	; 0x01
     544:	8f 77       	andi	r24, 0x7F	; 127
     546:	88 32       	cpi	r24, 0x28	; 40
     548:	11 f0       	breq	.+4      	; 0x54e <__stack+0x4f>
     54a:	80 31       	cpi	r24, 0x10	; 16
     54c:	b1 f4       	brne	.+44     	; 0x57a <__stack+0x7b>
     54e:	fe 01       	movw	r30, r28
     550:	31 96       	adiw	r30, 0x01	; 1
     552:	88 e0       	ldi	r24, 0x08	; 8
     554:	d8 9e       	mul	r13, r24
     556:	a0 01       	movw	r20, r0
     558:	11 24       	eor	r1, r1
     55a:	49 50       	subi	r20, 0x09	; 9
     55c:	5d 4f       	sbci	r21, 0xFD	; 253
	uint8_t i, diff, num_sensors;
	uint8_t id[OWI_ROMCODE_SIZE];
	
	num_sensors = 0;
	
	for( diff = OWI_SEARCH_FIRST; 
     55e:	20 e0       	ldi	r18, 0x00	; 0
     560:	30 e0       	ldi	r19, 0x00	; 0
		else if( ! crc8( id, OWI_ROMCODE_SIZE))	// is it a valid id?
		{
			if( OWI_FAMILY( id[0]) == DS18B20_FAMILY_CODE || OWI_FAMILY( id[0]) == DS18S20_FAMILY_CODE)
			{
				for( i = 0; i < OWI_ROMCODE_SIZE; i++)
					gSensorIDs[num_sensors][i] = id[i];
     562:	81 91       	ld	r24, Z+
     564:	da 01       	movw	r26, r20
     566:	a2 0f       	add	r26, r18
     568:	b3 1f       	adc	r27, r19
     56a:	8c 93       	st	X, r24
     56c:	2f 5f       	subi	r18, 0xFF	; 255
     56e:	3f 4f       	sbci	r19, 0xFF	; 255
		}
		else if( ! crc8( id, OWI_ROMCODE_SIZE))	// is it a valid id?
		{
			if( OWI_FAMILY( id[0]) == DS18B20_FAMILY_CODE || OWI_FAMILY( id[0]) == DS18S20_FAMILY_CODE)
			{
				for( i = 0; i < OWI_ROMCODE_SIZE; i++)
     570:	28 30       	cpi	r18, 0x08	; 8
     572:	31 05       	cpc	r19, r1
     574:	b1 f7       	brne	.-20     	; 0x562 <__stack+0x63>
					gSensorIDs[num_sensors][i] = id[i];
				num_sensors++;
     576:	d3 94       	inc	r13
     578:	3a c0       	rjmp	.+116    	; 0x5ee <__stack+0xef>
			}
			else if( OWI_FAMILY( id[0]) == DS2415_FAMILY_CODE)
     57a:	84 32       	cpi	r24, 0x24	; 36
     57c:	c1 f5       	brne	.+112    	; 0x5ee <__stack+0xef>
     57e:	fe 01       	movw	r30, r28
     580:	31 96       	adiw	r30, 0x01	; 1
     582:	ad eb       	ldi	r26, 0xBD	; 189
     584:	b2 e0       	ldi	r27, 0x02	; 2
			{
				for( i = 0; i < OWI_ROMCODE_SIZE; i++)
					gRTC_ID[i] = id[i];
     586:	81 91       	ld	r24, Z+
     588:	8d 93       	st	X+, r24
					gSensorIDs[num_sensors][i] = id[i];
				num_sensors++;
			}
			else if( OWI_FAMILY( id[0]) == DS2415_FAMILY_CODE)
			{
				for( i = 0; i < OWI_ROMCODE_SIZE; i++)
     58a:	ee 15       	cp	r30, r14
     58c:	ff 05       	cpc	r31, r15
     58e:	d9 f7       	brne	.-10     	; 0x586 <__stack+0x87>
					gRTC_ID[i] = id[i];

				// make sure the RTC oscillator is turned on
				if( DS2415_read_clock( &gRTC_status, &gRTC_clk, id) == DS2415_CLOCK_OK)
     590:	ae 01       	movw	r20, r28
     592:	4f 5f       	subi	r20, 0xFF	; 255
     594:	5f 4f       	sbci	r21, 0xFF	; 255
     596:	65 ef       	ldi	r22, 0xF5	; 245
     598:	71 e0       	ldi	r23, 0x01	; 1
     59a:	89 ef       	ldi	r24, 0xF9	; 249
     59c:	91 e0       	ldi	r25, 0x01	; 1
     59e:	0e 94 65 0a 	call	0x14ca	; 0x14ca <DS2415_read_clock>
     5a2:	81 11       	cpse	r24, r1
     5a4:	24 c0       	rjmp	.+72     	; 0x5ee <__stack+0xef>
				{
					DS2415_write_clock( DS2415_OSC_ON( gRTC_status), gRTC_clk, id);
     5a6:	40 91 f5 01 	lds	r20, 0x01F5
     5aa:	50 91 f6 01 	lds	r21, 0x01F6
     5ae:	60 91 f7 01 	lds	r22, 0x01F7
     5b2:	70 91 f8 01 	lds	r23, 0x01F8
     5b6:	80 91 f9 01 	lds	r24, 0x01F9
     5ba:	9e 01       	movw	r18, r28
     5bc:	2f 5f       	subi	r18, 0xFF	; 255
     5be:	3f 4f       	sbci	r19, 0xFF	; 255
     5c0:	8c 60       	ori	r24, 0x0C	; 12
     5c2:	0e 94 39 0a 	call	0x1472	; 0x1472 <DS2415_write_clock>
     5c6:	13 c0       	rjmp	.+38     	; 0x5ee <__stack+0xef>
			}
		}
		else
		{
			// id failed CRC check
			uart_puts_P( "CRC failed - ignoring sensor: "); 	
     5c8:	88 e6       	ldi	r24, 0x68	; 104
     5ca:	91 e0       	ldi	r25, 0x01	; 1
     5cc:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <uart_puts_p>
     5d0:	8e 01       	movw	r16, r28
     5d2:	0f 5f       	subi	r16, 0xFF	; 255
     5d4:	1f 4f       	sbci	r17, 0xFF	; 255
			for( i = 0; i < OWI_ROMCODE_SIZE; i++)
				uart_puthex_byte( id[i]);
     5d6:	f8 01       	movw	r30, r16
     5d8:	81 91       	ld	r24, Z+
     5da:	8f 01       	movw	r16, r30
     5dc:	0e 94 2f 0a 	call	0x145e	; 0x145e <uart_puthex_byte>
		}
		else
		{
			// id failed CRC check
			uart_puts_P( "CRC failed - ignoring sensor: "); 	
			for( i = 0; i < OWI_ROMCODE_SIZE; i++)
     5e0:	0e 15       	cp	r16, r14
     5e2:	1f 05       	cpc	r17, r15
     5e4:	c1 f7       	brne	.-16     	; 0x5d6 <__stack+0xd7>
				uart_puthex_byte( id[i]);
			uart_puts_P( "\r"); 	
     5e6:	86 e6       	ldi	r24, 0x66	; 102
     5e8:	91 e0       	ldi	r25, 0x01	; 1
     5ea:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <uart_puts_p>
	uint8_t i, diff, num_sensors;
	uint8_t id[OWI_ROMCODE_SIZE];
	
	num_sensors = 0;
	
	for( diff = OWI_SEARCH_FIRST; 
     5ee:	cc 20       	and	r12, r12
     5f0:	21 f0       	breq	.+8      	; 0x5fa <__stack+0xfb>
			diff != OWI_LAST_DEVICE && num_sensors < MAX_SENSORS ;)
     5f2:	f7 e0       	ldi	r31, 0x07	; 7
     5f4:	fd 15       	cp	r31, r13
     5f6:	08 f0       	brcs	.+2      	; 0x5fa <__stack+0xfb>
     5f8:	77 cf       	rjmp	.-274    	; 0x4e8 <onewire_search+0x2e>
				uart_puthex_byte( id[i]);
			uart_puts_P( "\r"); 	
		}
	}
	return num_sensors;
}
     5fa:	8d 2d       	mov	r24, r13
     5fc:	28 96       	adiw	r28, 0x08	; 8
     5fe:	0f b6       	in	r0, 0x3f	; 63
     600:	f8 94       	cli
     602:	de bf       	out	0x3e, r29	; 62
     604:	0f be       	out	0x3f, r0	; 63
     606:	cd bf       	out	0x3d, r28	; 61
     608:	df 91       	pop	r29
     60a:	cf 91       	pop	r28
     60c:	1f 91       	pop	r17
     60e:	0f 91       	pop	r16
     610:	ff 90       	pop	r15
     612:	ef 90       	pop	r14
     614:	df 90       	pop	r13
     616:	cf 90       	pop	r12
     618:	08 95       	ret

0000061a <display_temperatures>:
/************************************************************/
// display one page of most recent temperature data on lcd
void display_temperatures( uint8_t num_sensors, uint8_t page)
{
     61a:	cf 92       	push	r12
     61c:	df 92       	push	r13
     61e:	ef 92       	push	r14
     620:	ff 92       	push	r15
     622:	0f 93       	push	r16
     624:	1f 93       	push	r17
     626:	cf 93       	push	r28
     628:	df 93       	push	r29
     62a:	c8 2e       	mov	r12, r24
     62c:	c6 2f       	mov	r28, r22
	int *pom1 = &gReadings[0];
	int *pom2 = &gReadings_old[0];
	//int *pom1;
	// should always have at least one sensor on a page
	//temperature = ( gReadings[device] / 10 );
	lcd_home();
     62e:	0e 94 a2 07 	call	0xf44	; 0xf44 <lcd_home>
	device = g1Wire_order[page];
     632:	0c 2f       	mov	r16, r28
     634:	10 e0       	ldi	r17, 0x00	; 0
     636:	f8 01       	movw	r30, r16
     638:	ed 51       	subi	r30, 0x1D	; 29
     63a:	fd 4f       	sbci	r31, 0xFD	; 253
     63c:	e0 81       	ld	r30, Z
	//*pom1 = &gReadings[0];
	//podmienka so zobrazenim sipky hore/dole/rovno -kod podla displeja C5hore/C6dole/C7rovno, pre vonkajsiu teplotu
			if( ( ( pom1[0] ) < ( pom2[0]) ) && ((pom2[0]-pom1[0]) > HYSTER) )
     63e:	40 91 39 03 	lds	r20, 0x0339
     642:	50 91 3a 03 	lds	r21, 0x033A
     646:	20 91 93 02 	lds	r18, 0x0293
     64a:	30 91 94 02 	lds	r19, 0x0294
     64e:	f0 e0       	ldi	r31, 0x00	; 0
     650:	42 17       	cp	r20, r18
     652:	53 07       	cpc	r21, r19
     654:	74 f5       	brge	.+92     	; 0x6b2 <display_temperatures+0x98>
     656:	24 1b       	sub	r18, r20
     658:	35 0b       	sbc	r19, r21
     65a:	2b 30       	cpi	r18, 0x0B	; 11
     65c:	31 05       	cpc	r19, r1
     65e:	0c f4       	brge	.+2      	; 0x662 <display_temperatures+0x48>
     660:	58 c0       	rjmp	.+176    	; 0x712 <display_temperatures+0xf8>
				{sprintf( gBuffer, "%02i#Out %+04i.%c\xC6\n",(int)page, gReadings[device] / 10,(gReadings[device] % 10) + '0');
     662:	ee 0f       	add	r30, r30
     664:	ff 1f       	adc	r31, r31
     666:	e7 5c       	subi	r30, 0xC7	; 199
     668:	fc 4f       	sbci	r31, 0xFC	; 252
     66a:	80 81       	ld	r24, Z
     66c:	91 81       	ldd	r25, Z+1	; 0x01
     66e:	6a e0       	ldi	r22, 0x0A	; 10
     670:	70 e0       	ldi	r23, 0x00	; 0
     672:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <__divmodhi4>
     676:	c0 96       	adiw	r24, 0x30	; 48
     678:	9f 93       	push	r25
     67a:	8f 93       	push	r24
     67c:	7f 93       	push	r23
     67e:	6f 93       	push	r22
     680:	1f 92       	push	r1
     682:	cf 93       	push	r28
     684:	82 e2       	ldi	r24, 0x22	; 34
     686:	91 e0       	ldi	r25, 0x01	; 1
     688:	9f 93       	push	r25
     68a:	8f 93       	push	r24
     68c:	86 ea       	ldi	r24, 0xA6	; 166
     68e:	92 e0       	ldi	r25, 0x02	; 2
     690:	9f 93       	push	r25
     692:	8f 93       	push	r24
     694:	0e 94 4c 19 	call	0x3298	; 0x3298 <sprintf>
				lcd_puts( gBuffer);
     698:	86 ea       	ldi	r24, 0xA6	; 166
     69a:	92 e0       	ldi	r25, 0x02	; 2
     69c:	0e 94 c5 07 	call	0xf8a	; 0xf8a <lcd_puts>
     6a0:	8d b7       	in	r24, 0x3d	; 61
     6a2:	9e b7       	in	r25, 0x3e	; 62
     6a4:	0a 96       	adiw	r24, 0x0a	; 10
     6a6:	0f b6       	in	r0, 0x3f	; 63
     6a8:	f8 94       	cli
     6aa:	9e bf       	out	0x3e, r25	; 62
     6ac:	0f be       	out	0x3f, r0	; 63
     6ae:	8d bf       	out	0x3d, r24	; 61
     6b0:	57 c0       	rjmp	.+174    	; 0x760 <display_temperatures+0x146>
				}
			else if( ( ( pom1[0] ) > ( pom2[0]) ) && ((pom1[0]-pom2[0]) > HYSTER) )
     6b2:	24 17       	cp	r18, r20
     6b4:	35 07       	cpc	r19, r21
     6b6:	6c f5       	brge	.+90     	; 0x712 <display_temperatures+0xf8>
     6b8:	42 1b       	sub	r20, r18
     6ba:	53 0b       	sbc	r21, r19
     6bc:	4b 30       	cpi	r20, 0x0B	; 11
     6be:	51 05       	cpc	r21, r1
     6c0:	44 f1       	brlt	.+80     	; 0x712 <display_temperatures+0xf8>
				{sprintf( gBuffer, "%02i#Out %+04i.%c\xC5\n",(int)page, gReadings[device] / 10,(gReadings[device] % 10) + '0');
     6c2:	ee 0f       	add	r30, r30
     6c4:	ff 1f       	adc	r31, r31
     6c6:	e7 5c       	subi	r30, 0xC7	; 199
     6c8:	fc 4f       	sbci	r31, 0xFC	; 252
     6ca:	80 81       	ld	r24, Z
     6cc:	91 81       	ldd	r25, Z+1	; 0x01
     6ce:	6a e0       	ldi	r22, 0x0A	; 10
     6d0:	70 e0       	ldi	r23, 0x00	; 0
     6d2:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <__divmodhi4>
     6d6:	c0 96       	adiw	r24, 0x30	; 48
     6d8:	9f 93       	push	r25
     6da:	8f 93       	push	r24
     6dc:	7f 93       	push	r23
     6de:	6f 93       	push	r22
     6e0:	1f 92       	push	r1
     6e2:	cf 93       	push	r28
     6e4:	86 e3       	ldi	r24, 0x36	; 54
     6e6:	91 e0       	ldi	r25, 0x01	; 1
     6e8:	9f 93       	push	r25
     6ea:	8f 93       	push	r24
     6ec:	86 ea       	ldi	r24, 0xA6	; 166
     6ee:	92 e0       	ldi	r25, 0x02	; 2
     6f0:	9f 93       	push	r25
     6f2:	8f 93       	push	r24
     6f4:	0e 94 4c 19 	call	0x3298	; 0x3298 <sprintf>
				lcd_puts( gBuffer);
     6f8:	86 ea       	ldi	r24, 0xA6	; 166
     6fa:	92 e0       	ldi	r25, 0x02	; 2
     6fc:	0e 94 c5 07 	call	0xf8a	; 0xf8a <lcd_puts>
     700:	8d b7       	in	r24, 0x3d	; 61
     702:	9e b7       	in	r25, 0x3e	; 62
     704:	0a 96       	adiw	r24, 0x0a	; 10
     706:	0f b6       	in	r0, 0x3f	; 63
     708:	f8 94       	cli
     70a:	9e bf       	out	0x3e, r25	; 62
     70c:	0f be       	out	0x3f, r0	; 63
     70e:	8d bf       	out	0x3d, r24	; 61
     710:	27 c0       	rjmp	.+78     	; 0x760 <display_temperatures+0x146>
				}
			else
			{sprintf( gBuffer, "%02i#Out %+04i.%c\xC7\n",(int)page, gReadings[device] / 10,(gReadings[device] % 10) + '0');
     712:	ee 0f       	add	r30, r30
     714:	ff 1f       	adc	r31, r31
     716:	e7 5c       	subi	r30, 0xC7	; 199
     718:	fc 4f       	sbci	r31, 0xFC	; 252
     71a:	80 81       	ld	r24, Z
     71c:	91 81       	ldd	r25, Z+1	; 0x01
     71e:	6a e0       	ldi	r22, 0x0A	; 10
     720:	70 e0       	ldi	r23, 0x00	; 0
     722:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <__divmodhi4>
     726:	c0 96       	adiw	r24, 0x30	; 48
     728:	9f 93       	push	r25
     72a:	8f 93       	push	r24
     72c:	7f 93       	push	r23
     72e:	6f 93       	push	r22
     730:	1f 92       	push	r1
     732:	cf 93       	push	r28
     734:	8a e4       	ldi	r24, 0x4A	; 74
     736:	91 e0       	ldi	r25, 0x01	; 1
     738:	9f 93       	push	r25
     73a:	8f 93       	push	r24
     73c:	86 ea       	ldi	r24, 0xA6	; 166
     73e:	92 e0       	ldi	r25, 0x02	; 2
     740:	9f 93       	push	r25
     742:	8f 93       	push	r24
     744:	0e 94 4c 19 	call	0x3298	; 0x3298 <sprintf>
			lcd_puts( gBuffer);
     748:	86 ea       	ldi	r24, 0xA6	; 166
     74a:	92 e0       	ldi	r25, 0x02	; 2
     74c:	0e 94 c5 07 	call	0xf8a	; 0xf8a <lcd_puts>
     750:	8d b7       	in	r24, 0x3d	; 61
     752:	9e b7       	in	r25, 0x3e	; 62
     754:	0a 96       	adiw	r24, 0x0a	; 10
     756:	0f b6       	in	r0, 0x3f	; 63
     758:	f8 94       	cli
     75a:	9e bf       	out	0x3e, r25	; 62
     75c:	0f be       	out	0x3f, r0	; 63
     75e:	8d bf       	out	0x3d, r24	; 61
			}
			pom2[0] = pom1[0];
     760:	80 91 39 03 	lds	r24, 0x0339
     764:	90 91 3a 03 	lds	r25, 0x033A
     768:	90 93 94 02 	sts	0x0294, r25
     76c:	80 93 93 02 	sts	0x0293, r24
			
			//min_counter = 0;
		
			// is there a second sensor to display?
		if( (page + 1) < num_sensors)
     770:	98 01       	movw	r18, r16
     772:	2f 5f       	subi	r18, 0xFF	; 255
     774:	3f 4f       	sbci	r19, 0xFF	; 255
     776:	d1 2c       	mov	r13, r1
     778:	2c 15       	cp	r18, r12
     77a:	3d 05       	cpc	r19, r13
     77c:	0c f0       	brlt	.+2      	; 0x780 <display_temperatures+0x166>
     77e:	90 c0       	rjmp	.+288    	; 0x8a0 <display_temperatures+0x286>
		{
				device = g1Wire_order[page + 1];
     780:	f9 01       	movw	r30, r18
     782:	ed 51       	subi	r30, 0x1D	; 29
     784:	fd 4f       	sbci	r31, 0xFD	; 253
				sprintf( gBuffer, "%02i#PmpW%+04i.%c\n",(int)page + 1, gReadings[device] / 10,(gReadings[device] % 10) + '0'); // pumpwell
     786:	e0 81       	ld	r30, Z
     788:	f0 e0       	ldi	r31, 0x00	; 0
     78a:	ee 0f       	add	r30, r30
     78c:	ff 1f       	adc	r31, r31
     78e:	e7 5c       	subi	r30, 0xC7	; 199
     790:	fc 4f       	sbci	r31, 0xFC	; 252
     792:	80 81       	ld	r24, Z
     794:	91 81       	ldd	r25, Z+1	; 0x01
     796:	5a e0       	ldi	r21, 0x0A	; 10
     798:	e5 2e       	mov	r14, r21
     79a:	f1 2c       	mov	r15, r1
     79c:	b7 01       	movw	r22, r14
     79e:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <__divmodhi4>
     7a2:	c0 96       	adiw	r24, 0x30	; 48
     7a4:	9f 93       	push	r25
     7a6:	8f 93       	push	r24
     7a8:	7f 93       	push	r23
     7aa:	6f 93       	push	r22
     7ac:	3f 93       	push	r19
     7ae:	2f 93       	push	r18
     7b0:	8e e5       	ldi	r24, 0x5E	; 94
     7b2:	91 e0       	ldi	r25, 0x01	; 1
     7b4:	9f 93       	push	r25
     7b6:	8f 93       	push	r24
     7b8:	c6 ea       	ldi	r28, 0xA6	; 166
     7ba:	d2 e0       	ldi	r29, 0x02	; 2
     7bc:	df 93       	push	r29
     7be:	cf 93       	push	r28
     7c0:	0e 94 4c 19 	call	0x3298	; 0x3298 <sprintf>
				lcd_puts( gBuffer);
     7c4:	ce 01       	movw	r24, r28
     7c6:	0e 94 c5 07 	call	0xf8a	; 0xf8a <lcd_puts>
				if( (page + 2) < num_sensors)
     7ca:	98 01       	movw	r18, r16
     7cc:	2e 5f       	subi	r18, 0xFE	; 254
     7ce:	3f 4f       	sbci	r19, 0xFF	; 255
     7d0:	8d b7       	in	r24, 0x3d	; 61
     7d2:	9e b7       	in	r25, 0x3e	; 62
     7d4:	0a 96       	adiw	r24, 0x0a	; 10
     7d6:	0f b6       	in	r0, 0x3f	; 63
     7d8:	f8 94       	cli
     7da:	9e bf       	out	0x3e, r25	; 62
     7dc:	0f be       	out	0x3f, r0	; 63
     7de:	8d bf       	out	0x3d, r24	; 61
     7e0:	2c 15       	cp	r18, r12
     7e2:	3d 05       	cpc	r19, r13
     7e4:	0c f0       	brlt	.+2      	; 0x7e8 <display_temperatures+0x1ce>
     7e6:	59 c0       	rjmp	.+178    	; 0x89a <display_temperatures+0x280>
	      	 {
	 	      	 device = g1Wire_order[page + 2];
     7e8:	f9 01       	movw	r30, r18
     7ea:	ed 51       	subi	r30, 0x1D	; 29
     7ec:	fd 4f       	sbci	r31, 0xFD	; 253
	 	       	sprintf( gBuffer, "%02i#Cllr%+04i.%c\n",(int)page + 2, gReadings[device] / 10,(gReadings[device] % 10) + '0'); //cellar
     7ee:	e0 81       	ld	r30, Z
     7f0:	f0 e0       	ldi	r31, 0x00	; 0
     7f2:	ee 0f       	add	r30, r30
     7f4:	ff 1f       	adc	r31, r31
     7f6:	e7 5c       	subi	r30, 0xC7	; 199
     7f8:	fc 4f       	sbci	r31, 0xFC	; 252
     7fa:	80 81       	ld	r24, Z
     7fc:	91 81       	ldd	r25, Z+1	; 0x01
     7fe:	b7 01       	movw	r22, r14
     800:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <__divmodhi4>
     804:	c0 96       	adiw	r24, 0x30	; 48
     806:	9f 93       	push	r25
     808:	8f 93       	push	r24
     80a:	7f 93       	push	r23
     80c:	6f 93       	push	r22
     80e:	3f 93       	push	r19
     810:	2f 93       	push	r18
     812:	81 e7       	ldi	r24, 0x71	; 113
     814:	91 e0       	ldi	r25, 0x01	; 1
     816:	9f 93       	push	r25
     818:	8f 93       	push	r24
     81a:	df 93       	push	r29
     81c:	cf 93       	push	r28
     81e:	0e 94 4c 19 	call	0x3298	; 0x3298 <sprintf>
           	lcd_puts( gBuffer);
     822:	ce 01       	movw	r24, r28
     824:	0e 94 c5 07 	call	0xf8a	; 0xf8a <lcd_puts>
            if( (page + 3) < num_sensors)
     828:	0d 5f       	subi	r16, 0xFD	; 253
     82a:	1f 4f       	sbci	r17, 0xFF	; 255
     82c:	8d b7       	in	r24, 0x3d	; 61
     82e:	9e b7       	in	r25, 0x3e	; 62
     830:	0a 96       	adiw	r24, 0x0a	; 10
     832:	0f b6       	in	r0, 0x3f	; 63
     834:	f8 94       	cli
     836:	9e bf       	out	0x3e, r25	; 62
     838:	0f be       	out	0x3f, r0	; 63
     83a:	8d bf       	out	0x3d, r24	; 61
     83c:	0c 15       	cp	r16, r12
     83e:	1d 05       	cpc	r17, r13
     840:	4c f5       	brge	.+82     	; 0x894 <display_temperatures+0x27a>
	        	   {
	 	        	  device = g1Wire_order[page + 3];
     842:	f8 01       	movw	r30, r16
     844:	ed 51       	subi	r30, 0x1D	; 29
     846:	fd 4f       	sbci	r31, 0xFD	; 253
	 	          	sprintf( gBuffer, "%02i#Bler%+04i.%c\n",(int)page + 3, gReadings[device] / 10,(gReadings[device] % 10) + '0'); //boiler
     848:	e0 81       	ld	r30, Z
     84a:	f0 e0       	ldi	r31, 0x00	; 0
     84c:	ee 0f       	add	r30, r30
     84e:	ff 1f       	adc	r31, r31
     850:	e7 5c       	subi	r30, 0xC7	; 199
     852:	fc 4f       	sbci	r31, 0xFC	; 252
     854:	80 81       	ld	r24, Z
     856:	91 81       	ldd	r25, Z+1	; 0x01
     858:	b7 01       	movw	r22, r14
     85a:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <__divmodhi4>
     85e:	c0 96       	adiw	r24, 0x30	; 48
     860:	9f 93       	push	r25
     862:	8f 93       	push	r24
     864:	7f 93       	push	r23
     866:	6f 93       	push	r22
     868:	1f 93       	push	r17
     86a:	0f 93       	push	r16
     86c:	84 e8       	ldi	r24, 0x84	; 132
     86e:	91 e0       	ldi	r25, 0x01	; 1
     870:	9f 93       	push	r25
     872:	8f 93       	push	r24
     874:	df 93       	push	r29
     876:	cf 93       	push	r28
     878:	0e 94 4c 19 	call	0x3298	; 0x3298 <sprintf>
               	lcd_puts( gBuffer);
     87c:	ce 01       	movw	r24, r28
     87e:	0e 94 c5 07 	call	0xf8a	; 0xf8a <lcd_puts>
     882:	8d b7       	in	r24, 0x3d	; 61
     884:	9e b7       	in	r25, 0x3e	; 62
     886:	0a 96       	adiw	r24, 0x0a	; 10
     888:	0f b6       	in	r0, 0x3f	; 63
     88a:	f8 94       	cli
     88c:	9e bf       	out	0x3e, r25	; 62
     88e:	0f be       	out	0x3f, r0	; 63
     890:	8d bf       	out	0x3d, r24	; 61
     892:	0a c0       	rjmp	.+20     	; 0x8a8 <display_temperatures+0x28e>
	           		}
             	else lcd_puts_P( "            ");
     894:	89 e5       	ldi	r24, 0x59	; 89
     896:	91 e0       	ldi	r25, 0x01	; 1
     898:	05 c0       	rjmp	.+10     	; 0x8a4 <display_temperatures+0x28a>
	       		}
         	else lcd_puts_P( "            ");
     89a:	8c e4       	ldi	r24, 0x4C	; 76
     89c:	91 e0       	ldi	r25, 0x01	; 1
     89e:	02 c0       	rjmp	.+4      	; 0x8a4 <display_temperatures+0x28a>
      }
		else lcd_puts_P( "            ");
     8a0:	8f e3       	ldi	r24, 0x3F	; 63
     8a2:	91 e0       	ldi	r25, 0x01	; 1
     8a4:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <lcd_puts_p>
		{
		//get temperature
		d = bmp085_gettemperature();
     8a8:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <bmp085_gettemperature>
     8ac:	60 93 eb 02 	sts	0x02EB, r22
     8b0:	70 93 ec 02 	sts	0x02EC, r23
     8b4:	80 93 ed 02 	sts	0x02ED, r24
     8b8:	90 93 ee 02 	sts	0x02EE, r25
		dtostrf(d, 10, 2, printbuff);
     8bc:	09 e4       	ldi	r16, 0x49	; 73
     8be:	13 e0       	ldi	r17, 0x03	; 3
     8c0:	22 e0       	ldi	r18, 0x02	; 2
     8c2:	4a e0       	ldi	r20, 0x0A	; 10
     8c4:	0e 94 ca 18 	call	0x3194	; 0x3194 <dtostrf>
		uart_puts("temperature2: "); 
     8c8:	87 e9       	ldi	r24, 0x97	; 151
     8ca:	91 e0       	ldi	r25, 0x01	; 1
     8cc:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <uart_puts>
		uart_puts(printbuff);  
     8d0:	c8 01       	movw	r24, r16
     8d2:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <uart_puts>
		uart_puts(" C deg"); 
     8d6:	86 ea       	ldi	r24, 0xA6	; 166
     8d8:	91 e0       	ldi	r25, 0x01	; 1
     8da:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <uart_puts>
		uart_puts("\r\n");
     8de:	8d ea       	ldi	r24, 0xAD	; 173
     8e0:	91 e0       	ldi	r25, 0x01	; 1
     8e2:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <uart_puts>

		//get pressure
		l = bmp085_getpressure();
     8e6:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <bmp085_getpressure>
     8ea:	60 93 cb 02 	sts	0x02CB, r22
     8ee:	70 93 cc 02 	sts	0x02CC, r23
     8f2:	80 93 cd 02 	sts	0x02CD, r24
     8f6:	90 93 ce 02 	sts	0x02CE, r25
		ltoa(l/100, printbuff, 10);
     8fa:	24 e6       	ldi	r18, 0x64	; 100
     8fc:	30 e0       	ldi	r19, 0x00	; 0
     8fe:	40 e0       	ldi	r20, 0x00	; 0
     900:	50 e0       	ldi	r21, 0x00	; 0
     902:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <__divmodsi4>
     906:	ca 01       	movw	r24, r20
     908:	b9 01       	movw	r22, r18
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ltoa_ncheck (long, char *, unsigned char);
	return __ltoa_ncheck (__val, __s, __radix);
     90a:	2a e0       	ldi	r18, 0x0A	; 10
     90c:	a8 01       	movw	r20, r16
     90e:	0e 94 01 19 	call	0x3202	; 0x3202 <__ltoa_ncheck>
		uart_puts("pressure: "); 
     912:	80 eb       	ldi	r24, 0xB0	; 176
     914:	91 e0       	ldi	r25, 0x01	; 1
     916:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <uart_puts>
		uart_puts(printbuff);
     91a:	c8 01       	movw	r24, r16
     91c:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <uart_puts>
		uart_puts("hPa");
     920:	8b eb       	ldi	r24, 0xBB	; 187
     922:	91 e0       	ldi	r25, 0x01	; 1
     924:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <uart_puts>
		uart_puts("\r\n");
     928:	8d ea       	ldi	r24, 0xAD	; 173
     92a:	91 e0       	ldi	r25, 0x01	; 1
     92c:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <uart_puts>
		lcd_gotoxy( 17, 2);
     930:	62 e0       	ldi	r22, 0x02	; 2
     932:	81 e1       	ldi	r24, 0x11	; 17
     934:	0e 94 8c 07 	call	0xf18	; 0xf18 <lcd_gotoxy>
		//sprintf( printbuff1, "%3", printbuff/1000);
		lcd_puts_P( "hPa");
     938:	8b e3       	ldi	r24, 0x3B	; 59
     93a:	91 e0       	ldi	r25, 0x01	; 1
     93c:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <lcd_puts_p>
		lcd_gotoxy( 15, 2);
     940:	62 e0       	ldi	r22, 0x02	; 2
     942:	8f e0       	ldi	r24, 0x0F	; 15
     944:	0e 94 8c 07 	call	0xf18	; 0xf18 <lcd_gotoxy>
		lcd_puts( printbuff);
     948:	c8 01       	movw	r24, r16
     94a:	0e 94 c5 07 	call	0xf8a	; 0xf8a <lcd_puts>

		//get altitude
		d = bmp085_getaltitude();
     94e:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <bmp085_getaltitude>
     952:	60 93 eb 02 	sts	0x02EB, r22
     956:	70 93 ec 02 	sts	0x02EC, r23
     95a:	80 93 ed 02 	sts	0x02ED, r24
     95e:	90 93 ee 02 	sts	0x02EE, r25
		dtostrf(d, 10, 2, printbuff);
     962:	22 e0       	ldi	r18, 0x02	; 2
     964:	4a e0       	ldi	r20, 0x0A	; 10
     966:	0e 94 ca 18 	call	0x3194	; 0x3194 <dtostrf>
		uart_puts("altitude: ");
     96a:	8f eb       	ldi	r24, 0xBF	; 191
     96c:	91 e0       	ldi	r25, 0x01	; 1
     96e:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <uart_puts>
		uart_puts(printbuff);
     972:	c8 01       	movw	r24, r16
     974:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <uart_puts>
		uart_puts(" M above sea");
     978:	8a ec       	ldi	r24, 0xCA	; 202
     97a:	91 e0       	ldi	r25, 0x01	; 1
     97c:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <uart_puts>
		uart_puts("\r\n");
     980:	8d ea       	ldi	r24, 0xAD	; 173
     982:	91 e0       	ldi	r25, 0x01	; 1
     984:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <uart_puts>

		uart_puts("\r\n");
     988:	8d ea       	ldi	r24, 0xAD	; 173
     98a:	91 e0       	ldi	r25, 0x01	; 1
     98c:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <uart_puts>
		delay_ms(500);
     990:	64 e8       	ldi	r22, 0x84	; 132
     992:	7b e2       	ldi	r23, 0x2B	; 43
     994:	8a e0       	ldi	r24, 0x0A	; 10
     996:	90 e0       	ldi	r25, 0x00	; 0
		}
}
     998:	df 91       	pop	r29
     99a:	cf 91       	pop	r28
     99c:	1f 91       	pop	r17
     99e:	0f 91       	pop	r16
     9a0:	ff 90       	pop	r15
     9a2:	ef 90       	pop	r14
     9a4:	df 90       	pop	r13
     9a6:	cf 90       	pop	r12
		uart_puts(printbuff);
		uart_puts(" M above sea");
		uart_puts("\r\n");

		uart_puts("\r\n");
		delay_ms(500);
     9a8:	0c 94 2a 06 	jmp	0xc54	; 0xc54 <delayloop32>

000009ac <log_temperatures>:
		}
}
/**************************************************************/
// output most recent temperatures to comm port
void log_temperatures( uint8_t num_sensors)
{
     9ac:	9f 92       	push	r9
     9ae:	af 92       	push	r10
     9b0:	bf 92       	push	r11
     9b2:	cf 92       	push	r12
     9b4:	df 92       	push	r13
     9b6:	ef 92       	push	r14
     9b8:	ff 92       	push	r15
     9ba:	0f 93       	push	r16
     9bc:	1f 93       	push	r17
     9be:	cf 93       	push	r28
     9c0:	df 93       	push	r29
     9c2:	98 2e       	mov	r9, r24
	uint8_t i, device;
//	DS2415_date_t dt;

	// output the timestamp at the start of the record
	//DS2415_epoch_to_gregorian( gRTC_clk, &dt);
	uart_putc( '#');	// marker for data record to help parsing via external program
     9c4:	83 e2       	ldi	r24, 0x23	; 35
     9c6:	0e 94 db 09 	call	0x13b6	; 0x13b6 <uart_putc>
     9ca:	c3 ee       	ldi	r28, 0xE3	; 227
     9cc:	cc 2e       	mov	r12, r28
     9ce:	c2 e0       	ldi	r28, 0x02	; 2
     9d0:	dc 2e       	mov	r13, r28

	//sprintf( gBuffer, " %02i:%02i:%02i;", (int)dt.hour, (int)dt.min, (int)dt.sec);
	//uart_puts( gBuffer);
	
	// output a semicolon delimited list of the sensors data
	for( i = 0; i < num_sensors; i++)
     9d2:	e6 01       	movw	r28, r12
	{
		device = g1Wire_order[i];   //premenna, zoradene snimace
		sprintf( gBuffer, "%+04i.%c;", gReadings[device] / 10, (gReadings[device] % 10) + '0');
     9d4:	1a e0       	ldi	r17, 0x0A	; 10
     9d6:	a1 2e       	mov	r10, r17
     9d8:	b1 2c       	mov	r11, r1
     9da:	07 ed       	ldi	r16, 0xD7	; 215
     9dc:	11 e0       	ldi	r17, 0x01	; 1
     9de:	86 ea       	ldi	r24, 0xA6	; 166
     9e0:	e8 2e       	mov	r14, r24
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	f8 2e       	mov	r15, r24
     9e6:	8c 2f       	mov	r24, r28
     9e8:	8c 19       	sub	r24, r12

	//sprintf( gBuffer, " %02i:%02i:%02i;", (int)dt.hour, (int)dt.min, (int)dt.sec);
	//uart_puts( gBuffer);
	
	// output a semicolon delimited list of the sensors data
	for( i = 0; i < num_sensors; i++)
     9ea:	89 15       	cp	r24, r9
     9ec:	28 f5       	brcc	.+74     	; 0xa38 <log_temperatures+0x8c>
	{
		device = g1Wire_order[i];   //premenna, zoradene snimace
     9ee:	e9 91       	ld	r30, Y+
		sprintf( gBuffer, "%+04i.%c;", gReadings[device] / 10, (gReadings[device] % 10) + '0');
     9f0:	f0 e0       	ldi	r31, 0x00	; 0
     9f2:	ee 0f       	add	r30, r30
     9f4:	ff 1f       	adc	r31, r31
     9f6:	e7 5c       	subi	r30, 0xC7	; 199
     9f8:	fc 4f       	sbci	r31, 0xFC	; 252
     9fa:	80 81       	ld	r24, Z
     9fc:	91 81       	ldd	r25, Z+1	; 0x01
     9fe:	b5 01       	movw	r22, r10
     a00:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <__divmodhi4>
     a04:	9c 01       	movw	r18, r24
     a06:	20 5d       	subi	r18, 0xD0	; 208
     a08:	3f 4f       	sbci	r19, 0xFF	; 255
     a0a:	3f 93       	push	r19
     a0c:	2f 93       	push	r18
     a0e:	7f 93       	push	r23
     a10:	6f 93       	push	r22
     a12:	1f 93       	push	r17
     a14:	0f 93       	push	r16
     a16:	ff 92       	push	r15
     a18:	ef 92       	push	r14
     a1a:	0e 94 4c 19 	call	0x3298	; 0x3298 <sprintf>
		uart_puts( gBuffer);
     a1e:	86 ea       	ldi	r24, 0xA6	; 166
     a20:	92 e0       	ldi	r25, 0x02	; 2
     a22:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <uart_puts>
     a26:	8d b7       	in	r24, 0x3d	; 61
     a28:	9e b7       	in	r25, 0x3e	; 62
     a2a:	08 96       	adiw	r24, 0x08	; 8
     a2c:	0f b6       	in	r0, 0x3f	; 63
     a2e:	f8 94       	cli
     a30:	9e bf       	out	0x3e, r25	; 62
     a32:	0f be       	out	0x3f, r0	; 63
     a34:	8d bf       	out	0x3d, r24	; 61
     a36:	d7 cf       	rjmp	.-82     	; 0x9e6 <log_temperatures+0x3a>
	}
	uart_puts_P( "\r");      //vycital vsetky za sebou a poslal znak novy riadok
     a38:	89 e3       	ldi	r24, 0x39	; 57
     a3a:	91 e0       	ldi	r25, 0x01	; 1
}
     a3c:	df 91       	pop	r29
     a3e:	cf 91       	pop	r28
     a40:	1f 91       	pop	r17
     a42:	0f 91       	pop	r16
     a44:	ff 90       	pop	r15
     a46:	ef 90       	pop	r14
     a48:	df 90       	pop	r13
     a4a:	cf 90       	pop	r12
     a4c:	bf 90       	pop	r11
     a4e:	af 90       	pop	r10
     a50:	9f 90       	pop	r9
	{
		device = g1Wire_order[i];   //premenna, zoradene snimace
		sprintf( gBuffer, "%+04i.%c;", gReadings[device] / 10, (gReadings[device] % 10) + '0');
		uart_puts( gBuffer);
	}
	uart_puts_P( "\r");      //vycital vsetky za sebou a poslal znak novy riadok
     a52:	0c 94 fc 09 	jmp	0x13f8	; 0x13f8 <uart_puts_p>

00000a56 <read_temperatures>:
}
/**********************************************************/
// read all DS18x20 sensors on 1-wire buss, 12-bit resolution
void read_temperatures( uint8_t num_sensors)
{
     a56:	ef 92       	push	r14
     a58:	ff 92       	push	r15
     a5a:	0f 93       	push	r16
     a5c:	1f 93       	push	r17
     a5e:	cf 93       	push	r28
     a60:	df 93       	push	r29
     a62:	e8 2e       	mov	r14, r24
	uint8_t i;
	
	if( DS18X20_start_meas( NULL) == OWI_BUS_OK)
     a64:	80 e0       	ldi	r24, 0x00	; 0
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	0e 94 37 06 	call	0xc6e	; 0xc6e <DS18X20_start_meas>
     a6c:	88 23       	and	r24, r24
     a6e:	21 f0       	breq	.+8      	; 0xa78 <read_temperatures+0x22>
     a70:	e9 e3       	ldi	r30, 0x39	; 57
     a72:	f3 e0       	ldi	r31, 0x03	; 3
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	11 c0       	rjmp	.+34     	; 0xa9a <read_temperatures+0x44>
     a78:	c7 ef       	ldi	r28, 0xF7	; 247
     a7a:	d2 e0       	ldi	r29, 0x02	; 2
     a7c:	09 e3       	ldi	r16, 0x39	; 57
     a7e:	13 e0       	ldi	r17, 0x03	; 3
     a80:	f1 2c       	mov	r15, r1
	{
		//if( gRTC_status) DS2415_read_clock( &gRTC_status, &gRTC_clk, gRTC_ID);
		for( i = 0; i < num_sensors; i++)
     a82:	fe 14       	cp	r15, r14
     a84:	d1 f0       	breq	.+52     	; 0xaba <read_temperatures+0x64>
			gReadings[i] = DS18X20_get_temp( &gSensorIDs[i][0]);
     a86:	ce 01       	movw	r24, r28
     a88:	0e 94 8f 06 	call	0xd1e	; 0xd1e <DS18X20_get_temp>
     a8c:	f8 01       	movw	r30, r16
     a8e:	81 93       	st	Z+, r24
     a90:	91 93       	st	Z+, r25
     a92:	8f 01       	movw	r16, r30
	uint8_t i;
	
	if( DS18X20_start_meas( NULL) == OWI_BUS_OK)
	{
		//if( gRTC_status) DS2415_read_clock( &gRTC_status, &gRTC_clk, gRTC_ID);
		for( i = 0; i < num_sensors; i++)
     a94:	f3 94       	inc	r15
     a96:	28 96       	adiw	r28, 0x08	; 8
     a98:	f4 cf       	rjmp	.-24     	; 0xa82 <read_temperatures+0x2c>
			gReadings[i] = DS18X20_get_temp( &gSensorIDs[i][0]);
	}
	else
	{
		for( i = 0; i < num_sensors; i++)
     a9a:	9e 15       	cp	r25, r14
     a9c:	21 f0       	breq	.+8      	; 0xaa6 <read_temperatures+0x50>
			gReadings[i] = 0;
     a9e:	11 92       	st	Z+, r1
     aa0:	11 92       	st	Z+, r1
		for( i = 0; i < num_sensors; i++)
			gReadings[i] = DS18X20_get_temp( &gSensorIDs[i][0]);
	}
	else
	{
		for( i = 0; i < num_sensors; i++)
     aa2:	9f 5f       	subi	r25, 0xFF	; 255
     aa4:	fa cf       	rjmp	.-12     	; 0xa9a <read_temperatures+0x44>
			gReadings[i] = 0;
		uart_puts_P( "Start meas. fail\r"); 	
     aa6:	87 e2       	ldi	r24, 0x27	; 39
     aa8:	91 e0       	ldi	r25, 0x01	; 1
	}
}
     aaa:	df 91       	pop	r29
     aac:	cf 91       	pop	r28
     aae:	1f 91       	pop	r17
     ab0:	0f 91       	pop	r16
     ab2:	ff 90       	pop	r15
     ab4:	ef 90       	pop	r14
	}
	else
	{
		for( i = 0; i < num_sensors; i++)
			gReadings[i] = 0;
		uart_puts_P( "Start meas. fail\r"); 	
     ab6:	0c 94 fc 09 	jmp	0x13f8	; 0x13f8 <uart_puts_p>
	}
}
     aba:	df 91       	pop	r29
     abc:	cf 91       	pop	r28
     abe:	1f 91       	pop	r17
     ac0:	0f 91       	pop	r16
     ac2:	ff 90       	pop	r15
     ac4:	ef 90       	pop	r14
     ac6:	08 95       	ret

00000ac8 <show_id_uart>:
/***************************************************/
// display the sensor ID info on the serial port
void show_id_uart( uint8_t *id)
{
     ac8:	ef 92       	push	r14
     aca:	ff 92       	push	r15
     acc:	0f 93       	push	r16
     ace:	1f 93       	push	r17
     ad0:	cf 93       	push	r28
     ad2:	df 93       	push	r29
     ad4:	7c 01       	movw	r14, r24
     ad6:	8c 01       	movw	r16, r24
	size_t i;
	for( i = 0; i < OWI_ROMCODE_SIZE; i++)
     ad8:	c0 e0       	ldi	r28, 0x00	; 0
     ada:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if( i == 0) uart_puts_P( "FC:");
     adc:	20 97       	sbiw	r28, 0x00	; 0
     ade:	19 f4       	brne	.+6      	; 0xae6 <show_id_uart+0x1e>
     ae0:	83 e2       	ldi	r24, 0x23	; 35
     ae2:	91 e0       	ldi	r25, 0x01	; 1
     ae4:	0b c0       	rjmp	.+22     	; 0xafc <show_id_uart+0x34>
		else if( i == OWI_ROMCODE_SIZE - 1) uart_puts_P( " CRC:");
     ae6:	c7 30       	cpi	r28, 0x07	; 7
     ae8:	d1 05       	cpc	r29, r1
     aea:	19 f4       	brne	.+6      	; 0xaf2 <show_id_uart+0x2a>
     aec:	8d e1       	ldi	r24, 0x1D	; 29
     aee:	91 e0       	ldi	r25, 0x01	; 1
     af0:	05 c0       	rjmp	.+10     	; 0xafc <show_id_uart+0x34>
		if( i == 1) uart_puts_P( " SN:");
     af2:	c1 30       	cpi	r28, 0x01	; 1
     af4:	d1 05       	cpc	r29, r1
     af6:	21 f4       	brne	.+8      	; 0xb00 <show_id_uart+0x38>
     af8:	88 e1       	ldi	r24, 0x18	; 24
     afa:	91 e0       	ldi	r25, 0x01	; 1
     afc:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <uart_puts_p>
		uart_puthex_byte( id[i]);
     b00:	f8 01       	movw	r30, r16
     b02:	81 91       	ld	r24, Z+
     b04:	8f 01       	movw	r16, r30
     b06:	0e 94 2f 0a 	call	0x145e	; 0x145e <uart_puthex_byte>
		if( i == 0)
     b0a:	20 97       	sbiw	r28, 0x00	; 0
     b0c:	89 f4       	brne	.+34     	; 0xb30 <show_id_uart+0x68>
		{
			if( OWI_FAMILY( id[0]) == DS18S20_FAMILY_CODE) uart_puts_P( "(18S)");
     b0e:	f7 01       	movw	r30, r14
     b10:	80 81       	ld	r24, Z
     b12:	8f 77       	andi	r24, 0x7F	; 127
     b14:	80 31       	cpi	r24, 0x10	; 16
     b16:	19 f4       	brne	.+6      	; 0xb1e <show_id_uart+0x56>
     b18:	82 e1       	ldi	r24, 0x12	; 18
     b1a:	91 e0       	ldi	r25, 0x01	; 1
     b1c:	07 c0       	rjmp	.+14     	; 0xb2c <show_id_uart+0x64>
			else if( OWI_FAMILY( id[0]) == DS18B20_FAMILY_CODE) uart_puts_P( "(18B)");
     b1e:	88 32       	cpi	r24, 0x28	; 40
     b20:	19 f4       	brne	.+6      	; 0xb28 <show_id_uart+0x60>
     b22:	8c e0       	ldi	r24, 0x0C	; 12
     b24:	91 e0       	ldi	r25, 0x01	; 1
     b26:	02 c0       	rjmp	.+4      	; 0xb2c <show_id_uart+0x64>
			else uart_puts_P( "(?)");
     b28:	88 e0       	ldi	r24, 0x08	; 8
     b2a:	91 e0       	ldi	r25, 0x01	; 1
     b2c:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <uart_puts_p>
/***************************************************/
// display the sensor ID info on the serial port
void show_id_uart( uint8_t *id)
{
	size_t i;
	for( i = 0; i < OWI_ROMCODE_SIZE; i++)
     b30:	21 96       	adiw	r28, 0x01	; 1
     b32:	c8 30       	cpi	r28, 0x08	; 8
     b34:	d1 05       	cpc	r29, r1
     b36:	91 f6       	brne	.-92     	; 0xadc <show_id_uart+0x14>
			if( OWI_FAMILY( id[0]) == DS18S20_FAMILY_CODE) uart_puts_P( "(18S)");
			else if( OWI_FAMILY( id[0]) == DS18B20_FAMILY_CODE) uart_puts_P( "(18B)");
			else uart_puts_P( "(?)");
		}
	}
}
     b38:	df 91       	pop	r29
     b3a:	cf 91       	pop	r28
     b3c:	1f 91       	pop	r17
     b3e:	0f 91       	pop	r16
     b40:	ff 90       	pop	r15
     b42:	ef 90       	pop	r14
     b44:	08 95       	ret

00000b46 <show_exinfo_lcd>:
/*****************************************************/
// condense the extended 1Wire device info into
// two 16-character lines and display on the LCD
void show_exinfo_lcd( uint8_t index)
{
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	cf 93       	push	r28
     b4c:	df 93       	push	r29
     b4e:	c8 2f       	mov	r28, r24
	uint8_t device, i;

	// show the displayed order and the identified order
	device = g1Wire_order[index];
     b50:	e8 2f       	mov	r30, r24
     b52:	f0 e0       	ldi	r31, 0x00	; 0
     b54:	ed 51       	subi	r30, 0x1D	; 29
     b56:	fd 4f       	sbci	r31, 0xFD	; 253
     b58:	00 81       	ld	r16, Z
	lcd_gotoxy( 0, 0);
     b5a:	60 e0       	ldi	r22, 0x00	; 0
     b5c:	80 e0       	ldi	r24, 0x00	; 0
     b5e:	0e 94 8c 07 	call	0xf18	; 0xf18 <lcd_gotoxy>
	lcd_puts_P( "Dsp");
     b62:	84 e0       	ldi	r24, 0x04	; 4
     b64:	91 e0       	ldi	r25, 0x01	; 1
     b66:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <lcd_puts_p>
	lcd_putc( index + '0');
     b6a:	80 e3       	ldi	r24, 0x30	; 48
     b6c:	8c 0f       	add	r24, r28
     b6e:	0e 94 a5 07 	call	0xf4a	; 0xf4a <lcd_putc>
	lcd_puts_P( "/Bus");
     b72:	8f ef       	ldi	r24, 0xFF	; 255
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <lcd_puts_p>
	lcd_putc( device + '0');
     b7a:	80 e3       	ldi	r24, 0x30	; 48
     b7c:	80 0f       	add	r24, r16
     b7e:	0e 94 a5 07 	call	0xf4a	; 0xf4a <lcd_putc>

	lcd_puts_P( "       ");//	 clear any previously displayed measurement data
     b82:	87 ef       	ldi	r24, 0xF7	; 247
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <lcd_puts_p>

	// show the device information on next line
	lcd_gotoxy( 0, 1);
     b8a:	61 e0       	ldi	r22, 0x01	; 1
     b8c:	80 e0       	ldi	r24, 0x00	; 0
     b8e:	0e 94 8c 07 	call	0xf18	; 0xf18 <lcd_gotoxy>
	if( OWI_FAMILY( gSensorIDs[device][0]) == DS18S20_FAMILY_CODE)
     b92:	10 e0       	ldi	r17, 0x00	; 0
     b94:	f8 01       	movw	r30, r16
     b96:	23 e0       	ldi	r18, 0x03	; 3
     b98:	ee 0f       	add	r30, r30
     b9a:	ff 1f       	adc	r31, r31
     b9c:	2a 95       	dec	r18
     b9e:	e1 f7       	brne	.-8      	; 0xb98 <show_exinfo_lcd+0x52>
     ba0:	e9 50       	subi	r30, 0x09	; 9
     ba2:	fd 4f       	sbci	r31, 0xFD	; 253
     ba4:	80 81       	ld	r24, Z
     ba6:	98 2f       	mov	r25, r24
     ba8:	9f 77       	andi	r25, 0x7F	; 127
     baa:	90 31       	cpi	r25, 0x10	; 16
     bac:	71 f4       	brne	.+28     	; 0xbca <show_exinfo_lcd+0x84>
		lcd_puts_P( "18S:");
     bae:	82 ef       	ldi	r24, 0xF2	; 242
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <lcd_puts_p>
     bb6:	93 e0       	ldi	r25, 0x03	; 3
     bb8:	00 0f       	add	r16, r16
     bba:	11 1f       	adc	r17, r17
     bbc:	9a 95       	dec	r25
     bbe:	e1 f7       	brne	.-8      	; 0xbb8 <show_exinfo_lcd+0x72>
     bc0:	09 50       	subi	r16, 0x09	; 9
     bc2:	1d 4f       	sbci	r17, 0xFD	; 253
}
/*****************************************************/
// condense the extended 1Wire device info into
// two 16-character lines and display on the LCD
void show_exinfo_lcd( uint8_t index)
{
     bc4:	c0 e0       	ldi	r28, 0x00	; 0
     bc6:	d0 e0       	ldi	r29, 0x00	; 0
     bc8:	0a c0       	rjmp	.+20     	; 0xbde <show_exinfo_lcd+0x98>

	// show the device information on next line
	lcd_gotoxy( 0, 1);
	if( OWI_FAMILY( gSensorIDs[device][0]) == DS18S20_FAMILY_CODE)
		lcd_puts_P( "18S:");
	else if( OWI_FAMILY( gSensorIDs[device][0]) == DS18B20_FAMILY_CODE)
     bca:	98 32       	cpi	r25, 0x28	; 40
     bcc:	19 f4       	brne	.+6      	; 0xbd4 <show_exinfo_lcd+0x8e>
		lcd_puts_P( "18B:");
     bce:	8d ee       	ldi	r24, 0xED	; 237
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	ef cf       	rjmp	.-34     	; 0xbb2 <show_exinfo_lcd+0x6c>
	else
	{
		 // unknown device type
		 lcd_puthex_byte( gSensorIDs[device][0]);
     bd4:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <lcd_puthex_byte>
		 lcd_puts_P( "?:");
     bd8:	8a ee       	ldi	r24, 0xEA	; 234
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	ea cf       	rjmp	.-44     	; 0xbb2 <show_exinfo_lcd+0x6c>
     bde:	f8 01       	movw	r30, r16
     be0:	ec 0f       	add	r30, r28
     be2:	fd 1f       	adc	r31, r29
	}

	// show the serial number and CRC byte
	for( i = 1; i < OWI_ROMCODE_SIZE - 1; i++)
		lcd_puthex_byte( gSensorIDs[device][i]);
     be4:	81 81       	ldd	r24, Z+1	; 0x01
     be6:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <lcd_puthex_byte>
     bea:	21 96       	adiw	r28, 0x01	; 1
		 lcd_puthex_byte( gSensorIDs[device][0]);
		 lcd_puts_P( "?:");
	}

	// show the serial number and CRC byte
	for( i = 1; i < OWI_ROMCODE_SIZE - 1; i++)
     bec:	c6 30       	cpi	r28, 0x06	; 6
     bee:	d1 05       	cpc	r29, r1
     bf0:	b1 f7       	brne	.-20     	; 0xbde <show_exinfo_lcd+0x98>
		lcd_puthex_byte( gSensorIDs[device][i]);
}
     bf2:	df 91       	pop	r29
     bf4:	cf 91       	pop	r28
     bf6:	1f 91       	pop	r17
     bf8:	0f 91       	pop	r16
     bfa:	08 95       	ret

00000bfc <crc8>:
{
	uint16_t byte_ctr;
	uint8_t bit_ctr, temp, crc, cur_byte;

	crc = 0;
	for( byte_ctr = 0; byte_ctr < num_bytes; byte_ctr++)
     bfc:	fc 01       	movw	r30, r24
extern uint8_t crc8( uint8_t *data, uint8_t num_bytes)
{
	uint16_t byte_ctr;
	uint8_t bit_ctr, temp, crc, cur_byte;

	crc = 0;
     bfe:	40 e0       	ldi	r20, 0x00	; 0
	for( byte_ctr = 0; byte_ctr < num_bytes; byte_ctr++)
     c00:	70 e0       	ldi	r23, 0x00	; 0
			{
				crc >>= 1;
			}
			else
			{
				crc ^= 0x18;
     c02:	58 e1       	ldi	r21, 0x18	; 24
     c04:	9f 01       	movw	r18, r30
     c06:	28 1b       	sub	r18, r24
     c08:	39 0b       	sbc	r19, r25
{
	uint16_t byte_ctr;
	uint8_t bit_ctr, temp, crc, cur_byte;

	crc = 0;
	for( byte_ctr = 0; byte_ctr < num_bytes; byte_ctr++)
     c0a:	26 17       	cp	r18, r22
     c0c:	37 07       	cpc	r19, r23
     c0e:	78 f4       	brcc	.+30     	; 0xc2e <crc8+0x32>
	{
		cur_byte = data[byte_ctr];
     c10:	31 91       	ld	r19, Z+
     c12:	28 e0       	ldi	r18, 0x08	; 8
		for( bit_ctr = 8; bit_ctr > 0; bit_ctr--)
		{
			temp = ((crc ^ cur_byte) & 0x01);
     c14:	a3 2f       	mov	r26, r19
     c16:	a4 27       	eor	r26, r20
			if( temp == 0)
     c18:	a0 fd       	sbrc	r26, 0
     c1a:	02 c0       	rjmp	.+4      	; 0xc20 <crc8+0x24>
			{
				crc >>= 1;
     c1c:	46 95       	lsr	r20
     c1e:	03 c0       	rjmp	.+6      	; 0xc26 <crc8+0x2a>
			}
			else
			{
				crc ^= 0x18;
     c20:	45 27       	eor	r20, r21
				crc >>= 1;
     c22:	46 95       	lsr	r20
				crc |= 0x80;
     c24:	40 68       	ori	r20, 0x80	; 128
			}
			cur_byte >>= 1;
     c26:	36 95       	lsr	r19
     c28:	21 50       	subi	r18, 0x01	; 1

	crc = 0;
	for( byte_ctr = 0; byte_ctr < num_bytes; byte_ctr++)
	{
		cur_byte = data[byte_ctr];
		for( bit_ctr = 8; bit_ctr > 0; bit_ctr--)
     c2a:	a1 f7       	brne	.-24     	; 0xc14 <crc8+0x18>
     c2c:	eb cf       	rjmp	.-42     	; 0xc04 <crc8+0x8>
			}
			cur_byte >>= 1;
		}
	}
	return crc;
}
     c2e:	84 2f       	mov	r24, r20
     c30:	08 95       	ret

00000c32 <crc16>:
*         *data : pointer to array of bytes to compute CRC
*     num_bytes : number of bytes in the array
*       returns : the CRC of the data
*/
uint16_t crc16( uint8_t *data, uint16_t num_bytes)
{
     c32:	fc 01       	movw	r30, r24
     c34:	68 0f       	add	r22, r24
     c36:	79 1f       	adc	r23, r25
	uint16_t byte_ctr;
	uint8_t bit_ctr, temp, crc, cur_byte;

	crc = 0;
     c38:	80 e0       	ldi	r24, 0x00	; 0
	for( byte_ctr = 0; byte_ctr < num_bytes; byte_ctr++)
     c3a:	e6 17       	cp	r30, r22
     c3c:	f7 07       	cpc	r31, r23
     c3e:	41 f0       	breq	.+16     	; 0xc50 <crc16+0x1e>
	{
		cur_byte = data[byte_ctr];
     c40:	21 91       	ld	r18, Z+
     c42:	98 e0       	ldi	r25, 0x08	; 8
		for( bit_ctr = 8; bit_ctr > 0; bit_ctr--)
		{
			temp = ((crc ^ cur_byte) & 0x01);
     c44:	82 27       	eor	r24, r18
     c46:	81 70       	andi	r24, 0x01	; 1
			{
				crc ^= 0x4002;
				crc >>= 1;
				crc |= 0x8000;
			}
			cur_byte >>= 1;
     c48:	26 95       	lsr	r18
     c4a:	91 50       	subi	r25, 0x01	; 1

	crc = 0;
	for( byte_ctr = 0; byte_ctr < num_bytes; byte_ctr++)
	{
		cur_byte = data[byte_ctr];
		for( bit_ctr = 8; bit_ctr > 0; bit_ctr--)
     c4c:	d9 f7       	brne	.-10     	; 0xc44 <crc16+0x12>
     c4e:	f5 cf       	rjmp	.-22     	; 0xc3a <crc16+0x8>
			}
			cur_byte >>= 1;
		}
	}
	return crc;
}
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	08 95       	ret

00000c54 <delayloop32>:
#include <inttypes.h>

#include "delay.h"

void delayloop32(uint32_t loops) 
{
     c54:	dc 01       	movw	r26, r24
     c56:	cb 01       	movw	r24, r22
  __asm__ volatile ( "cp  %A0,__zero_reg__ \n\t"  \
     c58:	81 15       	cp	r24, r1
     c5a:	91 05       	cpc	r25, r1
     c5c:	a1 05       	cpc	r26, r1
     c5e:	b1 05       	cpc	r27, r1
     c60:	29 f0       	breq	.+10     	; 0xc6c <L_Exit_7>

00000c62 <L_LOOP_7>:
     c62:	81 50       	subi	r24, 0x01	; 1
     c64:	90 40       	sbci	r25, 0x00	; 0
     c66:	a0 40       	sbci	r26, 0x00	; 0
     c68:	b0 40       	sbci	r27, 0x00	; 0
     c6a:	d9 f7       	brne	.-10     	; 0xc62 <L_LOOP_7>

00000c6c <L_Exit_7>:
     c6c:	08 95       	ret

00000c6e <DS18X20_start_meas>:

/* start measurement (CONVERT_T) for all sensors if input id==NULL 
   or for single sensor. then id is the rom-code */
extern uint8_t DS18X20_start_meas( uint8_t id[])
{
	if( ! owi_device_command( DS18X20_CONVERT_T, id))
     c6e:	bc 01       	movw	r22, r24
     c70:	84 e4       	ldi	r24, 0x44	; 68
     c72:	0e 94 4d 08 	call	0x109a	; 0x109a <owi_device_command>
     c76:	81 11       	cpse	r24, r1
     c78:	08 c0       	rjmp	.+16     	; 0xc8a <DS18X20_start_meas+0x1c>
	{
		// wait for measurement cycle to complete
		delay_ms( DS18B20_TCONV_12BIT);
     c7a:	66 e4       	ldi	r22, 0x46	; 70
     c7c:	71 e4       	ldi	r23, 0x41	; 65
     c7e:	8f e0       	ldi	r24, 0x0F	; 15
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	0e 94 2a 06 	call	0xc54	; 0xc54 <delayloop32>
		return OWI_BUS_OK;
     c86:	80 e0       	ldi	r24, 0x00	; 0
     c88:	08 95       	ret
	}
	return OWI_BUS_ERROR;
     c8a:	8f ef       	ldi	r24, 0xFF	; 255
}
     c8c:	08 95       	ret

00000c8e <DS18X20_get_meas>:
/*************************************************************/
extern int DS18X20_get_meas( uint8_t id[])
{
     c8e:	df 92       	push	r13
     c90:	ef 92       	push	r14
     c92:	ff 92       	push	r15
     c94:	0f 93       	push	r16
     c96:	1f 93       	push	r17
     c98:	cf 93       	push	r28
     c9a:	df 93       	push	r29
     c9c:	cd b7       	in	r28, 0x3d	; 61
     c9e:	de b7       	in	r29, 0x3e	; 62
     ca0:	2a 97       	sbiw	r28, 0x0a	; 10
     ca2:	0f b6       	in	r0, 0x3f	; 63
     ca4:	f8 94       	cli
     ca6:	de bf       	out	0x3e, r29	; 62
     ca8:	0f be       	out	0x3f, r0	; 63
     caa:	cd bf       	out	0x3d, r28	; 61
	uint8_t i, sp[DS18X20_SP_SIZE];
	uint16_t meas;

	// make sure we have a device to check and the bus is working
	if( id == NULL || owi_device_command( DS18X20_READ, id)) return DS18X20_BAD_TEMP;
     cac:	00 97       	sbiw	r24, 0x00	; 0
     cae:	19 f4       	brne	.+6      	; 0xcb6 <DS18X20_get_meas+0x28>
     cb0:	8f e0       	ldi	r24, 0x0F	; 15
     cb2:	97 e2       	ldi	r25, 0x27	; 39
     cb4:	26 c0       	rjmp	.+76     	; 0xd02 <DS18X20_get_meas+0x74>
     cb6:	bc 01       	movw	r22, r24
     cb8:	8e eb       	ldi	r24, 0xBE	; 190
     cba:	0e 94 4d 08 	call	0x109a	; 0x109a <owi_device_command>
     cbe:	81 11       	cpse	r24, r1
     cc0:	f7 cf       	rjmp	.-18     	; 0xcb0 <DS18X20_get_meas+0x22>
     cc2:	8e 01       	movw	r16, r28
     cc4:	0f 5f       	subi	r16, 0xFF	; 255
     cc6:	1f 4f       	sbci	r17, 0xFF	; 255
     cc8:	7e 01       	movw	r14, r28
     cca:	8a e0       	ldi	r24, 0x0A	; 10
     ccc:	e8 0e       	add	r14, r24
     cce:	f1 1c       	adc	r15, r1
     cd0:	d0 2e       	mov	r13, r16
     cd2:	91 2f       	mov	r25, r17

	// get the scratchpad data
	for( i = 0 ; i < DS18X20_SP_SIZE; i++) sp[i] = owi_byte_io( 0xFF);
     cd4:	8f ef       	ldi	r24, 0xFF	; 255
     cd6:	9a 87       	std	Y+10, r25	; 0x0a
     cd8:	0e 94 25 08 	call	0x104a	; 0x104a <owi_byte_io>
     cdc:	f8 01       	movw	r30, r16
     cde:	81 93       	st	Z+, r24
     ce0:	8f 01       	movw	r16, r30
     ce2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ce4:	ee 15       	cp	r30, r14
     ce6:	ff 05       	cpc	r31, r15
     ce8:	a9 f7       	brne	.-22     	; 0xcd4 <DS18X20_get_meas+0x46>
	if( crc8( &sp[0], DS18X20_SP_SIZE)) return DS18X20_BAD_TEMP;
     cea:	69 e0       	ldi	r22, 0x09	; 9
     cec:	8d 2d       	mov	r24, r13
     cee:	0e 94 fe 05 	call	0xbfc	; 0xbfc <crc8>
     cf2:	81 11       	cpse	r24, r1
     cf4:	dd cf       	rjmp	.-70     	; 0xcb0 <DS18X20_get_meas+0x22>

	// got good data
	meas = sp[0] | (((uint16_t)sp[1]) << 8);
     cf6:	8a 81       	ldd	r24, Y+2	; 0x02
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	98 2f       	mov	r25, r24
     cfc:	88 27       	eor	r24, r24
     cfe:	29 81       	ldd	r18, Y+1	; 0x01
     d00:	82 2b       	or	r24, r18

	return meas;
}
     d02:	2a 96       	adiw	r28, 0x0a	; 10
     d04:	0f b6       	in	r0, 0x3f	; 63
     d06:	f8 94       	cli
     d08:	de bf       	out	0x3e, r29	; 62
     d0a:	0f be       	out	0x3f, r0	; 63
     d0c:	cd bf       	out	0x3d, r28	; 61
     d0e:	df 91       	pop	r29
     d10:	cf 91       	pop	r28
     d12:	1f 91       	pop	r17
     d14:	0f 91       	pop	r16
     d16:	ff 90       	pop	r15
     d18:	ef 90       	pop	r14
     d1a:	df 90       	pop	r13
     d1c:	08 95       	ret

00000d1e <DS18X20_get_temp>:
/**************************************************************/
// returns the temperature * 100 as an int
extern int DS18X20_get_temp( uint8_t id[])
{
     d1e:	bf 92       	push	r11
     d20:	cf 92       	push	r12
     d22:	df 92       	push	r13
     d24:	ef 92       	push	r14
     d26:	ff 92       	push	r15
     d28:	0f 93       	push	r16
     d2a:	1f 93       	push	r17
     d2c:	cf 93       	push	r28
     d2e:	df 93       	push	r29
     d30:	cd b7       	in	r28, 0x3d	; 61
     d32:	de b7       	in	r29, 0x3e	; 62
     d34:	62 97       	sbiw	r28, 0x12	; 18
     d36:	0f b6       	in	r0, 0x3f	; 63
     d38:	f8 94       	cli
     d3a:	de bf       	out	0x3e, r29	; 62
     d3c:	0f be       	out	0x3f, r0	; 63
     d3e:	cd bf       	out	0x3d, r28	; 61
     d40:	7c 01       	movw	r14, r24
	uint8_t sp[DS18X20_SP_SIZE];
	uint16_t meas;
	uint8_t i, subzero, cel;
	uint8_t need_rounding[] = { 1, 3, 4, 6, 9, 11, 12, 14 };
     d42:	88 e0       	ldi	r24, 0x08	; 8
     d44:	ea e1       	ldi	r30, 0x1A	; 26
     d46:	f1 e0       	ldi	r31, 0x01	; 1
     d48:	de 01       	movw	r26, r28
     d4a:	1a 96       	adiw	r26, 0x0a	; 10
     d4c:	01 90       	ld	r0, Z+
     d4e:	0d 92       	st	X+, r0
     d50:	8a 95       	dec	r24
     d52:	e1 f7       	brne	.-8      	; 0xd4c <DS18X20_get_temp+0x2e>

	// make sure we have a device to check and the bus is working
	if( id == NULL || owi_device_command( DS18X20_READ, id)) return DS18X20_BAD_TEMP;
     d54:	e1 14       	cp	r14, r1
     d56:	f1 04       	cpc	r15, r1
     d58:	19 f4       	brne	.+6      	; 0xd60 <DS18X20_get_temp+0x42>
     d5a:	8f e0       	ldi	r24, 0x0F	; 15
     d5c:	97 e2       	ldi	r25, 0x27	; 39
     d5e:	73 c0       	rjmp	.+230    	; 0xe46 <DS18X20_get_temp+0x128>
     d60:	b7 01       	movw	r22, r14
     d62:	8e eb       	ldi	r24, 0xBE	; 190
     d64:	0e 94 4d 08 	call	0x109a	; 0x109a <owi_device_command>
     d68:	81 11       	cpse	r24, r1
     d6a:	f7 cf       	rjmp	.-18     	; 0xd5a <DS18X20_get_temp+0x3c>
     d6c:	8e 01       	movw	r16, r28
     d6e:	0f 5f       	subi	r16, 0xFF	; 255
     d70:	1f 4f       	sbci	r17, 0xFF	; 255
     d72:	6e 01       	movw	r12, r28
     d74:	4a e0       	ldi	r20, 0x0A	; 10
     d76:	c4 0e       	add	r12, r20
     d78:	d1 1c       	adc	r13, r1
     d7a:	b0 2e       	mov	r11, r16
     d7c:	91 2f       	mov	r25, r17
	// get the scratchpad data
	for( i = 0 ; i < DS18X20_SP_SIZE; i++) sp[i] = owi_byte_io( 0xFF);
     d7e:	8f ef       	ldi	r24, 0xFF	; 255
     d80:	9a 8b       	std	Y+18, r25	; 0x12
     d82:	0e 94 25 08 	call	0x104a	; 0x104a <owi_byte_io>
     d86:	f8 01       	movw	r30, r16
     d88:	81 93       	st	Z+, r24
     d8a:	8f 01       	movw	r16, r30
     d8c:	9a 89       	ldd	r25, Y+18	; 0x12
     d8e:	ec 15       	cp	r30, r12
     d90:	fd 05       	cpc	r31, r13
     d92:	a9 f7       	brne	.-22     	; 0xd7e <DS18X20_get_temp+0x60>
	if( crc8( &sp[0], DS18X20_SP_SIZE)) return DS18X20_BAD_TEMP;
     d94:	69 e0       	ldi	r22, 0x09	; 9
     d96:	8b 2d       	mov	r24, r11
     d98:	0e 94 fe 05 	call	0xbfc	; 0xbfc <crc8>
     d9c:	81 11       	cpse	r24, r1
     d9e:	dd cf       	rjmp	.-70     	; 0xd5a <DS18X20_get_temp+0x3c>

	// got good data so start conversion
	meas = sp[0];  // LSB
     da0:	29 81       	ldd	r18, Y+1	; 0x01
	meas |= ((uint16_t)sp[1]) << 8; // MSB
     da2:	8a 81       	ldd	r24, Y+2	; 0x02
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	38 2b       	or	r19, r24

	// convert to 18S20 9bit temp to 12bit temperature 
	if( OWI_FAMILY( id[0]) == DS18S20_FAMILY_CODE)
     da8:	f7 01       	movw	r30, r14
     daa:	40 81       	ld	r20, Z
     dac:	4f 77       	andi	r20, 0x7F	; 127
     dae:	40 31       	cpi	r20, 0x10	; 16
     db0:	71 f4       	brne	.+28     	; 0xdce <DS18X20_get_temp+0xb0>
	{
		/* Extended measurements for DS18S20 contributed by Carsten Foss */
		meas &= (uint16_t) 0xfffe;	// Discard LSB , needed for later extended precicion calc
     db2:	c9 01       	movw	r24, r18
     db4:	8e 7f       	andi	r24, 0xFE	; 254
		meas <<= 3;					// Convert to 12-bit , now degrees are in 1/16 degrees units
     db6:	53 e0       	ldi	r21, 0x03	; 3
     db8:	88 0f       	add	r24, r24
     dba:	99 1f       	adc	r25, r25
     dbc:	5a 95       	dec	r21
     dbe:	e1 f7       	brne	.-8      	; 0xdb8 <DS18X20_get_temp+0x9a>
		meas += (16 - sp[6]) - 4;	// Add the compensation , and remember to subtract 0.25 degree (4/16)
     dc0:	5f 81       	ldd	r21, Y+7	; 0x07
     dc2:	2c e0       	ldi	r18, 0x0C	; 12
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	25 1b       	sub	r18, r21
     dc8:	31 09       	sbc	r19, r1
     dca:	28 0f       	add	r18, r24
     dcc:	39 1f       	adc	r19, r25
	}

	// check for negative 
	if( meas & 0x8000) 
     dce:	37 ff       	sbrs	r19, 7
     dd0:	05 c0       	rjmp	.+10     	; 0xddc <DS18X20_get_temp+0xbe>
	{
		subzero = 1;      // mark negative
		meas ^= 0xffff;  // convert to positive => (twos complement)++
		meas++;
     dd2:	31 95       	neg	r19
     dd4:	21 95       	neg	r18
     dd6:	31 09       	sbc	r19, r1
	}

	// check for negative 
	if( meas & 0x8000) 
	{
		subzero = 1;      // mark negative
     dd8:	a1 e0       	ldi	r26, 0x01	; 1
     dda:	01 c0       	rjmp	.+2      	; 0xdde <DS18X20_get_temp+0xc0>
		meas ^= 0xffff;  // convert to positive => (twos complement)++
		meas++;
	}
	else subzero = 0;
     ddc:	a0 e0       	ldi	r26, 0x00	; 0
	
	// clear undefined bits for B != 12bit
	if( OWI_FAMILY( id[0]) == DS18B20_FAMILY_CODE)
     dde:	48 32       	cpi	r20, 0x28	; 40
     de0:	71 f4       	brne	.+28     	; 0xdfe <DS18X20_get_temp+0xe0>
	{
		i = sp[DS18B20_CONF_REG];
     de2:	8d 81       	ldd	r24, Y+5	; 0x05
		if ( (i & DS18B20_12_BIT) == DS18B20_12_BIT ) ;	// both bits set
     de4:	98 2f       	mov	r25, r24
     de6:	90 76       	andi	r25, 0x60	; 96
     de8:	90 36       	cpi	r25, 0x60	; 96
     dea:	49 f0       	breq	.+18     	; 0xdfe <DS18X20_get_temp+0xe0>
		else if( (i & DS18B20_11_BIT) == DS18B20_11_BIT) // bit 6
     dec:	86 ff       	sbrs	r24, 6
     dee:	02 c0       	rjmp	.+4      	; 0xdf4 <DS18X20_get_temp+0xd6>
			meas &= ~(DS18B20_11_BIT_UNDF);
     df0:	2e 7f       	andi	r18, 0xFE	; 254
     df2:	05 c0       	rjmp	.+10     	; 0xdfe <DS18X20_get_temp+0xe0>
		else if( (i & DS18B20_10_BIT) == DS18B20_10_BIT) // bit 5
     df4:	85 ff       	sbrs	r24, 5
     df6:	02 c0       	rjmp	.+4      	; 0xdfc <DS18X20_get_temp+0xde>
			meas &= ~(DS18B20_10_BIT_UNDF);
     df8:	2c 7f       	andi	r18, 0xFC	; 252
     dfa:	01 c0       	rjmp	.+2      	; 0xdfe <DS18X20_get_temp+0xe0>
		else // neither bit 6 or 5
			meas &= ~(DS18B20_9_BIT_UNDF);
     dfc:	28 7f       	andi	r18, 0xF8	; 248
	}			
	
	cel = (uint8_t)(meas >> 4);	// save the integer degrees 
     dfe:	c9 01       	movw	r24, r18
     e00:	44 e0       	ldi	r20, 0x04	; 4
     e02:	96 95       	lsr	r25
     e04:	87 95       	ror	r24
     e06:	4a 95       	dec	r20
     e08:	e1 f7       	brne	.-8      	; 0xe02 <DS18X20_get_temp+0xe4>
	meas = (uint8_t)(meas & 0x000F);	// get the fractional part
     e0a:	2f 70       	andi	r18, 0x0F	; 15
     e0c:	33 27       	eor	r19, r19

	// need rounding?
	if( !subzero)
     e0e:	a1 11       	cpse	r26, r1
     e10:	0f c0       	rjmp	.+30     	; 0xe30 <DS18X20_get_temp+0x112>
     e12:	f6 01       	movw	r30, r12
     e14:	ae 01       	movw	r20, r28
     e16:	4e 5e       	subi	r20, 0xEE	; 238
     e18:	5f 4f       	sbci	r21, 0xFF	; 255
	{
		for( i = 0; i < sizeof(need_rounding); i++)
		{
			if( meas == need_rounding[i])
     e1a:	61 91       	ld	r22, Z+
     e1c:	70 e0       	ldi	r23, 0x00	; 0
     e1e:	26 17       	cp	r18, r22
     e20:	37 07       	cpc	r19, r23
     e22:	19 f4       	brne	.+6      	; 0xe2a <DS18X20_get_temp+0x10c>
			{
				meas++;
     e24:	2f 5f       	subi	r18, 0xFF	; 255
     e26:	3f 4f       	sbci	r19, 0xFF	; 255
				break;
     e28:	03 c0       	rjmp	.+6      	; 0xe30 <DS18X20_get_temp+0x112>
	meas = (uint8_t)(meas & 0x000F);	// get the fractional part

	// need rounding?
	if( !subzero)
	{
		for( i = 0; i < sizeof(need_rounding); i++)
     e2a:	e4 17       	cp	r30, r20
     e2c:	f5 07       	cpc	r31, r21
     e2e:	a9 f7       	brne	.-22     	; 0xe1a <DS18X20_get_temp+0xfc>
				meas++;
				break;
			}
		}
	}
	meas += cel * 10;
     e30:	fa e0       	ldi	r31, 0x0A	; 10
     e32:	8f 9f       	mul	r24, r31
     e34:	20 0d       	add	r18, r0
     e36:	31 1d       	adc	r19, r1
     e38:	11 24       	eor	r1, r1

	return ((subzero) ? -meas : meas);
     e3a:	aa 23       	and	r26, r26
     e3c:	19 f0       	breq	.+6      	; 0xe44 <DS18X20_get_temp+0x126>
     e3e:	31 95       	neg	r19
     e40:	21 95       	neg	r18
     e42:	31 09       	sbc	r19, r1
     e44:	c9 01       	movw	r24, r18
}
     e46:	62 96       	adiw	r28, 0x12	; 18
     e48:	0f b6       	in	r0, 0x3f	; 63
     e4a:	f8 94       	cli
     e4c:	de bf       	out	0x3e, r29	; 62
     e4e:	0f be       	out	0x3f, r0	; 63
     e50:	cd bf       	out	0x3d, r28	; 61
     e52:	df 91       	pop	r29
     e54:	cf 91       	pop	r28
     e56:	1f 91       	pop	r17
     e58:	0f 91       	pop	r16
     e5a:	ff 90       	pop	r15
     e5c:	ef 90       	pop	r14
     e5e:	df 90       	pop	r13
     e60:	cf 90       	pop	r12
     e62:	bf 90       	pop	r11
     e64:	08 95       	ret

00000e66 <toggle_e>:

#if LCD_IO_MODE
	/* toggle Enable Pin to initiate write */
	static void toggle_e( void)
	{
		lcd_e_high();
     e66:	2e 9a       	sbi	0x05, 6	; 5
		lcd_e_delay();
     e68:	00 c0       	rjmp	.+0      	; 0xe6a <toggle_e+0x4>
		lcd_e_low();
     e6a:	2e 98       	cbi	0x05, 6	; 5
     e6c:	08 95       	ret

00000e6e <lcd_write>:
				 0: write instruction
Returns:  none
*************************************************************************/
#if LCD_IO_MODE
	static void lcd_write( uint8_t data, uint8_t rs) 
	{
     e6e:	1f 93       	push	r17
     e70:	cf 93       	push	r28
     e72:	df 93       	push	r29
     e74:	1f 92       	push	r1
     e76:	cd b7       	in	r28, 0x3d	; 61
     e78:	de b7       	in	r29, 0x3e	; 62
		unsigned char dataBits ;


		if( rs)	/* write data		( RS=1, RW=0) */
     e7a:	66 23       	and	r22, r22
     e7c:	11 f0       	breq	.+4      	; 0xe82 <lcd_write+0x14>
		{
			lcd_rs_high();
     e7e:	2c 9a       	sbi	0x05, 4	; 5
     e80:	01 c0       	rjmp	.+2      	; 0xe84 <lcd_write+0x16>
		}
		else	/* write instruction ( RS=0, RW=0) */
		{
			lcd_rs_low();
     e82:	2c 98       	cbi	0x05, 4	; 5
		}
		lcd_rw_low();
     e84:	2d 98       	cbi	0x05, 5	; 5

		if( (&LCD_DATA0_PORT == &LCD_DATA1_PORT) && (&LCD_DATA1_PORT == &LCD_DATA2_PORT) && (&LCD_DATA2_PORT == &LCD_DATA3_PORT)
				&& (LCD_DATA0_PIN == 0) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3))
		{
			/* configure data pins as output */
			DDR( LCD_DATA0_PORT) |= 0x0F;
     e86:	94 b1       	in	r25, 0x04	; 4
     e88:	9f 60       	ori	r25, 0x0F	; 15
     e8a:	94 b9       	out	0x04, r25	; 4

			/* output high nibble first */
			dataBits = LCD_DATA0_PORT & 0xF0;
     e8c:	15 b1       	in	r17, 0x05	; 5
     e8e:	10 7f       	andi	r17, 0xF0	; 240
			LCD_DATA0_PORT = dataBits | ((data>>4) & 0x0F);
     e90:	98 2f       	mov	r25, r24
     e92:	92 95       	swap	r25
     e94:	9f 70       	andi	r25, 0x0F	; 15
     e96:	91 2b       	or	r25, r17
     e98:	95 b9       	out	0x05, r25	; 5
			lcd_e_toggle();
     e9a:	89 83       	std	Y+1, r24	; 0x01
     e9c:	0e 94 33 07 	call	0xe66	; 0xe66 <toggle_e>

			/* output low nibble */
			LCD_DATA0_PORT = dataBits | (data & 0x0F);
     ea0:	89 81       	ldd	r24, Y+1	; 0x01
     ea2:	8f 70       	andi	r24, 0x0F	; 15
     ea4:	81 2b       	or	r24, r17
     ea6:	85 b9       	out	0x05, r24	; 5
			lcd_e_toggle();
     ea8:	0e 94 33 07 	call	0xe66	; 0xe66 <toggle_e>

			/* all data pins high ( inactive) */
			LCD_DATA0_PORT = dataBits | 0x0F;
     eac:	1f 60       	ori	r17, 0x0F	; 15
     eae:	15 b9       	out	0x05, r17	; 5
			LCD_DATA0_PORT |= _BV( LCD_DATA0_PIN);
			LCD_DATA1_PORT |= _BV( LCD_DATA1_PIN);
			LCD_DATA2_PORT |= _BV( LCD_DATA2_PIN);
			LCD_DATA3_PORT |= _BV( LCD_DATA3_PIN);
		}
	}
     eb0:	0f 90       	pop	r0
     eb2:	df 91       	pop	r29
     eb4:	cf 91       	pop	r28
     eb6:	1f 91       	pop	r17
     eb8:	08 95       	ret

00000eba <lcd_read.constprop.0>:
	
	
	if( rs)
		lcd_rs_high();						/* RS=1: read data	  */
	else
		lcd_rs_low();						/* RS=0: read busy flag */
     eba:	2c 98       	cbi	0x05, 4	; 5
	lcd_rw_high();							/* RW=1  read mode	  */
     ebc:	2d 9a       	sbi	0x05, 5	; 5
	
	if( (&LCD_DATA0_PORT == &LCD_DATA1_PORT) && (&LCD_DATA1_PORT == &LCD_DATA2_PORT) && (&LCD_DATA2_PORT == &LCD_DATA3_PORT)
	  && (LCD_DATA0_PIN == 0) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3))
	{
		DDR( LCD_DATA0_PORT) &= 0xF0;		 /* configure data pins as input */
     ebe:	84 b1       	in	r24, 0x04	; 4
     ec0:	80 7f       	andi	r24, 0xF0	; 240
     ec2:	84 b9       	out	0x04, r24	; 4
		
		lcd_e_high();
     ec4:	2e 9a       	sbi	0x05, 6	; 5
		lcd_e_delay();		
     ec6:	00 c0       	rjmp	.+0      	; 0xec8 <lcd_read.constprop.0+0xe>
		data = PIN( LCD_DATA0_PORT) << 4;	 /* read high nibble first */
     ec8:	83 b1       	in	r24, 0x03	; 3
		lcd_e_low();
     eca:	2e 98       	cbi	0x05, 6	; 5
		
		lcd_e_delay();						/* Enable 500ns low		*/
     ecc:	00 c0       	rjmp	.+0      	; 0xece <lcd_read.constprop.0+0x14>
		
		lcd_e_high();
     ece:	2e 9a       	sbi	0x05, 6	; 5
		lcd_e_delay();
     ed0:	00 c0       	rjmp	.+0      	; 0xed2 <lcd_read.constprop.0+0x18>
		data |= PIN( LCD_DATA0_PORT) & 0x0F;	/* read low nibble		*/
     ed2:	93 b1       	in	r25, 0x03	; 3
     ed4:	9f 70       	andi	r25, 0x0F	; 15
	{
		DDR( LCD_DATA0_PORT) &= 0xF0;		 /* configure data pins as input */
		
		lcd_e_high();
		lcd_e_delay();		
		data = PIN( LCD_DATA0_PORT) << 4;	 /* read high nibble first */
     ed6:	82 95       	swap	r24
     ed8:	80 7f       	andi	r24, 0xF0	; 240
		lcd_e_delay();						/* Enable 500ns low		*/
		
		lcd_e_high();
		lcd_e_delay();
		data |= PIN( LCD_DATA0_PORT) & 0x0F;	/* read low nibble		*/
		lcd_e_low();
     eda:	2e 98       	cbi	0x05, 6	; 5
		if( PIN( LCD_DATA2_PORT) & _BV( LCD_DATA2_PIN)) data |= 0x04;
		if( PIN( LCD_DATA3_PORT) & _BV( LCD_DATA3_PIN)) data |= 0x08;		
		lcd_e_low();
	}
	return data;
}
     edc:	89 2b       	or	r24, r25
     ede:	08 95       	ret

00000ee0 <lcd_waitbusy>:

{
	register uint8_t c;
	
	/* wait until busy flag is cleared */
	while ( (c = lcd_read( 0)) & (1 << LCD_BUSY)) {}
     ee0:	0e 94 5d 07 	call	0xeba	; 0xeba <lcd_read.constprop.0>
     ee4:	87 fd       	sbrc	r24, 7
     ee6:	fc cf       	rjmp	.-8      	; 0xee0 <lcd_waitbusy>
static inline void _delayFourCycles( unsigned int __count)
{
	if( __count == 0)	
		__asm__ __volatile__( "rjmp 1f\n 1:");	// 2 cycles
	else
		__asm__ __volatile__( 
     ee8:	84 e0       	ldi	r24, 0x04	; 4
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	01 97       	sbiw	r24, 0x01	; 1
     eee:	f1 f7       	brne	.-4      	; 0xeec <lcd_waitbusy+0xc>
	
	/* the address counter is updated 4us after the busy flag is cleared */
	delay( 2);

	/* now read the address counter */
	return ( lcd_read( 0));  // return address counter
     ef0:	0c 94 5d 07 	jmp	0xeba	; 0xeba <lcd_read.constprop.0>

00000ef4 <lcd_command>:
Send LCD controller instruction command
Input:	instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command( uint8_t cmd)
{
     ef4:	cf 93       	push	r28
     ef6:	c8 2f       	mov	r28, r24
	lcd_waitbusy();
     ef8:	0e 94 70 07 	call	0xee0	; 0xee0 <lcd_waitbusy>
	lcd_write( cmd, 0);
     efc:	60 e0       	ldi	r22, 0x00	; 0
     efe:	8c 2f       	mov	r24, r28
}
     f00:	cf 91       	pop	r28
Returns: none
*************************************************************************/
void lcd_command( uint8_t cmd)
{
	lcd_waitbusy();
	lcd_write( cmd, 0);
     f02:	0c 94 37 07 	jmp	0xe6e	; 0xe6e <lcd_write>

00000f06 <lcd_data>:
Send data byte to LCD controller 
Input:	data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data( uint8_t data)
{
     f06:	cf 93       	push	r28
     f08:	c8 2f       	mov	r28, r24
	lcd_waitbusy();
     f0a:	0e 94 70 07 	call	0xee0	; 0xee0 <lcd_waitbusy>
	lcd_write( data, 1);
     f0e:	61 e0       	ldi	r22, 0x01	; 1
     f10:	8c 2f       	mov	r24, r28
}
     f12:	cf 91       	pop	r28
Returns: none
*************************************************************************/
void lcd_data( uint8_t data)
{
	lcd_waitbusy();
	lcd_write( data, 1);
     f14:	0c 94 37 07 	jmp	0xe6e	; 0xe6e <lcd_write>

00000f18 <lcd_gotoxy>:
		lcd_command( (1 << LCD_DDRAM) + LCD_START_LINE1 + x);
	else
		lcd_command( (1 << LCD_DDRAM) + LCD_START_LINE2 + x);
#endif
#if LCD_LINES == 4
	if( y == 0)
     f18:	61 11       	cpse	r22, r1
     f1a:	02 c0       	rjmp	.+4      	; 0xf20 <lcd_gotoxy+0x8>
		lcd_command( (1 << LCD_DDRAM) + LCD_START_LINE1 + x);
     f1c:	80 58       	subi	r24, 0x80	; 128
     f1e:	09 c0       	rjmp	.+18     	; 0xf32 <lcd_gotoxy+0x1a>
	else if( y == 1)
     f20:	61 30       	cpi	r22, 0x01	; 1
     f22:	11 f4       	brne	.+4      	; 0xf28 <lcd_gotoxy+0x10>
		lcd_command( (1 << LCD_DDRAM) + LCD_START_LINE2 + x);
     f24:	80 54       	subi	r24, 0x40	; 64
     f26:	05 c0       	rjmp	.+10     	; 0xf32 <lcd_gotoxy+0x1a>
	else if( y == 2)
     f28:	62 30       	cpi	r22, 0x02	; 2
     f2a:	11 f4       	brne	.+4      	; 0xf30 <lcd_gotoxy+0x18>
		lcd_command( (1 << LCD_DDRAM) + LCD_START_LINE3 + x);
     f2c:	8c 56       	subi	r24, 0x6C	; 108
     f2e:	01 c0       	rjmp	.+2      	; 0xf32 <lcd_gotoxy+0x1a>
	else /* y == 3 */
		lcd_command( (1 << LCD_DDRAM) + LCD_START_LINE4 + x);
     f30:	8c 52       	subi	r24, 0x2C	; 44
     f32:	0c 94 7a 07 	jmp	0xef4	; 0xef4 <lcd_command>

00000f36 <lcd_getxy>:

/*************************************************************************
*************************************************************************/
int lcd_getxy( void)
{
	return lcd_waitbusy();
     f36:	0e 94 70 07 	call	0xee0	; 0xee0 <lcd_waitbusy>
}
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	08 95       	ret

00000f3e <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr( void)
{
	lcd_command(1 << LCD_CLR);
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	0c 94 7a 07 	jmp	0xef4	; 0xef4 <lcd_command>

00000f44 <lcd_home>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home( void)
{
	lcd_command(1 << LCD_HOME);
     f44:	82 e0       	ldi	r24, 0x02	; 2
     f46:	0c 94 7a 07 	jmp	0xef4	; 0xef4 <lcd_command>

00000f4a <lcd_putc>:
Display character at current cursor position 
Input:	character to be displayed										
Returns:  none
*************************************************************************/
void lcd_putc( char c)
{
     f4a:	cf 93       	push	r28
     f4c:	c8 2f       	mov	r28, r24
	uint8_t pos;


	pos = lcd_waitbusy();	// read busy-flag and address counter
     f4e:	0e 94 70 07 	call	0xee0	; 0xee0 <lcd_waitbusy>
     f52:	98 2f       	mov	r25, r24
	if( c == '\n')
     f54:	ca 30       	cpi	r28, 0x0A	; 10
     f56:	a1 f4       	brne	.+40     	; 0xf80 <lcd_putc+0x36>
	else if( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE4))
		addressCounter = LCD_START_LINE4;
	else 
		addressCounter = LCD_START_LINE1;
#else
	if( pos < LCD_START_LINE3)
     f58:	84 31       	cpi	r24, 0x14	; 20
     f5a:	48 f0       	brcs	.+18     	; 0xf6e <lcd_putc+0x24>
		addressCounter = LCD_START_LINE2;
	else if( (pos >= LCD_START_LINE2) && (pos < LCD_START_LINE4))
     f5c:	80 ec       	ldi	r24, 0xC0	; 192
     f5e:	89 0f       	add	r24, r25
     f60:	84 31       	cpi	r24, 0x14	; 20
     f62:	38 f0       	brcs	.+14     	; 0xf72 <lcd_putc+0x28>
		addressCounter = LCD_START_LINE3;
	else if( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE2))
     f64:	94 51       	subi	r25, 0x14	; 20
     f66:	9c 32       	cpi	r25, 0x2C	; 44
     f68:	30 f4       	brcc	.+12     	; 0xf76 <lcd_putc+0x2c>
		addressCounter = LCD_START_LINE4;
     f6a:	84 e5       	ldi	r24, 0x54	; 84
     f6c:	05 c0       	rjmp	.+10     	; 0xf78 <lcd_putc+0x2e>
		addressCounter = LCD_START_LINE4;
	else 
		addressCounter = LCD_START_LINE1;
#else
	if( pos < LCD_START_LINE3)
		addressCounter = LCD_START_LINE2;
     f6e:	80 e4       	ldi	r24, 0x40	; 64
     f70:	03 c0       	rjmp	.+6      	; 0xf78 <lcd_putc+0x2e>
	else if( (pos >= LCD_START_LINE2) && (pos < LCD_START_LINE4))
		addressCounter = LCD_START_LINE3;
     f72:	84 e1       	ldi	r24, 0x14	; 20
     f74:	01 c0       	rjmp	.+2      	; 0xf78 <lcd_putc+0x2e>
	else if( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE2))
		addressCounter = LCD_START_LINE4;
	else 
		addressCounter = LCD_START_LINE1;
     f76:	80 e0       	ldi	r24, 0x00	; 0
#endif
#endif
	lcd_command( (1 << LCD_DDRAM) + addressCounter);
     f78:	80 58       	subi	r24, 0x80	; 128
		lcd_waitbusy();
#endif
		lcd_write( c, 1);
	}

}/* lcd_putc */
     f7a:	cf 91       	pop	r28
		addressCounter = LCD_START_LINE4;
	else 
		addressCounter = LCD_START_LINE1;
#endif
#endif
	lcd_command( (1 << LCD_DDRAM) + addressCounter);
     f7c:	0c 94 7a 07 	jmp	0xef4	; 0xef4 <lcd_command>
			lcd_write( (1 << LCD_DDRAM) + LCD_START_LINE1, 0);
		}
#endif
		lcd_waitbusy();
#endif
		lcd_write( c, 1);
     f80:	61 e0       	ldi	r22, 0x01	; 1
     f82:	8c 2f       	mov	r24, r28
	}

}/* lcd_putc */
     f84:	cf 91       	pop	r28
			lcd_write( (1 << LCD_DDRAM) + LCD_START_LINE1, 0);
		}
#endif
		lcd_waitbusy();
#endif
		lcd_write( c, 1);
     f86:	0c 94 37 07 	jmp	0xe6e	; 0xe6e <lcd_write>

00000f8a <lcd_puts>:
Input:	string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts( const char *s)
/* print string on lcd ( no auto linefeed) */
{
     f8a:	cf 93       	push	r28
     f8c:	df 93       	push	r29
     f8e:	ec 01       	movw	r28, r24
	register char c;

	while ( (c = *s++))
     f90:	89 91       	ld	r24, Y+
     f92:	88 23       	and	r24, r24
     f94:	19 f0       	breq	.+6      	; 0xf9c <lcd_puts+0x12>
	{
		lcd_putc( c);
     f96:	0e 94 a5 07 	call	0xf4a	; 0xf4a <lcd_putc>
     f9a:	fa cf       	rjmp	.-12     	; 0xf90 <lcd_puts+0x6>
	}

}/* lcd_puts */
     f9c:	df 91       	pop	r29
     f9e:	cf 91       	pop	r28
     fa0:	08 95       	ret

00000fa2 <lcd_puts_p>:
Input:	 string from program memory be be displayed										
Returns:	none
*************************************************************************/
void lcd_puts_p( const char *progmem_s)
/* print string from program memory on lcd ( no auto linefeed) */
{
     fa2:	cf 93       	push	r28
     fa4:	df 93       	push	r29
     fa6:	fc 01       	movw	r30, r24
	register char c;

	while ( ( c = pgm_read_byte( progmem_s++)))
     fa8:	84 91       	lpm	r24, Z
     faa:	ef 01       	movw	r28, r30
     fac:	21 96       	adiw	r28, 0x01	; 1
     fae:	88 23       	and	r24, r24
     fb0:	21 f0       	breq	.+8      	; 0xfba <lcd_puts_p+0x18>
	{
		lcd_putc( c);
     fb2:	0e 94 a5 07 	call	0xf4a	; 0xf4a <lcd_putc>
     fb6:	fe 01       	movw	r30, r28
     fb8:	f7 cf       	rjmp	.-18     	; 0xfa8 <lcd_puts_p+0x6>
	}

}/* lcd_puts_p */
     fba:	df 91       	pop	r29
     fbc:	cf 91       	pop	r28
     fbe:	08 95       	ret

00000fc0 <lcd_puthex_nibble>:
for his UART library.  Adapted for the LCD lib by Tom Blough
Don't blame P. Fleury if it doesn't work ;-)
**************************************************************************/
void lcd_puthex_nibble(const unsigned char b)
{
    unsigned char  c = b & 0x0f;
     fc0:	8f 70       	andi	r24, 0x0F	; 15
    if (c>9) c += 'A'-10;
     fc2:	8a 30       	cpi	r24, 0x0A	; 10
     fc4:	10 f0       	brcs	.+4      	; 0xfca <lcd_puthex_nibble+0xa>
     fc6:	89 5c       	subi	r24, 0xC9	; 201
     fc8:	01 c0       	rjmp	.+2      	; 0xfcc <lcd_puthex_nibble+0xc>
    else c += '0';
     fca:	80 5d       	subi	r24, 0xD0	; 208
    lcd_putc(c);
     fcc:	0c 94 a5 07 	jmp	0xf4a	; 0xf4a <lcd_putc>

00000fd0 <lcd_puthex_byte>:
This functions was created by Martin Thomas <eversmith@heizung-thomas.de>
for his UART library.  Adapted for the LCD lib by Tom Blough
Don't blame P. Fleury if it doesn't work ;-)
**************************************************************************/
void lcd_puthex_byte(const unsigned char  b)
{
     fd0:	cf 93       	push	r28
     fd2:	c8 2f       	mov	r28, r24
    lcd_puthex_nibble(b>>4);
     fd4:	82 95       	swap	r24
     fd6:	8f 70       	andi	r24, 0x0F	; 15
     fd8:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <lcd_puthex_nibble>
    lcd_puthex_nibble(b);
     fdc:	8c 2f       	mov	r24, r28
} /* lcd_puthex_byte */
     fde:	cf 91       	pop	r28
Don't blame P. Fleury if it doesn't work ;-)
**************************************************************************/
void lcd_puthex_byte(const unsigned char  b)
{
    lcd_puthex_nibble(b>>4);
    lcd_puthex_nibble(b);
     fe0:	0c 94 e0 07 	jmp	0xfc0	; 0xfc0 <lcd_puthex_nibble>

00000fe4 <lcd_init>:
					LCD_DISP_ON_CURSOR	  display on, cursor on
					LCD_DISP_CURSOR_BLINK	display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init( uint8_t dispAttr)
{
     fe4:	cf 93       	push	r28
     fe6:	c8 2f       	mov	r28, r24
	  && (&LCD_RS_PORT == &LCD_DATA0_PORT) && (&LCD_RW_PORT == &LCD_DATA0_PORT) && (&LCD_E_PORT == &LCD_DATA0_PORT)
	  && (LCD_DATA0_PIN == 0) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) 
	  && (LCD_RS_PIN == 4) && (LCD_RW_PIN == 5) && (LCD_E_PIN == 6))
	{
		/* configure all port bits as output ( all LCD lines on same port) */
		DDR( LCD_DATA0_PORT) |= 0x7F;
     fe8:	94 b1       	in	r25, 0x04	; 4
     fea:	9f 67       	ori	r25, 0x7F	; 127
     fec:	94 b9       	out	0x04, r25	; 4
static inline void _delayFourCycles( unsigned int __count)
{
	if( __count == 0)	
		__asm__ __volatile__( "rjmp 1f\n 1:");	// 2 cycles
	else
		__asm__ __volatile__( 
     fee:	e0 e0       	ldi	r30, 0x00	; 0
     ff0:	fd e7       	ldi	r31, 0x7D	; 125
     ff2:	31 97       	sbiw	r30, 0x01	; 1
     ff4:	f1 f7       	brne	.-4      	; 0xff2 <lcd_init+0xe>
		DDR( LCD_DATA3_PORT) |= _BV( LCD_DATA3_PIN);
	}
	delay(16000);		/* wait 16ms or more after power-on		*/
	
	/* initial write to lcd is 8bit */
	LCD_DATA1_PORT |= _BV( LCD_DATA1_PIN);  // _BV( LCD_FUNCTION)>>4;
     ff6:	29 9a       	sbi	0x05, 1	; 5
	LCD_DATA0_PORT |= _BV( LCD_DATA0_PIN);  // _BV( LCD_FUNCTION_8BIT)>>4;
     ff8:	28 9a       	sbi	0x05, 0	; 5
	lcd_e_toggle();
     ffa:	0e 94 33 07 	call	0xe66	; 0xe66 <toggle_e>
static inline void _delayFourCycles( unsigned int __count)
{
	if( __count == 0)	
		__asm__ __volatile__( "rjmp 1f\n 1:");	// 2 cycles
	else
		__asm__ __volatile__( 
     ffe:	e0 e0       	ldi	r30, 0x00	; 0
    1000:	f7 e2       	ldi	r31, 0x27	; 39
    1002:	31 97       	sbiw	r30, 0x01	; 1
    1004:	f1 f7       	brne	.-4      	; 0x1002 <lcd_init+0x1e>
	LCD_DATA0_PORT |= _BV( LCD_DATA0_PIN);  // _BV( LCD_FUNCTION_8BIT)>>4;
	lcd_e_toggle();
	delay( 4992);		 /* delay, busy flag can't be checked here */
	
	/* repeat last command */ 
	lcd_e_toggle();	  
    1006:	0e 94 33 07 	call	0xe66	; 0xe66 <toggle_e>
static inline void _delayFourCycles( unsigned int __count)
{
	if( __count == 0)	
		__asm__ __volatile__( "rjmp 1f\n 1:");	// 2 cycles
	else
		__asm__ __volatile__( 
    100a:	e0 e8       	ldi	r30, 0x80	; 128
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	31 97       	sbiw	r30, 0x01	; 1
    1010:	f1 f7       	brne	.-4      	; 0x100e <lcd_init+0x2a>
	/* repeat last command */ 
	lcd_e_toggle();	  
	delay( 64);			/* delay, busy flag can't be checked here */
	
	/* repeat last command a third time */
	lcd_e_toggle();	  
    1012:	0e 94 33 07 	call	0xe66	; 0xe66 <toggle_e>
static inline void _delayFourCycles( unsigned int __count)
{
	if( __count == 0)	
		__asm__ __volatile__( "rjmp 1f\n 1:");	// 2 cycles
	else
		__asm__ __volatile__( 
    1016:	e0 e8       	ldi	r30, 0x80	; 128
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	31 97       	sbiw	r30, 0x01	; 1
    101c:	f1 f7       	brne	.-4      	; 0x101a <lcd_init+0x36>
	/* repeat last command a third time */
	lcd_e_toggle();	  
	delay( 64);			/* delay, busy flag can't be checked here */

	/* now configure for 4bit mode */
	LCD_DATA0_PORT &= ~_BV( LCD_DATA0_PIN);	// LCD_FUNCTION_4BIT_1LINE>>4
    101e:	28 98       	cbi	0x05, 0	; 5
	lcd_e_toggle();
    1020:	0e 94 33 07 	call	0xe66	; 0xe66 <toggle_e>
static inline void _delayFourCycles( unsigned int __count)
{
	if( __count == 0)	
		__asm__ __volatile__( "rjmp 1f\n 1:");	// 2 cycles
	else
		__asm__ __volatile__( 
    1024:	e0 e8       	ldi	r30, 0x80	; 128
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	31 97       	sbiw	r30, 0x01	; 1
    102a:	f1 f7       	brne	.-4      	; 0x1028 <lcd_init+0x44>
	/* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command( KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command( KS0073_4LINES_MODE);
	lcd_command( KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
	lcd_command( LCD_FUNCTION_DEFAULT);	  /* function set: display lines  */
    102c:	88 e2       	ldi	r24, 0x28	; 40
    102e:	0e 94 7a 07 	call	0xef4	; 0xef4 <lcd_command>
#endif
	lcd_command( LCD_DISP_OFF);			  /* display off				  */
    1032:	88 e0       	ldi	r24, 0x08	; 8
    1034:	0e 94 7a 07 	call	0xef4	; 0xef4 <lcd_command>
	lcd_clrscr();							/* display clear				*/ 
    1038:	0e 94 9f 07 	call	0xf3e	; 0xf3e <lcd_clrscr>
	lcd_command( LCD_MODE_DEFAULT);		  /* set entry mode				*/
    103c:	86 e0       	ldi	r24, 0x06	; 6
    103e:	0e 94 7a 07 	call	0xef4	; 0xef4 <lcd_command>
	lcd_command( dispAttr);				  /* display/cursor control		*/
    1042:	8c 2f       	mov	r24, r28

}/* lcd_init */
    1044:	cf 91       	pop	r28
	lcd_command( LCD_FUNCTION_DEFAULT);	  /* function set: display lines  */
#endif
	lcd_command( LCD_DISP_OFF);			  /* display off				  */
	lcd_clrscr();							/* display clear				*/ 
	lcd_command( LCD_MODE_DEFAULT);		  /* set entry mode				*/
	lcd_command( dispAttr);				  /* display/cursor control		*/
    1046:	0c 94 7a 07 	jmp	0xef4	; 0xef4 <lcd_command>

0000104a <owi_byte_io>:
/* read or write a full byte of data to the 1-Wire bus
 * note that owi_byte_io( 0xff) is the same as owi_byte_rd()
 * and owi_byte_io( data) is the same as owi_byte_wr( data)
 */
extern uint8_t owi_byte_io( uint8_t data)
{
    104a:	ef 92       	push	r14
    104c:	ff 92       	push	r15
    104e:	0f 93       	push	r16
    1050:	1f 93       	push	r17
    1052:	cf 93       	push	r28
    1054:	df 93       	push	r29
    1056:	e8 2e       	mov	r14, r24
    1058:	c0 e0       	ldi	r28, 0x00	; 0
    105a:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t i, result = 0;
    105c:	f1 2c       	mov	r15, r1

	// write the data, and add it to the result
	for( i = 0; i < 8; i++)
		result |= (owi_bit_io( data & (1 << i)) << i);
    105e:	01 e0       	ldi	r16, 0x01	; 1
    1060:	10 e0       	ldi	r17, 0x00	; 0
    1062:	c8 01       	movw	r24, r16
    1064:	0c 2e       	mov	r0, r28
    1066:	01 c0       	rjmp	.+2      	; 0x106a <owi_byte_io+0x20>
    1068:	88 0f       	add	r24, r24
    106a:	0a 94       	dec	r0
    106c:	ea f7       	brpl	.-6      	; 0x1068 <owi_byte_io+0x1e>
    106e:	8e 21       	and	r24, r14
    1070:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <owi_bit_io>
    1074:	28 2f       	mov	r18, r24
    1076:	0c 2e       	mov	r0, r28
    1078:	01 c0       	rjmp	.+2      	; 0x107c <owi_byte_io+0x32>
    107a:	22 0f       	add	r18, r18
    107c:	0a 94       	dec	r0
    107e:	ea f7       	brpl	.-6      	; 0x107a <owi_byte_io+0x30>
    1080:	f2 2a       	or	r15, r18
    1082:	21 96       	adiw	r28, 0x01	; 1
extern uint8_t owi_byte_io( uint8_t data)
{
	uint8_t i, result = 0;

	// write the data, and add it to the result
	for( i = 0; i < 8; i++)
    1084:	c8 30       	cpi	r28, 0x08	; 8
    1086:	d1 05       	cpc	r29, r1
    1088:	61 f7       	brne	.-40     	; 0x1062 <owi_byte_io+0x18>
		result |= (owi_bit_io( data & (1 << i)) << i);

	return result;
}
    108a:	8f 2d       	mov	r24, r15
    108c:	df 91       	pop	r29
    108e:	cf 91       	pop	r28
    1090:	1f 91       	pop	r17
    1092:	0f 91       	pop	r16
    1094:	ff 90       	pop	r15
    1096:	ef 90       	pop	r14
    1098:	08 95       	ret

0000109a <owi_device_command>:
 * if id contains the rom code of one of the devices on the bus, that device
 * will be selected and the command sent to the single device.  if id is
 * null, the command will be sent to all devices on the 1-wire bus
 */
extern uint8_t owi_device_command( uint8_t command, uint8_t *id)
{
    109a:	ff 92       	push	r15
    109c:	0f 93       	push	r16
    109e:	1f 93       	push	r17
    10a0:	cf 93       	push	r28
    10a2:	df 93       	push	r29
    10a4:	f8 2e       	mov	r15, r24
    10a6:	eb 01       	movw	r28, r22
	uint8_t i;

	if( owi_reset())
    10a8:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <owi_reset>
    10ac:	88 23       	and	r24, r24
    10ae:	b9 f0       	breq	.+46     	; 0x10de <owi_device_command+0x44>
	{
		if( id)
    10b0:	20 97       	sbiw	r28, 0x00	; 0
    10b2:	69 f0       	breq	.+26     	; 0x10ce <owi_device_command+0x34>
		{
			owi_byte_io( OWI_MATCH_ROM); // to a single device
    10b4:	85 e5       	ldi	r24, 0x55	; 85
    10b6:	0e 94 25 08 	call	0x104a	; 0x104a <owi_byte_io>
    10ba:	8e 01       	movw	r16, r28
    10bc:	08 5f       	subi	r16, 0xF8	; 248
    10be:	1f 4f       	sbci	r17, 0xFF	; 255
			i = OWI_ROMCODE_SIZE;
			do
			{
				owi_byte_io( *id);
    10c0:	89 91       	ld	r24, Y+
    10c2:	0e 94 25 08 	call	0x104a	; 0x104a <owi_byte_io>
				id++;
			} while( --i);
    10c6:	c0 17       	cp	r28, r16
    10c8:	d1 07       	cpc	r29, r17
    10ca:	d1 f7       	brne	.-12     	; 0x10c0 <owi_device_command+0x26>
    10cc:	03 c0       	rjmp	.+6      	; 0x10d4 <owi_device_command+0x3a>
		} else
		{
			owi_byte_io( OWI_SKIP_ROM); // to all devices
    10ce:	8c ec       	ldi	r24, 0xCC	; 204
    10d0:	0e 94 25 08 	call	0x104a	; 0x104a <owi_byte_io>
		}
		owi_byte_io( command);	// send the command
    10d4:	8f 2d       	mov	r24, r15
    10d6:	0e 94 25 08 	call	0x104a	; 0x104a <owi_byte_io>

		return OWI_BUS_OK;
    10da:	80 e0       	ldi	r24, 0x00	; 0
    10dc:	01 c0       	rjmp	.+2      	; 0x10e0 <owi_device_command+0x46>
	}
	return OWI_BUS_ERROR;
    10de:	8f ef       	ldi	r24, 0xFF	; 255
}
    10e0:	df 91       	pop	r29
    10e2:	cf 91       	pop	r28
    10e4:	1f 91       	pop	r17
    10e6:	0f 91       	pop	r16
    10e8:	ff 90       	pop	r15
    10ea:	08 95       	ret

000010ec <owi_search>:
 *         discovered identifier will be placed.
 *
 *   cmd   Either SearchROM (0xF0) or AlarmSearch (0xEC)
 */
extern uint8_t owi_search( uint8_t diff, uint8_t *id, uint8_t cmd)
{
    10ec:	af 92       	push	r10
    10ee:	bf 92       	push	r11
    10f0:	df 92       	push	r13
    10f2:	ef 92       	push	r14
    10f4:	ff 92       	push	r15
    10f6:	0f 93       	push	r16
    10f8:	1f 93       	push	r17
    10fa:	cf 93       	push	r28
    10fc:	df 93       	push	r29
    10fe:	1f 92       	push	r1
    1100:	cd b7       	in	r28, 0x3d	; 61
    1102:	de b7       	in	r29, 0x3e	; 62
    1104:	e8 2e       	mov	r14, r24
    1106:	5b 01       	movw	r10, r22
	uint8_t i, j, next_diff;
	uint8_t b;

	if( ! owi_reset())
    1108:	49 83       	std	Y+1, r20	; 0x01
    110a:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <owi_reset>
    110e:	49 81       	ldd	r20, Y+1	; 0x01
    1110:	88 23       	and	r24, r24
    1112:	a9 f1       	breq	.+106    	; 0x117e <owi_search+0x92>
		return OWI_PRESENCE_ERROR; // error, no device found

	owi_byte_io( cmd); // ROM search command
    1114:	84 2f       	mov	r24, r20
    1116:	0e 94 25 08 	call	0x104a	; 0x104a <owi_byte_io>
	next_diff = OWI_LAST_DEVICE; // unchanged on last device
    111a:	f1 2c       	mov	r15, r1

	i = OWI_ROMCODE_SIZE * 8; // 8 bytes
    111c:	10 e4       	ldi	r17, 0x40	; 64
    111e:	88 ef       	ldi	r24, 0xF8	; 248
    1120:	d8 2e       	mov	r13, r24
    1122:	d1 0e       	add	r13, r17
	do
	{
		j = 8; // 8 bits
		do
		{
			b = owi_bit_io( 1); // read bit
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <owi_bit_io>
    112a:	08 2f       	mov	r16, r24
			if( owi_bit_io( 1) )
    112c:	81 e0       	ldi	r24, 0x01	; 1
    112e:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <owi_bit_io>
    1132:	88 23       	and	r24, r24
    1134:	19 f0       	breq	.+6      	; 0x113c <owi_search+0x50>
			{ // read complement bit
				if( b) // 11
    1136:	00 23       	and	r16, r16
    1138:	69 f0       	breq	.+26     	; 0x1154 <owi_search+0x68>
    113a:	23 c0       	rjmp	.+70     	; 0x1182 <owi_search+0x96>
					return OWI_DATA_ERR; // data error
			} else
			{
				if( !b)
    113c:	01 11       	cpse	r16, r1
    113e:	0a c0       	rjmp	.+20     	; 0x1154 <owi_search+0x68>
				{ // 00 = 2 devices
					if( diff > i || (( *id & 1) && diff != i))
    1140:	1e 15       	cp	r17, r14
    1142:	30 f0       	brcs	.+12     	; 0x1150 <owi_search+0x64>
    1144:	f5 01       	movw	r30, r10
    1146:	80 81       	ld	r24, Z
    1148:	80 ff       	sbrs	r24, 0
    114a:	04 c0       	rjmp	.+8      	; 0x1154 <owi_search+0x68>
    114c:	e1 16       	cp	r14, r17
    114e:	11 f0       	breq	.+4      	; 0x1154 <owi_search+0x68>
    1150:	f1 2e       	mov	r15, r17
					{
						b = 1; // now 1
    1152:	01 e0       	ldi	r16, 0x01	; 1
						next_diff = i; // next pass 0
					}
				}
			}
			owi_bit_io( b); // write bit
    1154:	80 2f       	mov	r24, r16
    1156:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <owi_bit_io>
			*id >>= 1;
    115a:	f5 01       	movw	r30, r10
    115c:	90 81       	ld	r25, Z
    115e:	96 95       	lsr	r25
			if( b)
    1160:	00 23       	and	r16, r16
    1162:	11 f0       	breq	.+4      	; 0x1168 <owi_search+0x7c>
				*id |= 0x80; // store bit
    1164:	90 68       	ori	r25, 0x80	; 128
    1166:	f5 01       	movw	r30, r10
    1168:	90 83       	st	Z, r25

			i--;
    116a:	11 50       	subi	r17, 0x01	; 1

		} while( --j);
    116c:	1d 11       	cpse	r17, r13
    116e:	da cf       	rjmp	.-76     	; 0x1124 <owi_search+0x38>

		id++; // next byte
    1170:	ff ef       	ldi	r31, 0xFF	; 255
    1172:	af 1a       	sub	r10, r31
    1174:	bf 0a       	sbc	r11, r31

	} while( i);
    1176:	11 11       	cpse	r17, r1
    1178:	d2 cf       	rjmp	.-92     	; 0x111e <owi_search+0x32>
    117a:	8f 2d       	mov	r24, r15
    117c:	03 c0       	rjmp	.+6      	; 0x1184 <owi_search+0x98>
{
	uint8_t i, j, next_diff;
	uint8_t b;

	if( ! owi_reset())
		return OWI_PRESENCE_ERROR; // error, no device found
    117e:	8e ef       	ldi	r24, 0xFE	; 254
    1180:	01 c0       	rjmp	.+2      	; 0x1184 <owi_search+0x98>
		{
			b = owi_bit_io( 1); // read bit
			if( owi_bit_io( 1) )
			{ // read complement bit
				if( b) // 11
					return OWI_DATA_ERR; // data error
    1182:	8d ef       	ldi	r24, 0xFD	; 253
		id++; // next byte

	} while( i);

	return next_diff; // to continue search
}
    1184:	0f 90       	pop	r0
    1186:	df 91       	pop	r29
    1188:	cf 91       	pop	r28
    118a:	1f 91       	pop	r17
    118c:	0f 91       	pop	r16
    118e:	ff 90       	pop	r15
    1190:	ef 90       	pop	r14
    1192:	df 90       	pop	r13
    1194:	bf 90       	pop	r11
    1196:	af 90       	pop	r10
    1198:	08 95       	ret

0000119a <delayloop16>:
 * 4 cpu cycles per loop + 1 cycles(?) overhead 
 * when a constant is passed.
 */
static inline void delayloop16(uint16_t count)
{
	asm volatile (  "cp  %A0,__zero_reg__ \n\t"  \
    119a:	81 15       	cp	r24, r1
    119c:	91 05       	cpc	r25, r1
    119e:	11 f0       	breq	.+4      	; 0x11a4 <L_Exit_7>

000011a0 <L_LOOP_7>:
    11a0:	01 97       	sbiw	r24, 0x01	; 1
    11a2:	f1 f7       	brne	.-4      	; 0x11a0 <L_LOOP_7>

000011a4 <L_Exit_7>:
    11a4:	08 95       	ret

000011a6 <owi_init>:
/*  This function initializes the 1-Wire bus(es) by releasing it and
 *  waiting until any presence sinals are finished.
 */
extern void owi_init()
{
    OWI_RELEASE_BUS();
    11a6:	56 98       	cbi	0x0a, 6	; 10
    11a8:	5e 98       	cbi	0x0b, 6	; 11
    // The first rising edge can be interpreted by a slave as the end of a
    // Reset pulse. Delay for the required reset recovery time (H) to be 
    // sure that the real reset is interpreted correctly.
    delay_us( OWI_DELAY_H);
    11aa:	8f eb       	ldi	r24, 0xBF	; 191
    11ac:	93 e0       	ldi	r25, 0x03	; 3
    11ae:	0c 94 cd 08 	jmp	0x119a	; 0x119a <delayloop16>

000011b2 <owi_reset>:
 *
 *  returns OWI_BUS_OK if presence signal was detected or OWI_BUS_ERROR
 *  if no devices present or bus error exists
 */
extern uint8_t owi_reset()
{
    11b2:	cf 93       	push	r28
    11b4:	df 93       	push	r29
	uint8_t sreg, b;

	// first part is long delay with significant timing leeway so
	// don't disable interrupts until after
	OWI_PULL_BUS_LOW();
    11b6:	56 9a       	sbi	0x0a, 6	; 10
    11b8:	5e 98       	cbi	0x0b, 6	; 11
	delay_us( OWI_DELAY_H + 12);
    11ba:	87 ed       	ldi	r24, 0xD7	; 215
    11bc:	93 e0       	ldi	r25, 0x03	; 3
    11be:	0e 94 cd 08 	call	0x119a	; 0x119a <delayloop16>

	sreg = SREG;
    11c2:	df b7       	in	r29, 0x3f	; 63
	cli();	// disable interrupts
    11c4:	f8 94       	cli

	OWI_RELEASE_BUS();	// allow bus high
    11c6:	56 98       	cbi	0x0a, 6	; 10
    11c8:	5e 98       	cbi	0x0b, 6	; 11
	delay_us( OWI_DELAY_I);
    11ca:	8b e8       	ldi	r24, 0x8B	; 139
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	0e 94 cd 08 	call	0x119a	; 0x119a <delayloop16>

	b = ~OWI_GET_IN();
    11d2:	c9 b1       	in	r28, 0x09	; 9

	SREG = sreg;	// restore interrupts
    11d4:	df bf       	out	0x3f, r29	; 63

	// another long delay without max so re-enable interrupts before
	delay_us( OWI_DELAY_J);
    11d6:	83 e3       	ldi	r24, 0x33	; 51
    11d8:	93 e0       	ldi	r25, 0x03	; 3
    11da:	0e 94 cd 08 	call	0x119a	; 0x119a <delayloop16>
	// check to see if the bus is stull pulled low (shorted?)
	return b & OWI_GET_IN();
    11de:	99 b1       	in	r25, 0x09	; 9
	cli();	// disable interrupts

	OWI_RELEASE_BUS();	// allow bus high
	delay_us( OWI_DELAY_I);

	b = ~OWI_GET_IN();
    11e0:	c6 fb       	bst	r28, 6
    11e2:	88 27       	eor	r24, r24
    11e4:	80 f9       	bld	r24, 0
    11e6:	80 95       	com	r24
	SREG = sreg;	// restore interrupts

	// another long delay without max so re-enable interrupts before
	delay_us( OWI_DELAY_J);
	// check to see if the bus is stull pulled low (shorted?)
	return b & OWI_GET_IN();
    11e8:	96 fb       	bst	r25, 6
    11ea:	99 27       	eor	r25, r25
    11ec:	90 f9       	bld	r25, 0
}
    11ee:	89 23       	and	r24, r25
    11f0:	df 91       	pop	r29
    11f2:	cf 91       	pop	r28
    11f4:	08 95       	ret

000011f6 <owi_bit_io>:
/* write or read a single bit from the bus
 * note that owi_bit_io( b) is the same as owi_bit_wr( b)
 * and b = owi_bit_io( 0x01) is the same as b = owi_bit_rd();
 */
extern uint8_t owi_bit_io( uint8_t b)
{
    11f6:	cf 93       	push	r28
    11f8:	df 93       	push	r29
	uint8_t sreg;

	sreg = SREG;
    11fa:	df b7       	in	r29, 0x3f	; 63
	cli();
    11fc:	f8 94       	cli

	// attention pulse
	OWI_PULL_BUS_LOW();	// drive bus low
    11fe:	56 9a       	sbi	0x0a, 6	; 10
    1200:	5e 98       	cbi	0x0b, 6	; 11
	...
	DELAY_1US();
	DELAY_1US();
	DELAY_1US();

	// if writing 1 (or reading), stop pulling low data period
	if( b)
    124a:	81 11       	cpse	r24, r1
		OWI_RELEASE_BUS();	// allow bus high
    124c:	56 98       	cbi	0x0a, 6	; 10
    124e:	5e 98       	cbi	0x0b, 6	; 11

	// response wait
	//delay_us( OWI_DELAY_E);
	delay_us( 1);
    1250:	81 e0       	ldi	r24, 0x01	; 1
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	0e 94 cd 08 	call	0x119a	; 0x119a <delayloop16>
	b = OWI_GET_IN();	// sample at end of response wait
    1258:	c9 b1       	in	r28, 0x09	; 9

	delay_us( OWI_DELAY_F - OWI_DELAY_D - 3);	// wait for rest of R/W time slot
    125a:	83 e5       	ldi	r24, 0x53	; 83
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	0e 94 cd 08 	call	0x119a	; 0x119a <delayloop16>

	// recovery time
	OWI_RELEASE_BUS();	// allow bus high if we were reading or writing 0, else we were already there
    1262:	56 98       	cbi	0x0a, 6	; 10
    1264:	5e 98       	cbi	0x0b, 6	; 11
	...
	// delay_us( OWI_DELAY_D);
	//delay_us( 1); // code was too long - replace with assembler delays
	DELAY_1US();
	DELAY_1US();

	SREG = sreg; // sei();
    128a:	df bf       	out	0x3f, r29	; 63

	return b;
}
    128c:	c6 fb       	bst	r28, 6
    128e:	88 27       	eor	r24, r24
    1290:	80 f9       	bld	r24, 0
    1292:	df 91       	pop	r29
    1294:	cf 91       	pop	r28
    1296:	08 95       	ret

00001298 <__vector_18>:
ISR (UART0_RECEIVE_INTERRUPT)	
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
    1298:	1f 92       	push	r1
    129a:	0f 92       	push	r0
    129c:	0f b6       	in	r0, 0x3f	; 63
    129e:	0f 92       	push	r0
    12a0:	11 24       	eor	r1, r1
    12a2:	2f 93       	push	r18
    12a4:	8f 93       	push	r24
    12a6:	9f 93       	push	r25
    12a8:	ef 93       	push	r30
    12aa:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */
    usr  = UART0_STATUS;
    12ac:	80 91 c0 00 	lds	r24, 0x00C0
    data = UART0_DATA;
    12b0:	90 91 c6 00 	lds	r25, 0x00C6
    
    /* get FEn (Frame Error) DORn (Data OverRun) UPEn (USART Parity Error) bits */
#if defined(FE) && defined(DOR) && defined(UPE)
    lastRxError = usr & (_BV(FE)|_BV(DOR)|_BV(UPE) );
#elif defined(FE0) && defined(DOR0) && defined(UPE0)
    lastRxError = usr & (_BV(FE0)|_BV(DOR0)|_BV(UPE0) );
    12b4:	8c 71       	andi	r24, 0x1C	; 28
#elif defined(FE) && defined(DOR)
    lastRxError = usr & (_BV(FE)|_BV(DOR) );
#endif

    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    12b6:	e0 91 fc 01 	lds	r30, 0x01FC
    12ba:	ef 5f       	subi	r30, 0xFF	; 255
    12bc:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART_RxTail ) {
    12be:	20 91 fb 01 	lds	r18, 0x01FB
    12c2:	e2 17       	cp	r30, r18
    12c4:	39 f0       	breq	.+14     	; 0x12d4 <__vector_18+0x3c>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
    12c6:	e0 93 fc 01 	sts	0x01FC, r30
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	e1 50       	subi	r30, 0x01	; 1
    12ce:	fe 4f       	sbci	r31, 0xFE	; 254
    12d0:	90 83       	st	Z, r25
    12d2:	01 c0       	rjmp	.+2      	; 0x12d6 <__vector_18+0x3e>
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    12d4:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError |= lastRxError;   
    12d6:	90 91 fa 01 	lds	r25, 0x01FA
    12da:	98 2b       	or	r25, r24
    12dc:	90 93 fa 01 	sts	0x01FA, r25
}
    12e0:	ff 91       	pop	r31
    12e2:	ef 91       	pop	r30
    12e4:	9f 91       	pop	r25
    12e6:	8f 91       	pop	r24
    12e8:	2f 91       	pop	r18
    12ea:	0f 90       	pop	r0
    12ec:	0f be       	out	0x3f, r0	; 63
    12ee:	0f 90       	pop	r0
    12f0:	1f 90       	pop	r1
    12f2:	18 95       	reti

000012f4 <__vector_19>:
ISR (UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
    12f4:	1f 92       	push	r1
    12f6:	0f 92       	push	r0
    12f8:	0f b6       	in	r0, 0x3f	; 63
    12fa:	0f 92       	push	r0
    12fc:	11 24       	eor	r1, r1
    12fe:	8f 93       	push	r24
    1300:	9f 93       	push	r25
    1302:	ef 93       	push	r30
    1304:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
    1306:	90 91 fe 01 	lds	r25, 0x01FE
    130a:	80 91 fd 01 	lds	r24, 0x01FD
    130e:	98 17       	cp	r25, r24
    1310:	69 f0       	breq	.+26     	; 0x132c <__vector_19+0x38>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
    1312:	e0 91 fd 01 	lds	r30, 0x01FD
    1316:	ef 5f       	subi	r30, 0xFF	; 255
    1318:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
    131a:	e0 93 fd 01 	sts	0x01FD, r30
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	e1 5e       	subi	r30, 0xE1	; 225
    1322:	fd 4f       	sbci	r31, 0xFD	; 253
    1324:	80 81       	ld	r24, Z
    1326:	80 93 c6 00 	sts	0x00C6, r24
    132a:	05 c0       	rjmp	.+10     	; 0x1336 <__vector_19+0x42>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
    132c:	80 91 c1 00 	lds	r24, 0x00C1
    1330:	8f 7d       	andi	r24, 0xDF	; 223
    1332:	80 93 c1 00 	sts	0x00C1, r24
    }
}
    1336:	ff 91       	pop	r31
    1338:	ef 91       	pop	r30
    133a:	9f 91       	pop	r25
    133c:	8f 91       	pop	r24
    133e:	0f 90       	pop	r0
    1340:	0f be       	out	0x3f, r0	; 63
    1342:	0f 90       	pop	r0
    1344:	1f 90       	pop	r1
    1346:	18 95       	reti

00001348 <uart_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
    1348:	10 92 fe 01 	sts	0x01FE, r1
    UART_TxTail = 0;
    134c:	10 92 fd 01 	sts	0x01FD, r1
    UART_RxHead = 0;
    1350:	10 92 fc 01 	sts	0x01FC, r1
    UART_RxTail = 0;
    1354:	10 92 fb 01 	sts	0x01FB, r1
#endif
#endif
#endif

    /* Set baud rate */
    if ( baudrate & 0x8000 )
    1358:	97 ff       	sbrs	r25, 7
    135a:	03 c0       	rjmp	.+6      	; 0x1362 <uart_init+0x1a>
    {
        #if UART0_BIT_U2X
        UART0_STATUS = (1<<UART0_BIT_U2X);  //Enable 2x speed 
    135c:	22 e0       	ldi	r18, 0x02	; 2
    135e:	20 93 c0 00 	sts	0x00C0, r18
        #endif
    } 
    #if defined(UART0_UBRRH)
    UART0_UBRRH = (unsigned char)((baudrate>>8)&0x80) ;
    1362:	90 78       	andi	r25, 0x80	; 128
    1364:	90 93 c5 00 	sts	0x00C5, r25
    #endif    
    UART0_UBRRL = (unsigned char) (baudrate&0x00FF);
    1368:	80 93 c4 00 	sts	0x00C4, r24
      
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(UART0_BIT_RXCIE)|(1<<UART0_BIT_RXEN)|(1<<UART0_BIT_TXEN);
    136c:	88 e9       	ldi	r24, 0x98	; 152
    136e:	80 93 c1 00 	sts	0x00C1, r24
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef UART0_CONTROLC
    #ifdef UART0_BIT_URSEL
    UART0_CONTROLC = (1<<UART0_BIT_URSEL)|(1<<UART0_BIT_UCSZ1)|(1<<UART0_BIT_UCSZ0);
    #else
    UART0_CONTROLC = (1<<UART0_BIT_UCSZ1)|(1<<UART0_BIT_UCSZ0);
    1372:	86 e0       	ldi	r24, 0x06	; 6
    1374:	80 93 c2 00 	sts	0x00C2, r24
    1378:	08 95       	ret

0000137a <uart_getc>:
    unsigned char tmptail;
    unsigned char data;
    unsigned char lastRxError;


    if ( UART_RxHead == UART_RxTail ) {
    137a:	90 91 fc 01 	lds	r25, 0x01FC
    137e:	80 91 fb 01 	lds	r24, 0x01FB
    1382:	98 17       	cp	r25, r24
    1384:	a9 f0       	breq	.+42     	; 0x13b0 <uart_getc+0x36>
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
    1386:	90 91 fb 01 	lds	r25, 0x01FB
    138a:	9f 5f       	subi	r25, 0xFF	; 255
    138c:	9f 71       	andi	r25, 0x1F	; 31
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
    138e:	e9 2f       	mov	r30, r25
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	e1 50       	subi	r30, 0x01	; 1
    1394:	fe 4f       	sbci	r31, 0xFE	; 254
    1396:	20 81       	ld	r18, Z
    lastRxError = UART_LastRxError;
    1398:	80 91 fa 01 	lds	r24, 0x01FA
    
    /* store buffer index */
    UART_RxTail = tmptail; 
    139c:	90 93 fb 01 	sts	0x01FB, r25
    
    UART_LastRxError = 0;
    13a0:	10 92 fa 01 	sts	0x01FA, r1
    return (lastRxError << 8) + data;
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	98 2f       	mov	r25, r24
    13a8:	88 27       	eor	r24, r24
    13aa:	82 0f       	add	r24, r18
    13ac:	91 1d       	adc	r25, r1
    13ae:	08 95       	ret
    unsigned char data;
    unsigned char lastRxError;


    if ( UART_RxHead == UART_RxTail ) {
        return UART_NO_DATA;   /* no data available */
    13b0:	80 e0       	ldi	r24, 0x00	; 0
    13b2:	91 e0       	ldi	r25, 0x01	; 1
    UART_RxTail = tmptail; 
    
    UART_LastRxError = 0;
    return (lastRxError << 8) + data;

}/* uart_getc */
    13b4:	08 95       	ret

000013b6 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
    13b6:	90 91 fe 01 	lds	r25, 0x01FE
    13ba:	9f 5f       	subi	r25, 0xFF	; 255
    13bc:	9f 71       	andi	r25, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
    13be:	20 91 fd 01 	lds	r18, 0x01FD
    13c2:	92 17       	cp	r25, r18
    13c4:	e1 f3       	breq	.-8      	; 0x13be <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
    13c6:	e9 2f       	mov	r30, r25
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	e1 5e       	subi	r30, 0xE1	; 225
    13cc:	fd 4f       	sbci	r31, 0xFD	; 253
    13ce:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
    13d0:	90 93 fe 01 	sts	0x01FE, r25

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
    13d4:	80 91 c1 00 	lds	r24, 0x00C1
    13d8:	80 62       	ori	r24, 0x20	; 32
    13da:	80 93 c1 00 	sts	0x00C1, r24
    13de:	08 95       	ret

000013e0 <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    13e0:	cf 93       	push	r28
    13e2:	df 93       	push	r29
    13e4:	ec 01       	movw	r28, r24
    while (*s) 
    13e6:	89 91       	ld	r24, Y+
    13e8:	88 23       	and	r24, r24
    13ea:	19 f0       	breq	.+6      	; 0x13f2 <uart_puts+0x12>
      uart_putc(*s++);
    13ec:	0e 94 db 09 	call	0x13b6	; 0x13b6 <uart_putc>
    13f0:	fa cf       	rjmp	.-12     	; 0x13e6 <uart_puts+0x6>

}/* uart_puts */
    13f2:	df 91       	pop	r29
    13f4:	cf 91       	pop	r28
    13f6:	08 95       	ret

000013f8 <uart_puts_p>:
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    13f8:	cf 93       	push	r28
    13fa:	df 93       	push	r29
    13fc:	fc 01       	movw	r30, r24
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
    13fe:	84 91       	lpm	r24, Z
    1400:	ef 01       	movw	r28, r30
    1402:	21 96       	adiw	r28, 0x01	; 1
    1404:	88 23       	and	r24, r24
    1406:	21 f0       	breq	.+8      	; 0x1410 <uart_puts_p+0x18>
      uart_putc(c);
    1408:	0e 94 db 09 	call	0x13b6	; 0x13b6 <uart_putc>
    140c:	fe 01       	movw	r30, r28
    140e:	f7 cf       	rjmp	.-18     	; 0x13fe <uart_puts_p+0x6>

}/* uart_puts_p */
    1410:	df 91       	pop	r29
    1412:	cf 91       	pop	r28
    1414:	08 95       	ret

00001416 <uart_puti>:
Returns:  none
This functions has been added by Martin Thomas <eversmith@heizung-thomas.de>
Don't blame P. Fleury if it doesn't work ;-)
**************************************************************************/
void uart_puti( const int val )
{
    1416:	cf 93       	push	r28
    1418:	df 93       	push	r29
    141a:	cd b7       	in	r28, 0x3d	; 61
    141c:	de b7       	in	r29, 0x3e	; 62
    141e:	61 97       	sbiw	r28, 0x11	; 17
    1420:	0f b6       	in	r0, 0x3f	; 63
    1422:	f8 94       	cli
    1424:	de bf       	out	0x3e, r29	; 62
    1426:	0f be       	out	0x3f, r0	; 63
    1428:	cd bf       	out	0x3d, r28	; 61
    char buffer[sizeof(int)*8+1];
    
    uart_puts( itoa(val, buffer, 10) );
    142a:	4a e0       	ldi	r20, 0x0A	; 10
    142c:	50 e0       	ldi	r21, 0x00	; 0
    142e:	be 01       	movw	r22, r28
    1430:	6f 5f       	subi	r22, 0xFF	; 255
    1432:	7f 4f       	sbci	r23, 0xFF	; 255
    1434:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <itoa>
    1438:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <uart_puts>

}/* uart_puti */
    143c:	61 96       	adiw	r28, 0x11	; 17
    143e:	0f b6       	in	r0, 0x3f	; 63
    1440:	f8 94       	cli
    1442:	de bf       	out	0x3e, r29	; 62
    1444:	0f be       	out	0x3f, r0	; 63
    1446:	cd bf       	out	0x3d, r28	; 61
    1448:	df 91       	pop	r29
    144a:	cf 91       	pop	r28
    144c:	08 95       	ret

0000144e <uart_puthex_nibble>:
This functions has been added by Martin Thomas <eversmith@heizung-thomas.de>
Don't blame P. Fleury if it doesn't work ;-)
**************************************************************************/
void uart_puthex_nibble(const unsigned char b)
{
    unsigned char  c = b & 0x0f;
    144e:	8f 70       	andi	r24, 0x0F	; 15
    if (c>9) c += 'A'-10;
    1450:	8a 30       	cpi	r24, 0x0A	; 10
    1452:	10 f0       	brcs	.+4      	; 0x1458 <uart_puthex_nibble+0xa>
    1454:	89 5c       	subi	r24, 0xC9	; 201
    1456:	01 c0       	rjmp	.+2      	; 0x145a <uart_puthex_nibble+0xc>
    else c += '0';
    1458:	80 5d       	subi	r24, 0xD0	; 208
    uart_putc(c);
    145a:	0c 94 db 09 	jmp	0x13b6	; 0x13b6 <uart_putc>

0000145e <uart_puthex_byte>:
Returns:  none
This functions has been added by Martin Thomas <eversmith@heizung-thomas.de>
Don't blame P. Fleury if it doesn't work ;-)
**************************************************************************/
void uart_puthex_byte(const unsigned char  b)
{
    145e:	cf 93       	push	r28
    1460:	c8 2f       	mov	r28, r24
    uart_puthex_nibble(b>>4);
    1462:	82 95       	swap	r24
    1464:	8f 70       	andi	r24, 0x0F	; 15
    1466:	0e 94 27 0a 	call	0x144e	; 0x144e <uart_puthex_nibble>
    uart_puthex_nibble(b);
    146a:	8c 2f       	mov	r24, r28
} /* uart_puthex_byte */
    146c:	cf 91       	pop	r28
Don't blame P. Fleury if it doesn't work ;-)
**************************************************************************/
void uart_puthex_byte(const unsigned char  b)
{
    uart_puthex_nibble(b>>4);
    uart_puthex_nibble(b);
    146e:	0c 94 27 0a 	jmp	0x144e	; 0x144e <uart_puthex_nibble>

00001472 <DS2415_write_clock>:

/* Write the control byte and 4 data bytes comprising the 32 bit seconds counter
 * to the DS2415
 */
extern uint8_t DS2415_write_clock( uint8_t ctrl, uint32_t rtc, uint8_t id[])
{
    1472:	ff 92       	push	r15
    1474:	0f 93       	push	r16
    1476:	1f 93       	push	r17
    1478:	cf 93       	push	r28
    147a:	df 93       	push	r29
    147c:	f8 2e       	mov	r15, r24
    147e:	8a 01       	movw	r16, r20
    1480:	d6 2f       	mov	r29, r22
    1482:	c7 2f       	mov	r28, r23
	// make sure we have a device to check and the bus is working
	if( id == NULL || owi_device_command( DS2415_WRITE_CLOCK, id)) return DS2415_CLOCK_ERROR;
    1484:	21 15       	cp	r18, r1
    1486:	31 05       	cpc	r19, r1
    1488:	11 f4       	brne	.+4      	; 0x148e <DS2415_write_clock+0x1c>
    148a:	8f ef       	ldi	r24, 0xFF	; 255
    148c:	18 c0       	rjmp	.+48     	; 0x14be <DS2415_write_clock+0x4c>
    148e:	b9 01       	movw	r22, r18
    1490:	89 e9       	ldi	r24, 0x99	; 153
    1492:	0e 94 4d 08 	call	0x109a	; 0x109a <owi_device_command>
    1496:	81 11       	cpse	r24, r1
    1498:	f8 cf       	rjmp	.-16     	; 0x148a <DS2415_write_clock+0x18>

	// set the clock data
	owi_byte_io( ctrl);
    149a:	8f 2d       	mov	r24, r15
    149c:	0e 94 25 08 	call	0x104a	; 0x104a <owi_byte_io>
	owi_byte_io( (uint8_t)rtc); // LSB
    14a0:	80 2f       	mov	r24, r16
    14a2:	0e 94 25 08 	call	0x104a	; 0x104a <owi_byte_io>
	owi_byte_io( (uint8_t)(rtc >> 8));
    14a6:	81 2f       	mov	r24, r17
    14a8:	0e 94 25 08 	call	0x104a	; 0x104a <owi_byte_io>
	owi_byte_io( (uint8_t)(rtc >> 16));
    14ac:	8d 2f       	mov	r24, r29
    14ae:	0e 94 25 08 	call	0x104a	; 0x104a <owi_byte_io>
	owi_byte_io( (uint8_t)(rtc >> 24));	// MSB
    14b2:	8c 2f       	mov	r24, r28
    14b4:	0e 94 25 08 	call	0x104a	; 0x104a <owi_byte_io>
	owi_reset();	// activate the changes
    14b8:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <owi_reset>
	return DS2415_CLOCK_OK;
    14bc:	80 e0       	ldi	r24, 0x00	; 0
}
    14be:	df 91       	pop	r29
    14c0:	cf 91       	pop	r28
    14c2:	1f 91       	pop	r17
    14c4:	0f 91       	pop	r16
    14c6:	ff 90       	pop	r15
    14c8:	08 95       	ret

000014ca <DS2415_read_clock>:

/* Read the control byte and 4 data bytes comprising the 32 bit seconds counter
 * from the DS2415
 */
extern uint8_t DS2415_read_clock( uint8_t *ctrl, uint32_t *rtc, uint8_t id[])
{
    14ca:	cf 92       	push	r12
    14cc:	df 92       	push	r13
    14ce:	ef 92       	push	r14
    14d0:	ff 92       	push	r15
    14d2:	cf 93       	push	r28
    14d4:	df 93       	push	r29
    14d6:	7c 01       	movw	r14, r24
    14d8:	eb 01       	movw	r28, r22
	// make sure we have a device to check and the bus is working
	if( id == NULL || owi_device_command( DS2415_READ_CLOCK, id)) return DS2415_CLOCK_ERROR;
    14da:	41 15       	cp	r20, r1
    14dc:	51 05       	cpc	r21, r1
    14de:	11 f4       	brne	.+4      	; 0x14e4 <DS2415_read_clock+0x1a>
    14e0:	8f ef       	ldi	r24, 0xFF	; 255
    14e2:	31 c0       	rjmp	.+98     	; 0x1546 <DS2415_read_clock+0x7c>
    14e4:	ba 01       	movw	r22, r20
    14e6:	86 e6       	ldi	r24, 0x66	; 102
    14e8:	0e 94 4d 08 	call	0x109a	; 0x109a <owi_device_command>
    14ec:	81 11       	cpse	r24, r1
    14ee:	f8 cf       	rjmp	.-16     	; 0x14e0 <DS2415_read_clock+0x16>

	// get the clock data
	*ctrl = owi_byte_io( 0xFF);
    14f0:	8f ef       	ldi	r24, 0xFF	; 255
    14f2:	0e 94 25 08 	call	0x104a	; 0x104a <owi_byte_io>
    14f6:	f7 01       	movw	r30, r14
    14f8:	80 83       	st	Z, r24
	*rtc = ((uint32_t)owi_byte_io( 0xFF));	// LSB
    14fa:	8f ef       	ldi	r24, 0xFF	; 255
    14fc:	0e 94 25 08 	call	0x104a	; 0x104a <owi_byte_io>
    1500:	c8 2e       	mov	r12, r24
    1502:	d1 2c       	mov	r13, r1
    1504:	e1 2c       	mov	r14, r1
    1506:	f1 2c       	mov	r15, r1
    1508:	c8 82       	st	Y, r12
    150a:	d9 82       	std	Y+1, r13	; 0x01
    150c:	ea 82       	std	Y+2, r14	; 0x02
    150e:	fb 82       	std	Y+3, r15	; 0x03
	*rtc |= ((uint32_t)owi_byte_io( 0xFF)) << 8;
    1510:	8f ef       	ldi	r24, 0xFF	; 255
    1512:	0e 94 25 08 	call	0x104a	; 0x104a <owi_byte_io>
    1516:	d8 2a       	or	r13, r24
    1518:	c8 82       	st	Y, r12
    151a:	d9 82       	std	Y+1, r13	; 0x01
    151c:	ea 82       	std	Y+2, r14	; 0x02
    151e:	fb 82       	std	Y+3, r15	; 0x03
	*rtc |= ((uint32_t)owi_byte_io( 0xFF)) << 16;
    1520:	8f ef       	ldi	r24, 0xFF	; 255
    1522:	0e 94 25 08 	call	0x104a	; 0x104a <owi_byte_io>
    1526:	e8 2a       	or	r14, r24
    1528:	c8 82       	st	Y, r12
    152a:	d9 82       	std	Y+1, r13	; 0x01
    152c:	ea 82       	std	Y+2, r14	; 0x02
    152e:	fb 82       	std	Y+3, r15	; 0x03
	*rtc |= ((uint32_t)owi_byte_io( 0xFF)) << 24;	// MSB
    1530:	8f ef       	ldi	r24, 0xFF	; 255
    1532:	0e 94 25 08 	call	0x104a	; 0x104a <owi_byte_io>
    1536:	f8 2a       	or	r15, r24
    1538:	c8 82       	st	Y, r12
    153a:	d9 82       	std	Y+1, r13	; 0x01
    153c:	ea 82       	std	Y+2, r14	; 0x02
    153e:	fb 82       	std	Y+3, r15	; 0x03
	owi_reset();	// stop further clock transmissions
    1540:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <owi_reset>
	return DS2415_CLOCK_OK;
    1544:	80 e0       	ldi	r24, 0x00	; 0
}
    1546:	df 91       	pop	r29
    1548:	cf 91       	pop	r28
    154a:	ff 90       	pop	r15
    154c:	ef 90       	pop	r14
    154e:	df 90       	pop	r13
    1550:	cf 90       	pop	r12
    1552:	08 95       	ret

00001554 <DS2415_gregorian_to_epoch>:

// Convert a Gregorian calendar date and time into a Unix Epoch seconds count
extern uint32_t DS2415_gregorian_to_epoch( DS2415_date_t *dt)
{
    1554:	cf 92       	push	r12
    1556:	df 92       	push	r13
    1558:	ef 92       	push	r14
    155a:	ff 92       	push	r15
    155c:	cf 93       	push	r28
    155e:	df 93       	push	r29
    1560:	fc 01       	movw	r30, r24
	uint16_t days;
	uint32_t rtc;

	// convert gregorian date (dt) into total days
	days = 365 * (dt->year - 70) + accum_days[dt->month] + (dt->day - 1);
    1562:	c0 81       	ld	r28, Z
    1564:	2c 2f       	mov	r18, r28
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	d1 81       	ldd	r29, Z+1	; 0x01
    156a:	82 81       	ldd	r24, Z+2	; 0x02
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	01 97       	sbiw	r24, 0x01	; 1
    1570:	ad 2f       	mov	r26, r29
    1572:	b0 e0       	ldi	r27, 0x00	; 0
    1574:	aa 0f       	add	r26, r26
    1576:	bb 1f       	adc	r27, r27
    1578:	a0 50       	subi	r26, 0x00	; 0
    157a:	bf 4f       	sbci	r27, 0xFF	; 255
    157c:	4d 91       	ld	r20, X+
    157e:	5c 91       	ld	r21, X
    1580:	84 0f       	add	r24, r20
    1582:	95 1f       	adc	r25, r21
    1584:	d9 01       	movw	r26, r18
    1586:	a6 54       	subi	r26, 0x46	; 70
    1588:	b1 09       	sbc	r27, r1
    158a:	6d e6       	ldi	r22, 0x6D	; 109
    158c:	71 e0       	ldi	r23, 0x01	; 1
    158e:	a6 9f       	mul	r26, r22
    1590:	a0 01       	movw	r20, r0
    1592:	a7 9f       	mul	r26, r23
    1594:	50 0d       	add	r21, r0
    1596:	b6 9f       	mul	r27, r22
    1598:	50 0d       	add	r21, r0
    159a:	11 24       	eor	r1, r1
    159c:	84 0f       	add	r24, r20
    159e:	95 1f       	adc	r25, r21
	days += (dt->year - 69) / 4;	// fixup for past leap years
    15a0:	25 54       	subi	r18, 0x45	; 69
    15a2:	31 09       	sbc	r19, r1
    15a4:	37 ff       	sbrs	r19, 7
    15a6:	02 c0       	rjmp	.+4      	; 0x15ac <DS2415_gregorian_to_epoch+0x58>
    15a8:	2d 5f       	subi	r18, 0xFD	; 253
    15aa:	3f 4f       	sbci	r19, 0xFF	; 255
    15ac:	35 95       	asr	r19
    15ae:	27 95       	ror	r18
    15b0:	35 95       	asr	r19
    15b2:	27 95       	ror	r18
    15b4:	28 0f       	add	r18, r24
    15b6:	39 1f       	adc	r19, r25
	if( (dt->month > 1) && ((dt->year % 4) == 0)) days++;	// fixup for current leapyear
    15b8:	d2 30       	cpi	r29, 0x02	; 2
    15ba:	20 f0       	brcs	.+8      	; 0x15c4 <DS2415_gregorian_to_epoch+0x70>
    15bc:	c3 70       	andi	r28, 0x03	; 3
    15be:	11 f4       	brne	.+4      	; 0x15c4 <DS2415_gregorian_to_epoch+0x70>
    15c0:	2f 5f       	subi	r18, 0xFF	; 255
    15c2:	3f 4f       	sbci	r19, 0xFF	; 255

	// convert to seconds and add the time offset
	rtc = 3600 * ((uint32_t)dt->hour + (24 * (uint32_t)days));
    15c4:	a8 e1       	ldi	r26, 0x18	; 24
    15c6:	b0 e0       	ldi	r27, 0x00	; 0
    15c8:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <__umulhisi3>
    15cc:	9b 01       	movw	r18, r22
    15ce:	ac 01       	movw	r20, r24
    15d0:	83 81       	ldd	r24, Z+3	; 0x03
    15d2:	28 0f       	add	r18, r24
    15d4:	31 1d       	adc	r19, r1
    15d6:	41 1d       	adc	r20, r1
    15d8:	51 1d       	adc	r21, r1
    15da:	a0 e1       	ldi	r26, 0x10	; 16
    15dc:	be e0       	ldi	r27, 0x0E	; 14
    15de:	0e 94 80 15 	call	0x2b00	; 0x2b00 <__muluhisi3>
    15e2:	6b 01       	movw	r12, r22
    15e4:	7c 01       	movw	r14, r24
	rtc += 60 * (uint32_t)dt->min;
    15e6:	24 81       	ldd	r18, Z+4	; 0x04
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	ac e3       	ldi	r26, 0x3C	; 60
    15ec:	b0 e0       	ldi	r27, 0x00	; 0
    15ee:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <__umulhisi3>
	rtc += (uint32_t)dt->sec;
    15f2:	25 81       	ldd	r18, Z+5	; 0x05
	days += (dt->year - 69) / 4;	// fixup for past leap years
	if( (dt->month > 1) && ((dt->year % 4) == 0)) days++;	// fixup for current leapyear

	// convert to seconds and add the time offset
	rtc = 3600 * ((uint32_t)dt->hour + (24 * (uint32_t)days));
	rtc += 60 * (uint32_t)dt->min;
    15f4:	62 0f       	add	r22, r18
    15f6:	71 1d       	adc	r23, r1
    15f8:	81 1d       	adc	r24, r1
    15fa:	91 1d       	adc	r25, r1
	rtc += (uint32_t)dt->sec;
    15fc:	6c 0d       	add	r22, r12
    15fe:	7d 1d       	adc	r23, r13
    1600:	8e 1d       	adc	r24, r14
    1602:	9f 1d       	adc	r25, r15

	return rtc;
}
    1604:	df 91       	pop	r29
    1606:	cf 91       	pop	r28
    1608:	ff 90       	pop	r15
    160a:	ef 90       	pop	r14
    160c:	df 90       	pop	r13
    160e:	cf 90       	pop	r12
    1610:	08 95       	ret

00001612 <DS2415_epoch_to_gregorian>:

// Convert a Unix Epoch seconds count into a Gregorian calendar date and time 
extern void DS2415_epoch_to_gregorian( uint32_t seconds, DS2415_date_t *dt)
{
    1612:	8f 92       	push	r8
    1614:	9f 92       	push	r9
    1616:	af 92       	push	r10
    1618:	bf 92       	push	r11
    161a:	cf 92       	push	r12
    161c:	df 92       	push	r13
    161e:	ef 92       	push	r14
    1620:	ff 92       	push	r15
    1622:	0f 93       	push	r16
    1624:	1f 93       	push	r17
    1626:	cf 93       	push	r28
    1628:	df 93       	push	r29
    162a:	16 2f       	mov	r17, r22
    162c:	ea 01       	movw	r28, r20
	uint16_t tmp_uint_1, tmp_uint_2, tmp_uint_3;
	uint32_t tmp_ulong_1, tmp_ulong_2;

	// convert elapsed epoch seconds (rtc) count into gregorian date (dt)
	tmp_ulong_1 = seconds / 60;	// whole minutes
    162e:	6c e3       	ldi	r22, 0x3C	; 60
    1630:	c6 2e       	mov	r12, r22
    1632:	d1 2c       	mov	r13, r1
    1634:	e1 2c       	mov	r14, r1
    1636:	f1 2c       	mov	r15, r1
    1638:	61 2f       	mov	r22, r17
    163a:	a7 01       	movw	r20, r14
    163c:	96 01       	movw	r18, r12
    163e:	0e 94 30 15 	call	0x2a60	; 0x2a60 <__udivmodsi4>
    1642:	02 2f       	mov	r16, r18
    1644:	ca 01       	movw	r24, r20
	dt->sec = seconds - (60 * tmp_ulong_1);
    1646:	7c e3       	ldi	r23, 0x3C	; 60
    1648:	b7 2e       	mov	r11, r23
    164a:	b2 9e       	mul	r11, r18
    164c:	10 19       	sub	r17, r0
    164e:	11 24       	eor	r1, r1
    1650:	1d 83       	std	Y+5, r17	; 0x05

	tmp_ulong_2 = tmp_ulong_1 / 60;	// whole hours
    1652:	62 2f       	mov	r22, r18
    1654:	73 2f       	mov	r23, r19
    1656:	a7 01       	movw	r20, r14
    1658:	96 01       	movw	r18, r12
    165a:	0e 94 30 15 	call	0x2a60	; 0x2a60 <__udivmodsi4>
    165e:	12 2f       	mov	r17, r18
    1660:	ca 01       	movw	r24, r20
	dt->min = tmp_ulong_1 - (60 * tmp_ulong_2);
    1662:	b2 9e       	mul	r11, r18
    1664:	00 19       	sub	r16, r0
    1666:	11 24       	eor	r1, r1
    1668:	0c 83       	std	Y+4, r16	; 0x04

	tmp_ulong_1 = tmp_ulong_2 / 24;	// whole days
    166a:	62 2f       	mov	r22, r18
    166c:	73 2f       	mov	r23, r19
    166e:	28 e1       	ldi	r18, 0x18	; 24
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	40 e0       	ldi	r20, 0x00	; 0
    1674:	50 e0       	ldi	r21, 0x00	; 0
    1676:	0e 94 30 15 	call	0x2a60	; 0x2a60 <__udivmodsi4>
	dt->hour = tmp_ulong_2 - (24 * tmp_ulong_1);
    167a:	88 e1       	ldi	r24, 0x18	; 24
    167c:	28 9f       	mul	r18, r24
    167e:	10 19       	sub	r17, r0
    1680:	11 24       	eor	r1, r1
    1682:	1b 83       	std	Y+3, r17	; 0x03

	tmp_ulong_2 = tmp_ulong_1 + 365 + 366;	// whole days since 1968
    1684:	69 01       	movw	r12, r18
    1686:	7a 01       	movw	r14, r20
    1688:	8b ed       	ldi	r24, 0xDB	; 219
    168a:	c8 0e       	add	r12, r24
    168c:	82 e0       	ldi	r24, 0x02	; 2
    168e:	d8 1e       	adc	r13, r24
    1690:	e1 1c       	adc	r14, r1
    1692:	f1 1c       	adc	r15, r1
	tmp_uint_1 = tmp_ulong_2 / ((4 * 365) + 1);	// leap year periods
    1694:	c7 01       	movw	r24, r14
    1696:	b6 01       	movw	r22, r12
    1698:	25 eb       	ldi	r18, 0xB5	; 181
    169a:	35 e0       	ldi	r19, 0x05	; 5
    169c:	40 e0       	ldi	r20, 0x00	; 0
    169e:	50 e0       	ldi	r21, 0x00	; 0
    16a0:	0e 94 30 15 	call	0x2a60	; 0x2a60 <__udivmodsi4>
    16a4:	4b 01       	movw	r8, r22
    16a6:	5c 01       	movw	r10, r24
    16a8:	89 01       	movw	r16, r18

	tmp_uint_2 = tmp_ulong_2 % ((4 * 365) + 1);	// days since current lyear

	// if days are after a current leap year then add a leap year period
	if ((tmp_uint_2 >= (31 + 29))) tmp_uint_1++;
    16aa:	8c e3       	ldi	r24, 0x3C	; 60
    16ac:	88 16       	cp	r8, r24
    16ae:	91 04       	cpc	r9, r1
    16b0:	10 f0       	brcs	.+4      	; 0x16b6 <DS2415_epoch_to_gregorian+0xa4>
    16b2:	0f 5f       	subi	r16, 0xFF	; 255
    16b4:	1f 4f       	sbci	r17, 0xFF	; 255

	tmp_uint_3 = (tmp_ulong_2 - tmp_uint_1) / 365;	// whole years
    16b6:	c7 01       	movw	r24, r14
    16b8:	b6 01       	movw	r22, r12
    16ba:	60 1b       	sub	r22, r16
    16bc:	71 0b       	sbc	r23, r17
    16be:	81 09       	sbc	r24, r1
    16c0:	91 09       	sbc	r25, r1
    16c2:	2d e6       	ldi	r18, 0x6D	; 109
    16c4:	31 e0       	ldi	r19, 0x01	; 1
    16c6:	40 e0       	ldi	r20, 0x00	; 0
    16c8:	50 e0       	ldi	r21, 0x00	; 0
    16ca:	0e 94 30 15 	call	0x2a60	; 0x2a60 <__udivmodsi4>
	tmp_uint_1 = tmp_ulong_2 - (tmp_uint_3 * 365) - tmp_uint_1;	// days since first of year
    16ce:	6d e6       	ldi	r22, 0x6D	; 109
    16d0:	71 e0       	ldi	r23, 0x01	; 1
    16d2:	62 9f       	mul	r22, r18
    16d4:	c0 01       	movw	r24, r0
    16d6:	63 9f       	mul	r22, r19
    16d8:	90 0d       	add	r25, r0
    16da:	72 9f       	mul	r23, r18
    16dc:	90 0d       	add	r25, r0
    16de:	11 24       	eor	r1, r1
    16e0:	c8 1a       	sub	r12, r24
    16e2:	d9 0a       	sbc	r13, r25
    16e4:	c0 1a       	sub	r12, r16
    16e6:	d1 0a       	sbc	r13, r17

	if ((tmp_uint_2 <= 365) && (tmp_uint_2 >= 60)) {
    16e8:	8c e3       	ldi	r24, 0x3C	; 60
    16ea:	88 1a       	sub	r8, r24
    16ec:	91 08       	sbc	r9, r1
    16ee:	82 e3       	ldi	r24, 0x32	; 50
    16f0:	88 16       	cp	r8, r24
    16f2:	81 e0       	ldi	r24, 0x01	; 1
    16f4:	98 06       	cpc	r9, r24
    16f6:	18 f4       	brcc	.+6      	; 0x16fe <DS2415_epoch_to_gregorian+0xec>
		tmp_uint_1++;
    16f8:	8f ef       	ldi	r24, 0xFF	; 255
    16fa:	c8 1a       	sub	r12, r24
    16fc:	d8 0a       	sbc	r13, r24
	}
	dt->year = tmp_uint_3 + 68;		
    16fe:	44 e4       	ldi	r20, 0x44	; 68
    1700:	42 0f       	add	r20, r18
    1702:	48 83       	st	Y, r20
    1704:	ea e1       	ldi	r30, 0x1A	; 26
    1706:	f1 e0       	ldi	r31, 0x01	; 1

	// search for what month it is based on how many days have past
	// within the current year
	tmp_uint_2 = 13;	// month
	tmp_uint_3 = 366;	// days to month
    1708:	8e e6       	ldi	r24, 0x6E	; 110
    170a:	91 e0       	ldi	r25, 0x01	; 1
	}
	dt->year = tmp_uint_3 + 68;		

	// search for what month it is based on how many days have past
	// within the current year
	tmp_uint_2 = 13;	// month
    170c:	2d e0       	ldi	r18, 0x0D	; 13
    170e:	30 e0       	ldi	r19, 0x00	; 0
	while (tmp_uint_1 < tmp_uint_3)
	{
		 tmp_uint_2--;
		 tmp_uint_3 = accum_days[tmp_uint_2];
		 // fixup if month is past February and it is a leap year
		 if ((tmp_uint_2 >= 2) && ((dt->year % 4) == 0)) tmp_uint_3++;
    1710:	43 70       	andi	r20, 0x03	; 3

	// search for what month it is based on how many days have past
	// within the current year
	tmp_uint_2 = 13;	// month
	tmp_uint_3 = 366;	// days to month
	while (tmp_uint_1 < tmp_uint_3)
    1712:	c8 16       	cp	r12, r24
    1714:	d9 06       	cpc	r13, r25
    1716:	58 f4       	brcc	.+22     	; 0x172e <DS2415_epoch_to_gregorian+0x11c>
	{
		 tmp_uint_2--;
    1718:	21 50       	subi	r18, 0x01	; 1
    171a:	31 09       	sbc	r19, r1
		 tmp_uint_3 = accum_days[tmp_uint_2];
    171c:	92 91       	ld	r25, -Z
    171e:	82 91       	ld	r24, -Z
		 // fixup if month is past February and it is a leap year
		 if ((tmp_uint_2 >= 2) && ((dt->year % 4) == 0)) tmp_uint_3++;
    1720:	22 30       	cpi	r18, 0x02	; 2
    1722:	31 05       	cpc	r19, r1
    1724:	b0 f3       	brcs	.-20     	; 0x1712 <DS2415_epoch_to_gregorian+0x100>
    1726:	41 11       	cpse	r20, r1
    1728:	f4 cf       	rjmp	.-24     	; 0x1712 <DS2415_epoch_to_gregorian+0x100>
    172a:	01 96       	adiw	r24, 0x01	; 1
    172c:	f2 cf       	rjmp	.-28     	; 0x1712 <DS2415_epoch_to_gregorian+0x100>
	}
	dt->month = tmp_uint_2;
    172e:	29 83       	std	Y+1, r18	; 0x01
	dt->day = tmp_uint_1 - tmp_uint_3 + 1;
    1730:	c3 94       	inc	r12
    1732:	c8 1a       	sub	r12, r24
    1734:	ca 82       	std	Y+2, r12	; 0x02
}
    1736:	df 91       	pop	r29
    1738:	cf 91       	pop	r28
    173a:	1f 91       	pop	r17
    173c:	0f 91       	pop	r16
    173e:	ff 90       	pop	r15
    1740:	ef 90       	pop	r14
    1742:	df 90       	pop	r13
    1744:	cf 90       	pop	r12
    1746:	bf 90       	pop	r11
    1748:	af 90       	pop	r10
    174a:	9f 90       	pop	r9
    174c:	8f 90       	pop	r8
    174e:	08 95       	ret

00001750 <bmp085_writemem>:
#include BMP085_I2CFLEURYPATH

/*
 * i2c write
 */
void bmp085_writemem(uint8_t reg, uint8_t value) {
    1750:	1f 93       	push	r17
    1752:	cf 93       	push	r28
    1754:	df 93       	push	r29
    1756:	1f 92       	push	r1
    1758:	cd b7       	in	r28, 0x3d	; 61
    175a:	de b7       	in	r29, 0x3e	; 62
    175c:	18 2f       	mov	r17, r24
	i2c_start_wait(BMP085_ADDR | I2C_WRITE);
    175e:	8e ee       	ldi	r24, 0xEE	; 238
    1760:	69 83       	std	Y+1, r22	; 0x01
    1762:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <i2c_start_wait>
	i2c_write(reg);
    1766:	81 2f       	mov	r24, r17
    1768:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <i2c_write>
	i2c_write(value);
    176c:	69 81       	ldd	r22, Y+1	; 0x01
    176e:	86 2f       	mov	r24, r22
    1770:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <i2c_write>
	i2c_stop();
}
    1774:	0f 90       	pop	r0
    1776:	df 91       	pop	r29
    1778:	cf 91       	pop	r28
    177a:	1f 91       	pop	r17
 */
void bmp085_writemem(uint8_t reg, uint8_t value) {
	i2c_start_wait(BMP085_ADDR | I2C_WRITE);
	i2c_write(reg);
	i2c_write(value);
	i2c_stop();
    177c:	0c 94 88 0f 	jmp	0x1f10	; 0x1f10 <i2c_stop>

00001780 <bmp085_readmem>:
}

/*
 * i2c read
 */
void bmp085_readmem(uint8_t reg, uint8_t buff[], uint8_t bytes) {
    1780:	af 92       	push	r10
    1782:	bf 92       	push	r11
    1784:	df 92       	push	r13
    1786:	ef 92       	push	r14
    1788:	ff 92       	push	r15
    178a:	0f 93       	push	r16
    178c:	1f 93       	push	r17
    178e:	cf 93       	push	r28
    1790:	df 93       	push	r29
    1792:	00 d0       	rcall	.+0      	; 0x1794 <bmp085_readmem+0x14>
    1794:	cd b7       	in	r28, 0x3d	; 61
    1796:	de b7       	in	r29, 0x3e	; 62
    1798:	18 2f       	mov	r17, r24
    179a:	d4 2e       	mov	r13, r20
	uint8_t i =0;
	i2c_start_wait(BMP085_ADDR | I2C_WRITE);
    179c:	8e ee       	ldi	r24, 0xEE	; 238
    179e:	69 83       	std	Y+1, r22	; 0x01
    17a0:	7a 83       	std	Y+2, r23	; 0x02
    17a2:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <i2c_start_wait>
	i2c_write(reg);
    17a6:	81 2f       	mov	r24, r17
    17a8:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <i2c_write>
	i2c_rep_start(BMP085_ADDR | I2C_READ);
    17ac:	8f ee       	ldi	r24, 0xEF	; 239
    17ae:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <i2c_rep_start>
    17b2:	69 81       	ldd	r22, Y+1	; 0x01
    17b4:	a6 2e       	mov	r10, r22
    17b6:	7a 81       	ldd	r23, Y+2	; 0x02
    17b8:	b7 2e       	mov	r11, r23
	for(i=0; i<bytes; i++) {
    17ba:	00 e0       	ldi	r16, 0x00	; 0
    17bc:	10 e0       	ldi	r17, 0x00	; 0
		if(i==bytes-1)
    17be:	ed 2c       	mov	r14, r13
    17c0:	f1 2c       	mov	r15, r1
    17c2:	81 e0       	ldi	r24, 0x01	; 1
    17c4:	e8 1a       	sub	r14, r24
    17c6:	f1 08       	sbc	r15, r1
void bmp085_readmem(uint8_t reg, uint8_t buff[], uint8_t bytes) {
	uint8_t i =0;
	i2c_start_wait(BMP085_ADDR | I2C_WRITE);
	i2c_write(reg);
	i2c_rep_start(BMP085_ADDR | I2C_READ);
	for(i=0; i<bytes; i++) {
    17c8:	0d 15       	cp	r16, r13
    17ca:	80 f4       	brcc	.+32     	; 0x17ec <bmp085_readmem+0x6c>
		if(i==bytes-1)
    17cc:	0e 15       	cp	r16, r14
    17ce:	1f 05       	cpc	r17, r15
    17d0:	19 f4       	brne	.+6      	; 0x17d8 <bmp085_readmem+0x58>
			buff[i] = i2c_readNak();
    17d2:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <i2c_readNak>
    17d6:	02 c0       	rjmp	.+4      	; 0x17dc <bmp085_readmem+0x5c>
		else
			buff[i] = i2c_readAck();
    17d8:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <i2c_readAck>
    17dc:	f5 01       	movw	r30, r10
    17de:	80 83       	st	Z, r24
    17e0:	0f 5f       	subi	r16, 0xFF	; 255
    17e2:	1f 4f       	sbci	r17, 0xFF	; 255
    17e4:	ff ef       	ldi	r31, 0xFF	; 255
    17e6:	af 1a       	sub	r10, r31
    17e8:	bf 0a       	sbc	r11, r31
    17ea:	ee cf       	rjmp	.-36     	; 0x17c8 <bmp085_readmem+0x48>
	}
	i2c_stop();
}
    17ec:	0f 90       	pop	r0
    17ee:	0f 90       	pop	r0
    17f0:	df 91       	pop	r29
    17f2:	cf 91       	pop	r28
    17f4:	1f 91       	pop	r17
    17f6:	0f 91       	pop	r16
    17f8:	ff 90       	pop	r15
    17fa:	ef 90       	pop	r14
    17fc:	df 90       	pop	r13
    17fe:	bf 90       	pop	r11
    1800:	af 90       	pop	r10
		if(i==bytes-1)
			buff[i] = i2c_readNak();
		else
			buff[i] = i2c_readAck();
	}
	i2c_stop();
    1802:	0c 94 88 0f 	jmp	0x1f10	; 0x1f10 <i2c_stop>

00001806 <bmp085_avaragefilter>:


#if BMP085_FILTERPRESSURE == 1
#define BMP085_AVARAGECOEF 21
static long k[BMP085_AVARAGECOEF];
long bmp085_avaragefilter(long input) {
    1806:	0f 93       	push	r16
    1808:	1f 93       	push	r17
    180a:	ef e3       	ldi	r30, 0x3F	; 63
    180c:	f2 e0       	ldi	r31, 0x02	; 2
	uint8_t i=0;
	long sum=0;
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
		k[i] = k[i+1];
    180e:	04 81       	ldd	r16, Z+4	; 0x04
    1810:	15 81       	ldd	r17, Z+5	; 0x05
    1812:	26 81       	ldd	r18, Z+6	; 0x06
    1814:	37 81       	ldd	r19, Z+7	; 0x07
    1816:	01 93       	st	Z+, r16
    1818:	11 93       	st	Z+, r17
    181a:	21 93       	st	Z+, r18
    181c:	31 93       	st	Z+, r19
#define BMP085_AVARAGECOEF 21
static long k[BMP085_AVARAGECOEF];
long bmp085_avaragefilter(long input) {
	uint8_t i=0;
	long sum=0;
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
    181e:	22 e0       	ldi	r18, 0x02	; 2
    1820:	e3 39       	cpi	r30, 0x93	; 147
    1822:	f2 07       	cpc	r31, r18
    1824:	a1 f7       	brne	.-24     	; 0x180e <bmp085_avaragefilter+0x8>
		k[i] = k[i+1];
	}
	k[BMP085_AVARAGECOEF-1] = input;
    1826:	60 93 8f 02 	sts	0x028F, r22
    182a:	70 93 90 02 	sts	0x0290, r23
    182e:	80 93 91 02 	sts	0x0291, r24
    1832:	90 93 92 02 	sts	0x0292, r25
    1836:	ef e3       	ldi	r30, 0x3F	; 63
    1838:	f2 e0       	ldi	r31, 0x02	; 2
#if BMP085_FILTERPRESSURE == 1
#define BMP085_AVARAGECOEF 21
static long k[BMP085_AVARAGECOEF];
long bmp085_avaragefilter(long input) {
	uint8_t i=0;
	long sum=0;
    183a:	60 e0       	ldi	r22, 0x00	; 0
    183c:	70 e0       	ldi	r23, 0x00	; 0
    183e:	cb 01       	movw	r24, r22
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
		k[i] = k[i+1];
	}
	k[BMP085_AVARAGECOEF-1] = input;
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
		sum += k[i];
    1840:	01 91       	ld	r16, Z+
    1842:	11 91       	ld	r17, Z+
    1844:	21 91       	ld	r18, Z+
    1846:	31 91       	ld	r19, Z+
    1848:	60 0f       	add	r22, r16
    184a:	71 1f       	adc	r23, r17
    184c:	82 1f       	adc	r24, r18
    184e:	93 1f       	adc	r25, r19
	long sum=0;
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
		k[i] = k[i+1];
	}
	k[BMP085_AVARAGECOEF-1] = input;
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
    1850:	22 e0       	ldi	r18, 0x02	; 2
    1852:	e3 39       	cpi	r30, 0x93	; 147
    1854:	f2 07       	cpc	r31, r18
    1856:	a1 f7       	brne	.-24     	; 0x1840 <bmp085_avaragefilter+0x3a>
		sum += k[i];
	}
	return (sum /BMP085_AVARAGECOEF) ;
    1858:	25 e1       	ldi	r18, 0x15	; 21
    185a:	30 e0       	ldi	r19, 0x00	; 0
    185c:	40 e0       	ldi	r20, 0x00	; 0
    185e:	50 e0       	ldi	r21, 0x00	; 0
    1860:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <__divmodsi4>
}
    1864:	ca 01       	movw	r24, r20
    1866:	b9 01       	movw	r22, r18
    1868:	1f 91       	pop	r17
    186a:	0f 91       	pop	r16
    186c:	08 95       	ret

0000186e <bmp085_getcalibration>:
#endif

/*
 * read calibration registers
 */
void bmp085_getcalibration() {
    186e:	cf 93       	push	r28
    1870:	df 93       	push	r29
    1872:	00 d0       	rcall	.+0      	; 0x1874 <bmp085_getcalibration+0x6>
    1874:	cd b7       	in	r28, 0x3d	; 61
    1876:	de b7       	in	r29, 0x3e	; 62
	uint8_t buff[2];
	memset(buff, 0, sizeof(buff));
    1878:	1a 82       	std	Y+2, r1	; 0x02
    187a:	19 82       	std	Y+1, r1	; 0x01

	bmp085_readmem(BMP085_REGAC1, buff, 2);
    187c:	42 e0       	ldi	r20, 0x02	; 2
    187e:	be 01       	movw	r22, r28
    1880:	6f 5f       	subi	r22, 0xFF	; 255
    1882:	7f 4f       	sbci	r23, 0xFF	; 255
    1884:	8a ea       	ldi	r24, 0xAA	; 170
    1886:	0e 94 c0 0b 	call	0x1780	; 0x1780 <bmp085_readmem>
	bmp085_regac1 = ((int)buff[0] <<8 | ((int)buff[1]));
    188a:	89 81       	ldd	r24, Y+1	; 0x01
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	98 2f       	mov	r25, r24
    1890:	88 27       	eor	r24, r24
    1892:	2a 81       	ldd	r18, Y+2	; 0x02
    1894:	82 2b       	or	r24, r18
    1896:	90 93 e2 02 	sts	0x02E2, r25
    189a:	80 93 e1 02 	sts	0x02E1, r24
	bmp085_readmem(BMP085_REGAC2, buff, 2);
    189e:	42 e0       	ldi	r20, 0x02	; 2
    18a0:	be 01       	movw	r22, r28
    18a2:	6f 5f       	subi	r22, 0xFF	; 255
    18a4:	7f 4f       	sbci	r23, 0xFF	; 255
    18a6:	8c ea       	ldi	r24, 0xAC	; 172
    18a8:	0e 94 c0 0b 	call	0x1780	; 0x1780 <bmp085_readmem>
	bmp085_regac2 = ((int)buff[0] <<8 | ((int)buff[1]));
    18ac:	89 81       	ldd	r24, Y+1	; 0x01
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	98 2f       	mov	r25, r24
    18b2:	88 27       	eor	r24, r24
    18b4:	2a 81       	ldd	r18, Y+2	; 0x02
    18b6:	82 2b       	or	r24, r18
    18b8:	90 93 38 03 	sts	0x0338, r25
    18bc:	80 93 37 03 	sts	0x0337, r24
	bmp085_readmem(BMP085_REGAC3, buff, 2);
    18c0:	42 e0       	ldi	r20, 0x02	; 2
    18c2:	be 01       	movw	r22, r28
    18c4:	6f 5f       	subi	r22, 0xFF	; 255
    18c6:	7f 4f       	sbci	r23, 0xFF	; 255
    18c8:	8e ea       	ldi	r24, 0xAE	; 174
    18ca:	0e 94 c0 0b 	call	0x1780	; 0x1780 <bmp085_readmem>
	bmp085_regac3 = ((int)buff[0] <<8 | ((int)buff[1]));
    18ce:	89 81       	ldd	r24, Y+1	; 0x01
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	98 2f       	mov	r25, r24
    18d4:	88 27       	eor	r24, r24
    18d6:	2a 81       	ldd	r18, Y+2	; 0x02
    18d8:	82 2b       	or	r24, r18
    18da:	90 93 ca 02 	sts	0x02CA, r25
    18de:	80 93 c9 02 	sts	0x02C9, r24
	bmp085_readmem(BMP085_REGAC4, buff, 2);
    18e2:	42 e0       	ldi	r20, 0x02	; 2
    18e4:	be 01       	movw	r22, r28
    18e6:	6f 5f       	subi	r22, 0xFF	; 255
    18e8:	7f 4f       	sbci	r23, 0xFF	; 255
    18ea:	80 eb       	ldi	r24, 0xB0	; 176
    18ec:	0e 94 c0 0b 	call	0x1780	; 0x1780 <bmp085_readmem>
	bmp085_regac4 = ((unsigned int)buff[0] <<8 | ((unsigned int)buff[1]));
    18f0:	89 81       	ldd	r24, Y+1	; 0x01
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	98 2f       	mov	r25, r24
    18f6:	88 27       	eor	r24, r24
    18f8:	2a 81       	ldd	r18, Y+2	; 0x02
    18fa:	82 2b       	or	r24, r18
    18fc:	90 93 a4 02 	sts	0x02A4, r25
    1900:	80 93 a3 02 	sts	0x02A3, r24
	bmp085_readmem(BMP085_REGAC5, buff, 2);
    1904:	42 e0       	ldi	r20, 0x02	; 2
    1906:	be 01       	movw	r22, r28
    1908:	6f 5f       	subi	r22, 0xFF	; 255
    190a:	7f 4f       	sbci	r23, 0xFF	; 255
    190c:	82 eb       	ldi	r24, 0xB2	; 178
    190e:	0e 94 c0 0b 	call	0x1780	; 0x1780 <bmp085_readmem>
	bmp085_regac5 = ((unsigned int)buff[0] <<8 | ((unsigned int)buff[1]));
    1912:	89 81       	ldd	r24, Y+1	; 0x01
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	98 2f       	mov	r25, r24
    1918:	88 27       	eor	r24, r24
    191a:	2a 81       	ldd	r18, Y+2	; 0x02
    191c:	82 2b       	or	r24, r18
    191e:	90 93 f4 02 	sts	0x02F4, r25
    1922:	80 93 f3 02 	sts	0x02F3, r24
	bmp085_readmem(BMP085_REGAC6, buff, 2);
    1926:	42 e0       	ldi	r20, 0x02	; 2
    1928:	be 01       	movw	r22, r28
    192a:	6f 5f       	subi	r22, 0xFF	; 255
    192c:	7f 4f       	sbci	r23, 0xFF	; 255
    192e:	84 eb       	ldi	r24, 0xB4	; 180
    1930:	0e 94 c0 0b 	call	0x1780	; 0x1780 <bmp085_readmem>
	bmp085_regac6 = ((unsigned int)buff[0] <<8 | ((unsigned int)buff[1]));
    1934:	89 81       	ldd	r24, Y+1	; 0x01
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	98 2f       	mov	r25, r24
    193a:	88 27       	eor	r24, r24
    193c:	2a 81       	ldd	r18, Y+2	; 0x02
    193e:	82 2b       	or	r24, r18
    1940:	90 93 d6 02 	sts	0x02D6, r25
    1944:	80 93 d5 02 	sts	0x02D5, r24
	bmp085_readmem(BMP085_REGB1, buff, 2);
    1948:	42 e0       	ldi	r20, 0x02	; 2
    194a:	be 01       	movw	r22, r28
    194c:	6f 5f       	subi	r22, 0xFF	; 255
    194e:	7f 4f       	sbci	r23, 0xFF	; 255
    1950:	86 eb       	ldi	r24, 0xB6	; 182
    1952:	0e 94 c0 0b 	call	0x1780	; 0x1780 <bmp085_readmem>
	bmp085_regb1 = ((int)buff[0] <<8 | ((int)buff[1]));
    1956:	89 81       	ldd	r24, Y+1	; 0x01
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	98 2f       	mov	r25, r24
    195c:	88 27       	eor	r24, r24
    195e:	2a 81       	ldd	r18, Y+2	; 0x02
    1960:	82 2b       	or	r24, r18
    1962:	90 93 d4 02 	sts	0x02D4, r25
    1966:	80 93 d3 02 	sts	0x02D3, r24
	bmp085_readmem(BMP085_REGB2, buff, 2);
    196a:	42 e0       	ldi	r20, 0x02	; 2
    196c:	be 01       	movw	r22, r28
    196e:	6f 5f       	subi	r22, 0xFF	; 255
    1970:	7f 4f       	sbci	r23, 0xFF	; 255
    1972:	88 eb       	ldi	r24, 0xB8	; 184
    1974:	0e 94 c0 0b 	call	0x1780	; 0x1780 <bmp085_readmem>
	bmp085_regb2 = ((int)buff[0] <<8 | ((int)buff[1]));
    1978:	89 81       	ldd	r24, Y+1	; 0x01
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	98 2f       	mov	r25, r24
    197e:	88 27       	eor	r24, r24
    1980:	2a 81       	ldd	r18, Y+2	; 0x02
    1982:	82 2b       	or	r24, r18
    1984:	90 93 bc 02 	sts	0x02BC, r25
    1988:	80 93 bb 02 	sts	0x02BB, r24
	bmp085_readmem(BMP085_REGMB, buff, 2);
    198c:	42 e0       	ldi	r20, 0x02	; 2
    198e:	be 01       	movw	r22, r28
    1990:	6f 5f       	subi	r22, 0xFF	; 255
    1992:	7f 4f       	sbci	r23, 0xFF	; 255
    1994:	8a eb       	ldi	r24, 0xBA	; 186
    1996:	0e 94 c0 0b 	call	0x1780	; 0x1780 <bmp085_readmem>
	bmp085_regmb = ((int)buff[0] <<8 | ((int)buff[1]));
    199a:	89 81       	ldd	r24, Y+1	; 0x01
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	98 2f       	mov	r25, r24
    19a0:	88 27       	eor	r24, r24
    19a2:	2a 81       	ldd	r18, Y+2	; 0x02
    19a4:	82 2b       	or	r24, r18
    19a6:	90 93 f2 02 	sts	0x02F2, r25
    19aa:	80 93 f1 02 	sts	0x02F1, r24
	bmp085_readmem(BMP085_REGMC, buff, 2);
    19ae:	42 e0       	ldi	r20, 0x02	; 2
    19b0:	be 01       	movw	r22, r28
    19b2:	6f 5f       	subi	r22, 0xFF	; 255
    19b4:	7f 4f       	sbci	r23, 0xFF	; 255
    19b6:	8c eb       	ldi	r24, 0xBC	; 188
    19b8:	0e 94 c0 0b 	call	0x1780	; 0x1780 <bmp085_readmem>
	bmp085_regmc = ((int)buff[0] <<8 | ((int)buff[1]));
    19bc:	89 81       	ldd	r24, Y+1	; 0x01
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	98 2f       	mov	r25, r24
    19c2:	88 27       	eor	r24, r24
    19c4:	2a 81       	ldd	r18, Y+2	; 0x02
    19c6:	82 2b       	or	r24, r18
    19c8:	90 93 f6 02 	sts	0x02F6, r25
    19cc:	80 93 f5 02 	sts	0x02F5, r24
	bmp085_readmem(BMP085_REGMD, buff, 2);
    19d0:	42 e0       	ldi	r20, 0x02	; 2
    19d2:	be 01       	movw	r22, r28
    19d4:	6f 5f       	subi	r22, 0xFF	; 255
    19d6:	7f 4f       	sbci	r23, 0xFF	; 255
    19d8:	8e eb       	ldi	r24, 0xBE	; 190
    19da:	0e 94 c0 0b 	call	0x1780	; 0x1780 <bmp085_readmem>
	bmp085_regmd = ((int)buff[0] <<8 | ((int)buff[1]));
    19de:	89 81       	ldd	r24, Y+1	; 0x01
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	98 2f       	mov	r25, r24
    19e4:	88 27       	eor	r24, r24
    19e6:	2a 81       	ldd	r18, Y+2	; 0x02
    19e8:	82 2b       	or	r24, r18
    19ea:	90 93 d8 02 	sts	0x02D8, r25
    19ee:	80 93 d7 02 	sts	0x02D7, r24
}
    19f2:	0f 90       	pop	r0
    19f4:	0f 90       	pop	r0
    19f6:	df 91       	pop	r29
    19f8:	cf 91       	pop	r28
    19fa:	08 95       	ret

000019fc <bmp085_getrawtemperature>:

/*
 * get raw temperature as read by registers, and do some calculation to convert it
 */
void bmp085_getrawtemperature() {
    19fc:	cf 92       	push	r12
    19fe:	df 92       	push	r13
    1a00:	ef 92       	push	r14
    1a02:	ff 92       	push	r15
    1a04:	cf 93       	push	r28
    1a06:	df 93       	push	r29
    1a08:	00 d0       	rcall	.+0      	; 0x1a0a <bmp085_getrawtemperature+0xe>
    1a0a:	cd b7       	in	r28, 0x3d	; 61
    1a0c:	de b7       	in	r29, 0x3e	; 62
	uint8_t buff[2];
	memset(buff, 0, sizeof(buff));
    1a0e:	1a 82       	std	Y+2, r1	; 0x02
    1a10:	19 82       	std	Y+1, r1	; 0x01
	long ut,x1,x2;

	//read raw temperature
	bmp085_writemem(BMP085_REGCONTROL, BMP085_REGREADTEMPERATURE);
    1a12:	6e e2       	ldi	r22, 0x2E	; 46
    1a14:	84 ef       	ldi	r24, 0xF4	; 244
    1a16:	0e 94 a8 0b 	call	0x1750	; 0x1750 <bmp085_writemem>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1a1a:	8f e0       	ldi	r24, 0x0F	; 15
    1a1c:	97 e2       	ldi	r25, 0x27	; 39
    1a1e:	01 97       	sbiw	r24, 0x01	; 1
    1a20:	f1 f7       	brne	.-4      	; 0x1a1e <bmp085_getrawtemperature+0x22>
    1a22:	00 c0       	rjmp	.+0      	; 0x1a24 <bmp085_getrawtemperature+0x28>
    1a24:	00 00       	nop
	_delay_ms(5); // min. 4.5ms read Temp delay
	bmp085_readmem(BMP085_REGCONTROLOUTPUT, buff, 2);
    1a26:	42 e0       	ldi	r20, 0x02	; 2
    1a28:	be 01       	movw	r22, r28
    1a2a:	6f 5f       	subi	r22, 0xFF	; 255
    1a2c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a2e:	86 ef       	ldi	r24, 0xF6	; 246
    1a30:	0e 94 c0 0b 	call	0x1780	; 0x1780 <bmp085_readmem>
	ut = ((long)buff[0] << 8 | ((long)buff[1])); //uncompensated temperature value
    1a34:	29 81       	ldd	r18, Y+1	; 0x01
    1a36:	82 2f       	mov	r24, r18
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	a0 e0       	ldi	r26, 0x00	; 0
    1a3c:	b0 e0       	ldi	r27, 0x00	; 0
    1a3e:	22 27       	eor	r18, r18
    1a40:	38 2f       	mov	r19, r24
    1a42:	49 2f       	mov	r20, r25
    1a44:	5a 2f       	mov	r21, r26
    1a46:	8a 81       	ldd	r24, Y+2	; 0x02
    1a48:	28 2b       	or	r18, r24

	//calculate raw temperature
	x1 = ((long)ut - bmp085_regac6) * bmp085_regac5 >> 15;
    1a4a:	80 91 d5 02 	lds	r24, 0x02D5
    1a4e:	90 91 d6 02 	lds	r25, 0x02D6
    1a52:	28 1b       	sub	r18, r24
    1a54:	39 0b       	sbc	r19, r25
    1a56:	41 09       	sbc	r20, r1
    1a58:	51 09       	sbc	r21, r1
    1a5a:	a0 91 f3 02 	lds	r26, 0x02F3
    1a5e:	b0 91 f4 02 	lds	r27, 0x02F4
    1a62:	0e 94 80 15 	call	0x2b00	; 0x2b00 <__muluhisi3>
    1a66:	6b 01       	movw	r12, r22
    1a68:	7c 01       	movw	r14, r24
    1a6a:	4f e0       	ldi	r20, 0x0F	; 15
    1a6c:	f5 94       	asr	r15
    1a6e:	e7 94       	ror	r14
    1a70:	d7 94       	ror	r13
    1a72:	c7 94       	ror	r12
    1a74:	4a 95       	dec	r20
    1a76:	d1 f7       	brne	.-12     	; 0x1a6c <bmp085_getrawtemperature+0x70>
	x2 = ((long)bmp085_regmc << 11) / (x1 + bmp085_regmd);
    1a78:	60 91 f5 02 	lds	r22, 0x02F5
    1a7c:	70 91 f6 02 	lds	r23, 0x02F6
    1a80:	88 27       	eor	r24, r24
    1a82:	77 fd       	sbrc	r23, 7
    1a84:	80 95       	com	r24
    1a86:	98 2f       	mov	r25, r24
    1a88:	5b e0       	ldi	r21, 0x0B	; 11
    1a8a:	66 0f       	add	r22, r22
    1a8c:	77 1f       	adc	r23, r23
    1a8e:	88 1f       	adc	r24, r24
    1a90:	99 1f       	adc	r25, r25
    1a92:	5a 95       	dec	r21
    1a94:	d1 f7       	brne	.-12     	; 0x1a8a <bmp085_getrawtemperature+0x8e>
    1a96:	20 91 d7 02 	lds	r18, 0x02D7
    1a9a:	30 91 d8 02 	lds	r19, 0x02D8
    1a9e:	44 27       	eor	r20, r20
    1aa0:	37 fd       	sbrc	r19, 7
    1aa2:	40 95       	com	r20
    1aa4:	54 2f       	mov	r21, r20
    1aa6:	2c 0d       	add	r18, r12
    1aa8:	3d 1d       	adc	r19, r13
    1aaa:	4e 1d       	adc	r20, r14
    1aac:	5f 1d       	adc	r21, r15
    1aae:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <__divmodsi4>
	bmp085_rawtemperature = x1 + x2;
    1ab2:	2c 0d       	add	r18, r12
    1ab4:	3d 1d       	adc	r19, r13
    1ab6:	4e 1d       	adc	r20, r14
    1ab8:	5f 1d       	adc	r21, r15
    1aba:	20 93 cf 02 	sts	0x02CF, r18
    1abe:	30 93 d0 02 	sts	0x02D0, r19
    1ac2:	40 93 d1 02 	sts	0x02D1, r20
    1ac6:	50 93 d2 02 	sts	0x02D2, r21
}
    1aca:	0f 90       	pop	r0
    1acc:	0f 90       	pop	r0
    1ace:	df 91       	pop	r29
    1ad0:	cf 91       	pop	r28
    1ad2:	ff 90       	pop	r15
    1ad4:	ef 90       	pop	r14
    1ad6:	df 90       	pop	r13
    1ad8:	cf 90       	pop	r12
    1ada:	08 95       	ret

00001adc <bmp085_getrawpressure>:

/*
 * get raw pressure as read by registers, and do some calculation to convert it
 */
void bmp085_getrawpressure() {
    1adc:	4f 92       	push	r4
    1ade:	5f 92       	push	r5
    1ae0:	6f 92       	push	r6
    1ae2:	7f 92       	push	r7
    1ae4:	8f 92       	push	r8
    1ae6:	9f 92       	push	r9
    1ae8:	af 92       	push	r10
    1aea:	bf 92       	push	r11
    1aec:	cf 92       	push	r12
    1aee:	df 92       	push	r13
    1af0:	ef 92       	push	r14
    1af2:	ff 92       	push	r15
    1af4:	cf 93       	push	r28
    1af6:	df 93       	push	r29
    1af8:	cd b7       	in	r28, 0x3d	; 61
    1afa:	de b7       	in	r29, 0x3e	; 62
    1afc:	2b 97       	sbiw	r28, 0x0b	; 11
    1afe:	0f b6       	in	r0, 0x3f	; 63
    1b00:	f8 94       	cli
    1b02:	de bf       	out	0x3e, r29	; 62
    1b04:	0f be       	out	0x3f, r0	; 63
    1b06:	cd bf       	out	0x3d, r28	; 61
	uint8_t buff[3];
	memset(buff, 0, sizeof(buff));
    1b08:	19 82       	std	Y+1, r1	; 0x01
    1b0a:	1a 82       	std	Y+2, r1	; 0x02
    1b0c:	1b 82       	std	Y+3, r1	; 0x03
	long up,x1,x2,x3,b3,b6,p;
	unsigned long b4,b7;

	#if BMP085_AUTOUPDATETEMP == 1
	bmp085_getrawtemperature();
    1b0e:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <bmp085_getrawtemperature>
	#endif

	//read raw pressure
	bmp085_writemem(BMP085_REGCONTROL, BMP085_REGREADPRESSURE+(BMP085_MODE << 6));
    1b12:	64 ef       	ldi	r22, 0xF4	; 244
    1b14:	84 ef       	ldi	r24, 0xF4	; 244
    1b16:	0e 94 a8 0b 	call	0x1750	; 0x1750 <bmp085_writemem>
    1b1a:	8f e1       	ldi	r24, 0x1F	; 31
    1b1c:	9b ec       	ldi	r25, 0xCB	; 203
    1b1e:	01 97       	sbiw	r24, 0x01	; 1
    1b20:	f1 f7       	brne	.-4      	; 0x1b1e <bmp085_getrawpressure+0x42>
    1b22:	00 c0       	rjmp	.+0      	; 0x1b24 <bmp085_getrawpressure+0x48>
    1b24:	00 00       	nop
	_delay_ms(2 + (3<<BMP085_MODE));
	bmp085_readmem(BMP085_REGCONTROLOUTPUT, buff, 3);
    1b26:	43 e0       	ldi	r20, 0x03	; 3
    1b28:	be 01       	movw	r22, r28
    1b2a:	6f 5f       	subi	r22, 0xFF	; 255
    1b2c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b2e:	86 ef       	ldi	r24, 0xF6	; 246
    1b30:	0e 94 c0 0b 	call	0x1780	; 0x1780 <bmp085_readmem>
	up = ((((long)buff[0] <<16) | ((long)buff[1] <<8) | ((long)buff[2])) >> (8-BMP085_MODE)); // uncompensated pressure value

	//calculate raw pressure
	b6 = bmp085_rawtemperature - 4000;
    1b34:	80 91 cf 02 	lds	r24, 0x02CF
    1b38:	90 91 d0 02 	lds	r25, 0x02D0
    1b3c:	a0 91 d1 02 	lds	r26, 0x02D1
    1b40:	b0 91 d2 02 	lds	r27, 0x02D2
    1b44:	80 5a       	subi	r24, 0xA0	; 160
    1b46:	9f 40       	sbci	r25, 0x0F	; 15
    1b48:	a1 09       	sbc	r26, r1
    1b4a:	b1 09       	sbc	r27, r1
    1b4c:	8c 83       	std	Y+4, r24	; 0x04
    1b4e:	9d 83       	std	Y+5, r25	; 0x05
    1b50:	ae 83       	std	Y+6, r26	; 0x06
    1b52:	bf 83       	std	Y+7, r27	; 0x07
	x1 = (bmp085_regb2* (b6 * b6) >> 12) >> 11;
    1b54:	9c 01       	movw	r18, r24
    1b56:	ad 01       	movw	r20, r26
    1b58:	bc 01       	movw	r22, r24
    1b5a:	cd 01       	movw	r24, r26
    1b5c:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <__mulsi3>
    1b60:	2b 01       	movw	r4, r22
    1b62:	3c 01       	movw	r6, r24
	x2 = (bmp085_regac2 * b6) >> 11;
	x3 = x1 + x2;
	b3 = (((((long)bmp085_regac1) * 4 + x3) << BMP085_MODE) + 2) >> 2;
    1b64:	e0 91 e1 02 	lds	r30, 0x02E1
    1b68:	f0 91 e2 02 	lds	r31, 0x02E2
	x1 = (bmp085_regac3 * b6) >> 13;
    1b6c:	a0 91 c9 02 	lds	r26, 0x02C9
    1b70:	b0 91 ca 02 	lds	r27, 0x02CA
    1b74:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <__mulshisi3>
    1b78:	6b 01       	movw	r12, r22
    1b7a:	7c 01       	movw	r14, r24
    1b7c:	3d e0       	ldi	r19, 0x0D	; 13
    1b7e:	f5 94       	asr	r15
    1b80:	e7 94       	ror	r14
    1b82:	d7 94       	ror	r13
    1b84:	c7 94       	ror	r12
    1b86:	3a 95       	dec	r19
    1b88:	d1 f7       	brne	.-12     	; 0x1b7e <bmp085_getrawpressure+0xa2>
	x2 = (bmp085_regb1 * ((b6 * b6) >> 12)) >> 16;
    1b8a:	a0 91 d3 02 	lds	r26, 0x02D3
    1b8e:	b0 91 d4 02 	lds	r27, 0x02D4
    1b92:	a3 01       	movw	r20, r6
    1b94:	92 01       	movw	r18, r4
    1b96:	6c e0       	ldi	r22, 0x0C	; 12
    1b98:	55 95       	asr	r21
    1b9a:	47 95       	ror	r20
    1b9c:	37 95       	ror	r19
    1b9e:	27 95       	ror	r18
    1ba0:	6a 95       	dec	r22
    1ba2:	d1 f7       	brne	.-12     	; 0x1b98 <bmp085_getrawpressure+0xbc>
    1ba4:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <__mulshisi3>
    1ba8:	bb 27       	eor	r27, r27
    1baa:	97 fd       	sbrc	r25, 7
    1bac:	b0 95       	com	r27
    1bae:	ab 2f       	mov	r26, r27
	x3 = ((x1 + x2) + 2) >> 2;
    1bb0:	c8 0e       	add	r12, r24
    1bb2:	d9 1e       	adc	r13, r25
    1bb4:	ea 1e       	adc	r14, r26
    1bb6:	fb 1e       	adc	r15, r27
    1bb8:	92 e0       	ldi	r25, 0x02	; 2
    1bba:	c9 0e       	add	r12, r25
    1bbc:	d1 1c       	adc	r13, r1
    1bbe:	e1 1c       	adc	r14, r1
    1bc0:	f1 1c       	adc	r15, r1
    1bc2:	b2 e0       	ldi	r27, 0x02	; 2
    1bc4:	f5 94       	asr	r15
    1bc6:	e7 94       	ror	r14
    1bc8:	d7 94       	ror	r13
    1bca:	c7 94       	ror	r12
    1bcc:	ba 95       	dec	r27
    1bce:	d1 f7       	brne	.-12     	; 0x1bc4 <bmp085_getrawpressure+0xe8>
	b4 = (bmp085_regac4 * (uint32_t)(x3 + 32768)) >> 15;
    1bd0:	a0 e8       	ldi	r26, 0x80	; 128
    1bd2:	da 0e       	add	r13, r26
    1bd4:	e1 1c       	adc	r14, r1
    1bd6:	f1 1c       	adc	r15, r1
    1bd8:	a0 91 a3 02 	lds	r26, 0x02A3
    1bdc:	b0 91 a4 02 	lds	r27, 0x02A4
    1be0:	a7 01       	movw	r20, r14
    1be2:	96 01       	movw	r18, r12
    1be4:	0e 94 80 15 	call	0x2b00	; 0x2b00 <__muluhisi3>
    1be8:	dc 01       	movw	r26, r24
    1bea:	cb 01       	movw	r24, r22
    1bec:	2f e0       	ldi	r18, 0x0F	; 15
    1bee:	b6 95       	lsr	r27
    1bf0:	a7 95       	ror	r26
    1bf2:	97 95       	ror	r25
    1bf4:	87 95       	ror	r24
    1bf6:	2a 95       	dec	r18
    1bf8:	d1 f7       	brne	.-12     	; 0x1bee <bmp085_getrawpressure+0x112>
    1bfa:	88 87       	std	Y+8, r24	; 0x08
    1bfc:	99 87       	std	Y+9, r25	; 0x09
    1bfe:	aa 87       	std	Y+10, r26	; 0x0a
    1c00:	bb 87       	std	Y+11, r27	; 0x0b

	//read raw pressure
	bmp085_writemem(BMP085_REGCONTROL, BMP085_REGREADPRESSURE+(BMP085_MODE << 6));
	_delay_ms(2 + (3<<BMP085_MODE));
	bmp085_readmem(BMP085_REGCONTROLOUTPUT, buff, 3);
	up = ((((long)buff[0] <<16) | ((long)buff[1] <<8) | ((long)buff[2])) >> (8-BMP085_MODE)); // uncompensated pressure value
    1c02:	89 81       	ldd	r24, Y+1	; 0x01
    1c04:	ca 80       	ldd	r12, Y+2	; 0x02
    1c06:	d1 2c       	mov	r13, r1
    1c08:	e1 2c       	mov	r14, r1
    1c0a:	f1 2c       	mov	r15, r1
    1c0c:	fe 2c       	mov	r15, r14
    1c0e:	ed 2c       	mov	r14, r13
    1c10:	dc 2c       	mov	r13, r12
    1c12:	cc 24       	eor	r12, r12
    1c14:	e8 2a       	or	r14, r24
    1c16:	8b 81       	ldd	r24, Y+3	; 0x03
    1c18:	c8 2a       	or	r12, r24
    1c1a:	45 e0       	ldi	r20, 0x05	; 5
    1c1c:	f5 94       	asr	r15
    1c1e:	e7 94       	ror	r14
    1c20:	d7 94       	ror	r13
    1c22:	c7 94       	ror	r12
    1c24:	4a 95       	dec	r20
    1c26:	d1 f7       	brne	.-12     	; 0x1c1c <bmp085_getrawpressure+0x140>
	//calculate raw pressure
	b6 = bmp085_rawtemperature - 4000;
	x1 = (bmp085_regb2* (b6 * b6) >> 12) >> 11;
	x2 = (bmp085_regac2 * b6) >> 11;
	x3 = x1 + x2;
	b3 = (((((long)bmp085_regac1) * 4 + x3) << BMP085_MODE) + 2) >> 2;
    1c28:	4f 01       	movw	r8, r30
    1c2a:	aa 24       	eor	r10, r10
    1c2c:	97 fc       	sbrc	r9, 7
    1c2e:	a0 94       	com	r10
    1c30:	ba 2c       	mov	r11, r10
    1c32:	52 e0       	ldi	r21, 0x02	; 2
    1c34:	88 0c       	add	r8, r8
    1c36:	99 1c       	adc	r9, r9
    1c38:	aa 1c       	adc	r10, r10
    1c3a:	bb 1c       	adc	r11, r11
    1c3c:	5a 95       	dec	r21
    1c3e:	d1 f7       	brne	.-12     	; 0x1c34 <bmp085_getrawpressure+0x158>
	bmp085_readmem(BMP085_REGCONTROLOUTPUT, buff, 3);
	up = ((((long)buff[0] <<16) | ((long)buff[1] <<8) | ((long)buff[2])) >> (8-BMP085_MODE)); // uncompensated pressure value

	//calculate raw pressure
	b6 = bmp085_rawtemperature - 4000;
	x1 = (bmp085_regb2* (b6 * b6) >> 12) >> 11;
    1c40:	a0 91 bb 02 	lds	r26, 0x02BB
    1c44:	b0 91 bc 02 	lds	r27, 0x02BC
    1c48:	a3 01       	movw	r20, r6
    1c4a:	92 01       	movw	r18, r4
    1c4c:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <__mulshisi3>
    1c50:	2b 01       	movw	r4, r22
    1c52:	3c 01       	movw	r6, r24
    1c54:	67 e1       	ldi	r22, 0x17	; 23
    1c56:	75 94       	asr	r7
    1c58:	67 94       	ror	r6
    1c5a:	57 94       	ror	r5
    1c5c:	47 94       	ror	r4
    1c5e:	6a 95       	dec	r22
    1c60:	d1 f7       	brne	.-12     	; 0x1c56 <bmp085_getrawpressure+0x17a>
	x2 = (bmp085_regac2 * b6) >> 11;
    1c62:	a0 91 37 03 	lds	r26, 0x0337
    1c66:	b0 91 38 03 	lds	r27, 0x0338
    1c6a:	2c 81       	ldd	r18, Y+4	; 0x04
    1c6c:	3d 81       	ldd	r19, Y+5	; 0x05
    1c6e:	4e 81       	ldd	r20, Y+6	; 0x06
    1c70:	5f 81       	ldd	r21, Y+7	; 0x07
    1c72:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <__mulshisi3>
    1c76:	eb e0       	ldi	r30, 0x0B	; 11
    1c78:	95 95       	asr	r25
    1c7a:	87 95       	ror	r24
    1c7c:	77 95       	ror	r23
    1c7e:	67 95       	ror	r22
    1c80:	ea 95       	dec	r30
    1c82:	d1 f7       	brne	.-12     	; 0x1c78 <bmp085_getrawpressure+0x19c>
	x3 = x1 + x2;
    1c84:	46 0e       	add	r4, r22
    1c86:	57 1e       	adc	r5, r23
    1c88:	68 1e       	adc	r6, r24
    1c8a:	79 1e       	adc	r7, r25
	b3 = (((((long)bmp085_regac1) * 4 + x3) << BMP085_MODE) + 2) >> 2;
    1c8c:	84 0c       	add	r8, r4
    1c8e:	95 1c       	adc	r9, r5
    1c90:	a6 1c       	adc	r10, r6
    1c92:	b7 1c       	adc	r11, r7
    1c94:	88 0c       	add	r8, r8
    1c96:	99 1c       	adc	r9, r9
    1c98:	aa 1c       	adc	r10, r10
    1c9a:	bb 1c       	adc	r11, r11
	x1 = (bmp085_regac3 * b6) >> 13;
	x2 = (bmp085_regb1 * ((b6 * b6) >> 12)) >> 16;
	x3 = ((x1 + x2) + 2) >> 2;
	b4 = (bmp085_regac4 * (uint32_t)(x3 + 32768)) >> 15;
	b7 = ((uint32_t)up - b3) * (50000 >> BMP085_MODE);
    1c9c:	c8 18       	sub	r12, r8
    1c9e:	d9 08       	sbc	r13, r9
    1ca0:	ea 08       	sbc	r14, r10
    1ca2:	fb 08       	sbc	r15, r11
    1ca4:	aa e6       	ldi	r26, 0x6A	; 106
    1ca6:	b8 e1       	ldi	r27, 0x18	; 24
    1ca8:	a7 01       	movw	r20, r14
    1caa:	96 01       	movw	r18, r12
    1cac:	0e 94 80 15 	call	0x2b00	; 0x2b00 <__muluhisi3>
	p = b7 < 0x80000000 ? (b7 << 1) / b4 : (b7 / b4) << 1;
    1cb0:	97 fd       	sbrc	r25, 7
    1cb2:	0d c0       	rjmp	.+26     	; 0x1cce <bmp085_getrawpressure+0x1f2>
    1cb4:	66 0f       	add	r22, r22
    1cb6:	77 1f       	adc	r23, r23
    1cb8:	88 1f       	adc	r24, r24
    1cba:	99 1f       	adc	r25, r25
    1cbc:	28 85       	ldd	r18, Y+8	; 0x08
    1cbe:	39 85       	ldd	r19, Y+9	; 0x09
    1cc0:	4a 85       	ldd	r20, Y+10	; 0x0a
    1cc2:	5b 85       	ldd	r21, Y+11	; 0x0b
    1cc4:	0e 94 30 15 	call	0x2a60	; 0x2a60 <__udivmodsi4>
    1cc8:	49 01       	movw	r8, r18
    1cca:	5a 01       	movw	r10, r20
    1ccc:	0c c0       	rjmp	.+24     	; 0x1ce6 <bmp085_getrawpressure+0x20a>
    1cce:	28 85       	ldd	r18, Y+8	; 0x08
    1cd0:	39 85       	ldd	r19, Y+9	; 0x09
    1cd2:	4a 85       	ldd	r20, Y+10	; 0x0a
    1cd4:	5b 85       	ldd	r21, Y+11	; 0x0b
    1cd6:	0e 94 30 15 	call	0x2a60	; 0x2a60 <__udivmodsi4>
    1cda:	49 01       	movw	r8, r18
    1cdc:	5a 01       	movw	r10, r20
    1cde:	88 0c       	add	r8, r8
    1ce0:	99 1c       	adc	r9, r9
    1ce2:	aa 1c       	adc	r10, r10
    1ce4:	bb 1c       	adc	r11, r11
	x1 = (p >> 8) * (p >> 8);
    1ce6:	99 27       	eor	r25, r25
    1ce8:	b7 fc       	sbrc	r11, 7
    1cea:	9a 95       	dec	r25
    1cec:	8b 2d       	mov	r24, r11
    1cee:	7a 2d       	mov	r23, r10
    1cf0:	69 2d       	mov	r22, r9
    1cf2:	9b 01       	movw	r18, r22
    1cf4:	ac 01       	movw	r20, r24
    1cf6:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <__mulsi3>
    1cfa:	9b 01       	movw	r18, r22
    1cfc:	ac 01       	movw	r20, r24
	x1 = (x1 * 3038) >> 16;
    1cfe:	ae ed       	ldi	r26, 0xDE	; 222
    1d00:	bb e0       	ldi	r27, 0x0B	; 11
    1d02:	0e 94 80 15 	call	0x2b00	; 0x2b00 <__muluhisi3>
    1d06:	6c 01       	movw	r12, r24
    1d08:	ff 24       	eor	r15, r15
    1d0a:	d7 fc       	sbrc	r13, 7
    1d0c:	f0 94       	com	r15
    1d0e:	ef 2c       	mov	r14, r15
	x2 = (-7357 * p) >> 16;
    1d10:	a3 e4       	ldi	r26, 0x43	; 67
    1d12:	b3 ee       	ldi	r27, 0xE3	; 227
    1d14:	a5 01       	movw	r20, r10
    1d16:	94 01       	movw	r18, r8
    1d18:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <__mulohisi3>
    1d1c:	bb 27       	eor	r27, r27
    1d1e:	97 fd       	sbrc	r25, 7
    1d20:	b0 95       	com	r27
    1d22:	ab 2f       	mov	r26, r27
	bmp085_rawpressure = p + ((x1 + x2 + 3791) >> 4);
    1d24:	c8 0e       	add	r12, r24
    1d26:	d9 1e       	adc	r13, r25
    1d28:	ea 1e       	adc	r14, r26
    1d2a:	fb 1e       	adc	r15, r27
    1d2c:	9f ec       	ldi	r25, 0xCF	; 207
    1d2e:	c9 0e       	add	r12, r25
    1d30:	9e e0       	ldi	r25, 0x0E	; 14
    1d32:	d9 1e       	adc	r13, r25
    1d34:	e1 1c       	adc	r14, r1
    1d36:	f1 1c       	adc	r15, r1
    1d38:	a4 e0       	ldi	r26, 0x04	; 4
    1d3a:	f5 94       	asr	r15
    1d3c:	e7 94       	ror	r14
    1d3e:	d7 94       	ror	r13
    1d40:	c7 94       	ror	r12
    1d42:	aa 95       	dec	r26
    1d44:	d1 f7       	brne	.-12     	; 0x1d3a <bmp085_getrawpressure+0x25e>
    1d46:	c8 0c       	add	r12, r8
    1d48:	d9 1c       	adc	r13, r9
    1d4a:	ea 1c       	adc	r14, r10
    1d4c:	fb 1c       	adc	r15, r11
    1d4e:	c0 92 c5 02 	sts	0x02C5, r12
    1d52:	d0 92 c6 02 	sts	0x02C6, r13
    1d56:	e0 92 c7 02 	sts	0x02C7, r14
    1d5a:	f0 92 c8 02 	sts	0x02C8, r15

	#if BMP085_FILTERPRESSURE == 1
	bmp085_rawpressure = bmp085_avaragefilter(bmp085_rawpressure);
    1d5e:	c7 01       	movw	r24, r14
    1d60:	b6 01       	movw	r22, r12
    1d62:	0e 94 03 0c 	call	0x1806	; 0x1806 <bmp085_avaragefilter>
    1d66:	60 93 c5 02 	sts	0x02C5, r22
    1d6a:	70 93 c6 02 	sts	0x02C6, r23
    1d6e:	80 93 c7 02 	sts	0x02C7, r24
    1d72:	90 93 c8 02 	sts	0x02C8, r25
	#endif
}
    1d76:	2b 96       	adiw	r28, 0x0b	; 11
    1d78:	0f b6       	in	r0, 0x3f	; 63
    1d7a:	f8 94       	cli
    1d7c:	de bf       	out	0x3e, r29	; 62
    1d7e:	0f be       	out	0x3f, r0	; 63
    1d80:	cd bf       	out	0x3d, r28	; 61
    1d82:	df 91       	pop	r29
    1d84:	cf 91       	pop	r28
    1d86:	ff 90       	pop	r15
    1d88:	ef 90       	pop	r14
    1d8a:	df 90       	pop	r13
    1d8c:	cf 90       	pop	r12
    1d8e:	bf 90       	pop	r11
    1d90:	af 90       	pop	r10
    1d92:	9f 90       	pop	r9
    1d94:	8f 90       	pop	r8
    1d96:	7f 90       	pop	r7
    1d98:	6f 90       	pop	r6
    1d9a:	5f 90       	pop	r5
    1d9c:	4f 90       	pop	r4
    1d9e:	08 95       	ret

00001da0 <bmp085_gettemperature>:

/*
 * get celsius temperature
 */
double bmp085_gettemperature() {
	bmp085_getrawtemperature();
    1da0:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <bmp085_getrawtemperature>
	double temperature = ((bmp085_rawtemperature + 8)>>4);
    1da4:	60 91 cf 02 	lds	r22, 0x02CF
    1da8:	70 91 d0 02 	lds	r23, 0x02D0
    1dac:	80 91 d1 02 	lds	r24, 0x02D1
    1db0:	90 91 d2 02 	lds	r25, 0x02D2
    1db4:	68 5f       	subi	r22, 0xF8	; 248
    1db6:	7f 4f       	sbci	r23, 0xFF	; 255
    1db8:	8f 4f       	sbci	r24, 0xFF	; 255
    1dba:	9f 4f       	sbci	r25, 0xFF	; 255
    1dbc:	a4 e0       	ldi	r26, 0x04	; 4
    1dbe:	95 95       	asr	r25
    1dc0:	87 95       	ror	r24
    1dc2:	77 95       	ror	r23
    1dc4:	67 95       	ror	r22
    1dc6:	aa 95       	dec	r26
    1dc8:	d1 f7       	brne	.-12     	; 0x1dbe <bmp085_gettemperature+0x1e>
    1dca:	0e 94 76 16 	call	0x2cec	; 0x2cec <__floatsisf>
	temperature = temperature /10;
    1dce:	20 e0       	ldi	r18, 0x00	; 0
    1dd0:	30 e0       	ldi	r19, 0x00	; 0
    1dd2:	40 e2       	ldi	r20, 0x20	; 32
    1dd4:	51 e4       	ldi	r21, 0x41	; 65
    1dd6:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <__divsf3>
	return temperature;
}
    1dda:	08 95       	ret

00001ddc <bmp085_getpressure>:

/*
 * get pressure
 */
int32_t bmp085_getpressure() {
	bmp085_getrawpressure();
    1ddc:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <bmp085_getrawpressure>
	return bmp085_rawpressure + BMP085_UNITPAOFFSET;
    1de0:	60 91 c5 02 	lds	r22, 0x02C5
    1de4:	70 91 c6 02 	lds	r23, 0x02C6
    1de8:	80 91 c7 02 	lds	r24, 0x02C7
    1dec:	90 91 c8 02 	lds	r25, 0x02C8
}
    1df0:	08 95       	ret

00001df2 <bmp085_getaltitude>:

/*
 * get altitude
 */
double bmp085_getaltitude() {
	bmp085_getrawpressure();
    1df2:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <bmp085_getrawpressure>
	return ((1 - pow(bmp085_rawpressure/(double)101325, 0.1903 )) / 0.0000225577) + BMP085_UNITMOFFSET;
    1df6:	60 91 c5 02 	lds	r22, 0x02C5
    1dfa:	70 91 c6 02 	lds	r23, 0x02C6
    1dfe:	80 91 c7 02 	lds	r24, 0x02C7
    1e02:	90 91 c8 02 	lds	r25, 0x02C8
    1e06:	0e 94 76 16 	call	0x2cec	; 0x2cec <__floatsisf>
    1e0a:	20 e8       	ldi	r18, 0x80	; 128
    1e0c:	36 ee       	ldi	r19, 0xE6	; 230
    1e0e:	45 ec       	ldi	r20, 0xC5	; 197
    1e10:	57 e4       	ldi	r21, 0x47	; 71
    1e12:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <__divsf3>
    1e16:	21 e0       	ldi	r18, 0x01	; 1
    1e18:	3e ed       	ldi	r19, 0xDE	; 222
    1e1a:	42 e4       	ldi	r20, 0x42	; 66
    1e1c:	5e e3       	ldi	r21, 0x3E	; 62
    1e1e:	0e 94 02 17 	call	0x2e04	; 0x2e04 <pow>
    1e22:	9b 01       	movw	r18, r22
    1e24:	ac 01       	movw	r20, r24
    1e26:	60 e0       	ldi	r22, 0x00	; 0
    1e28:	70 e0       	ldi	r23, 0x00	; 0
    1e2a:	80 e8       	ldi	r24, 0x80	; 128
    1e2c:	9f e3       	ldi	r25, 0x3F	; 63
    1e2e:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <__subsf3>
    1e32:	2b e4       	ldi	r18, 0x4B	; 75
    1e34:	3a e3       	ldi	r19, 0x3A	; 58
    1e36:	4d eb       	ldi	r20, 0xBD	; 189
    1e38:	57 e3       	ldi	r21, 0x37	; 55
    1e3a:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <__divsf3>
    1e3e:	20 e0       	ldi	r18, 0x00	; 0
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	a9 01       	movw	r20, r18
    1e44:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <__addsf3>
}
    1e48:	08 95       	ret

00001e4a <bmp085_init>:

/*
 * init bmp085
 */
void bmp085_init() {
    1e4a:	cf 93       	push	r28
	#if BMP085_I2CINIT == 1
	//init i2c
	i2c_init();
    1e4c:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <i2c_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1e50:	8a e1       	ldi	r24, 0x1A	; 26
    1e52:	8a 95       	dec	r24
    1e54:	f1 f7       	brne	.-4      	; 0x1e52 <bmp085_init+0x8>
    1e56:	00 c0       	rjmp	.+0      	; 0x1e58 <bmp085_init+0xe>
	_delay_us(10);
	#endif

	bmp085_getcalibration(); //get calibration data
    1e58:	0e 94 37 0c 	call	0x186e	; 0x186e <bmp085_getcalibration>
	bmp085_getrawtemperature(); //update raw temperature, at least the first time
    1e5c:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <bmp085_getrawtemperature>
    1e60:	c5 e1       	ldi	r28, 0x15	; 21

	#if BMP085_FILTERPRESSURE == 1
	//initialize the avarage filter
	uint8_t i=0;
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
		bmp085_getrawpressure();
    1e62:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <bmp085_getrawpressure>
    1e66:	c1 50       	subi	r28, 0x01	; 1
	bmp085_getrawtemperature(); //update raw temperature, at least the first time

	#if BMP085_FILTERPRESSURE == 1
	//initialize the avarage filter
	uint8_t i=0;
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
    1e68:	e1 f7       	brne	.-8      	; 0x1e62 <bmp085_init+0x18>
		bmp085_getrawpressure();
	}
	#endif
}
    1e6a:	cf 91       	pop	r28
    1e6c:	08 95       	ret

00001e6e <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
    1e6e:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    1e72:	80 e2       	ldi	r24, 0x20	; 32
    1e74:	80 93 b8 00 	sts	0x00B8, r24
    1e78:	08 95       	ret

00001e7a <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    1e7a:	94 ea       	ldi	r25, 0xA4	; 164
    1e7c:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    1e80:	90 91 bc 00 	lds	r25, 0x00BC
    1e84:	97 ff       	sbrs	r25, 7
    1e86:	fc cf       	rjmp	.-8      	; 0x1e80 <i2c_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    1e88:	90 91 b9 00 	lds	r25, 0x00B9
    1e8c:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    1e8e:	98 30       	cpi	r25, 0x08	; 8
    1e90:	21 f0       	breq	.+8      	; 0x1e9a <i2c_start+0x20>
    1e92:	90 31       	cpi	r25, 0x10	; 16
    1e94:	11 f0       	breq	.+4      	; 0x1e9a <i2c_start+0x20>
    1e96:	81 e0       	ldi	r24, 0x01	; 1
    1e98:	08 95       	ret

	// send device address
	TWDR = address;
    1e9a:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    1e9e:	84 e8       	ldi	r24, 0x84	; 132
    1ea0:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    1ea4:	80 91 bc 00 	lds	r24, 0x00BC
    1ea8:	87 ff       	sbrs	r24, 7
    1eaa:	fc cf       	rjmp	.-8      	; 0x1ea4 <i2c_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    1eac:	80 91 b9 00 	lds	r24, 0x00B9
    1eb0:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
    1eb2:	88 31       	cpi	r24, 0x18	; 24
    1eb4:	11 f0       	breq	.+4      	; 0x1eba <i2c_start+0x40>
    1eb6:	80 34       	cpi	r24, 0x40	; 64
    1eb8:	71 f7       	brne	.-36     	; 0x1e96 <i2c_start+0x1c>

	return 0;
    1eba:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
    1ebc:	08 95       	ret

00001ebe <i2c_start_wait>:


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    1ebe:	24 ea       	ldi	r18, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    1ec0:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    1ec2:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    1ec4:	20 93 bc 00 	sts	0x00BC, r18
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    1ec8:	90 91 bc 00 	lds	r25, 0x00BC
    1ecc:	97 ff       	sbrs	r25, 7
    1ece:	fc cf       	rjmp	.-8      	; 0x1ec8 <i2c_start_wait+0xa>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    1ed0:	90 91 b9 00 	lds	r25, 0x00B9
    1ed4:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    1ed6:	98 30       	cpi	r25, 0x08	; 8
    1ed8:	11 f0       	breq	.+4      	; 0x1ede <i2c_start_wait+0x20>
    1eda:	90 31       	cpi	r25, 0x10	; 16
    1edc:	99 f7       	brne	.-26     	; 0x1ec4 <i2c_start_wait+0x6>
    
    	// send device address
    	TWDR = address;
    1ede:	80 93 bb 00 	sts	0x00BB, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
    1ee2:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    1ee6:	90 91 bc 00 	lds	r25, 0x00BC
    1eea:	97 ff       	sbrs	r25, 7
    1eec:	fc cf       	rjmp	.-8      	; 0x1ee6 <i2c_start_wait+0x28>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    1eee:	90 91 b9 00 	lds	r25, 0x00B9
    1ef2:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    1ef4:	90 32       	cpi	r25, 0x20	; 32
    1ef6:	11 f0       	breq	.+4      	; 0x1efc <i2c_start_wait+0x3e>
    1ef8:	98 35       	cpi	r25, 0x58	; 88
    1efa:	39 f4       	brne	.+14     	; 0x1f0a <i2c_start_wait+0x4c>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    1efc:	40 93 bc 00 	sts	0x00BC, r20
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
    1f00:	90 91 bc 00 	lds	r25, 0x00BC
    1f04:	94 fd       	sbrc	r25, 4
    1f06:	fc cf       	rjmp	.-8      	; 0x1f00 <i2c_start_wait+0x42>
    1f08:	dd cf       	rjmp	.-70     	; 0x1ec4 <i2c_start_wait+0x6>
    1f0a:	08 95       	ret

00001f0c <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
    1f0c:	0c 94 3d 0f 	jmp	0x1e7a	; 0x1e7a <i2c_start>

00001f10 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    1f10:	84 e9       	ldi	r24, 0x94	; 148
    1f12:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    1f16:	80 91 bc 00 	lds	r24, 0x00BC
    1f1a:	84 fd       	sbrc	r24, 4
    1f1c:	fc cf       	rjmp	.-8      	; 0x1f16 <i2c_stop+0x6>

}/* i2c_stop */
    1f1e:	08 95       	ret

00001f20 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    1f20:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    1f24:	84 e8       	ldi	r24, 0x84	; 132
    1f26:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    1f2a:	80 91 bc 00 	lds	r24, 0x00BC
    1f2e:	87 ff       	sbrs	r24, 7
    1f30:	fc cf       	rjmp	.-8      	; 0x1f2a <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    1f32:	90 91 b9 00 	lds	r25, 0x00B9
    1f36:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    1f38:	81 e0       	ldi	r24, 0x01	; 1
    1f3a:	98 32       	cpi	r25, 0x28	; 40
    1f3c:	09 f4       	brne	.+2      	; 0x1f40 <i2c_write+0x20>
    1f3e:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
    1f40:	08 95       	ret

00001f42 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    1f42:	84 ec       	ldi	r24, 0xC4	; 196
    1f44:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
    1f48:	80 91 bc 00 	lds	r24, 0x00BC
    1f4c:	87 ff       	sbrs	r24, 7
    1f4e:	fc cf       	rjmp	.-8      	; 0x1f48 <i2c_readAck+0x6>

    return TWDR;
    1f50:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
    1f54:	08 95       	ret

00001f56 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    1f56:	84 e8       	ldi	r24, 0x84	; 132
    1f58:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    1f5c:	80 91 bc 00 	lds	r24, 0x00BC
    1f60:	87 ff       	sbrs	r24, 7
    1f62:	fc cf       	rjmp	.-8      	; 0x1f5c <i2c_readNak+0x6>
	
    return TWDR;
    1f64:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
    1f68:	08 95       	ret

00001f6a <main>:
	uint8_t i, num_sensors, device, page, mode, pos, tmp, up_held, dn_held;
	uint16_t bitmap;
//	DS2415_date_t dt;	// date structure for RTC

	// set unused I/O to input and enable pull-ups;
	DDRC = 0;	// all of port C is unused
    1f6a:	17 b8       	out	0x07, r1	; 7
	PORTC = 0x0f;
    1f6c:	8f e0       	ldi	r24, 0x0F	; 15
    1f6e:	88 b9       	out	0x08, r24	; 8
#if defined(__AVR_ATmega168__)
	DDRD &= ~(1 << PD7);
    1f70:	57 98       	cbi	0x0a, 7	; 10
	PORTD |= (1 << PD7);
    1f72:	5f 9a       	sbi	0x0b, 7	; 11
#else
#error "Unknown target device"
#endif
	
	// enable our push buttons
	DDRB &= ~(1 << PB7);	// set for input - button 1
    1f74:	27 98       	cbi	0x04, 7	; 4
	PORTB |= (1 << PB7);	// enable pull-up
    1f76:	2f 9a       	sbi	0x05, 7	; 5
	DDRD &= ~((1 << PD2) | (1 << PD3) | (1 << PD4));	// buttons 2,3,4
    1f78:	8a b1       	in	r24, 0x0a	; 10
    1f7a:	83 7e       	andi	r24, 0xE3	; 227
    1f7c:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << PD2) | (1 << PD3) | (1 << PD4);
    1f7e:	8b b1       	in	r24, 0x0b	; 11
    1f80:	8c 61       	ori	r24, 0x1C	; 28
    1f82:	8b b9       	out	0x0b, r24	; 11

	// set up PWM for LCD backlight control
#if defined(__AVR_ATmega168__)
#define PWM_OUT OCR0B
	DDRD |= _BV( PD5);	// OC0B pin as output
    1f84:	55 9a       	sbi	0x0a, 5	; 10
	TCCR0A = _BV( WGM00) | _BV( WGM01) | _BV( COM0B1);	// Fast PWM, CTC+TOP
    1f86:	83 e2       	ldi	r24, 0x23	; 35
    1f88:	84 bd       	out	0x24, r24	; 36
	TCCR0B = _BV( CS01);	// 1/8 prescale
    1f8a:	82 e0       	ldi	r24, 0x02	; 2
    1f8c:	85 bd       	out	0x25, r24	; 37
	DDRD |= _BV( PD7);	// OC2 pin as output
	TCCR2 = _BV( WGM20) | _BV( WGM21) | _BV( COM21) | _BV( CS21);	// fast PWM, CTC+TOP, 1/8 prescale
#else
#error "Unknown target device"
#endif
	PWM_OUT = gBacklight = eeprom_read_byte( &nvBacklight);	// grab our persistant data
    1f8e:	89 e4       	ldi	r24, 0x49	; 73
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <__eerd_byte_m168>
    1f96:	80 93 a5 02 	sts	0x02A5, r24
    1f9a:	88 bd       	out	0x28, r24	; 40

	// set up the elapsed timer
	OCR1A = F_CPU / TMR_TICK;	// timer = 5 msec
    1f9c:	80 e4       	ldi	r24, 0x40	; 64
    1f9e:	9c e9       	ldi	r25, 0x9C	; 156
    1fa0:	90 93 89 00 	sts	0x0089, r25
    1fa4:	80 93 88 00 	sts	0x0088, r24
	TCCR1B = _BV( WGM12) + _BV( CS10);	// clear timer on compare match, no prescaler
    1fa8:	89 e0       	ldi	r24, 0x09	; 9
    1faa:	80 93 81 00 	sts	0x0081, r24

	sei();	// enable global interrupts
    1fae:	78 94       	sei
	
	// load userdefined characters from program memory
	// into LCD controller CG RAM
	lcd_init( LCD_DISP_ON);
    1fb0:	8c e0       	ldi	r24, 0x0C	; 12
    1fb2:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <lcd_init>
	lcd_command( _BV( LCD_CGRAM));	/* set CG RAM start address 0 */
    1fb6:	80 e4       	ldi	r24, 0x40	; 64
    1fb8:	0e 94 7a 07 	call	0xef4	; 0xef4 <lcd_command>
    1fbc:	cc ef       	ldi	r28, 0xFC	; 252
    1fbe:	d2 e0       	ldi	r29, 0x02	; 2
	for( i = 0; i < (sizeof lcdChars / sizeof lcdChars[0]); i++)
		lcd_data( pgm_read_byte_near( &lcdChars[i]));
    1fc0:	fe 01       	movw	r30, r28
    1fc2:	84 91       	lpm	r24, Z
    1fc4:	0e 94 83 07 	call	0xf06	; 0xf06 <lcd_data>
    1fc8:	21 96       	adiw	r28, 0x01	; 1
	
	// load userdefined characters from program memory
	// into LCD controller CG RAM
	lcd_init( LCD_DISP_ON);
	lcd_command( _BV( LCD_CGRAM));	/* set CG RAM start address 0 */
	for( i = 0; i < (sizeof lcdChars / sizeof lcdChars[0]); i++)
    1fca:	f3 e0       	ldi	r31, 0x03	; 3
    1fcc:	cc 30       	cpi	r28, 0x0C	; 12
    1fce:	df 07       	cpc	r29, r31
    1fd0:	b9 f7       	brne	.-18     	; 0x1fc0 <main+0x56>
		lcd_data( pgm_read_byte_near( &lcdChars[i]));
	lcd_clrscr();
    1fd2:	0e 94 9f 07 	call	0xf3e	; 0xf3e <lcd_clrscr>

	// set up the comm port
	uart_init( UART_BAUD_SELECT( BAUD, F_CPU));
    1fd6:	89 e1       	ldi	r24, 0x19	; 25
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	0e 94 a4 09 	call	0x1348	; 0x1348 <uart_init>
	
	// set up bmp085board
	bmp085_init();
    1fde:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <bmp085_init>

	// announce our birth
	uart_puts_P( "DS1820 Logger v" MAJOR_VER "." MINOR_VER "\r");
    1fe2:	83 ee       	ldi	r24, 0xE3	; 227
    1fe4:	92 e0       	ldi	r25, 0x02	; 2
    1fe6:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <uart_puts_p>
	lcd_gotoxy( 0, 0);
    1fea:	60 e0       	ldi	r22, 0x00	; 0
    1fec:	80 e0       	ldi	r24, 0x00	; 0
    1fee:	0e 94 8c 07 	call	0xf18	; 0xf18 <lcd_gotoxy>
	lcd_puts_P( "DS18x20 Logger v" MAJOR_VER);
    1ff2:	8e ec       	ldi	r24, 0xCE	; 206
    1ff4:	92 e0       	ldi	r25, 0x02	; 2
    1ff6:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <lcd_puts_p>
	
	
	delay_ms( 1000);	// pause lcd display for a moment
    1ffa:	68 e0       	ldi	r22, 0x08	; 8
    1ffc:	77 e5       	ldi	r23, 0x57	; 87
    1ffe:	84 e1       	ldi	r24, 0x14	; 20
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	0e 94 2a 06 	call	0xc54	; 0xc54 <delayloop32>

	// get attached 1-wire sensor info
	num_sensors = onewire_search();
    2006:	0e 94 5d 02 	call	0x4ba	; 0x4ba <onewire_search>
    200a:	38 2e       	mov	r3, r24
	if( num_sensors == 0 && ! gRTC_status) // bolo povodne
    200c:	81 11       	cpse	r24, r1
    200e:	0e c0       	rjmp	.+28     	; 0x202c <main+0xc2>
    2010:	80 91 f9 01 	lds	r24, 0x01F9
    2014:	81 11       	cpse	r24, r1
    2016:	0a c0       	rjmp	.+20     	; 0x202c <main+0xc2>
//	if( num_sensors == 0) 
	{
		lcd_gotoxy( 0, 2);
    2018:	62 e0       	ldi	r22, 0x02	; 2
    201a:	0e 94 8c 07 	call	0xf18	; 0xf18 <lcd_gotoxy>
		lcd_puts_P( "No DS Sensors Found");
    201e:	8a eb       	ldi	r24, 0xBA	; 186
    2020:	92 e0       	ldi	r25, 0x02	; 2
    2022:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <lcd_puts_p>
		uart_puts_P( "No Sensors Found");
    2026:	89 ea       	ldi	r24, 0xA9	; 169
    2028:	92 e0       	ldi	r25, 0x02	; 2
    202a:	19 c0       	rjmp	.+50     	; 0x205e <main+0xf4>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    202c:	4a e0       	ldi	r20, 0x0A	; 10
    202e:	66 ea       	ldi	r22, 0xA6	; 166
    2030:	72 e0       	ldi	r23, 0x02	; 2
    2032:	83 2d       	mov	r24, r3
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	0e 94 f6 18 	call	0x31ec	; 0x31ec <__itoa_ncheck>
	} 
	else
	{
		// display the count of sensors found on 1-Wire bus
		itoa( (int)num_sensors, gBuffer, 10);
		lcd_gotoxy( 0, 2);
    203a:	62 e0       	ldi	r22, 0x02	; 2
    203c:	80 e0       	ldi	r24, 0x00	; 0
    203e:	0e 94 8c 07 	call	0xf18	; 0xf18 <lcd_gotoxy>
		lcd_puts( gBuffer);
    2042:	86 ea       	ldi	r24, 0xA6	; 166
    2044:	92 e0       	ldi	r25, 0x02	; 2
    2046:	0e 94 c5 07 	call	0xf8a	; 0xf8a <lcd_puts>
		lcd_puts_P( " Sensor(s)");
    204a:	8e e9       	ldi	r24, 0x9E	; 158
    204c:	92 e0       	ldi	r25, 0x02	; 2
    204e:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <lcd_puts_p>
		uart_puts( gBuffer);
    2052:	86 ea       	ldi	r24, 0xA6	; 166
    2054:	92 e0       	ldi	r25, 0x02	; 2
    2056:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <uart_puts>
		uart_puts_P( " DS18X20 Sensor(s) available\r");
    205a:	80 e8       	ldi	r24, 0x80	; 128
    205c:	92 e0       	ldi	r25, 0x02	; 2
    205e:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <uart_puts_p>
	}
	delay_ms( 2000);	// pause lcd display for a moment
    2062:	60 e1       	ldi	r22, 0x10	; 16
    2064:	7e ea       	ldi	r23, 0xAE	; 174
    2066:	88 e2       	ldi	r24, 0x28	; 40
    2068:	90 e0       	ldi	r25, 0x00	; 0
    206a:	0e 94 2a 06 	call	0xc54	; 0xc54 <delayloop32>
	
	// initialize 1-wire output order from EEPROM.  make sure the order we read in
	// accounts for every sensor number by flipping the corresponding bit for each sensor
	// in the bitmap
	bitmap = 0;
	for( i = 0; i < num_sensors; i++)
    206e:	80 e0       	ldi	r24, 0x00	; 0
    2070:	90 e0       	ldi	r25, 0x00	; 0
	
	
	// initialize 1-wire output order from EEPROM.  make sure the order we read in
	// accounts for every sensor number by flipping the corresponding bit for each sensor
	// in the bitmap
	bitmap = 0;
    2072:	c0 e0       	ldi	r28, 0x00	; 0
    2074:	d0 e0       	ldi	r29, 0x00	; 0
	for( i = 0; i < num_sensors; i++)
		bitmap |= _BV( i);
    2076:	21 e0       	ldi	r18, 0x01	; 1
    2078:	30 e0       	ldi	r19, 0x00	; 0
	
	// initialize 1-wire output order from EEPROM.  make sure the order we read in
	// accounts for every sensor number by flipping the corresponding bit for each sensor
	// in the bitmap
	bitmap = 0;
	for( i = 0; i < num_sensors; i++)
    207a:	83 15       	cp	r24, r3
    207c:	58 f4       	brcc	.+22     	; 0x2094 <main+0x12a>
		bitmap |= _BV( i);
    207e:	a9 01       	movw	r20, r18
    2080:	08 2e       	mov	r0, r24
    2082:	02 c0       	rjmp	.+4      	; 0x2088 <main+0x11e>
    2084:	44 0f       	add	r20, r20
    2086:	55 1f       	adc	r21, r21
    2088:	0a 94       	dec	r0
    208a:	e2 f7       	brpl	.-8      	; 0x2084 <main+0x11a>
    208c:	c4 2b       	or	r28, r20
    208e:	d5 2b       	or	r29, r21
    2090:	01 96       	adiw	r24, 0x01	; 1
    2092:	f3 cf       	rjmp	.-26     	; 0x207a <main+0x110>
		if( eeprom_read_byte( &nvNum_sensors) == num_sensors)
    2094:	88 e4       	ldi	r24, 0x48	; 72
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <__eerd_byte_m168>
    209c:	18 2f       	mov	r17, r24
    209e:	83 11       	cpse	r24, r3
    20a0:	1d c0       	rjmp	.+58     	; 0x20dc <main+0x172>
		{
		// assume if we have same number of sensors, we want to use the prev. order
		 eeprom_read_block( g1Wire_order, nv1Wire_order, MAX_SENSORS);
    20a2:	48 e0       	ldi	r20, 0x08	; 8
    20a4:	50 e0       	ldi	r21, 0x00	; 0
    20a6:	60 e4       	ldi	r22, 0x40	; 64
    20a8:	70 e0       	ldi	r23, 0x00	; 0
    20aa:	83 ee       	ldi	r24, 0xE3	; 227
    20ac:	92 e0       	ldi	r25, 0x02	; 2
    20ae:	0e 94 40 1b 	call	0x3680	; 0x3680 <__eerd_block_m168>
    20b2:	43 ee       	ldi	r20, 0xE3	; 227
    20b4:	52 e0       	ldi	r21, 0x02	; 2

		// in the order we just loaded, check to see if all sensor
		// numbers were accounted for, by turning off bits in the bitmap
		 for( i = 0; i < num_sensors; i++)
    20b6:	fa 01       	movw	r30, r20
			 bitmap &= ~_BV( g1Wire_order[i]);
    20b8:	61 e0       	ldi	r22, 0x01	; 1
    20ba:	70 e0       	ldi	r23, 0x00	; 0
    20bc:	8e 2f       	mov	r24, r30
    20be:	84 1b       	sub	r24, r20
		// assume if we have same number of sensors, we want to use the prev. order
		 eeprom_read_block( g1Wire_order, nv1Wire_order, MAX_SENSORS);

		// in the order we just loaded, check to see if all sensor
		// numbers were accounted for, by turning off bits in the bitmap
		 for( i = 0; i < num_sensors; i++)
    20c0:	81 17       	cp	r24, r17
    20c2:	60 f4       	brcc	.+24     	; 0x20dc <main+0x172>
			 bitmap &= ~_BV( g1Wire_order[i]);
    20c4:	9b 01       	movw	r18, r22
    20c6:	01 90       	ld	r0, Z+
    20c8:	02 c0       	rjmp	.+4      	; 0x20ce <main+0x164>
    20ca:	22 0f       	add	r18, r18
    20cc:	33 1f       	adc	r19, r19
    20ce:	0a 94       	dec	r0
    20d0:	e2 f7       	brpl	.-8      	; 0x20ca <main+0x160>
    20d2:	20 95       	com	r18
    20d4:	30 95       	com	r19
    20d6:	c2 23       	and	r28, r18
    20d8:	d3 23       	and	r29, r19
    20da:	f0 cf       	rjmp	.-32     	; 0x20bc <main+0x152>
		}

	if( bitmap != 0)	// were any sensors unaccounted for?
    20dc:	cd 2b       	or	r28, r29
    20de:	b1 f0       	breq	.+44     	; 0x210c <main+0x1a2>
	{
		// yes, so load the default order
		eeprom_write_byte( &nvNum_sensors, num_sensors);
    20e0:	63 2d       	mov	r22, r3
    20e2:	88 e4       	ldi	r24, 0x48	; 72
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	0e 94 68 1b 	call	0x36d0	; 0x36d0 <__eewr_byte_m168>
    20ea:	83 ee       	ldi	r24, 0xE3	; 227
    20ec:	92 e0       	ldi	r25, 0x02	; 2
		for( i = 0; i < num_sensors; i++)
    20ee:	fc 01       	movw	r30, r24
    20f0:	2e 2f       	mov	r18, r30
    20f2:	28 1b       	sub	r18, r24
    20f4:	23 15       	cp	r18, r3
    20f6:	10 f4       	brcc	.+4      	; 0x20fc <main+0x192>
			g1Wire_order[i] = i;
    20f8:	21 93       	st	Z+, r18
    20fa:	fa cf       	rjmp	.-12     	; 0x20f0 <main+0x186>
		eeprom_write_block( g1Wire_order, nv1Wire_order, MAX_SENSORS);
    20fc:	48 e0       	ldi	r20, 0x08	; 8
    20fe:	50 e0       	ldi	r21, 0x00	; 0
    2100:	60 e4       	ldi	r22, 0x40	; 64
    2102:	70 e0       	ldi	r23, 0x00	; 0
    2104:	83 ee       	ldi	r24, 0xE3	; 227
    2106:	92 e0       	ldi	r25, 0x02	; 2
    2108:	0e 94 5e 1b 	call	0x36bc	; 0x36bc <__eewr_block_m168>
	}

	// load and sanitize the reading interval from EEPROM
	gLog_interval = eeprom_read_word( &nvLog_interval);
    210c:	8a e4       	ldi	r24, 0x4A	; 74
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <__eerd_word_m168>
    2114:	90 93 f0 02 	sts	0x02F0, r25
    2118:	80 93 ef 02 	sts	0x02EF, r24
	if( gLog_interval > MAX_INTERVAL || gLog_interval < MIN_INTERVAL)
    211c:	05 97       	sbiw	r24, 0x05	; 5
    211e:	8b 30       	cpi	r24, 0x0B	; 11
    2120:	97 42       	sbci	r25, 0x27	; 39
    2122:	60 f0       	brcs	.+24     	; 0x213c <main+0x1d2>
	{
		gLog_interval = DEF_INTERVAL;  // bola min hodnota
    2124:	8f e0       	ldi	r24, 0x0F	; 15
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	90 93 f0 02 	sts	0x02F0, r25
    212c:	80 93 ef 02 	sts	0x02EF, r24
		eeprom_write_word( &nvLog_interval, gLog_interval);	// save the persistant value
    2130:	6f e0       	ldi	r22, 0x0F	; 15
    2132:	70 e0       	ldi	r23, 0x00	; 0
    2134:	8a e4       	ldi	r24, 0x4A	; 74
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	0e 94 76 1b 	call	0x36ec	; 0x36ec <__eewr_word_m168>
	// don't worry about backlight since it's only 1 byte it WILL be between 0 and 255
		
		
	//					 setup for main loop*********************************************
	page = 0;
	lcd_clrscr();
    213c:	0e 94 9f 07 	call	0xf3e	; 0xf3e <lcd_clrscr>
	mode = MODE_START;	// first choice 
	TIMSK1 = _BV( OCIE1A);	// enable Output Compare 1 overflow interrupt to start elapsed timer
    2140:	82 e0       	ldi	r24, 0x02	; 2
    2142:	80 93 6f 00 	sts	0x006F, r24
		
	// don't worry about backlight since it's only 1 byte it WILL be between 0 and 255
		
		
	//					 setup for main loop*********************************************
	page = 0;
    2146:	21 2c       	mov	r2, r1
			}
		case MODE_INTERVAL:	// displaying logging interval change******************
			{
				lcd_clrscr();
				lcd_puts_P( "Logging interval\n");
				sprintf( gBuffer, "%4i", gLog_interval);
    2148:	06 ee       	ldi	r16, 0xE6	; 230
    214a:	11 e0       	ldi	r17, 0x01	; 1
    214c:	c6 ea       	ldi	r28, 0xA6	; 166
    214e:	d2 e0       	ldi	r29, 0x02	; 2
					{
						// give a small delay to see if this is a simultaneous press
						delay_ms( CMD_DELAY);
						if( BTN_DOWN) break;	// exit display loop
						// cycle if needed
						if( page + 4 < num_sensors) page += 2; //boli 2 a 2
    2150:	c3 2c       	mov	r12, r3
    2152:	d1 2c       	mov	r13, r1
					lcd_puts( gBuffer);

					if( BTN_UP)	// display next
					{
						// cycle if needed
						if( i < num_sensors - 1) i++;
    2154:	26 01       	movw	r4, r12
    2156:	41 e0       	ldi	r20, 0x01	; 1
    2158:	44 1a       	sub	r4, r20
    215a:	51 08       	sbc	r5, r1
				while( BTN_UP || BTN_DOWN);	// wait until switches released
				break;	// next case
			}
		case MODE_START:	// displaying start logging message**********************
			{
				if( ! num_sensors > 0)
    215c:	33 20       	and	r3, r3
    215e:	09 f4       	brne	.+2      	; 0x2162 <main+0x1f8>
    2160:	d2 c3       	rjmp	.+1956   	; 0x2906 <main+0x99c>
					{
					// no sensors found so skip all sensor related modes
					mode = MODE_BACKLIGHT;
					break;
					}
				lcd_clrscr();
    2162:	0e 94 9f 07 	call	0xf3e	; 0xf3e <lcd_clrscr>
				lcd_puts_P( "Start Logging?\n");
    2166:	80 e7       	ldi	r24, 0x70	; 112
    2168:	92 e0       	ldi	r25, 0x02	; 2
    216a:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <lcd_puts_p>
				lcd_putc( 0);	// down arrow
    216e:	80 e0       	ldi	r24, 0x00	; 0
    2170:	0e 94 a5 07 	call	0xf4a	; 0xf4a <lcd_putc>
				lcd_puts_P( " or ");
    2174:	8b e6       	ldi	r24, 0x6B	; 107
    2176:	92 e0       	ldi	r25, 0x02	; 2
    2178:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <lcd_puts_p>
				lcd_putc( 1);	// up arrow
    217c:	81 e0       	ldi	r24, 0x01	; 1
    217e:	0e 94 a5 07 	call	0xf4a	; 0xf4a <lcd_putc>
				lcd_puts_P( " to start\n\n");
    2182:	8f e5       	ldi	r24, 0x5F	; 95
    2184:	92 e0       	ldi	r25, 0x02	; 2
    2186:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <lcd_puts_p>
				lcd_puts_P( "press MODE to other");
    218a:	8b e4       	ldi	r24, 0x4B	; 75
    218c:	92 e0       	ldi	r25, 0x02	; 2
    218e:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <lcd_puts_p>
				while( ! (BTN_MODE || BTN_UP || BTN_DOWN || BTN_SEL));	// wait for a button press
    2192:	83 b1       	in	r24, 0x03	; 3
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	80 95       	com	r24
    2198:	90 95       	com	r25
    219a:	87 fd       	sbrc	r24, 7
    219c:	12 c0       	rjmp	.+36     	; 0x21c2 <main+0x258>
    219e:	89 b1       	in	r24, 0x09	; 9
    21a0:	90 e0       	ldi	r25, 0x00	; 0
    21a2:	80 95       	com	r24
    21a4:	90 95       	com	r25
    21a6:	82 fd       	sbrc	r24, 2
    21a8:	0c c0       	rjmp	.+24     	; 0x21c2 <main+0x258>
    21aa:	89 b1       	in	r24, 0x09	; 9
    21ac:	90 e0       	ldi	r25, 0x00	; 0
    21ae:	80 95       	com	r24
    21b0:	90 95       	com	r25
    21b2:	83 fd       	sbrc	r24, 3
    21b4:	06 c0       	rjmp	.+12     	; 0x21c2 <main+0x258>
    21b6:	89 b1       	in	r24, 0x09	; 9
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	80 95       	com	r24
    21bc:	90 95       	com	r25
    21be:	84 ff       	sbrs	r24, 4
    21c0:	e8 cf       	rjmp	.-48     	; 0x2192 <main+0x228>
				// if mode button pressed, change to next state
				if( BTN_MODE)
    21c2:	83 b1       	in	r24, 0x03	; 3
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	80 95       	com	r24
    21c8:	90 95       	com	r25
    21ca:	87 ff       	sbrs	r24, 7
    21cc:	09 c0       	rjmp	.+18     	; 0x21e0 <main+0x276>
					{
					lcd_clrscr();	// provide feedback on button push
    21ce:	0e 94 9f 07 	call	0xf3e	; 0xf3e <lcd_clrscr>
					mode = MODE_ORDER;
					while( BTN_MODE);	// wait for release
    21d2:	83 b1       	in	r24, 0x03	; 3
    21d4:	90 e0       	ldi	r25, 0x00	; 0
    21d6:	80 95       	com	r24
    21d8:	90 95       	com	r25
    21da:	87 fd       	sbrc	r24, 7
    21dc:	fa cf       	rjmp	.-12     	; 0x21d2 <main+0x268>
    21de:	1f c1       	rjmp	.+574    	; 0x241e <main+0x4b4>
					}
				else	// any other button, start logging
					{
						lcd_clrscr();	// provide feedback on button push
    21e0:	0e 94 9f 07 	call	0xf3e	; 0xf3e <lcd_clrscr>
						mode = MODE_LOGGING;
						while( BTN_UP || BTN_DOWN || BTN_SEL);	// wait for release
    21e4:	89 b1       	in	r24, 0x09	; 9
    21e6:	90 e0       	ldi	r25, 0x00	; 0
    21e8:	80 95       	com	r24
    21ea:	90 95       	com	r25
    21ec:	82 fd       	sbrc	r24, 2
    21ee:	fa cf       	rjmp	.-12     	; 0x21e4 <main+0x27a>
    21f0:	89 b1       	in	r24, 0x09	; 9
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	80 95       	com	r24
    21f6:	90 95       	com	r25
    21f8:	83 fd       	sbrc	r24, 3
    21fa:	f4 cf       	rjmp	.-24     	; 0x21e4 <main+0x27a>
    21fc:	89 b1       	in	r24, 0x09	; 9
    21fe:	90 e0       	ldi	r25, 0x00	; 0
    2200:	80 95       	com	r24
    2202:	90 95       	com	r25
    2204:	84 fd       	sbrc	r24, 4
    2206:	ee cf       	rjmp	.-36     	; 0x21e4 <main+0x27a>
								// send the extended sensor info out the comm port
						uart_puts_P( "\r\r");
    2208:	88 e4       	ldi	r24, 0x48	; 72
    220a:	92 e0       	ldi	r25, 0x02	; 2
    220c:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <uart_puts_p>
    2210:	73 ee       	ldi	r23, 0xE3	; 227
    2212:	a7 2e       	mov	r10, r23
    2214:	72 e0       	ldi	r23, 0x02	; 2
    2216:	b7 2e       	mov	r11, r23
						for( i = 0; i < num_sensors; i++)
    2218:	e1 2c       	mov	r14, r1
    221a:	f1 2c       	mov	r15, r1
    221c:	e3 14       	cp	r14, r3
    221e:	d8 f5       	brcc	.+118    	; 0x2296 <main+0x32c>
    2220:	35 01       	movw	r6, r10
							{
							device = g1Wire_order[i];
    2222:	f5 01       	movw	r30, r10
    2224:	81 90       	ld	r8, Z+
    2226:	5f 01       	movw	r10, r30
							uart_puts_P( "Sensor Display");
    2228:	89 e3       	ldi	r24, 0x39	; 57
    222a:	92 e0       	ldi	r25, 0x02	; 2
    222c:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <uart_puts_p>
							uart_puti( (int)i);
    2230:	c7 01       	movw	r24, r14
    2232:	0e 94 0b 0a 	call	0x1416	; 0x1416 <uart_puti>
							uart_puts_P( " / Bus");
    2236:	82 e3       	ldi	r24, 0x32	; 50
    2238:	92 e0       	ldi	r25, 0x02	; 2
    223a:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <uart_puts_p>
							uart_puti( g1Wire_order[i]);
    223e:	f3 01       	movw	r30, r6
    2240:	80 81       	ld	r24, Z
    2242:	90 e0       	ldi	r25, 0x00	; 0
    2244:	0e 94 0b 0a 	call	0x1416	; 0x1416 <uart_puti>
							uart_puts_P( " is a ");
    2248:	8b e2       	ldi	r24, 0x2B	; 43
    224a:	92 e0       	ldi	r25, 0x02	; 2
    224c:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <uart_puts_p>
							if( OWI_FAMILY( gSensorIDs[device][0]) == DS18S20_FAMILY_CODE)
    2250:	f8 e0       	ldi	r31, 0x08	; 8
    2252:	8f 9e       	mul	r8, r31
    2254:	40 01       	movw	r8, r0
    2256:	11 24       	eor	r1, r1
    2258:	f4 01       	movw	r30, r8
    225a:	e9 50       	subi	r30, 0x09	; 9
    225c:	fd 4f       	sbci	r31, 0xFD	; 253
    225e:	80 81       	ld	r24, Z
    2260:	8f 77       	andi	r24, 0x7F	; 127
    2262:	80 31       	cpi	r24, 0x10	; 16
    2264:	19 f4       	brne	.+6      	; 0x226c <main+0x302>
									uart_puts_P( "DS18S20/DS1820");
    2266:	8c e1       	ldi	r24, 0x1C	; 28
    2268:	92 e0       	ldi	r25, 0x02	; 2
    226a:	02 c0       	rjmp	.+4      	; 0x2270 <main+0x306>
							else uart_puts_P( "DS18B20");
    226c:	84 e1       	ldi	r24, 0x14	; 20
    226e:	92 e0       	ldi	r25, 0x02	; 2
    2270:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <uart_puts_p>
							uart_puts_P( " = ");
    2274:	80 e1       	ldi	r24, 0x10	; 16
    2276:	92 e0       	ldi	r25, 0x02	; 2
    2278:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <uart_puts_p>
							show_id_uart( &gSensorIDs[device][0]);
    227c:	c4 01       	movw	r24, r8
    227e:	89 50       	subi	r24, 0x09	; 9
    2280:	9d 4f       	sbci	r25, 0xFD	; 253
    2282:	0e 94 64 05 	call	0xac8	; 0xac8 <show_id_uart>
							uart_puts_P("\r");
    2286:	8e e0       	ldi	r24, 0x0E	; 14
    2288:	92 e0       	ldi	r25, 0x02	; 2
    228a:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <uart_puts_p>
    228e:	2f ef       	ldi	r18, 0xFF	; 255
    2290:	e2 1a       	sub	r14, r18
    2292:	f2 0a       	sbc	r15, r18
    2294:	c3 cf       	rjmp	.-122    	; 0x221c <main+0x2b2>
							}
						uart_puts_P( "\r\r");
    2296:	8b e0       	ldi	r24, 0x0B	; 11
    2298:	92 e0       	ldi	r25, 0x02	; 2
    229a:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <uart_puts_p>
							// if no RTC clock present, reset the elapsed timer
						if( ! gRTC_status)
    229e:	80 91 f9 01 	lds	r24, 0x01F9
    22a2:	81 11       	cpse	r24, r1
    22a4:	08 c0       	rjmp	.+16     	; 0x22b6 <main+0x34c>
									gRTC_clk = 0;
    22a6:	10 92 f5 01 	sts	0x01F5, r1
    22aa:	10 92 f6 01 	sts	0x01F6, r1
    22ae:	10 92 f7 01 	sts	0x01F7, r1
    22b2:	10 92 f8 01 	sts	0x01F8, r1
						lcd_clrscr();
    22b6:	0e 94 9f 07 	call	0xf3e	; 0xf3e <lcd_clrscr>
						read_temperatures( num_sensors);
    22ba:	83 2d       	mov	r24, r3
    22bc:	0e 94 2b 05 	call	0xa56	; 0xa56 <read_temperatures>
						log_temperatures( num_sensors);
    22c0:	83 2d       	mov	r24, r3
    22c2:	0e 94 d6 04 	call	0x9ac	; 0x9ac <log_temperatures>
						display_temperatures( num_sensors, page);
    22c6:	62 2d       	mov	r22, r2
    22c8:	83 2d       	mov	r24, r3
    22ca:	0e 94 0d 03 	call	0x61a	; 0x61a <display_temperatures>
						gElapsed = 0;	// restart the interval timer
    22ce:	10 92 f4 01 	sts	0x01F4, r1
    22d2:	10 92 f3 01 	sts	0x01F3, r1
							gElapsed = 0;	// restart the interval timer
						}
						// update the countdown.
						// else use the pseudo elapsed time counter
						lcd_gotoxy( 15, 0);
						sprintf( gBuffer, "%4is", gLog_interval - gElapsed);
    22d6:	61 ee       	ldi	r22, 0xE1	; 225
    22d8:	e6 2e       	mov	r14, r22
    22da:	61 e0       	ldi	r22, 0x01	; 1
    22dc:	f6 2e       	mov	r15, r22
						// give a small delay to see if this is a simultaneous press
						delay_ms( CMD_DELAY);
						if( BTN_UP) break;	// exit display loop
						// cycle if needed
						if( page >= 4) page -= 2;          // if( page >= 2) page -= 2;
						else page = ((num_sensors - 1) >> 1) << 1; // bitovy posun - nasobenie
    22de:	bb 24       	eor	r11, r11
    22e0:	ba 94       	dec	r11
    22e2:	b3 0c       	add	r11, r3
    22e4:	4b 2d       	mov	r20, r11
    22e6:	4e 7f       	andi	r20, 0xFE	; 254
    22e8:	b4 2e       	mov	r11, r20
		{
		case MODE_LOGGING:	// actively reading and logging temperatures***********
			{
				while( true)	// display loop
				{
					if( BTN_DOWN)	//vyhodnotenie stavu PINu - show previous 2 readings on LCD
    22ea:	89 b1       	in	r24, 0x09	; 9
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	80 95       	com	r24
    22f0:	90 95       	com	r25
    22f2:	83 ff       	sbrs	r24, 3
    22f4:	20 c0       	rjmp	.+64     	; 0x2336 <main+0x3cc>
					{
						// give a small delay to see if this is a simultaneous press
						delay_ms( CMD_DELAY);
    22f6:	68 e6       	ldi	r22, 0x68	; 104
    22f8:	71 e1       	ldi	r23, 0x11	; 17
    22fa:	84 e0       	ldi	r24, 0x04	; 4
    22fc:	90 e0       	ldi	r25, 0x00	; 0
    22fe:	0e 94 2a 06 	call	0xc54	; 0xc54 <delayloop32>
						if( BTN_UP) break;	// exit display loop
    2302:	89 b1       	in	r24, 0x09	; 9
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	80 95       	com	r24
    2308:	90 95       	com	r25
    230a:	82 fd       	sbrc	r24, 2
    230c:	79 c0       	rjmp	.+242    	; 0x2400 <main+0x496>
						// cycle if needed
						if( page >= 4) page -= 2;          // if( page >= 2) page -= 2;
    230e:	e3 e0       	ldi	r30, 0x03	; 3
    2310:	e2 15       	cp	r30, r2
    2312:	18 f4       	brcc	.+6      	; 0x231a <main+0x3b0>
    2314:	2a 94       	dec	r2
    2316:	2a 94       	dec	r2
    2318:	01 c0       	rjmp	.+2      	; 0x231c <main+0x3b2>
						else page = ((num_sensors - 1) >> 1) << 1; // bitovy posun - nasobenie
    231a:	2b 2c       	mov	r2, r11
						lcd_clrscr();
    231c:	0e 94 9f 07 	call	0xf3e	; 0xf3e <lcd_clrscr>
						display_temperatures( num_sensors, page);
    2320:	62 2d       	mov	r22, r2
    2322:	83 2d       	mov	r24, r3
    2324:	0e 94 0d 03 	call	0x61a	; 0x61a <display_temperatures>
						while( BTN_DOWN);	// wait until switch released
    2328:	89 b1       	in	r24, 0x09	; 9
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	80 95       	com	r24
    232e:	90 95       	com	r25
    2330:	83 fd       	sbrc	r24, 3
    2332:	fa cf       	rjmp	.-12     	; 0x2328 <main+0x3be>
    2334:	da cf       	rjmp	.-76     	; 0x22ea <main+0x380>
					}
					else if( BTN_UP)	// show next 2-4 readings on LCD
    2336:	89 b1       	in	r24, 0x09	; 9
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	80 95       	com	r24
    233c:	90 95       	com	r25
    233e:	82 ff       	sbrs	r24, 2
    2340:	23 c0       	rjmp	.+70     	; 0x2388 <main+0x41e>
					{
						// give a small delay to see if this is a simultaneous press
						delay_ms( CMD_DELAY);
    2342:	68 e6       	ldi	r22, 0x68	; 104
    2344:	71 e1       	ldi	r23, 0x11	; 17
    2346:	84 e0       	ldi	r24, 0x04	; 4
    2348:	90 e0       	ldi	r25, 0x00	; 0
    234a:	0e 94 2a 06 	call	0xc54	; 0xc54 <delayloop32>
						if( BTN_DOWN) break;	// exit display loop
    234e:	89 b1       	in	r24, 0x09	; 9
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	80 95       	com	r24
    2354:	90 95       	com	r25
    2356:	83 fd       	sbrc	r24, 3
    2358:	53 c0       	rjmp	.+166    	; 0x2400 <main+0x496>
						// cycle if needed
						if( page + 4 < num_sensors) page += 2; //boli 2 a 2
    235a:	82 2d       	mov	r24, r2
    235c:	90 e0       	ldi	r25, 0x00	; 0
    235e:	04 96       	adiw	r24, 0x04	; 4
    2360:	8c 15       	cp	r24, r12
    2362:	9d 05       	cpc	r25, r13
    2364:	1c f4       	brge	.+6      	; 0x236c <main+0x402>
    2366:	23 94       	inc	r2
    2368:	23 94       	inc	r2
    236a:	01 c0       	rjmp	.+2      	; 0x236e <main+0x404>
						else page = 0;
    236c:	21 2c       	mov	r2, r1
						lcd_clrscr();
    236e:	0e 94 9f 07 	call	0xf3e	; 0xf3e <lcd_clrscr>
						display_temperatures( num_sensors, page);
    2372:	62 2d       	mov	r22, r2
    2374:	83 2d       	mov	r24, r3
    2376:	0e 94 0d 03 	call	0x61a	; 0x61a <display_temperatures>
						while( BTN_UP);	// wait until switch released
    237a:	89 b1       	in	r24, 0x09	; 9
    237c:	90 e0       	ldi	r25, 0x00	; 0
    237e:	80 95       	com	r24
    2380:	90 95       	com	r25
    2382:	82 fd       	sbrc	r24, 2
    2384:	fa cf       	rjmp	.-12     	; 0x237a <main+0x410>
    2386:	b1 cf       	rjmp	.-158    	; 0x22ea <main+0x380>
					}
					else
					{
						// time for a new reading?
						if( gElapsed >= gLog_interval)
    2388:	20 91 f3 01 	lds	r18, 0x01F3
    238c:	30 91 f4 01 	lds	r19, 0x01F4
    2390:	80 91 ef 02 	lds	r24, 0x02EF
    2394:	90 91 f0 02 	lds	r25, 0x02F0
    2398:	28 17       	cp	r18, r24
    239a:	39 07       	cpc	r19, r25
    239c:	80 f0       	brcs	.+32     	; 0x23be <main+0x454>
						{
							read_temperatures( num_sensors);
    239e:	83 2d       	mov	r24, r3
    23a0:	0e 94 2b 05 	call	0xa56	; 0xa56 <read_temperatures>
							log_temperatures( num_sensors);
    23a4:	83 2d       	mov	r24, r3
    23a6:	0e 94 d6 04 	call	0x9ac	; 0x9ac <log_temperatures>
							lcd_clrscr();
    23aa:	0e 94 9f 07 	call	0xf3e	; 0xf3e <lcd_clrscr>
							display_temperatures( num_sensors, page);
    23ae:	62 2d       	mov	r22, r2
    23b0:	83 2d       	mov	r24, r3
    23b2:	0e 94 0d 03 	call	0x61a	; 0x61a <display_temperatures>
							gElapsed = 0;	// restart the interval timer
    23b6:	10 92 f4 01 	sts	0x01F4, r1
    23ba:	10 92 f3 01 	sts	0x01F3, r1
						}
						// update the countdown.
						// else use the pseudo elapsed time counter
						lcd_gotoxy( 15, 0);
    23be:	60 e0       	ldi	r22, 0x00	; 0
    23c0:	8f e0       	ldi	r24, 0x0F	; 15
    23c2:	0e 94 8c 07 	call	0xf18	; 0xf18 <lcd_gotoxy>
						sprintf( gBuffer, "%4is", gLog_interval - gElapsed);
    23c6:	20 91 f3 01 	lds	r18, 0x01F3
    23ca:	30 91 f4 01 	lds	r19, 0x01F4
    23ce:	80 91 ef 02 	lds	r24, 0x02EF
    23d2:	90 91 f0 02 	lds	r25, 0x02F0
    23d6:	82 1b       	sub	r24, r18
    23d8:	93 0b       	sbc	r25, r19
    23da:	9f 93       	push	r25
    23dc:	8f 93       	push	r24
    23de:	ff 92       	push	r15
    23e0:	ef 92       	push	r14
    23e2:	df 93       	push	r29
    23e4:	cf 93       	push	r28
    23e6:	0e 94 4c 19 	call	0x3298	; 0x3298 <sprintf>
						lcd_puts( gBuffer);
    23ea:	86 ea       	ldi	r24, 0xA6	; 166
    23ec:	92 e0       	ldi	r25, 0x02	; 2
    23ee:	0e 94 c5 07 	call	0xf8a	; 0xf8a <lcd_puts>
    23f2:	0f 90       	pop	r0
    23f4:	0f 90       	pop	r0
    23f6:	0f 90       	pop	r0
    23f8:	0f 90       	pop	r0
    23fa:	0f 90       	pop	r0
    23fc:	0f 90       	pop	r0
    23fe:	75 cf       	rjmp	.-278    	; 0x22ea <main+0x380>
					}
				}
				mode = MODE_START;
				lcd_clrscr();	// provide feedback on button push
    2400:	0e 94 9f 07 	call	0xf3e	; 0xf3e <lcd_clrscr>
				while( BTN_UP || BTN_DOWN);	// wait until switches released
    2404:	89 b1       	in	r24, 0x09	; 9
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	80 95       	com	r24
    240a:	90 95       	com	r25
    240c:	82 fd       	sbrc	r24, 2
    240e:	fa cf       	rjmp	.-12     	; 0x2404 <main+0x49a>
    2410:	89 b1       	in	r24, 0x09	; 9
    2412:	90 e0       	ldi	r25, 0x00	; 0
    2414:	80 95       	com	r24
    2416:	90 95       	com	r25
    2418:	83 fd       	sbrc	r24, 3
    241a:	f4 cf       	rjmp	.-24     	; 0x2404 <main+0x49a>
    241c:	9f ce       	rjmp	.-706    	; 0x215c <main+0x1f2>
		case MODE_ORDER:	// displaying change view order**************************
			{
				// this alters the Dallas 1Wire search order which appears random,
				// but is deterministic, to a more meaningful user selected order
				pos = 0;	// start on the left
				lcd_gotoxy( 1, 3);
    241e:	63 e0       	ldi	r22, 0x03	; 3
    2420:	81 e0       	ldi	r24, 0x01	; 1
    2422:	0e 94 8c 07 	call	0xf18	; 0xf18 <lcd_gotoxy>
				lcd_puts_P( "write to EEPROM");
    2426:	8b ef       	ldi	r24, 0xFB	; 251
    2428:	91 e0       	ldi	r25, 0x01	; 1
    242a:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <lcd_puts_p>
				lcd_gotoxy( 0, 0);
    242e:	60 e0       	ldi	r22, 0x00	; 0
    2430:	80 e0       	ldi	r24, 0x00	; 0
    2432:	0e 94 8c 07 	call	0xf18	; 0xf18 <lcd_gotoxy>
				lcd_puts_P( "1Wire display order");
    2436:	87 ee       	ldi	r24, 0xE7	; 231
    2438:	91 e0       	ldi	r25, 0x01	; 1
    243a:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <lcd_puts_p>
				lcd_gotoxy( 0, 1);
    243e:	61 e0       	ldi	r22, 0x01	; 1
    2440:	80 e0       	ldi	r24, 0x00	; 0
    2442:	0e 94 8c 07 	call	0xf18	; 0xf18 <lcd_gotoxy>
    2446:	53 ee       	ldi	r21, 0xE3	; 227
    2448:	e5 2e       	mov	r14, r21
    244a:	52 e0       	ldi	r21, 0x02	; 2
    244c:	f5 2e       	mov	r15, r21
				for( i = 0; i < num_sensors; i++)	// display the 1-wire order
    244e:	57 01       	movw	r10, r14
    2450:	9e 2c       	mov	r9, r14
    2452:	8a 2d       	mov	r24, r10
    2454:	8e 19       	sub	r24, r14
    2456:	83 15       	cp	r24, r3
    2458:	38 f4       	brcc	.+14     	; 0x2468 <main+0x4fe>
					lcd_putc( g1Wire_order[i] + '0');
    245a:	f5 01       	movw	r30, r10
    245c:	81 91       	ld	r24, Z+
    245e:	5f 01       	movw	r10, r30
    2460:	80 5d       	subi	r24, 0xD0	; 208
    2462:	0e 94 a5 07 	call	0xf4a	; 0xf4a <lcd_putc>
    2466:	f5 cf       	rjmp	.-22     	; 0x2452 <main+0x4e8>
				lcd_gotoxy( pos, 1);
    2468:	61 e0       	ldi	r22, 0x01	; 1
    246a:	80 e0       	ldi	r24, 0x00	; 0
    246c:	0e 94 8c 07 	call	0xf18	; 0xf18 <lcd_gotoxy>
				lcd_command( LCD_DISP_ON_BLINK);	// turn on flashing block cursor
    2470:	8d e0       	ldi	r24, 0x0D	; 13
    2472:	0e 94 7a 07 	call	0xef4	; 0xef4 <lcd_command>
			}
		case MODE_ORDER:	// displaying change view order**************************
			{
				// this alters the Dallas 1Wire search order which appears random,
				// but is deterministic, to a more meaningful user selected order
				pos = 0;	// start on the left
    2476:	b1 2c       	mov	r11, r1
				for( i = 0; i < num_sensors; i++)	// display the 1-wire order
					lcd_putc( g1Wire_order[i] + '0');
				lcd_gotoxy( pos, 1);
				lcd_command( LCD_DISP_ON_BLINK);	// turn on flashing block cursor
				
				while( ! BTN_MODE)
    2478:	23 b1       	in	r18, 0x03	; 3
    247a:	30 e0       	ldi	r19, 0x00	; 0
    247c:	20 95       	com	r18
    247e:	30 95       	com	r19
    2480:	27 fd       	sbrc	r18, 7
    2482:	7e c0       	rjmp	.+252    	; 0x2580 <main+0x616>
				{
					if( BTN_SEL)	// next ID
    2484:	89 b1       	in	r24, 0x09	; 9
    2486:	90 e0       	ldi	r25, 0x00	; 0
    2488:	80 95       	com	r24
    248a:	90 95       	com	r25
    248c:	84 ff       	sbrs	r24, 4
    248e:	12 c0       	rjmp	.+36     	; 0x24b4 <main+0x54a>
					{
						// move the cursor position right one - recycle if at end
						pos++;
    2490:	b3 94       	inc	r11
						if( pos > num_sensors - 1) pos = 0;
    2492:	8b 2d       	mov	r24, r11
    2494:	90 e0       	ldi	r25, 0x00	; 0
    2496:	8c 15       	cp	r24, r12
    2498:	9d 05       	cpc	r25, r13
    249a:	0c f0       	brlt	.+2      	; 0x249e <main+0x534>
    249c:	b1 2c       	mov	r11, r1
						lcd_gotoxy( pos, 1);
    249e:	61 e0       	ldi	r22, 0x01	; 1
    24a0:	8b 2d       	mov	r24, r11
    24a2:	0e 94 8c 07 	call	0xf18	; 0xf18 <lcd_gotoxy>

						while( BTN_SEL);	// wait for release
    24a6:	89 b1       	in	r24, 0x09	; 9
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	80 95       	com	r24
    24ac:	90 95       	com	r25
    24ae:	84 fd       	sbrc	r24, 4
    24b0:	fa cf       	rjmp	.-12     	; 0x24a6 <main+0x53c>
    24b2:	e2 cf       	rjmp	.-60     	; 0x2478 <main+0x50e>
					}
					else if( BTN_UP)	// move selection to the left
    24b4:	89 b1       	in	r24, 0x09	; 9
    24b6:	90 e0       	ldi	r25, 0x00	; 0
    24b8:	80 95       	com	r24
    24ba:	90 95       	com	r25
    24bc:	82 ff       	sbrs	r24, 2
    24be:	2c c0       	rjmp	.+88     	; 0x2518 <main+0x5ae>
					{
						if( pos > 0)
    24c0:	bb 20       	and	r11, r11
    24c2:	19 f1       	breq	.+70     	; 0x250a <main+0x5a0>
						{
							// swap marker positions
							tmp = g1Wire_order[pos];
    24c4:	eb 2d       	mov	r30, r11
    24c6:	f0 e0       	ldi	r31, 0x00	; 0
    24c8:	df 01       	movw	r26, r30
    24ca:	ad 51       	subi	r26, 0x1D	; 29
    24cc:	bd 4f       	sbci	r27, 0xFD	; 253
    24ce:	8c 91       	ld	r24, X
							g1Wire_order[pos] = g1Wire_order[pos - 1];
    24d0:	ee 51       	subi	r30, 0x1E	; 30
    24d2:	fd 4f       	sbci	r31, 0xFD	; 253
    24d4:	90 81       	ld	r25, Z
    24d6:	9c 93       	st	X, r25
							g1Wire_order[pos - 1] = tmp;
    24d8:	80 83       	st	Z, r24
							pos--;
    24da:	ba 94       	dec	r11
							// display the markers in the new order
							lcd_gotoxy( 0, 1);
    24dc:	61 e0       	ldi	r22, 0x01	; 1
    24de:	80 e0       	ldi	r24, 0x00	; 0
    24e0:	0e 94 8c 07 	call	0xf18	; 0xf18 <lcd_gotoxy>
							for( i = 0; i < num_sensors; i++)
    24e4:	43 ee       	ldi	r20, 0xE3	; 227
    24e6:	e4 2e       	mov	r14, r20
    24e8:	42 e0       	ldi	r20, 0x02	; 2
    24ea:	f4 2e       	mov	r15, r20
    24ec:	8e 2d       	mov	r24, r14
    24ee:	89 19       	sub	r24, r9
    24f0:	83 15       	cp	r24, r3
    24f2:	38 f4       	brcc	.+14     	; 0x2502 <main+0x598>
								lcd_putc( g1Wire_order[i] + '0');
    24f4:	f7 01       	movw	r30, r14
    24f6:	81 91       	ld	r24, Z+
    24f8:	7f 01       	movw	r14, r30
    24fa:	80 5d       	subi	r24, 0xD0	; 208
    24fc:	0e 94 a5 07 	call	0xf4a	; 0xf4a <lcd_putc>
    2500:	f5 cf       	rjmp	.-22     	; 0x24ec <main+0x582>
							lcd_gotoxy( pos, 1);
    2502:	61 e0       	ldi	r22, 0x01	; 1
    2504:	8b 2d       	mov	r24, r11
    2506:	0e 94 8c 07 	call	0xf18	; 0xf18 <lcd_gotoxy>
						}
						while( BTN_UP);	// wait until switch released
    250a:	89 b1       	in	r24, 0x09	; 9
    250c:	90 e0       	ldi	r25, 0x00	; 0
    250e:	80 95       	com	r24
    2510:	90 95       	com	r25
    2512:	82 fd       	sbrc	r24, 2
    2514:	fa cf       	rjmp	.-12     	; 0x250a <main+0x5a0>
    2516:	b0 cf       	rjmp	.-160    	; 0x2478 <main+0x50e>
					}
					else if( BTN_DOWN)	// move selection to the right
    2518:	89 b1       	in	r24, 0x09	; 9
    251a:	90 e0       	ldi	r25, 0x00	; 0
    251c:	80 95       	com	r24
    251e:	90 95       	com	r25
    2520:	83 ff       	sbrs	r24, 3
    2522:	aa cf       	rjmp	.-172    	; 0x2478 <main+0x50e>
					{
						if( pos < num_sensors - 1)
    2524:	2b 2d       	mov	r18, r11
    2526:	30 e0       	ldi	r19, 0x00	; 0
    2528:	24 15       	cp	r18, r4
    252a:	35 05       	cpc	r19, r5
    252c:	14 f5       	brge	.+68     	; 0x2572 <main+0x608>
						{
							// swap marker positions
							tmp = g1Wire_order[pos];
    252e:	d9 01       	movw	r26, r18
    2530:	ad 51       	subi	r26, 0x1D	; 29
    2532:	bd 4f       	sbci	r27, 0xFD	; 253
    2534:	8c 91       	ld	r24, X
							g1Wire_order[pos] = g1Wire_order[pos + 1];
    2536:	f9 01       	movw	r30, r18
    2538:	ec 51       	subi	r30, 0x1C	; 28
    253a:	fd 4f       	sbci	r31, 0xFD	; 253
    253c:	90 81       	ld	r25, Z
    253e:	9c 93       	st	X, r25
							g1Wire_order[pos + 1] = tmp;
    2540:	80 83       	st	Z, r24
							pos++;
    2542:	b3 94       	inc	r11
							// display the markers in the new order
							lcd_gotoxy( 0, 1);
    2544:	61 e0       	ldi	r22, 0x01	; 1
    2546:	80 e0       	ldi	r24, 0x00	; 0
    2548:	0e 94 8c 07 	call	0xf18	; 0xf18 <lcd_gotoxy>
							for( i = 0; i < num_sensors; i++)
    254c:	33 ee       	ldi	r19, 0xE3	; 227
    254e:	e3 2e       	mov	r14, r19
    2550:	32 e0       	ldi	r19, 0x02	; 2
    2552:	f3 2e       	mov	r15, r19
    2554:	8e 2d       	mov	r24, r14
    2556:	89 19       	sub	r24, r9
    2558:	83 15       	cp	r24, r3
    255a:	38 f4       	brcc	.+14     	; 0x256a <main+0x600>
								lcd_putc( g1Wire_order[i] + '0');
    255c:	f7 01       	movw	r30, r14
    255e:	81 91       	ld	r24, Z+
    2560:	7f 01       	movw	r14, r30
    2562:	80 5d       	subi	r24, 0xD0	; 208
    2564:	0e 94 a5 07 	call	0xf4a	; 0xf4a <lcd_putc>
    2568:	f5 cf       	rjmp	.-22     	; 0x2554 <main+0x5ea>
							lcd_gotoxy( pos, 1);
    256a:	61 e0       	ldi	r22, 0x01	; 1
    256c:	8b 2d       	mov	r24, r11
    256e:	0e 94 8c 07 	call	0xf18	; 0xf18 <lcd_gotoxy>
						}
						while( BTN_DOWN);	// wait until switch released
    2572:	29 b1       	in	r18, 0x09	; 9
    2574:	30 e0       	ldi	r19, 0x00	; 0
    2576:	20 95       	com	r18
    2578:	30 95       	com	r19
    257a:	23 fd       	sbrc	r18, 3
    257c:	fa cf       	rjmp	.-12     	; 0x2572 <main+0x608>
    257e:	7c cf       	rjmp	.-264    	; 0x2478 <main+0x50e>
					}
				}
				eeprom_write_block( g1Wire_order, nv1Wire_order, MAX_SENSORS);
    2580:	48 e0       	ldi	r20, 0x08	; 8
    2582:	50 e0       	ldi	r21, 0x00	; 0
    2584:	60 e4       	ldi	r22, 0x40	; 64
    2586:	70 e0       	ldi	r23, 0x00	; 0
    2588:	83 ee       	ldi	r24, 0xE3	; 227
    258a:	92 e0       	ldi	r25, 0x02	; 2
    258c:	0e 94 5e 1b 	call	0x36bc	; 0x36bc <__eewr_block_m168>
				
				if(num_sensors==1)
    2590:	f1 e0       	ldi	r31, 0x01	; 1
    2592:	3f 12       	cpse	r3, r31
    2594:	09 c0       	rjmp	.+18     	; 0x25a8 <main+0x63e>
						{ nvgSensorIDs1[1] = gSensorIDs[1][0];
    2596:	80 91 ff 02 	lds	r24, 0x02FF
    259a:	80 93 39 00 	sts	0x0039, r24
							eeprom_write_block( gSensorIDs, nvgSensorIDs1, 8);
    259e:	48 e0       	ldi	r20, 0x08	; 8
    25a0:	50 e0       	ldi	r21, 0x00	; 0
    25a2:	68 e3       	ldi	r22, 0x38	; 56
    25a4:	70 e0       	ldi	r23, 0x00	; 0
    25a6:	6b c0       	rjmp	.+214    	; 0x267e <main+0x714>
						}
				if(num_sensors==2)
    25a8:	22 e0       	ldi	r18, 0x02	; 2
    25aa:	32 12       	cpse	r3, r18
    25ac:	15 c0       	rjmp	.+42     	; 0x25d8 <main+0x66e>
						{nvgSensorIDs1[1] = gSensorIDs[1][0];
    25ae:	80 91 ff 02 	lds	r24, 0x02FF
    25b2:	80 93 39 00 	sts	0x0039, r24
						eeprom_write_block( gSensorIDs, nvgSensorIDs1, 8);
    25b6:	48 e0       	ldi	r20, 0x08	; 8
    25b8:	50 e0       	ldi	r21, 0x00	; 0
    25ba:	68 e3       	ldi	r22, 0x38	; 56
    25bc:	70 e0       	ldi	r23, 0x00	; 0
    25be:	87 ef       	ldi	r24, 0xF7	; 247
    25c0:	92 e0       	ldi	r25, 0x02	; 2
    25c2:	0e 94 5e 1b 	call	0x36bc	; 0x36bc <__eewr_block_m168>
						nvgSensorIDs2[1] = gSensorIDs[2][0];
    25c6:	80 91 07 03 	lds	r24, 0x0307
    25ca:	80 93 31 00 	sts	0x0031, r24
						eeprom_write_block( gSensorIDs, nvgSensorIDs2, 8);
    25ce:	48 e0       	ldi	r20, 0x08	; 8
    25d0:	50 e0       	ldi	r21, 0x00	; 0
    25d2:	60 e3       	ldi	r22, 0x30	; 48
    25d4:	70 e0       	ldi	r23, 0x00	; 0
    25d6:	53 c0       	rjmp	.+166    	; 0x267e <main+0x714>
						}
				if(num_sensors==3)
    25d8:	43 e0       	ldi	r20, 0x03	; 3
    25da:	34 12       	cpse	r3, r20
    25dc:	21 c0       	rjmp	.+66     	; 0x2620 <main+0x6b6>
						{nvgSensorIDs1[1] = gSensorIDs[1][0];
    25de:	80 91 ff 02 	lds	r24, 0x02FF
    25e2:	80 93 39 00 	sts	0x0039, r24
						eeprom_write_block( gSensorIDs, nvgSensorIDs1, 8);
    25e6:	48 e0       	ldi	r20, 0x08	; 8
    25e8:	50 e0       	ldi	r21, 0x00	; 0
    25ea:	68 e3       	ldi	r22, 0x38	; 56
    25ec:	70 e0       	ldi	r23, 0x00	; 0
    25ee:	87 ef       	ldi	r24, 0xF7	; 247
    25f0:	92 e0       	ldi	r25, 0x02	; 2
    25f2:	0e 94 5e 1b 	call	0x36bc	; 0x36bc <__eewr_block_m168>
						nvgSensorIDs2[1] = gSensorIDs[2][0];
    25f6:	80 91 07 03 	lds	r24, 0x0307
    25fa:	80 93 31 00 	sts	0x0031, r24
						eeprom_write_block( gSensorIDs, nvgSensorIDs2, 8);
    25fe:	48 e0       	ldi	r20, 0x08	; 8
    2600:	50 e0       	ldi	r21, 0x00	; 0
    2602:	60 e3       	ldi	r22, 0x30	; 48
    2604:	70 e0       	ldi	r23, 0x00	; 0
    2606:	87 ef       	ldi	r24, 0xF7	; 247
    2608:	92 e0       	ldi	r25, 0x02	; 2
    260a:	0e 94 5e 1b 	call	0x36bc	; 0x36bc <__eewr_block_m168>
						nvgSensorIDs3[1] = gSensorIDs[3][0];
    260e:	80 91 0f 03 	lds	r24, 0x030F
    2612:	80 93 29 00 	sts	0x0029, r24
						eeprom_write_block( gSensorIDs, nvgSensorIDs3, 8);
    2616:	48 e0       	ldi	r20, 0x08	; 8
    2618:	50 e0       	ldi	r21, 0x00	; 0
    261a:	68 e2       	ldi	r22, 0x28	; 40
    261c:	70 e0       	ldi	r23, 0x00	; 0
    261e:	2f c0       	rjmp	.+94     	; 0x267e <main+0x714>
						}
				if(num_sensors==4)
    2620:	84 e0       	ldi	r24, 0x04	; 4
    2622:	38 12       	cpse	r3, r24
    2624:	30 c0       	rjmp	.+96     	; 0x2686 <main+0x71c>
						{nvgSensorIDs1[1] = gSensorIDs[1][0];
    2626:	80 91 ff 02 	lds	r24, 0x02FF
    262a:	80 93 39 00 	sts	0x0039, r24
						eeprom_write_block( gSensorIDs, nvgSensorIDs1, 8);
    262e:	48 e0       	ldi	r20, 0x08	; 8
    2630:	50 e0       	ldi	r21, 0x00	; 0
    2632:	68 e3       	ldi	r22, 0x38	; 56
    2634:	70 e0       	ldi	r23, 0x00	; 0
    2636:	87 ef       	ldi	r24, 0xF7	; 247
    2638:	92 e0       	ldi	r25, 0x02	; 2
    263a:	0e 94 5e 1b 	call	0x36bc	; 0x36bc <__eewr_block_m168>
						nvgSensorIDs2[1] = gSensorIDs[2][0];
    263e:	80 91 07 03 	lds	r24, 0x0307
    2642:	80 93 31 00 	sts	0x0031, r24
						eeprom_write_block( gSensorIDs, nvgSensorIDs2, 8);
    2646:	48 e0       	ldi	r20, 0x08	; 8
    2648:	50 e0       	ldi	r21, 0x00	; 0
    264a:	60 e3       	ldi	r22, 0x30	; 48
    264c:	70 e0       	ldi	r23, 0x00	; 0
    264e:	87 ef       	ldi	r24, 0xF7	; 247
    2650:	92 e0       	ldi	r25, 0x02	; 2
    2652:	0e 94 5e 1b 	call	0x36bc	; 0x36bc <__eewr_block_m168>
						nvgSensorIDs3[1] = gSensorIDs[3][0];
    2656:	80 91 0f 03 	lds	r24, 0x030F
    265a:	80 93 29 00 	sts	0x0029, r24
						eeprom_write_block( gSensorIDs, nvgSensorIDs3, 8);
    265e:	48 e0       	ldi	r20, 0x08	; 8
    2660:	50 e0       	ldi	r21, 0x00	; 0
    2662:	68 e2       	ldi	r22, 0x28	; 40
    2664:	70 e0       	ldi	r23, 0x00	; 0
    2666:	87 ef       	ldi	r24, 0xF7	; 247
    2668:	92 e0       	ldi	r25, 0x02	; 2
    266a:	0e 94 5e 1b 	call	0x36bc	; 0x36bc <__eewr_block_m168>
						nvgSensorIDs4[1] = gSensorIDs[4][0];
    266e:	80 91 17 03 	lds	r24, 0x0317
    2672:	80 93 21 00 	sts	0x0021, r24
						eeprom_write_block( gSensorIDs, nvgSensorIDs4, 8);
    2676:	48 e0       	ldi	r20, 0x08	; 8
    2678:	50 e0       	ldi	r21, 0x00	; 0
    267a:	60 e2       	ldi	r22, 0x20	; 32
    267c:	70 e0       	ldi	r23, 0x00	; 0
    267e:	87 ef       	ldi	r24, 0xF7	; 247
    2680:	92 e0       	ldi	r25, 0x02	; 2
    2682:	0e 94 5e 1b 	call	0x36bc	; 0x36bc <__eewr_block_m168>
						eeprom_write_block( gSensorIDs, nvgSensorIDs7, 8);
						nvgSensorIDs8[1] = gSensorIDs[8][0];
						eeprom_write_block( gSensorIDs, nvgSensorIDs8, 8);
						}
			*/	
				lcd_command( LCD_DISP_ON);	// turn off flashing cursor
    2686:	8c e0       	ldi	r24, 0x0C	; 12
    2688:	0e 94 7a 07 	call	0xef4	; 0xef4 <lcd_command>
				lcd_clrscr();	// acknowledge button press
    268c:	0e 94 9f 07 	call	0xf3e	; 0xf3e <lcd_clrscr>
				mode = MODE_INTERVAL;
				while( BTN_MODE);	// wait until switch released
    2690:	83 b1       	in	r24, 0x03	; 3
    2692:	90 e0       	ldi	r25, 0x00	; 0
    2694:	80 95       	com	r24
    2696:	90 95       	com	r25
    2698:	87 fd       	sbrc	r24, 7
    269a:	fa cf       	rjmp	.-12     	; 0x2690 <main+0x726>
				break;	// next case
			}
		case MODE_INTERVAL:	// displaying logging interval change******************
			{
				lcd_clrscr();
    269c:	0e 94 9f 07 	call	0xf3e	; 0xf3e <lcd_clrscr>
				lcd_puts_P( "Logging interval\n");
    26a0:	85 ed       	ldi	r24, 0xD5	; 213
    26a2:	91 e0       	ldi	r25, 0x01	; 1
    26a4:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <lcd_puts_p>
				sprintf( gBuffer, "%4i", gLog_interval);
    26a8:	80 91 f0 02 	lds	r24, 0x02F0
    26ac:	8f 93       	push	r24
    26ae:	80 91 ef 02 	lds	r24, 0x02EF
    26b2:	8f 93       	push	r24
    26b4:	1f 93       	push	r17
    26b6:	0f 93       	push	r16
    26b8:	df 93       	push	r29
    26ba:	cf 93       	push	r28
    26bc:	0e 94 4c 19 	call	0x3298	; 0x3298 <sprintf>
				lcd_puts( gBuffer);
    26c0:	86 ea       	ldi	r24, 0xA6	; 166
    26c2:	92 e0       	ldi	r25, 0x02	; 2
    26c4:	0e 94 c5 07 	call	0xf8a	; 0xf8a <lcd_puts>
				//lcd_puts_P( "Logging interval\n");

				while( ! BTN_MODE)
    26c8:	0f 90       	pop	r0
    26ca:	0f 90       	pop	r0
    26cc:	0f 90       	pop	r0
    26ce:	0f 90       	pop	r0
    26d0:	0f 90       	pop	r0
    26d2:	0f 90       	pop	r0
								gLog_interval += up_held << 2;
							else
								gLog_interval++;
							
							// fixup on overflow
							if( gLog_interval > MAX_INTERVAL) gLog_interval = MAX_INTERVAL;
    26d4:	ff e0       	ldi	r31, 0x0F	; 15
    26d6:	ef 2e       	mov	r14, r31
    26d8:	f7 e2       	ldi	r31, 0x27	; 39
    26da:	ff 2e       	mov	r15, r31
				lcd_puts_P( "Logging interval\n");
				sprintf( gBuffer, "%4i", gLog_interval);
				lcd_puts( gBuffer);
				//lcd_puts_P( "Logging interval\n");

				while( ! BTN_MODE)
    26dc:	83 b1       	in	r24, 0x03	; 3
    26de:	90 e0       	ldi	r25, 0x00	; 0
    26e0:	80 95       	com	r24
    26e2:	90 95       	com	r25
    26e4:	87 fd       	sbrc	r24, 7
    26e6:	92 c0       	rjmp	.+292    	; 0x280c <main+0x8a2>
    26e8:	b1 2c       	mov	r11, r1
					 * if the button is still held, geometrically increase
					 * the step amount each loop through until the button
					 * is released
					 */
					up_held = dn_held = 0;
					while( BTN_UP)	// increase interval
    26ea:	89 b1       	in	r24, 0x09	; 9
    26ec:	90 e0       	ldi	r25, 0x00	; 0
    26ee:	80 95       	com	r24
    26f0:	90 95       	com	r25
    26f2:	82 ff       	sbrs	r24, 2
    26f4:	43 c0       	rjmp	.+134    	; 0x277c <main+0x812>
					{
						if( gLog_interval < MAX_INTERVAL)
    26f6:	80 91 ef 02 	lds	r24, 0x02EF
    26fa:	90 91 f0 02 	lds	r25, 0x02F0
    26fe:	8f 30       	cpi	r24, 0x0F	; 15
    2700:	e7 e2       	ldi	r30, 0x27	; 39
    2702:	9e 07       	cpc	r25, r30
    2704:	9c f5       	brge	.+102    	; 0x276c <main+0x802>
						{
							// geometrically increase step size if button held
							if( up_held >= BUTTON_HELD)
    2706:	f2 e0       	ldi	r31, 0x02	; 2
    2708:	fb 15       	cp	r31, r11
    270a:	30 f4       	brcc	.+12     	; 0x2718 <main+0x7ae>
								gLog_interval += up_held << 2;
    270c:	24 e0       	ldi	r18, 0x04	; 4
    270e:	b2 9e       	mul	r11, r18
    2710:	80 0d       	add	r24, r0
    2712:	91 1d       	adc	r25, r1
    2714:	11 24       	eor	r1, r1
    2716:	01 c0       	rjmp	.+2      	; 0x271a <main+0x7b0>
							else
								gLog_interval++;
    2718:	01 96       	adiw	r24, 0x01	; 1
    271a:	90 93 f0 02 	sts	0x02F0, r25
    271e:	80 93 ef 02 	sts	0x02EF, r24
							
							// fixup on overflow
							if( gLog_interval > MAX_INTERVAL) gLog_interval = MAX_INTERVAL;
    2722:	80 91 ef 02 	lds	r24, 0x02EF
    2726:	90 91 f0 02 	lds	r25, 0x02F0
    272a:	80 31       	cpi	r24, 0x10	; 16
    272c:	97 42       	sbci	r25, 0x27	; 39
    272e:	24 f0       	brlt	.+8      	; 0x2738 <main+0x7ce>
    2730:	f0 92 f0 02 	sts	0x02F0, r15
    2734:	e0 92 ef 02 	sts	0x02EF, r14

							lcd_gotoxy( 0, 1);
    2738:	61 e0       	ldi	r22, 0x01	; 1
    273a:	80 e0       	ldi	r24, 0x00	; 0
    273c:	0e 94 8c 07 	call	0xf18	; 0xf18 <lcd_gotoxy>
							sprintf( gBuffer, "%4i", gLog_interval);
    2740:	80 91 f0 02 	lds	r24, 0x02F0
    2744:	8f 93       	push	r24
    2746:	80 91 ef 02 	lds	r24, 0x02EF
    274a:	8f 93       	push	r24
    274c:	1f 93       	push	r17
    274e:	0f 93       	push	r16
    2750:	df 93       	push	r29
    2752:	cf 93       	push	r28
    2754:	0e 94 4c 19 	call	0x3298	; 0x3298 <sprintf>
							lcd_puts( gBuffer);
    2758:	86 ea       	ldi	r24, 0xA6	; 166
    275a:	92 e0       	ldi	r25, 0x02	; 2
    275c:	0e 94 c5 07 	call	0xf8a	; 0xf8a <lcd_puts>
    2760:	0f 90       	pop	r0
    2762:	0f 90       	pop	r0
    2764:	0f 90       	pop	r0
    2766:	0f 90       	pop	r0
    2768:	0f 90       	pop	r0
    276a:	0f 90       	pop	r0
						}
						delay_ms( CMD_DELAY);	// allow time to release button
    276c:	68 e6       	ldi	r22, 0x68	; 104
    276e:	71 e1       	ldi	r23, 0x11	; 17
    2770:	84 e0       	ldi	r24, 0x04	; 4
    2772:	90 e0       	ldi	r25, 0x00	; 0
    2774:	0e 94 2a 06 	call	0xc54	; 0xc54 <delayloop32>
						up_held++;
    2778:	b3 94       	inc	r11
    277a:	b7 cf       	rjmp	.-146    	; 0x26ea <main+0x780>
					 * if the button is still held, geometrically increase
					 * the step amount each loop through until the button
					 * is released
					 */
					up_held = dn_held = 0;
					while( BTN_UP)	// increase interval
    277c:	b1 2c       	mov	r11, r1
						}
						delay_ms( CMD_DELAY);	// allow time to release button
						up_held++;
					}

					while( BTN_DOWN)	// decrease interval
    277e:	89 b1       	in	r24, 0x09	; 9
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	80 95       	com	r24
    2784:	90 95       	com	r25
    2786:	83 ff       	sbrs	r24, 3
    2788:	a9 cf       	rjmp	.-174    	; 0x26dc <main+0x772>
					{
						if( gLog_interval > MIN_INTERVAL)
    278a:	80 91 ef 02 	lds	r24, 0x02EF
    278e:	90 91 f0 02 	lds	r25, 0x02F0
    2792:	86 30       	cpi	r24, 0x06	; 6
    2794:	91 05       	cpc	r25, r1
    2796:	94 f1       	brlt	.+100    	; 0x27fc <main+0x892>
						{
							if( dn_held >= BUTTON_HELD)
    2798:	e2 e0       	ldi	r30, 0x02	; 2
    279a:	eb 15       	cp	r30, r11
    279c:	80 f4       	brcc	.+32     	; 0x27be <main+0x854>
							{
								// geometrically increase step size if button held
								// need to worry about underflow since interval is unsigned
								if( (gLog_interval - MIN_INTERVAL) > dn_held << 2)
    279e:	f4 e0       	ldi	r31, 0x04	; 4
    27a0:	bf 9e       	mul	r11, r31
    27a2:	90 01       	movw	r18, r0
    27a4:	11 24       	eor	r1, r1
    27a6:	ac 01       	movw	r20, r24
    27a8:	45 50       	subi	r20, 0x05	; 5
    27aa:	51 09       	sbc	r21, r1
    27ac:	24 17       	cp	r18, r20
    27ae:	35 07       	cpc	r19, r21
    27b0:	1c f4       	brge	.+6      	; 0x27b8 <main+0x84e>
									gLog_interval -= dn_held << 2;
    27b2:	82 1b       	sub	r24, r18
    27b4:	93 0b       	sbc	r25, r19
    27b6:	04 c0       	rjmp	.+8      	; 0x27c0 <main+0x856>
								else
									gLog_interval = MIN_INTERVAL;
    27b8:	85 e0       	ldi	r24, 0x05	; 5
    27ba:	90 e0       	ldi	r25, 0x00	; 0
    27bc:	01 c0       	rjmp	.+2      	; 0x27c0 <main+0x856>
							}
							else
								gLog_interval--;
    27be:	01 97       	sbiw	r24, 0x01	; 1
    27c0:	90 93 f0 02 	sts	0x02F0, r25
    27c4:	80 93 ef 02 	sts	0x02EF, r24
							lcd_gotoxy( 0,1);
    27c8:	61 e0       	ldi	r22, 0x01	; 1
    27ca:	80 e0       	ldi	r24, 0x00	; 0
    27cc:	0e 94 8c 07 	call	0xf18	; 0xf18 <lcd_gotoxy>
							sprintf( gBuffer, "%4i", gLog_interval);
    27d0:	80 91 f0 02 	lds	r24, 0x02F0
    27d4:	8f 93       	push	r24
    27d6:	80 91 ef 02 	lds	r24, 0x02EF
    27da:	8f 93       	push	r24
    27dc:	1f 93       	push	r17
    27de:	0f 93       	push	r16
    27e0:	df 93       	push	r29
    27e2:	cf 93       	push	r28
    27e4:	0e 94 4c 19 	call	0x3298	; 0x3298 <sprintf>
							lcd_puts( gBuffer);
    27e8:	86 ea       	ldi	r24, 0xA6	; 166
    27ea:	92 e0       	ldi	r25, 0x02	; 2
    27ec:	0e 94 c5 07 	call	0xf8a	; 0xf8a <lcd_puts>
    27f0:	0f 90       	pop	r0
    27f2:	0f 90       	pop	r0
    27f4:	0f 90       	pop	r0
    27f6:	0f 90       	pop	r0
    27f8:	0f 90       	pop	r0
    27fa:	0f 90       	pop	r0
						}
						delay_ms( CMD_DELAY);
    27fc:	68 e6       	ldi	r22, 0x68	; 104
    27fe:	71 e1       	ldi	r23, 0x11	; 17
    2800:	84 e0       	ldi	r24, 0x04	; 4
    2802:	90 e0       	ldi	r25, 0x00	; 0
    2804:	0e 94 2a 06 	call	0xc54	; 0xc54 <delayloop32>
						dn_held++;
    2808:	b3 94       	inc	r11
    280a:	b9 cf       	rjmp	.-142    	; 0x277e <main+0x814>
					}
				}
				mode = MODE_SENSOR;
				eeprom_write_word( &nvLog_interval, gLog_interval);	// save the persistant value
    280c:	60 91 ef 02 	lds	r22, 0x02EF
    2810:	70 91 f0 02 	lds	r23, 0x02F0
    2814:	8a e4       	ldi	r24, 0x4A	; 74
    2816:	90 e0       	ldi	r25, 0x00	; 0
    2818:	0e 94 76 1b 	call	0x36ec	; 0x36ec <__eewr_word_m168>
				lcd_clrscr();	// ack button press
    281c:	0e 94 9f 07 	call	0xf3e	; 0xf3e <lcd_clrscr>
				while( BTN_MODE);	// wait until switch released
    2820:	83 b1       	in	r24, 0x03	; 3
    2822:	90 e0       	ldi	r25, 0x00	; 0
    2824:	80 95       	com	r24
    2826:	90 95       	com	r25
    2828:	87 fd       	sbrc	r24, 7
    282a:	fa cf       	rjmp	.-12     	; 0x2820 <main+0x8b6>
				break;	// next case
			}
		case MODE_SENSOR:	// displaying extended sensor info***********************
			{
				i = 0;	// display order
				show_exinfo_lcd( i);
    282c:	80 e0       	ldi	r24, 0x00	; 0
    282e:	0e 94 a3 05 	call	0xb46	; 0xb46 <show_exinfo_lcd>
				while( BTN_MODE);	// wait until switch released
				break;	// next case
			}
		case MODE_SENSOR:	// displaying extended sensor info***********************
			{
				i = 0;	// display order
    2832:	61 2c       	mov	r6, r1
					 * complexity I don't want
					 */
					device = g1Wire_order[i];
					lcd_gotoxy( 10, 0);
					DS18X20_start_meas( &gSensorIDs[device][0]);
					sprintf( gBuffer, "0x%04x", DS18X20_get_meas( &gSensorIDs[device][0]));
    2834:	ea ee       	ldi	r30, 0xEA	; 234
    2836:	ee 2e       	mov	r14, r30
    2838:	e1 e0       	ldi	r30, 0x01	; 1
    283a:	fe 2e       	mov	r15, r30
					}
					else if( BTN_DOWN)	// display previous
					{
						// cycle if needed
						if( i > 0) i--;
						else i = num_sensors - 1;
    283c:	77 24       	eor	r7, r7
    283e:	7a 94       	dec	r7
    2840:	73 0c       	add	r7, r3
		case MODE_SENSOR:	// displaying extended sensor info***********************
			{
				i = 0;	// display order
				show_exinfo_lcd( i);

				while( ! BTN_MODE)	// loop until mode button pressed
    2842:	23 b1       	in	r18, 0x03	; 3
    2844:	30 e0       	ldi	r19, 0x00	; 0
    2846:	20 95       	com	r18
    2848:	30 95       	com	r19
    284a:	27 fd       	sbrc	r18, 7
    284c:	54 c0       	rjmp	.+168    	; 0x28f6 <main+0x98c>
					 * makes the buttons appear unresponsive.  the only
					 * way I can think of to fix this is to handle the
					 * buttons with an ISR, but this adds a level of
					 * complexity I don't want
					 */
					device = g1Wire_order[i];
    284e:	a6 2c       	mov	r10, r6
    2850:	b1 2c       	mov	r11, r1
    2852:	f5 01       	movw	r30, r10
    2854:	ed 51       	subi	r30, 0x1D	; 29
    2856:	fd 4f       	sbci	r31, 0xFD	; 253
    2858:	80 80       	ld	r8, Z
					lcd_gotoxy( 10, 0);
    285a:	60 e0       	ldi	r22, 0x00	; 0
    285c:	8a e0       	ldi	r24, 0x0A	; 10
    285e:	0e 94 8c 07 	call	0xf18	; 0xf18 <lcd_gotoxy>
					DS18X20_start_meas( &gSensorIDs[device][0]);
    2862:	f8 e0       	ldi	r31, 0x08	; 8
    2864:	8f 9e       	mul	r8, r31
    2866:	40 01       	movw	r8, r0
    2868:	11 24       	eor	r1, r1
    286a:	c4 01       	movw	r24, r8
    286c:	89 50       	subi	r24, 0x09	; 9
    286e:	9d 4f       	sbci	r25, 0xFD	; 253
    2870:	4c 01       	movw	r8, r24
    2872:	0e 94 37 06 	call	0xc6e	; 0xc6e <DS18X20_start_meas>
					sprintf( gBuffer, "0x%04x", DS18X20_get_meas( &gSensorIDs[device][0]));
    2876:	c4 01       	movw	r24, r8
    2878:	0e 94 47 06 	call	0xc8e	; 0xc8e <DS18X20_get_meas>
    287c:	9f 93       	push	r25
    287e:	8f 93       	push	r24
    2880:	ff 92       	push	r15
    2882:	ef 92       	push	r14
    2884:	df 93       	push	r29
    2886:	cf 93       	push	r28
    2888:	0e 94 4c 19 	call	0x3298	; 0x3298 <sprintf>
					lcd_puts( gBuffer);
    288c:	86 ea       	ldi	r24, 0xA6	; 166
    288e:	92 e0       	ldi	r25, 0x02	; 2
    2890:	0e 94 c5 07 	call	0xf8a	; 0xf8a <lcd_puts>

					if( BTN_UP)	// display next
    2894:	89 b1       	in	r24, 0x09	; 9
    2896:	90 e0       	ldi	r25, 0x00	; 0
    2898:	80 95       	com	r24
    289a:	90 95       	com	r25
    289c:	0f 90       	pop	r0
    289e:	0f 90       	pop	r0
    28a0:	0f 90       	pop	r0
    28a2:	0f 90       	pop	r0
    28a4:	0f 90       	pop	r0
    28a6:	0f 90       	pop	r0
    28a8:	82 ff       	sbrs	r24, 2
    28aa:	10 c0       	rjmp	.+32     	; 0x28cc <main+0x962>
					{
						// cycle if needed
						if( i < num_sensors - 1) i++;
    28ac:	a4 14       	cp	r10, r4
    28ae:	b5 04       	cpc	r11, r5
    28b0:	14 f4       	brge	.+4      	; 0x28b6 <main+0x94c>
    28b2:	63 94       	inc	r6
    28b4:	01 c0       	rjmp	.+2      	; 0x28b8 <main+0x94e>
						else i = 0;
    28b6:	61 2c       	mov	r6, r1

						show_exinfo_lcd( i);
    28b8:	86 2d       	mov	r24, r6
    28ba:	0e 94 a3 05 	call	0xb46	; 0xb46 <show_exinfo_lcd>
						while( BTN_UP);	// wait until switch released
    28be:	89 b1       	in	r24, 0x09	; 9
    28c0:	90 e0       	ldi	r25, 0x00	; 0
    28c2:	80 95       	com	r24
    28c4:	90 95       	com	r25
    28c6:	82 fd       	sbrc	r24, 2
    28c8:	fa cf       	rjmp	.-12     	; 0x28be <main+0x954>
    28ca:	bb cf       	rjmp	.-138    	; 0x2842 <main+0x8d8>
					}
					else if( BTN_DOWN)	// display previous
    28cc:	89 b1       	in	r24, 0x09	; 9
    28ce:	90 e0       	ldi	r25, 0x00	; 0
    28d0:	80 95       	com	r24
    28d2:	90 95       	com	r25
    28d4:	83 ff       	sbrs	r24, 3
    28d6:	b5 cf       	rjmp	.-150    	; 0x2842 <main+0x8d8>
					{
						// cycle if needed
						if( i > 0) i--;
    28d8:	66 20       	and	r6, r6
    28da:	11 f0       	breq	.+4      	; 0x28e0 <main+0x976>
    28dc:	6a 94       	dec	r6
    28de:	01 c0       	rjmp	.+2      	; 0x28e2 <main+0x978>
						else i = num_sensors - 1;
    28e0:	67 2c       	mov	r6, r7
						show_exinfo_lcd( i);
    28e2:	86 2d       	mov	r24, r6
    28e4:	0e 94 a3 05 	call	0xb46	; 0xb46 <show_exinfo_lcd>
						while( BTN_DOWN);	// wait until switch released
    28e8:	89 b1       	in	r24, 0x09	; 9
    28ea:	90 e0       	ldi	r25, 0x00	; 0
    28ec:	80 95       	com	r24
    28ee:	90 95       	com	r25
    28f0:	83 fd       	sbrc	r24, 3
    28f2:	fa cf       	rjmp	.-12     	; 0x28e8 <main+0x97e>
    28f4:	a6 cf       	rjmp	.-180    	; 0x2842 <main+0x8d8>
					}
				}
				lcd_clrscr();	// acknowledge the mode button press
    28f6:	0e 94 9f 07 	call	0xf3e	; 0xf3e <lcd_clrscr>
				while( BTN_MODE);	// wait until switch released
    28fa:	83 b1       	in	r24, 0x03	; 3
    28fc:	90 e0       	ldi	r25, 0x00	; 0
    28fe:	80 95       	com	r24
    2900:	90 95       	com	r25
    2902:	87 fd       	sbrc	r24, 7
    2904:	fa cf       	rjmp	.-12     	; 0x28fa <main+0x990>
				mode = MODE_BACKLIGHT;
				break;	// next case
			}
		case MODE_BACKLIGHT:	// displaying interval change   *********************
			{
				lcd_clrscr();
    2906:	0e 94 9f 07 	call	0xf3e	; 0xf3e <lcd_clrscr>
				lcd_puts_P( "LCD brightness\n");
    290a:	85 ec       	ldi	r24, 0xC5	; 197
    290c:	91 e0       	ldi	r25, 0x01	; 1
    290e:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <lcd_puts_p>
				sprintf( gBuffer, "%4i", gBacklight);
    2912:	80 91 a5 02 	lds	r24, 0x02A5
    2916:	1f 92       	push	r1
    2918:	8f 93       	push	r24
    291a:	1f 93       	push	r17
    291c:	0f 93       	push	r16
    291e:	df 93       	push	r29
    2920:	cf 93       	push	r28
    2922:	0e 94 4c 19 	call	0x3298	; 0x3298 <sprintf>
				lcd_puts( gBuffer);
    2926:	86 ea       	ldi	r24, 0xA6	; 166
    2928:	92 e0       	ldi	r25, 0x02	; 2
    292a:	0e 94 c5 07 	call	0xf8a	; 0xf8a <lcd_puts>

				// change PWM value to modify on-time of LED backlight
				while( ! BTN_MODE)
    292e:	0f 90       	pop	r0
    2930:	0f 90       	pop	r0
    2932:	0f 90       	pop	r0
    2934:	0f 90       	pop	r0
    2936:	0f 90       	pop	r0
    2938:	0f 90       	pop	r0
    293a:	83 b1       	in	r24, 0x03	; 3
    293c:	90 e0       	ldi	r25, 0x00	; 0
    293e:	80 95       	com	r24
    2940:	90 95       	com	r25
    2942:	87 fd       	sbrc	r24, 7
    2944:	5a c0       	rjmp	.+180    	; 0x29fa <main+0xa90>
				{
					while( BTN_UP)	// increase interval
    2946:	89 b1       	in	r24, 0x09	; 9
    2948:	90 e0       	ldi	r25, 0x00	; 0
    294a:	80 95       	com	r24
    294c:	90 95       	com	r25
    294e:	82 ff       	sbrs	r24, 2
    2950:	4d c0       	rjmp	.+154    	; 0x29ec <main+0xa82>
					{
						if( gBacklight < 255)
    2952:	80 91 a5 02 	lds	r24, 0x02A5
    2956:	8f 3f       	cpi	r24, 0xFF	; 255
    2958:	e1 f0       	breq	.+56     	; 0x2992 <main+0xa28>
						{
							PWM_OUT = ++gBacklight;
    295a:	8f 5f       	subi	r24, 0xFF	; 255
    295c:	80 93 a5 02 	sts	0x02A5, r24
    2960:	88 bd       	out	0x28, r24	; 40
							lcd_gotoxy( 0,1);
    2962:	61 e0       	ldi	r22, 0x01	; 1
    2964:	80 e0       	ldi	r24, 0x00	; 0
    2966:	0e 94 8c 07 	call	0xf18	; 0xf18 <lcd_gotoxy>
							sprintf( gBuffer, "%4i", gBacklight);
    296a:	80 91 a5 02 	lds	r24, 0x02A5
    296e:	1f 92       	push	r1
    2970:	8f 93       	push	r24
    2972:	1f 93       	push	r17
    2974:	0f 93       	push	r16
    2976:	df 93       	push	r29
    2978:	cf 93       	push	r28
    297a:	0e 94 4c 19 	call	0x3298	; 0x3298 <sprintf>
							lcd_puts( gBuffer);
    297e:	86 ea       	ldi	r24, 0xA6	; 166
    2980:	92 e0       	ldi	r25, 0x02	; 2
    2982:	0e 94 c5 07 	call	0xf8a	; 0xf8a <lcd_puts>
    2986:	0f 90       	pop	r0
    2988:	0f 90       	pop	r0
    298a:	0f 90       	pop	r0
    298c:	0f 90       	pop	r0
    298e:	0f 90       	pop	r0
    2990:	0f 90       	pop	r0
						}
						// allow time to release button but still have fast cycle rate
						delay_ms( 25);
    2992:	6d e2       	ldi	r22, 0x2D	; 45
    2994:	72 e8       	ldi	r23, 0x82	; 130
    2996:	80 e0       	ldi	r24, 0x00	; 0
    2998:	90 e0       	ldi	r25, 0x00	; 0
    299a:	0e 94 2a 06 	call	0xc54	; 0xc54 <delayloop32>
    299e:	d3 cf       	rjmp	.-90     	; 0x2946 <main+0x9dc>
					}
					while( BTN_DOWN)	// decrease interval
					{
						if( gBacklight > 0)
    29a0:	80 91 a5 02 	lds	r24, 0x02A5
    29a4:	88 23       	and	r24, r24
    29a6:	e1 f0       	breq	.+56     	; 0x29e0 <main+0xa76>
						{
							PWM_OUT = --gBacklight;
    29a8:	81 50       	subi	r24, 0x01	; 1
    29aa:	80 93 a5 02 	sts	0x02A5, r24
    29ae:	88 bd       	out	0x28, r24	; 40
							lcd_gotoxy( 0,1);
    29b0:	61 e0       	ldi	r22, 0x01	; 1
    29b2:	80 e0       	ldi	r24, 0x00	; 0
    29b4:	0e 94 8c 07 	call	0xf18	; 0xf18 <lcd_gotoxy>
							sprintf( gBuffer, "%4i", gBacklight);
    29b8:	80 91 a5 02 	lds	r24, 0x02A5
    29bc:	1f 92       	push	r1
    29be:	8f 93       	push	r24
    29c0:	1f 93       	push	r17
    29c2:	0f 93       	push	r16
    29c4:	df 93       	push	r29
    29c6:	cf 93       	push	r28
    29c8:	0e 94 4c 19 	call	0x3298	; 0x3298 <sprintf>
							lcd_puts( gBuffer);
    29cc:	86 ea       	ldi	r24, 0xA6	; 166
    29ce:	92 e0       	ldi	r25, 0x02	; 2
    29d0:	0e 94 c5 07 	call	0xf8a	; 0xf8a <lcd_puts>
    29d4:	0f 90       	pop	r0
    29d6:	0f 90       	pop	r0
    29d8:	0f 90       	pop	r0
    29da:	0f 90       	pop	r0
    29dc:	0f 90       	pop	r0
    29de:	0f 90       	pop	r0
						}
						// allow time to release button but still have fast cycle rate
						delay_ms( 25);
    29e0:	6d e2       	ldi	r22, 0x2D	; 45
    29e2:	72 e8       	ldi	r23, 0x82	; 130
    29e4:	80 e0       	ldi	r24, 0x00	; 0
    29e6:	90 e0       	ldi	r25, 0x00	; 0
    29e8:	0e 94 2a 06 	call	0xc54	; 0xc54 <delayloop32>
							lcd_puts( gBuffer);
						}
						// allow time to release button but still have fast cycle rate
						delay_ms( 25);
					}
					while( BTN_DOWN)	// decrease interval
    29ec:	89 b1       	in	r24, 0x09	; 9
    29ee:	90 e0       	ldi	r25, 0x00	; 0
    29f0:	80 95       	com	r24
    29f2:	90 95       	com	r25
    29f4:	83 fd       	sbrc	r24, 3
    29f6:	d4 cf       	rjmp	.-88     	; 0x29a0 <main+0xa36>
    29f8:	a0 cf       	rjmp	.-192    	; 0x293a <main+0x9d0>
						// allow time to release button but still have fast cycle rate
						delay_ms( 25);
					}
				}
				//mode = MODE_SHOW_DATE;
				eeprom_write_byte( &nvBacklight, gBacklight);	// save the persistant value
    29fa:	60 91 a5 02 	lds	r22, 0x02A5
    29fe:	89 e4       	ldi	r24, 0x49	; 73
    2a00:	90 e0       	ldi	r25, 0x00	; 0
    2a02:	0e 94 68 1b 	call	0x36d0	; 0x36d0 <__eewr_byte_m168>
				lcd_clrscr();	// ack button press
    2a06:	0e 94 9f 07 	call	0xf3e	; 0xf3e <lcd_clrscr>
				while( BTN_MODE);	// wait until switch released
    2a0a:	83 b1       	in	r24, 0x03	; 3
    2a0c:	90 e0       	ldi	r25, 0x00	; 0
    2a0e:	80 95       	com	r24
    2a10:	90 95       	com	r25
    2a12:	87 fd       	sbrc	r24, 7
    2a14:	fa cf       	rjmp	.-12     	; 0x2a0a <main+0xaa0>
    2a16:	a2 cb       	rjmp	.-2236   	; 0x215c <main+0x1f2>

00002a18 <__mulsi3>:
    2a18:	db 01       	movw	r26, r22
    2a1a:	8f 93       	push	r24
    2a1c:	9f 93       	push	r25
    2a1e:	0e 94 80 15 	call	0x2b00	; 0x2b00 <__muluhisi3>
    2a22:	bf 91       	pop	r27
    2a24:	af 91       	pop	r26
    2a26:	a2 9f       	mul	r26, r18
    2a28:	80 0d       	add	r24, r0
    2a2a:	91 1d       	adc	r25, r1
    2a2c:	a3 9f       	mul	r26, r19
    2a2e:	90 0d       	add	r25, r0
    2a30:	b2 9f       	mul	r27, r18
    2a32:	90 0d       	add	r25, r0
    2a34:	11 24       	eor	r1, r1
    2a36:	08 95       	ret

00002a38 <__divmodhi4>:
    2a38:	97 fb       	bst	r25, 7
    2a3a:	07 2e       	mov	r0, r23
    2a3c:	16 f4       	brtc	.+4      	; 0x2a42 <__divmodhi4+0xa>
    2a3e:	00 94       	com	r0
    2a40:	07 d0       	rcall	.+14     	; 0x2a50 <__divmodhi4_neg1>
    2a42:	77 fd       	sbrc	r23, 7
    2a44:	09 d0       	rcall	.+18     	; 0x2a58 <__divmodhi4_neg2>
    2a46:	0e 94 93 15 	call	0x2b26	; 0x2b26 <__udivmodhi4>
    2a4a:	07 fc       	sbrc	r0, 7
    2a4c:	05 d0       	rcall	.+10     	; 0x2a58 <__divmodhi4_neg2>
    2a4e:	3e f4       	brtc	.+14     	; 0x2a5e <__divmodhi4_exit>

00002a50 <__divmodhi4_neg1>:
    2a50:	90 95       	com	r25
    2a52:	81 95       	neg	r24
    2a54:	9f 4f       	sbci	r25, 0xFF	; 255
    2a56:	08 95       	ret

00002a58 <__divmodhi4_neg2>:
    2a58:	70 95       	com	r23
    2a5a:	61 95       	neg	r22
    2a5c:	7f 4f       	sbci	r23, 0xFF	; 255

00002a5e <__divmodhi4_exit>:
    2a5e:	08 95       	ret

00002a60 <__udivmodsi4>:
    2a60:	a1 e2       	ldi	r26, 0x21	; 33
    2a62:	1a 2e       	mov	r1, r26
    2a64:	aa 1b       	sub	r26, r26
    2a66:	bb 1b       	sub	r27, r27
    2a68:	fd 01       	movw	r30, r26
    2a6a:	0d c0       	rjmp	.+26     	; 0x2a86 <__udivmodsi4_ep>

00002a6c <__udivmodsi4_loop>:
    2a6c:	aa 1f       	adc	r26, r26
    2a6e:	bb 1f       	adc	r27, r27
    2a70:	ee 1f       	adc	r30, r30
    2a72:	ff 1f       	adc	r31, r31
    2a74:	a2 17       	cp	r26, r18
    2a76:	b3 07       	cpc	r27, r19
    2a78:	e4 07       	cpc	r30, r20
    2a7a:	f5 07       	cpc	r31, r21
    2a7c:	20 f0       	brcs	.+8      	; 0x2a86 <__udivmodsi4_ep>
    2a7e:	a2 1b       	sub	r26, r18
    2a80:	b3 0b       	sbc	r27, r19
    2a82:	e4 0b       	sbc	r30, r20
    2a84:	f5 0b       	sbc	r31, r21

00002a86 <__udivmodsi4_ep>:
    2a86:	66 1f       	adc	r22, r22
    2a88:	77 1f       	adc	r23, r23
    2a8a:	88 1f       	adc	r24, r24
    2a8c:	99 1f       	adc	r25, r25
    2a8e:	1a 94       	dec	r1
    2a90:	69 f7       	brne	.-38     	; 0x2a6c <__udivmodsi4_loop>
    2a92:	60 95       	com	r22
    2a94:	70 95       	com	r23
    2a96:	80 95       	com	r24
    2a98:	90 95       	com	r25
    2a9a:	9b 01       	movw	r18, r22
    2a9c:	ac 01       	movw	r20, r24
    2a9e:	bd 01       	movw	r22, r26
    2aa0:	cf 01       	movw	r24, r30
    2aa2:	08 95       	ret

00002aa4 <__divmodsi4>:
    2aa4:	05 2e       	mov	r0, r21
    2aa6:	97 fb       	bst	r25, 7
    2aa8:	1e f4       	brtc	.+6      	; 0x2ab0 <__divmodsi4+0xc>
    2aaa:	00 94       	com	r0
    2aac:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <__negsi2>
    2ab0:	57 fd       	sbrc	r21, 7
    2ab2:	07 d0       	rcall	.+14     	; 0x2ac2 <__divmodsi4_neg2>
    2ab4:	0e 94 30 15 	call	0x2a60	; 0x2a60 <__udivmodsi4>
    2ab8:	07 fc       	sbrc	r0, 7
    2aba:	03 d0       	rcall	.+6      	; 0x2ac2 <__divmodsi4_neg2>
    2abc:	4e f4       	brtc	.+18     	; 0x2ad0 <__divmodsi4_exit>
    2abe:	0c 94 69 15 	jmp	0x2ad2	; 0x2ad2 <__negsi2>

00002ac2 <__divmodsi4_neg2>:
    2ac2:	50 95       	com	r21
    2ac4:	40 95       	com	r20
    2ac6:	30 95       	com	r19
    2ac8:	21 95       	neg	r18
    2aca:	3f 4f       	sbci	r19, 0xFF	; 255
    2acc:	4f 4f       	sbci	r20, 0xFF	; 255
    2ace:	5f 4f       	sbci	r21, 0xFF	; 255

00002ad0 <__divmodsi4_exit>:
    2ad0:	08 95       	ret

00002ad2 <__negsi2>:
    2ad2:	90 95       	com	r25
    2ad4:	80 95       	com	r24
    2ad6:	70 95       	com	r23
    2ad8:	61 95       	neg	r22
    2ada:	7f 4f       	sbci	r23, 0xFF	; 255
    2adc:	8f 4f       	sbci	r24, 0xFF	; 255
    2ade:	9f 4f       	sbci	r25, 0xFF	; 255
    2ae0:	08 95       	ret

00002ae2 <__umulhisi3>:
    2ae2:	a2 9f       	mul	r26, r18
    2ae4:	b0 01       	movw	r22, r0
    2ae6:	b3 9f       	mul	r27, r19
    2ae8:	c0 01       	movw	r24, r0
    2aea:	a3 9f       	mul	r26, r19
    2aec:	70 0d       	add	r23, r0
    2aee:	81 1d       	adc	r24, r1
    2af0:	11 24       	eor	r1, r1
    2af2:	91 1d       	adc	r25, r1
    2af4:	b2 9f       	mul	r27, r18
    2af6:	70 0d       	add	r23, r0
    2af8:	81 1d       	adc	r24, r1
    2afa:	11 24       	eor	r1, r1
    2afc:	91 1d       	adc	r25, r1
    2afe:	08 95       	ret

00002b00 <__muluhisi3>:
    2b00:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <__umulhisi3>
    2b04:	a5 9f       	mul	r26, r21
    2b06:	90 0d       	add	r25, r0
    2b08:	b4 9f       	mul	r27, r20
    2b0a:	90 0d       	add	r25, r0
    2b0c:	a4 9f       	mul	r26, r20
    2b0e:	80 0d       	add	r24, r0
    2b10:	91 1d       	adc	r25, r1
    2b12:	11 24       	eor	r1, r1
    2b14:	08 95       	ret

00002b16 <__mulshisi3>:
    2b16:	b7 ff       	sbrs	r27, 7
    2b18:	0c 94 80 15 	jmp	0x2b00	; 0x2b00 <__muluhisi3>

00002b1c <__mulohisi3>:
    2b1c:	0e 94 80 15 	call	0x2b00	; 0x2b00 <__muluhisi3>
    2b20:	82 1b       	sub	r24, r18
    2b22:	93 0b       	sbc	r25, r19
    2b24:	08 95       	ret

00002b26 <__udivmodhi4>:
    2b26:	aa 1b       	sub	r26, r26
    2b28:	bb 1b       	sub	r27, r27
    2b2a:	51 e1       	ldi	r21, 0x11	; 17
    2b2c:	07 c0       	rjmp	.+14     	; 0x2b3c <__udivmodhi4_ep>

00002b2e <__udivmodhi4_loop>:
    2b2e:	aa 1f       	adc	r26, r26
    2b30:	bb 1f       	adc	r27, r27
    2b32:	a6 17       	cp	r26, r22
    2b34:	b7 07       	cpc	r27, r23
    2b36:	10 f0       	brcs	.+4      	; 0x2b3c <__udivmodhi4_ep>
    2b38:	a6 1b       	sub	r26, r22
    2b3a:	b7 0b       	sbc	r27, r23

00002b3c <__udivmodhi4_ep>:
    2b3c:	88 1f       	adc	r24, r24
    2b3e:	99 1f       	adc	r25, r25
    2b40:	5a 95       	dec	r21
    2b42:	a9 f7       	brne	.-22     	; 0x2b2e <__udivmodhi4_loop>
    2b44:	80 95       	com	r24
    2b46:	90 95       	com	r25
    2b48:	bc 01       	movw	r22, r24
    2b4a:	cd 01       	movw	r24, r26
    2b4c:	08 95       	ret

00002b4e <__subsf3>:
    2b4e:	50 58       	subi	r21, 0x80	; 128

00002b50 <__addsf3>:
    2b50:	bb 27       	eor	r27, r27
    2b52:	aa 27       	eor	r26, r26
    2b54:	0e d0       	rcall	.+28     	; 0x2b72 <__addsf3x>
    2b56:	1c c1       	rjmp	.+568    	; 0x2d90 <__fp_round>
    2b58:	0d d1       	rcall	.+538    	; 0x2d74 <__fp_pscA>
    2b5a:	30 f0       	brcs	.+12     	; 0x2b68 <__addsf3+0x18>
    2b5c:	12 d1       	rcall	.+548    	; 0x2d82 <__fp_pscB>
    2b5e:	20 f0       	brcs	.+8      	; 0x2b68 <__addsf3+0x18>
    2b60:	31 f4       	brne	.+12     	; 0x2b6e <__addsf3+0x1e>
    2b62:	9f 3f       	cpi	r25, 0xFF	; 255
    2b64:	11 f4       	brne	.+4      	; 0x2b6a <__addsf3+0x1a>
    2b66:	1e f4       	brtc	.+6      	; 0x2b6e <__addsf3+0x1e>
    2b68:	02 c1       	rjmp	.+516    	; 0x2d6e <__fp_nan>
    2b6a:	0e f4       	brtc	.+2      	; 0x2b6e <__addsf3+0x1e>
    2b6c:	e0 95       	com	r30
    2b6e:	e7 fb       	bst	r30, 7
    2b70:	f8 c0       	rjmp	.+496    	; 0x2d62 <__fp_inf>

00002b72 <__addsf3x>:
    2b72:	e9 2f       	mov	r30, r25
    2b74:	1e d1       	rcall	.+572    	; 0x2db2 <__fp_split3>
    2b76:	80 f3       	brcs	.-32     	; 0x2b58 <__addsf3+0x8>
    2b78:	ba 17       	cp	r27, r26
    2b7a:	62 07       	cpc	r22, r18
    2b7c:	73 07       	cpc	r23, r19
    2b7e:	84 07       	cpc	r24, r20
    2b80:	95 07       	cpc	r25, r21
    2b82:	18 f0       	brcs	.+6      	; 0x2b8a <__addsf3x+0x18>
    2b84:	71 f4       	brne	.+28     	; 0x2ba2 <__addsf3x+0x30>
    2b86:	9e f5       	brtc	.+102    	; 0x2bee <__addsf3x+0x7c>
    2b88:	36 c1       	rjmp	.+620    	; 0x2df6 <__fp_zero>
    2b8a:	0e f4       	brtc	.+2      	; 0x2b8e <__addsf3x+0x1c>
    2b8c:	e0 95       	com	r30
    2b8e:	0b 2e       	mov	r0, r27
    2b90:	ba 2f       	mov	r27, r26
    2b92:	a0 2d       	mov	r26, r0
    2b94:	0b 01       	movw	r0, r22
    2b96:	b9 01       	movw	r22, r18
    2b98:	90 01       	movw	r18, r0
    2b9a:	0c 01       	movw	r0, r24
    2b9c:	ca 01       	movw	r24, r20
    2b9e:	a0 01       	movw	r20, r0
    2ba0:	11 24       	eor	r1, r1
    2ba2:	ff 27       	eor	r31, r31
    2ba4:	59 1b       	sub	r21, r25
    2ba6:	99 f0       	breq	.+38     	; 0x2bce <__addsf3x+0x5c>
    2ba8:	59 3f       	cpi	r21, 0xF9	; 249
    2baa:	50 f4       	brcc	.+20     	; 0x2bc0 <__addsf3x+0x4e>
    2bac:	50 3e       	cpi	r21, 0xE0	; 224
    2bae:	68 f1       	brcs	.+90     	; 0x2c0a <__addsf3x+0x98>
    2bb0:	1a 16       	cp	r1, r26
    2bb2:	f0 40       	sbci	r31, 0x00	; 0
    2bb4:	a2 2f       	mov	r26, r18
    2bb6:	23 2f       	mov	r18, r19
    2bb8:	34 2f       	mov	r19, r20
    2bba:	44 27       	eor	r20, r20
    2bbc:	58 5f       	subi	r21, 0xF8	; 248
    2bbe:	f3 cf       	rjmp	.-26     	; 0x2ba6 <__addsf3x+0x34>
    2bc0:	46 95       	lsr	r20
    2bc2:	37 95       	ror	r19
    2bc4:	27 95       	ror	r18
    2bc6:	a7 95       	ror	r26
    2bc8:	f0 40       	sbci	r31, 0x00	; 0
    2bca:	53 95       	inc	r21
    2bcc:	c9 f7       	brne	.-14     	; 0x2bc0 <__addsf3x+0x4e>
    2bce:	7e f4       	brtc	.+30     	; 0x2bee <__addsf3x+0x7c>
    2bd0:	1f 16       	cp	r1, r31
    2bd2:	ba 0b       	sbc	r27, r26
    2bd4:	62 0b       	sbc	r22, r18
    2bd6:	73 0b       	sbc	r23, r19
    2bd8:	84 0b       	sbc	r24, r20
    2bda:	ba f0       	brmi	.+46     	; 0x2c0a <__addsf3x+0x98>
    2bdc:	91 50       	subi	r25, 0x01	; 1
    2bde:	a1 f0       	breq	.+40     	; 0x2c08 <__addsf3x+0x96>
    2be0:	ff 0f       	add	r31, r31
    2be2:	bb 1f       	adc	r27, r27
    2be4:	66 1f       	adc	r22, r22
    2be6:	77 1f       	adc	r23, r23
    2be8:	88 1f       	adc	r24, r24
    2bea:	c2 f7       	brpl	.-16     	; 0x2bdc <__addsf3x+0x6a>
    2bec:	0e c0       	rjmp	.+28     	; 0x2c0a <__addsf3x+0x98>
    2bee:	ba 0f       	add	r27, r26
    2bf0:	62 1f       	adc	r22, r18
    2bf2:	73 1f       	adc	r23, r19
    2bf4:	84 1f       	adc	r24, r20
    2bf6:	48 f4       	brcc	.+18     	; 0x2c0a <__addsf3x+0x98>
    2bf8:	87 95       	ror	r24
    2bfa:	77 95       	ror	r23
    2bfc:	67 95       	ror	r22
    2bfe:	b7 95       	ror	r27
    2c00:	f7 95       	ror	r31
    2c02:	9e 3f       	cpi	r25, 0xFE	; 254
    2c04:	08 f0       	brcs	.+2      	; 0x2c08 <__addsf3x+0x96>
    2c06:	b3 cf       	rjmp	.-154    	; 0x2b6e <__addsf3+0x1e>
    2c08:	93 95       	inc	r25
    2c0a:	88 0f       	add	r24, r24
    2c0c:	08 f0       	brcs	.+2      	; 0x2c10 <__addsf3x+0x9e>
    2c0e:	99 27       	eor	r25, r25
    2c10:	ee 0f       	add	r30, r30
    2c12:	97 95       	ror	r25
    2c14:	87 95       	ror	r24
    2c16:	08 95       	ret

00002c18 <__divsf3>:
    2c18:	0c d0       	rcall	.+24     	; 0x2c32 <__divsf3x>
    2c1a:	ba c0       	rjmp	.+372    	; 0x2d90 <__fp_round>
    2c1c:	b2 d0       	rcall	.+356    	; 0x2d82 <__fp_pscB>
    2c1e:	40 f0       	brcs	.+16     	; 0x2c30 <__divsf3+0x18>
    2c20:	a9 d0       	rcall	.+338    	; 0x2d74 <__fp_pscA>
    2c22:	30 f0       	brcs	.+12     	; 0x2c30 <__divsf3+0x18>
    2c24:	21 f4       	brne	.+8      	; 0x2c2e <__divsf3+0x16>
    2c26:	5f 3f       	cpi	r21, 0xFF	; 255
    2c28:	19 f0       	breq	.+6      	; 0x2c30 <__divsf3+0x18>
    2c2a:	9b c0       	rjmp	.+310    	; 0x2d62 <__fp_inf>
    2c2c:	51 11       	cpse	r21, r1
    2c2e:	e4 c0       	rjmp	.+456    	; 0x2df8 <__fp_szero>
    2c30:	9e c0       	rjmp	.+316    	; 0x2d6e <__fp_nan>

00002c32 <__divsf3x>:
    2c32:	bf d0       	rcall	.+382    	; 0x2db2 <__fp_split3>
    2c34:	98 f3       	brcs	.-26     	; 0x2c1c <__divsf3+0x4>

00002c36 <__divsf3_pse>:
    2c36:	99 23       	and	r25, r25
    2c38:	c9 f3       	breq	.-14     	; 0x2c2c <__divsf3+0x14>
    2c3a:	55 23       	and	r21, r21
    2c3c:	b1 f3       	breq	.-20     	; 0x2c2a <__divsf3+0x12>
    2c3e:	95 1b       	sub	r25, r21
    2c40:	55 0b       	sbc	r21, r21
    2c42:	bb 27       	eor	r27, r27
    2c44:	aa 27       	eor	r26, r26
    2c46:	62 17       	cp	r22, r18
    2c48:	73 07       	cpc	r23, r19
    2c4a:	84 07       	cpc	r24, r20
    2c4c:	38 f0       	brcs	.+14     	; 0x2c5c <__divsf3_pse+0x26>
    2c4e:	9f 5f       	subi	r25, 0xFF	; 255
    2c50:	5f 4f       	sbci	r21, 0xFF	; 255
    2c52:	22 0f       	add	r18, r18
    2c54:	33 1f       	adc	r19, r19
    2c56:	44 1f       	adc	r20, r20
    2c58:	aa 1f       	adc	r26, r26
    2c5a:	a9 f3       	breq	.-22     	; 0x2c46 <__divsf3_pse+0x10>
    2c5c:	33 d0       	rcall	.+102    	; 0x2cc4 <__divsf3_pse+0x8e>
    2c5e:	0e 2e       	mov	r0, r30
    2c60:	3a f0       	brmi	.+14     	; 0x2c70 <__divsf3_pse+0x3a>
    2c62:	e0 e8       	ldi	r30, 0x80	; 128
    2c64:	30 d0       	rcall	.+96     	; 0x2cc6 <__divsf3_pse+0x90>
    2c66:	91 50       	subi	r25, 0x01	; 1
    2c68:	50 40       	sbci	r21, 0x00	; 0
    2c6a:	e6 95       	lsr	r30
    2c6c:	00 1c       	adc	r0, r0
    2c6e:	ca f7       	brpl	.-14     	; 0x2c62 <__divsf3_pse+0x2c>
    2c70:	29 d0       	rcall	.+82     	; 0x2cc4 <__divsf3_pse+0x8e>
    2c72:	fe 2f       	mov	r31, r30
    2c74:	27 d0       	rcall	.+78     	; 0x2cc4 <__divsf3_pse+0x8e>
    2c76:	66 0f       	add	r22, r22
    2c78:	77 1f       	adc	r23, r23
    2c7a:	88 1f       	adc	r24, r24
    2c7c:	bb 1f       	adc	r27, r27
    2c7e:	26 17       	cp	r18, r22
    2c80:	37 07       	cpc	r19, r23
    2c82:	48 07       	cpc	r20, r24
    2c84:	ab 07       	cpc	r26, r27
    2c86:	b0 e8       	ldi	r27, 0x80	; 128
    2c88:	09 f0       	breq	.+2      	; 0x2c8c <__divsf3_pse+0x56>
    2c8a:	bb 0b       	sbc	r27, r27
    2c8c:	80 2d       	mov	r24, r0
    2c8e:	bf 01       	movw	r22, r30
    2c90:	ff 27       	eor	r31, r31
    2c92:	93 58       	subi	r25, 0x83	; 131
    2c94:	5f 4f       	sbci	r21, 0xFF	; 255
    2c96:	2a f0       	brmi	.+10     	; 0x2ca2 <__divsf3_pse+0x6c>
    2c98:	9e 3f       	cpi	r25, 0xFE	; 254
    2c9a:	51 05       	cpc	r21, r1
    2c9c:	68 f0       	brcs	.+26     	; 0x2cb8 <__divsf3_pse+0x82>
    2c9e:	61 c0       	rjmp	.+194    	; 0x2d62 <__fp_inf>
    2ca0:	ab c0       	rjmp	.+342    	; 0x2df8 <__fp_szero>
    2ca2:	5f 3f       	cpi	r21, 0xFF	; 255
    2ca4:	ec f3       	brlt	.-6      	; 0x2ca0 <__divsf3_pse+0x6a>
    2ca6:	98 3e       	cpi	r25, 0xE8	; 232
    2ca8:	dc f3       	brlt	.-10     	; 0x2ca0 <__divsf3_pse+0x6a>
    2caa:	86 95       	lsr	r24
    2cac:	77 95       	ror	r23
    2cae:	67 95       	ror	r22
    2cb0:	b7 95       	ror	r27
    2cb2:	f7 95       	ror	r31
    2cb4:	9f 5f       	subi	r25, 0xFF	; 255
    2cb6:	c9 f7       	brne	.-14     	; 0x2caa <__divsf3_pse+0x74>
    2cb8:	88 0f       	add	r24, r24
    2cba:	91 1d       	adc	r25, r1
    2cbc:	96 95       	lsr	r25
    2cbe:	87 95       	ror	r24
    2cc0:	97 f9       	bld	r25, 7
    2cc2:	08 95       	ret
    2cc4:	e1 e0       	ldi	r30, 0x01	; 1
    2cc6:	66 0f       	add	r22, r22
    2cc8:	77 1f       	adc	r23, r23
    2cca:	88 1f       	adc	r24, r24
    2ccc:	bb 1f       	adc	r27, r27
    2cce:	62 17       	cp	r22, r18
    2cd0:	73 07       	cpc	r23, r19
    2cd2:	84 07       	cpc	r24, r20
    2cd4:	ba 07       	cpc	r27, r26
    2cd6:	20 f0       	brcs	.+8      	; 0x2ce0 <__divsf3_pse+0xaa>
    2cd8:	62 1b       	sub	r22, r18
    2cda:	73 0b       	sbc	r23, r19
    2cdc:	84 0b       	sbc	r24, r20
    2cde:	ba 0b       	sbc	r27, r26
    2ce0:	ee 1f       	adc	r30, r30
    2ce2:	88 f7       	brcc	.-30     	; 0x2cc6 <__divsf3_pse+0x90>
    2ce4:	e0 95       	com	r30
    2ce6:	08 95       	ret

00002ce8 <__floatunsisf>:
    2ce8:	e8 94       	clt
    2cea:	09 c0       	rjmp	.+18     	; 0x2cfe <__floatsisf+0x12>

00002cec <__floatsisf>:
    2cec:	97 fb       	bst	r25, 7
    2cee:	3e f4       	brtc	.+14     	; 0x2cfe <__floatsisf+0x12>
    2cf0:	90 95       	com	r25
    2cf2:	80 95       	com	r24
    2cf4:	70 95       	com	r23
    2cf6:	61 95       	neg	r22
    2cf8:	7f 4f       	sbci	r23, 0xFF	; 255
    2cfa:	8f 4f       	sbci	r24, 0xFF	; 255
    2cfc:	9f 4f       	sbci	r25, 0xFF	; 255
    2cfe:	99 23       	and	r25, r25
    2d00:	a9 f0       	breq	.+42     	; 0x2d2c <__floatsisf+0x40>
    2d02:	f9 2f       	mov	r31, r25
    2d04:	96 e9       	ldi	r25, 0x96	; 150
    2d06:	bb 27       	eor	r27, r27
    2d08:	93 95       	inc	r25
    2d0a:	f6 95       	lsr	r31
    2d0c:	87 95       	ror	r24
    2d0e:	77 95       	ror	r23
    2d10:	67 95       	ror	r22
    2d12:	b7 95       	ror	r27
    2d14:	f1 11       	cpse	r31, r1
    2d16:	f8 cf       	rjmp	.-16     	; 0x2d08 <__floatsisf+0x1c>
    2d18:	fa f4       	brpl	.+62     	; 0x2d58 <__floatsisf+0x6c>
    2d1a:	bb 0f       	add	r27, r27
    2d1c:	11 f4       	brne	.+4      	; 0x2d22 <__floatsisf+0x36>
    2d1e:	60 ff       	sbrs	r22, 0
    2d20:	1b c0       	rjmp	.+54     	; 0x2d58 <__floatsisf+0x6c>
    2d22:	6f 5f       	subi	r22, 0xFF	; 255
    2d24:	7f 4f       	sbci	r23, 0xFF	; 255
    2d26:	8f 4f       	sbci	r24, 0xFF	; 255
    2d28:	9f 4f       	sbci	r25, 0xFF	; 255
    2d2a:	16 c0       	rjmp	.+44     	; 0x2d58 <__floatsisf+0x6c>
    2d2c:	88 23       	and	r24, r24
    2d2e:	11 f0       	breq	.+4      	; 0x2d34 <__floatsisf+0x48>
    2d30:	96 e9       	ldi	r25, 0x96	; 150
    2d32:	11 c0       	rjmp	.+34     	; 0x2d56 <__floatsisf+0x6a>
    2d34:	77 23       	and	r23, r23
    2d36:	21 f0       	breq	.+8      	; 0x2d40 <__floatsisf+0x54>
    2d38:	9e e8       	ldi	r25, 0x8E	; 142
    2d3a:	87 2f       	mov	r24, r23
    2d3c:	76 2f       	mov	r23, r22
    2d3e:	05 c0       	rjmp	.+10     	; 0x2d4a <__floatsisf+0x5e>
    2d40:	66 23       	and	r22, r22
    2d42:	71 f0       	breq	.+28     	; 0x2d60 <__floatsisf+0x74>
    2d44:	96 e8       	ldi	r25, 0x86	; 134
    2d46:	86 2f       	mov	r24, r22
    2d48:	70 e0       	ldi	r23, 0x00	; 0
    2d4a:	60 e0       	ldi	r22, 0x00	; 0
    2d4c:	2a f0       	brmi	.+10     	; 0x2d58 <__floatsisf+0x6c>
    2d4e:	9a 95       	dec	r25
    2d50:	66 0f       	add	r22, r22
    2d52:	77 1f       	adc	r23, r23
    2d54:	88 1f       	adc	r24, r24
    2d56:	da f7       	brpl	.-10     	; 0x2d4e <__floatsisf+0x62>
    2d58:	88 0f       	add	r24, r24
    2d5a:	96 95       	lsr	r25
    2d5c:	87 95       	ror	r24
    2d5e:	97 f9       	bld	r25, 7
    2d60:	08 95       	ret

00002d62 <__fp_inf>:
    2d62:	97 f9       	bld	r25, 7
    2d64:	9f 67       	ori	r25, 0x7F	; 127
    2d66:	80 e8       	ldi	r24, 0x80	; 128
    2d68:	70 e0       	ldi	r23, 0x00	; 0
    2d6a:	60 e0       	ldi	r22, 0x00	; 0
    2d6c:	08 95       	ret

00002d6e <__fp_nan>:
    2d6e:	9f ef       	ldi	r25, 0xFF	; 255
    2d70:	80 ec       	ldi	r24, 0xC0	; 192
    2d72:	08 95       	ret

00002d74 <__fp_pscA>:
    2d74:	00 24       	eor	r0, r0
    2d76:	0a 94       	dec	r0
    2d78:	16 16       	cp	r1, r22
    2d7a:	17 06       	cpc	r1, r23
    2d7c:	18 06       	cpc	r1, r24
    2d7e:	09 06       	cpc	r0, r25
    2d80:	08 95       	ret

00002d82 <__fp_pscB>:
    2d82:	00 24       	eor	r0, r0
    2d84:	0a 94       	dec	r0
    2d86:	12 16       	cp	r1, r18
    2d88:	13 06       	cpc	r1, r19
    2d8a:	14 06       	cpc	r1, r20
    2d8c:	05 06       	cpc	r0, r21
    2d8e:	08 95       	ret

00002d90 <__fp_round>:
    2d90:	09 2e       	mov	r0, r25
    2d92:	03 94       	inc	r0
    2d94:	00 0c       	add	r0, r0
    2d96:	11 f4       	brne	.+4      	; 0x2d9c <__fp_round+0xc>
    2d98:	88 23       	and	r24, r24
    2d9a:	52 f0       	brmi	.+20     	; 0x2db0 <__fp_round+0x20>
    2d9c:	bb 0f       	add	r27, r27
    2d9e:	40 f4       	brcc	.+16     	; 0x2db0 <__fp_round+0x20>
    2da0:	bf 2b       	or	r27, r31
    2da2:	11 f4       	brne	.+4      	; 0x2da8 <__fp_round+0x18>
    2da4:	60 ff       	sbrs	r22, 0
    2da6:	04 c0       	rjmp	.+8      	; 0x2db0 <__fp_round+0x20>
    2da8:	6f 5f       	subi	r22, 0xFF	; 255
    2daa:	7f 4f       	sbci	r23, 0xFF	; 255
    2dac:	8f 4f       	sbci	r24, 0xFF	; 255
    2dae:	9f 4f       	sbci	r25, 0xFF	; 255
    2db0:	08 95       	ret

00002db2 <__fp_split3>:
    2db2:	57 fd       	sbrc	r21, 7
    2db4:	90 58       	subi	r25, 0x80	; 128
    2db6:	44 0f       	add	r20, r20
    2db8:	55 1f       	adc	r21, r21
    2dba:	59 f0       	breq	.+22     	; 0x2dd2 <__fp_splitA+0x10>
    2dbc:	5f 3f       	cpi	r21, 0xFF	; 255
    2dbe:	71 f0       	breq	.+28     	; 0x2ddc <__fp_splitA+0x1a>
    2dc0:	47 95       	ror	r20

00002dc2 <__fp_splitA>:
    2dc2:	88 0f       	add	r24, r24
    2dc4:	97 fb       	bst	r25, 7
    2dc6:	99 1f       	adc	r25, r25
    2dc8:	61 f0       	breq	.+24     	; 0x2de2 <__fp_splitA+0x20>
    2dca:	9f 3f       	cpi	r25, 0xFF	; 255
    2dcc:	79 f0       	breq	.+30     	; 0x2dec <__fp_splitA+0x2a>
    2dce:	87 95       	ror	r24
    2dd0:	08 95       	ret
    2dd2:	12 16       	cp	r1, r18
    2dd4:	13 06       	cpc	r1, r19
    2dd6:	14 06       	cpc	r1, r20
    2dd8:	55 1f       	adc	r21, r21
    2dda:	f2 cf       	rjmp	.-28     	; 0x2dc0 <__fp_split3+0xe>
    2ddc:	46 95       	lsr	r20
    2dde:	f1 df       	rcall	.-30     	; 0x2dc2 <__fp_splitA>
    2de0:	08 c0       	rjmp	.+16     	; 0x2df2 <__fp_splitA+0x30>
    2de2:	16 16       	cp	r1, r22
    2de4:	17 06       	cpc	r1, r23
    2de6:	18 06       	cpc	r1, r24
    2de8:	99 1f       	adc	r25, r25
    2dea:	f1 cf       	rjmp	.-30     	; 0x2dce <__fp_splitA+0xc>
    2dec:	86 95       	lsr	r24
    2dee:	71 05       	cpc	r23, r1
    2df0:	61 05       	cpc	r22, r1
    2df2:	08 94       	sec
    2df4:	08 95       	ret

00002df6 <__fp_zero>:
    2df6:	e8 94       	clt

00002df8 <__fp_szero>:
    2df8:	bb 27       	eor	r27, r27
    2dfa:	66 27       	eor	r22, r22
    2dfc:	77 27       	eor	r23, r23
    2dfe:	cb 01       	movw	r24, r22
    2e00:	97 f9       	bld	r25, 7
    2e02:	08 95       	ret

00002e04 <pow>:
    2e04:	fa 01       	movw	r30, r20
    2e06:	ee 0f       	add	r30, r30
    2e08:	ff 1f       	adc	r31, r31
    2e0a:	30 96       	adiw	r30, 0x00	; 0
    2e0c:	21 05       	cpc	r18, r1
    2e0e:	31 05       	cpc	r19, r1
    2e10:	99 f1       	breq	.+102    	; 0x2e78 <pow+0x74>
    2e12:	61 15       	cp	r22, r1
    2e14:	71 05       	cpc	r23, r1
    2e16:	61 f4       	brne	.+24     	; 0x2e30 <pow+0x2c>
    2e18:	80 38       	cpi	r24, 0x80	; 128
    2e1a:	bf e3       	ldi	r27, 0x3F	; 63
    2e1c:	9b 07       	cpc	r25, r27
    2e1e:	49 f1       	breq	.+82     	; 0x2e72 <pow+0x6e>
    2e20:	68 94       	set
    2e22:	90 38       	cpi	r25, 0x80	; 128
    2e24:	81 05       	cpc	r24, r1
    2e26:	61 f0       	breq	.+24     	; 0x2e40 <pow+0x3c>
    2e28:	80 38       	cpi	r24, 0x80	; 128
    2e2a:	bf ef       	ldi	r27, 0xFF	; 255
    2e2c:	9b 07       	cpc	r25, r27
    2e2e:	41 f0       	breq	.+16     	; 0x2e40 <pow+0x3c>
    2e30:	99 23       	and	r25, r25
    2e32:	42 f5       	brpl	.+80     	; 0x2e84 <pow+0x80>
    2e34:	ff 3f       	cpi	r31, 0xFF	; 255
    2e36:	e1 05       	cpc	r30, r1
    2e38:	31 05       	cpc	r19, r1
    2e3a:	21 05       	cpc	r18, r1
    2e3c:	11 f1       	breq	.+68     	; 0x2e82 <pow+0x7e>
    2e3e:	e8 94       	clt
    2e40:	08 94       	sec
    2e42:	e7 95       	ror	r30
    2e44:	d9 01       	movw	r26, r18
    2e46:	aa 23       	and	r26, r26
    2e48:	29 f4       	brne	.+10     	; 0x2e54 <pow+0x50>
    2e4a:	ab 2f       	mov	r26, r27
    2e4c:	be 2f       	mov	r27, r30
    2e4e:	f8 5f       	subi	r31, 0xF8	; 248
    2e50:	d0 f3       	brcs	.-12     	; 0x2e46 <pow+0x42>
    2e52:	10 c0       	rjmp	.+32     	; 0x2e74 <pow+0x70>
    2e54:	ff 5f       	subi	r31, 0xFF	; 255
    2e56:	70 f4       	brcc	.+28     	; 0x2e74 <pow+0x70>
    2e58:	a6 95       	lsr	r26
    2e5a:	e0 f7       	brcc	.-8      	; 0x2e54 <pow+0x50>
    2e5c:	f7 39       	cpi	r31, 0x97	; 151
    2e5e:	50 f0       	brcs	.+20     	; 0x2e74 <pow+0x70>
    2e60:	19 f0       	breq	.+6      	; 0x2e68 <pow+0x64>
    2e62:	ff 3a       	cpi	r31, 0xAF	; 175
    2e64:	38 f4       	brcc	.+14     	; 0x2e74 <pow+0x70>
    2e66:	9f 77       	andi	r25, 0x7F	; 127
    2e68:	9f 93       	push	r25
    2e6a:	0c d0       	rcall	.+24     	; 0x2e84 <pow+0x80>
    2e6c:	0f 90       	pop	r0
    2e6e:	07 fc       	sbrc	r0, 7
    2e70:	90 58       	subi	r25, 0x80	; 128
    2e72:	08 95       	ret
    2e74:	3e f0       	brts	.+14     	; 0x2e84 <pow+0x80>
    2e76:	7b cf       	rjmp	.-266    	; 0x2d6e <__fp_nan>
    2e78:	60 e0       	ldi	r22, 0x00	; 0
    2e7a:	70 e0       	ldi	r23, 0x00	; 0
    2e7c:	80 e8       	ldi	r24, 0x80	; 128
    2e7e:	9f e3       	ldi	r25, 0x3F	; 63
    2e80:	08 95       	ret
    2e82:	4f e7       	ldi	r20, 0x7F	; 127
    2e84:	9f 77       	andi	r25, 0x7F	; 127
    2e86:	5f 93       	push	r21
    2e88:	4f 93       	push	r20
    2e8a:	3f 93       	push	r19
    2e8c:	2f 93       	push	r18
    2e8e:	9e d0       	rcall	.+316    	; 0x2fcc <log>
    2e90:	2f 91       	pop	r18
    2e92:	3f 91       	pop	r19
    2e94:	4f 91       	pop	r20
    2e96:	5f 91       	pop	r21
    2e98:	0c d1       	rcall	.+536    	; 0x30b2 <__mulsf3>
    2e9a:	05 c0       	rjmp	.+10     	; 0x2ea6 <exp>
    2e9c:	19 f4       	brne	.+6      	; 0x2ea4 <pow+0xa0>
    2e9e:	0e f0       	brts	.+2      	; 0x2ea2 <pow+0x9e>
    2ea0:	60 cf       	rjmp	.-320    	; 0x2d62 <__fp_inf>
    2ea2:	a9 cf       	rjmp	.-174    	; 0x2df6 <__fp_zero>
    2ea4:	64 cf       	rjmp	.-312    	; 0x2d6e <__fp_nan>

00002ea6 <exp>:
    2ea6:	8d df       	rcall	.-230    	; 0x2dc2 <__fp_splitA>
    2ea8:	c8 f3       	brcs	.-14     	; 0x2e9c <pow+0x98>
    2eaa:	96 38       	cpi	r25, 0x86	; 134
    2eac:	c0 f7       	brcc	.-16     	; 0x2e9e <pow+0x9a>
    2eae:	07 f8       	bld	r0, 7
    2eb0:	0f 92       	push	r0
    2eb2:	e8 94       	clt
    2eb4:	2b e3       	ldi	r18, 0x3B	; 59
    2eb6:	3a ea       	ldi	r19, 0xAA	; 170
    2eb8:	48 eb       	ldi	r20, 0xB8	; 184
    2eba:	5f e7       	ldi	r21, 0x7F	; 127
    2ebc:	08 d1       	rcall	.+528    	; 0x30ce <__mulsf3_pse>
    2ebe:	0f 92       	push	r0
    2ec0:	0f 92       	push	r0
    2ec2:	0f 92       	push	r0
    2ec4:	4d b7       	in	r20, 0x3d	; 61
    2ec6:	5e b7       	in	r21, 0x3e	; 62
    2ec8:	0f 92       	push	r0
    2eca:	c0 d0       	rcall	.+384    	; 0x304c <modf>
    2ecc:	e8 e6       	ldi	r30, 0x68	; 104
    2ece:	f0 e0       	ldi	r31, 0x00	; 0
    2ed0:	16 d0       	rcall	.+44     	; 0x2efe <__fp_powser>
    2ed2:	4f 91       	pop	r20
    2ed4:	5f 91       	pop	r21
    2ed6:	ef 91       	pop	r30
    2ed8:	ff 91       	pop	r31
    2eda:	e5 95       	asr	r30
    2edc:	ee 1f       	adc	r30, r30
    2ede:	ff 1f       	adc	r31, r31
    2ee0:	49 f0       	breq	.+18     	; 0x2ef4 <exp+0x4e>
    2ee2:	fe 57       	subi	r31, 0x7E	; 126
    2ee4:	e0 68       	ori	r30, 0x80	; 128
    2ee6:	44 27       	eor	r20, r20
    2ee8:	ee 0f       	add	r30, r30
    2eea:	44 1f       	adc	r20, r20
    2eec:	fa 95       	dec	r31
    2eee:	e1 f7       	brne	.-8      	; 0x2ee8 <exp+0x42>
    2ef0:	41 95       	neg	r20
    2ef2:	55 0b       	sbc	r21, r21
    2ef4:	32 d0       	rcall	.+100    	; 0x2f5a <ldexp>
    2ef6:	0f 90       	pop	r0
    2ef8:	07 fe       	sbrs	r0, 7
    2efa:	26 c0       	rjmp	.+76     	; 0x2f48 <inverse>
    2efc:	08 95       	ret

00002efe <__fp_powser>:
    2efe:	df 93       	push	r29
    2f00:	cf 93       	push	r28
    2f02:	1f 93       	push	r17
    2f04:	0f 93       	push	r16
    2f06:	ff 92       	push	r15
    2f08:	ef 92       	push	r14
    2f0a:	df 92       	push	r13
    2f0c:	7b 01       	movw	r14, r22
    2f0e:	8c 01       	movw	r16, r24
    2f10:	68 94       	set
    2f12:	05 c0       	rjmp	.+10     	; 0x2f1e <__fp_powser+0x20>
    2f14:	da 2e       	mov	r13, r26
    2f16:	ef 01       	movw	r28, r30
    2f18:	d8 d0       	rcall	.+432    	; 0x30ca <__mulsf3x>
    2f1a:	fe 01       	movw	r30, r28
    2f1c:	e8 94       	clt
    2f1e:	a5 91       	lpm	r26, Z+
    2f20:	25 91       	lpm	r18, Z+
    2f22:	35 91       	lpm	r19, Z+
    2f24:	45 91       	lpm	r20, Z+
    2f26:	55 91       	lpm	r21, Z+
    2f28:	ae f3       	brts	.-22     	; 0x2f14 <__fp_powser+0x16>
    2f2a:	ef 01       	movw	r28, r30
    2f2c:	22 de       	rcall	.-956    	; 0x2b72 <__addsf3x>
    2f2e:	fe 01       	movw	r30, r28
    2f30:	97 01       	movw	r18, r14
    2f32:	a8 01       	movw	r20, r16
    2f34:	da 94       	dec	r13
    2f36:	79 f7       	brne	.-34     	; 0x2f16 <__fp_powser+0x18>
    2f38:	df 90       	pop	r13
    2f3a:	ef 90       	pop	r14
    2f3c:	ff 90       	pop	r15
    2f3e:	0f 91       	pop	r16
    2f40:	1f 91       	pop	r17
    2f42:	cf 91       	pop	r28
    2f44:	df 91       	pop	r29
    2f46:	08 95       	ret

00002f48 <inverse>:
    2f48:	9b 01       	movw	r18, r22
    2f4a:	ac 01       	movw	r20, r24
    2f4c:	60 e0       	ldi	r22, 0x00	; 0
    2f4e:	70 e0       	ldi	r23, 0x00	; 0
    2f50:	80 e8       	ldi	r24, 0x80	; 128
    2f52:	9f e3       	ldi	r25, 0x3F	; 63
    2f54:	61 ce       	rjmp	.-830    	; 0x2c18 <__divsf3>
    2f56:	05 cf       	rjmp	.-502    	; 0x2d62 <__fp_inf>
    2f58:	0f c1       	rjmp	.+542    	; 0x3178 <__fp_mpack>

00002f5a <ldexp>:
    2f5a:	33 df       	rcall	.-410    	; 0x2dc2 <__fp_splitA>
    2f5c:	e8 f3       	brcs	.-6      	; 0x2f58 <inverse+0x10>
    2f5e:	99 23       	and	r25, r25
    2f60:	d9 f3       	breq	.-10     	; 0x2f58 <inverse+0x10>
    2f62:	94 0f       	add	r25, r20
    2f64:	51 1d       	adc	r21, r1
    2f66:	bb f3       	brvs	.-18     	; 0x2f56 <inverse+0xe>
    2f68:	91 50       	subi	r25, 0x01	; 1
    2f6a:	50 40       	sbci	r21, 0x00	; 0
    2f6c:	94 f0       	brlt	.+36     	; 0x2f92 <ldexp+0x38>
    2f6e:	59 f0       	breq	.+22     	; 0x2f86 <ldexp+0x2c>
    2f70:	88 23       	and	r24, r24
    2f72:	32 f0       	brmi	.+12     	; 0x2f80 <ldexp+0x26>
    2f74:	66 0f       	add	r22, r22
    2f76:	77 1f       	adc	r23, r23
    2f78:	88 1f       	adc	r24, r24
    2f7a:	91 50       	subi	r25, 0x01	; 1
    2f7c:	50 40       	sbci	r21, 0x00	; 0
    2f7e:	c1 f7       	brne	.-16     	; 0x2f70 <ldexp+0x16>
    2f80:	9e 3f       	cpi	r25, 0xFE	; 254
    2f82:	51 05       	cpc	r21, r1
    2f84:	44 f7       	brge	.-48     	; 0x2f56 <inverse+0xe>
    2f86:	88 0f       	add	r24, r24
    2f88:	91 1d       	adc	r25, r1
    2f8a:	96 95       	lsr	r25
    2f8c:	87 95       	ror	r24
    2f8e:	97 f9       	bld	r25, 7
    2f90:	08 95       	ret
    2f92:	5f 3f       	cpi	r21, 0xFF	; 255
    2f94:	ac f0       	brlt	.+42     	; 0x2fc0 <ldexp+0x66>
    2f96:	98 3e       	cpi	r25, 0xE8	; 232
    2f98:	9c f0       	brlt	.+38     	; 0x2fc0 <ldexp+0x66>
    2f9a:	bb 27       	eor	r27, r27
    2f9c:	86 95       	lsr	r24
    2f9e:	77 95       	ror	r23
    2fa0:	67 95       	ror	r22
    2fa2:	b7 95       	ror	r27
    2fa4:	08 f4       	brcc	.+2      	; 0x2fa8 <ldexp+0x4e>
    2fa6:	b1 60       	ori	r27, 0x01	; 1
    2fa8:	93 95       	inc	r25
    2faa:	c1 f7       	brne	.-16     	; 0x2f9c <ldexp+0x42>
    2fac:	bb 0f       	add	r27, r27
    2fae:	58 f7       	brcc	.-42     	; 0x2f86 <ldexp+0x2c>
    2fb0:	11 f4       	brne	.+4      	; 0x2fb6 <ldexp+0x5c>
    2fb2:	60 ff       	sbrs	r22, 0
    2fb4:	e8 cf       	rjmp	.-48     	; 0x2f86 <ldexp+0x2c>
    2fb6:	6f 5f       	subi	r22, 0xFF	; 255
    2fb8:	7f 4f       	sbci	r23, 0xFF	; 255
    2fba:	8f 4f       	sbci	r24, 0xFF	; 255
    2fbc:	9f 4f       	sbci	r25, 0xFF	; 255
    2fbe:	e3 cf       	rjmp	.-58     	; 0x2f86 <ldexp+0x2c>
    2fc0:	1b cf       	rjmp	.-458    	; 0x2df8 <__fp_szero>
    2fc2:	0e f0       	brts	.+2      	; 0x2fc6 <ldexp+0x6c>
    2fc4:	d9 c0       	rjmp	.+434    	; 0x3178 <__fp_mpack>
    2fc6:	d3 ce       	rjmp	.-602    	; 0x2d6e <__fp_nan>
    2fc8:	68 94       	set
    2fca:	cb ce       	rjmp	.-618    	; 0x2d62 <__fp_inf>

00002fcc <log>:
    2fcc:	fa de       	rcall	.-524    	; 0x2dc2 <__fp_splitA>
    2fce:	c8 f3       	brcs	.-14     	; 0x2fc2 <ldexp+0x68>
    2fd0:	99 23       	and	r25, r25
    2fd2:	d1 f3       	breq	.-12     	; 0x2fc8 <ldexp+0x6e>
    2fd4:	c6 f3       	brts	.-16     	; 0x2fc6 <ldexp+0x6c>
    2fd6:	df 93       	push	r29
    2fd8:	cf 93       	push	r28
    2fda:	1f 93       	push	r17
    2fdc:	0f 93       	push	r16
    2fde:	ff 92       	push	r15
    2fe0:	c9 2f       	mov	r28, r25
    2fe2:	dd 27       	eor	r29, r29
    2fe4:	88 23       	and	r24, r24
    2fe6:	2a f0       	brmi	.+10     	; 0x2ff2 <log+0x26>
    2fe8:	21 97       	sbiw	r28, 0x01	; 1
    2fea:	66 0f       	add	r22, r22
    2fec:	77 1f       	adc	r23, r23
    2fee:	88 1f       	adc	r24, r24
    2ff0:	da f7       	brpl	.-10     	; 0x2fe8 <log+0x1c>
    2ff2:	20 e0       	ldi	r18, 0x00	; 0
    2ff4:	30 e0       	ldi	r19, 0x00	; 0
    2ff6:	40 e8       	ldi	r20, 0x80	; 128
    2ff8:	5f eb       	ldi	r21, 0xBF	; 191
    2ffa:	9f e3       	ldi	r25, 0x3F	; 63
    2ffc:	88 39       	cpi	r24, 0x98	; 152
    2ffe:	20 f0       	brcs	.+8      	; 0x3008 <log+0x3c>
    3000:	80 3e       	cpi	r24, 0xE0	; 224
    3002:	30 f0       	brcs	.+12     	; 0x3010 <log+0x44>
    3004:	21 96       	adiw	r28, 0x01	; 1
    3006:	8f 77       	andi	r24, 0x7F	; 127
    3008:	a3 dd       	rcall	.-1210   	; 0x2b50 <__addsf3>
    300a:	e0 e9       	ldi	r30, 0x90	; 144
    300c:	f0 e0       	ldi	r31, 0x00	; 0
    300e:	03 c0       	rjmp	.+6      	; 0x3016 <log+0x4a>
    3010:	9f dd       	rcall	.-1218   	; 0x2b50 <__addsf3>
    3012:	ed eb       	ldi	r30, 0xBD	; 189
    3014:	f0 e0       	ldi	r31, 0x00	; 0
    3016:	73 df       	rcall	.-282    	; 0x2efe <__fp_powser>
    3018:	8b 01       	movw	r16, r22
    301a:	be 01       	movw	r22, r28
    301c:	ec 01       	movw	r28, r24
    301e:	fb 2e       	mov	r15, r27
    3020:	6f 57       	subi	r22, 0x7F	; 127
    3022:	71 09       	sbc	r23, r1
    3024:	75 95       	asr	r23
    3026:	77 1f       	adc	r23, r23
    3028:	88 0b       	sbc	r24, r24
    302a:	99 0b       	sbc	r25, r25
    302c:	5f de       	rcall	.-834    	; 0x2cec <__floatsisf>
    302e:	28 e1       	ldi	r18, 0x18	; 24
    3030:	32 e7       	ldi	r19, 0x72	; 114
    3032:	41 e3       	ldi	r20, 0x31	; 49
    3034:	5f e3       	ldi	r21, 0x3F	; 63
    3036:	49 d0       	rcall	.+146    	; 0x30ca <__mulsf3x>
    3038:	af 2d       	mov	r26, r15
    303a:	98 01       	movw	r18, r16
    303c:	ae 01       	movw	r20, r28
    303e:	ff 90       	pop	r15
    3040:	0f 91       	pop	r16
    3042:	1f 91       	pop	r17
    3044:	cf 91       	pop	r28
    3046:	df 91       	pop	r29
    3048:	94 dd       	rcall	.-1240   	; 0x2b72 <__addsf3x>
    304a:	a2 ce       	rjmp	.-700    	; 0x2d90 <__fp_round>

0000304c <modf>:
    304c:	fa 01       	movw	r30, r20
    304e:	dc 01       	movw	r26, r24
    3050:	aa 0f       	add	r26, r26
    3052:	bb 1f       	adc	r27, r27
    3054:	9b 01       	movw	r18, r22
    3056:	ac 01       	movw	r20, r24
    3058:	bf 57       	subi	r27, 0x7F	; 127
    305a:	28 f4       	brcc	.+10     	; 0x3066 <modf+0x1a>
    305c:	22 27       	eor	r18, r18
    305e:	33 27       	eor	r19, r19
    3060:	44 27       	eor	r20, r20
    3062:	50 78       	andi	r21, 0x80	; 128
    3064:	1f c0       	rjmp	.+62     	; 0x30a4 <modf+0x58>
    3066:	b7 51       	subi	r27, 0x17	; 23
    3068:	88 f4       	brcc	.+34     	; 0x308c <modf+0x40>
    306a:	ab 2f       	mov	r26, r27
    306c:	00 24       	eor	r0, r0
    306e:	46 95       	lsr	r20
    3070:	37 95       	ror	r19
    3072:	27 95       	ror	r18
    3074:	01 1c       	adc	r0, r1
    3076:	a3 95       	inc	r26
    3078:	d2 f3       	brmi	.-12     	; 0x306e <modf+0x22>
    307a:	00 20       	and	r0, r0
    307c:	69 f0       	breq	.+26     	; 0x3098 <modf+0x4c>
    307e:	22 0f       	add	r18, r18
    3080:	33 1f       	adc	r19, r19
    3082:	44 1f       	adc	r20, r20
    3084:	b3 95       	inc	r27
    3086:	da f3       	brmi	.-10     	; 0x307e <modf+0x32>
    3088:	0d d0       	rcall	.+26     	; 0x30a4 <modf+0x58>
    308a:	61 cd       	rjmp	.-1342   	; 0x2b4e <__subsf3>
    308c:	61 30       	cpi	r22, 0x01	; 1
    308e:	71 05       	cpc	r23, r1
    3090:	a0 e8       	ldi	r26, 0x80	; 128
    3092:	8a 07       	cpc	r24, r26
    3094:	b9 46       	sbci	r27, 0x69	; 105
    3096:	30 f4       	brcc	.+12     	; 0x30a4 <modf+0x58>
    3098:	9b 01       	movw	r18, r22
    309a:	ac 01       	movw	r20, r24
    309c:	66 27       	eor	r22, r22
    309e:	77 27       	eor	r23, r23
    30a0:	88 27       	eor	r24, r24
    30a2:	90 78       	andi	r25, 0x80	; 128
    30a4:	30 96       	adiw	r30, 0x00	; 0
    30a6:	21 f0       	breq	.+8      	; 0x30b0 <modf+0x64>
    30a8:	20 83       	st	Z, r18
    30aa:	31 83       	std	Z+1, r19	; 0x01
    30ac:	42 83       	std	Z+2, r20	; 0x02
    30ae:	53 83       	std	Z+3, r21	; 0x03
    30b0:	08 95       	ret

000030b2 <__mulsf3>:
    30b2:	0b d0       	rcall	.+22     	; 0x30ca <__mulsf3x>
    30b4:	6d ce       	rjmp	.-806    	; 0x2d90 <__fp_round>
    30b6:	5e de       	rcall	.-836    	; 0x2d74 <__fp_pscA>
    30b8:	28 f0       	brcs	.+10     	; 0x30c4 <__mulsf3+0x12>
    30ba:	63 de       	rcall	.-826    	; 0x2d82 <__fp_pscB>
    30bc:	18 f0       	brcs	.+6      	; 0x30c4 <__mulsf3+0x12>
    30be:	95 23       	and	r25, r21
    30c0:	09 f0       	breq	.+2      	; 0x30c4 <__mulsf3+0x12>
    30c2:	4f ce       	rjmp	.-866    	; 0x2d62 <__fp_inf>
    30c4:	54 ce       	rjmp	.-856    	; 0x2d6e <__fp_nan>
    30c6:	11 24       	eor	r1, r1
    30c8:	97 ce       	rjmp	.-722    	; 0x2df8 <__fp_szero>

000030ca <__mulsf3x>:
    30ca:	73 de       	rcall	.-794    	; 0x2db2 <__fp_split3>
    30cc:	a0 f3       	brcs	.-24     	; 0x30b6 <__mulsf3+0x4>

000030ce <__mulsf3_pse>:
    30ce:	95 9f       	mul	r25, r21
    30d0:	d1 f3       	breq	.-12     	; 0x30c6 <__mulsf3+0x14>
    30d2:	95 0f       	add	r25, r21
    30d4:	50 e0       	ldi	r21, 0x00	; 0
    30d6:	55 1f       	adc	r21, r21
    30d8:	62 9f       	mul	r22, r18
    30da:	f0 01       	movw	r30, r0
    30dc:	72 9f       	mul	r23, r18
    30de:	bb 27       	eor	r27, r27
    30e0:	f0 0d       	add	r31, r0
    30e2:	b1 1d       	adc	r27, r1
    30e4:	63 9f       	mul	r22, r19
    30e6:	aa 27       	eor	r26, r26
    30e8:	f0 0d       	add	r31, r0
    30ea:	b1 1d       	adc	r27, r1
    30ec:	aa 1f       	adc	r26, r26
    30ee:	64 9f       	mul	r22, r20
    30f0:	66 27       	eor	r22, r22
    30f2:	b0 0d       	add	r27, r0
    30f4:	a1 1d       	adc	r26, r1
    30f6:	66 1f       	adc	r22, r22
    30f8:	82 9f       	mul	r24, r18
    30fa:	22 27       	eor	r18, r18
    30fc:	b0 0d       	add	r27, r0
    30fe:	a1 1d       	adc	r26, r1
    3100:	62 1f       	adc	r22, r18
    3102:	73 9f       	mul	r23, r19
    3104:	b0 0d       	add	r27, r0
    3106:	a1 1d       	adc	r26, r1
    3108:	62 1f       	adc	r22, r18
    310a:	83 9f       	mul	r24, r19
    310c:	a0 0d       	add	r26, r0
    310e:	61 1d       	adc	r22, r1
    3110:	22 1f       	adc	r18, r18
    3112:	74 9f       	mul	r23, r20
    3114:	33 27       	eor	r19, r19
    3116:	a0 0d       	add	r26, r0
    3118:	61 1d       	adc	r22, r1
    311a:	23 1f       	adc	r18, r19
    311c:	84 9f       	mul	r24, r20
    311e:	60 0d       	add	r22, r0
    3120:	21 1d       	adc	r18, r1
    3122:	82 2f       	mov	r24, r18
    3124:	76 2f       	mov	r23, r22
    3126:	6a 2f       	mov	r22, r26
    3128:	11 24       	eor	r1, r1
    312a:	9f 57       	subi	r25, 0x7F	; 127
    312c:	50 40       	sbci	r21, 0x00	; 0
    312e:	8a f0       	brmi	.+34     	; 0x3152 <__mulsf3_pse+0x84>
    3130:	e1 f0       	breq	.+56     	; 0x316a <__mulsf3_pse+0x9c>
    3132:	88 23       	and	r24, r24
    3134:	4a f0       	brmi	.+18     	; 0x3148 <__mulsf3_pse+0x7a>
    3136:	ee 0f       	add	r30, r30
    3138:	ff 1f       	adc	r31, r31
    313a:	bb 1f       	adc	r27, r27
    313c:	66 1f       	adc	r22, r22
    313e:	77 1f       	adc	r23, r23
    3140:	88 1f       	adc	r24, r24
    3142:	91 50       	subi	r25, 0x01	; 1
    3144:	50 40       	sbci	r21, 0x00	; 0
    3146:	a9 f7       	brne	.-22     	; 0x3132 <__mulsf3_pse+0x64>
    3148:	9e 3f       	cpi	r25, 0xFE	; 254
    314a:	51 05       	cpc	r21, r1
    314c:	70 f0       	brcs	.+28     	; 0x316a <__mulsf3_pse+0x9c>
    314e:	09 ce       	rjmp	.-1006   	; 0x2d62 <__fp_inf>
    3150:	53 ce       	rjmp	.-858    	; 0x2df8 <__fp_szero>
    3152:	5f 3f       	cpi	r21, 0xFF	; 255
    3154:	ec f3       	brlt	.-6      	; 0x3150 <__mulsf3_pse+0x82>
    3156:	98 3e       	cpi	r25, 0xE8	; 232
    3158:	dc f3       	brlt	.-10     	; 0x3150 <__mulsf3_pse+0x82>
    315a:	86 95       	lsr	r24
    315c:	77 95       	ror	r23
    315e:	67 95       	ror	r22
    3160:	b7 95       	ror	r27
    3162:	f7 95       	ror	r31
    3164:	e7 95       	ror	r30
    3166:	9f 5f       	subi	r25, 0xFF	; 255
    3168:	c1 f7       	brne	.-16     	; 0x315a <__mulsf3_pse+0x8c>
    316a:	fe 2b       	or	r31, r30
    316c:	88 0f       	add	r24, r24
    316e:	91 1d       	adc	r25, r1
    3170:	96 95       	lsr	r25
    3172:	87 95       	ror	r24
    3174:	97 f9       	bld	r25, 7
    3176:	08 95       	ret

00003178 <__fp_mpack>:
    3178:	9f 3f       	cpi	r25, 0xFF	; 255
    317a:	31 f0       	breq	.+12     	; 0x3188 <__fp_mpack_finite+0xc>

0000317c <__fp_mpack_finite>:
    317c:	91 50       	subi	r25, 0x01	; 1
    317e:	20 f4       	brcc	.+8      	; 0x3188 <__fp_mpack_finite+0xc>
    3180:	87 95       	ror	r24
    3182:	77 95       	ror	r23
    3184:	67 95       	ror	r22
    3186:	b7 95       	ror	r27
    3188:	88 0f       	add	r24, r24
    318a:	91 1d       	adc	r25, r1
    318c:	96 95       	lsr	r25
    318e:	87 95       	ror	r24
    3190:	97 f9       	bld	r25, 7
    3192:	08 95       	ret

00003194 <dtostrf>:
    3194:	ef 92       	push	r14
    3196:	0f 93       	push	r16
    3198:	1f 93       	push	r17
    319a:	cf 93       	push	r28
    319c:	df 93       	push	r29
    319e:	e8 01       	movw	r28, r16
    31a0:	47 ff       	sbrs	r20, 7
    31a2:	02 c0       	rjmp	.+4      	; 0x31a8 <dtostrf+0x14>
    31a4:	34 e1       	ldi	r19, 0x14	; 20
    31a6:	01 c0       	rjmp	.+2      	; 0x31aa <dtostrf+0x16>
    31a8:	34 e0       	ldi	r19, 0x04	; 4
    31aa:	e4 2f       	mov	r30, r20
    31ac:	ff 27       	eor	r31, r31
    31ae:	e7 fd       	sbrc	r30, 7
    31b0:	f0 95       	com	r31
    31b2:	f7 ff       	sbrs	r31, 7
    31b4:	03 c0       	rjmp	.+6      	; 0x31bc <dtostrf+0x28>
    31b6:	f1 95       	neg	r31
    31b8:	e1 95       	neg	r30
    31ba:	f1 09       	sbc	r31, r1
    31bc:	e3 2e       	mov	r14, r19
    31be:	02 2f       	mov	r16, r18
    31c0:	2e 2f       	mov	r18, r30
    31c2:	ae 01       	movw	r20, r28
    31c4:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <dtoa_prf>
    31c8:	ce 01       	movw	r24, r28
    31ca:	df 91       	pop	r29
    31cc:	cf 91       	pop	r28
    31ce:	1f 91       	pop	r17
    31d0:	0f 91       	pop	r16
    31d2:	ef 90       	pop	r14
    31d4:	08 95       	ret

000031d6 <itoa>:
    31d6:	45 32       	cpi	r20, 0x25	; 37
    31d8:	51 05       	cpc	r21, r1
    31da:	20 f4       	brcc	.+8      	; 0x31e4 <itoa+0xe>
    31dc:	42 30       	cpi	r20, 0x02	; 2
    31de:	10 f0       	brcs	.+4      	; 0x31e4 <itoa+0xe>
    31e0:	0c 94 f6 18 	jmp	0x31ec	; 0x31ec <__itoa_ncheck>
    31e4:	fb 01       	movw	r30, r22
    31e6:	10 82       	st	Z, r1
    31e8:	cb 01       	movw	r24, r22
    31ea:	08 95       	ret

000031ec <__itoa_ncheck>:
    31ec:	bb 27       	eor	r27, r27
    31ee:	4a 30       	cpi	r20, 0x0A	; 10
    31f0:	31 f4       	brne	.+12     	; 0x31fe <__itoa_ncheck+0x12>
    31f2:	99 23       	and	r25, r25
    31f4:	22 f4       	brpl	.+8      	; 0x31fe <__itoa_ncheck+0x12>
    31f6:	bd e2       	ldi	r27, 0x2D	; 45
    31f8:	90 95       	com	r25
    31fa:	81 95       	neg	r24
    31fc:	9f 4f       	sbci	r25, 0xFF	; 255
    31fe:	0c 94 33 19 	jmp	0x3266	; 0x3266 <__utoa_common>

00003202 <__ltoa_ncheck>:
    3202:	bb 27       	eor	r27, r27
    3204:	2a 30       	cpi	r18, 0x0A	; 10
    3206:	51 f4       	brne	.+20     	; 0x321c <__ltoa_ncheck+0x1a>
    3208:	99 23       	and	r25, r25
    320a:	42 f4       	brpl	.+16     	; 0x321c <__ltoa_ncheck+0x1a>
    320c:	bd e2       	ldi	r27, 0x2D	; 45
    320e:	90 95       	com	r25
    3210:	80 95       	com	r24
    3212:	70 95       	com	r23
    3214:	61 95       	neg	r22
    3216:	7f 4f       	sbci	r23, 0xFF	; 255
    3218:	8f 4f       	sbci	r24, 0xFF	; 255
    321a:	9f 4f       	sbci	r25, 0xFF	; 255
    321c:	0c 94 11 19 	jmp	0x3222	; 0x3222 <__ultoa_common>

00003220 <__ultoa_ncheck>:
    3220:	bb 27       	eor	r27, r27

00003222 <__ultoa_common>:
    3222:	fa 01       	movw	r30, r20
    3224:	a6 2f       	mov	r26, r22
    3226:	62 17       	cp	r22, r18
    3228:	71 05       	cpc	r23, r1
    322a:	81 05       	cpc	r24, r1
    322c:	91 05       	cpc	r25, r1
    322e:	33 0b       	sbc	r19, r19
    3230:	30 fb       	bst	r19, 0
    3232:	66 f0       	brts	.+24     	; 0x324c <__ultoa_common+0x2a>
    3234:	aa 27       	eor	r26, r26
    3236:	66 0f       	add	r22, r22
    3238:	77 1f       	adc	r23, r23
    323a:	88 1f       	adc	r24, r24
    323c:	99 1f       	adc	r25, r25
    323e:	aa 1f       	adc	r26, r26
    3240:	a2 17       	cp	r26, r18
    3242:	10 f0       	brcs	.+4      	; 0x3248 <__ultoa_common+0x26>
    3244:	a2 1b       	sub	r26, r18
    3246:	63 95       	inc	r22
    3248:	38 50       	subi	r19, 0x08	; 8
    324a:	a9 f7       	brne	.-22     	; 0x3236 <__ultoa_common+0x14>
    324c:	a0 5d       	subi	r26, 0xD0	; 208
    324e:	aa 33       	cpi	r26, 0x3A	; 58
    3250:	08 f0       	brcs	.+2      	; 0x3254 <__ultoa_common+0x32>
    3252:	a9 5d       	subi	r26, 0xD9	; 217
    3254:	a1 93       	st	Z+, r26
    3256:	36 f7       	brtc	.-52     	; 0x3224 <__ultoa_common+0x2>
    3258:	b1 11       	cpse	r27, r1
    325a:	b1 93       	st	Z+, r27
    325c:	10 82       	st	Z, r1
    325e:	ca 01       	movw	r24, r20
    3260:	0c 94 e7 1d 	jmp	0x3bce	; 0x3bce <strrev>

00003264 <__utoa_ncheck>:
    3264:	bb 27       	eor	r27, r27

00003266 <__utoa_common>:
    3266:	fb 01       	movw	r30, r22
    3268:	55 27       	eor	r21, r21
    326a:	aa 27       	eor	r26, r26
    326c:	88 0f       	add	r24, r24
    326e:	99 1f       	adc	r25, r25
    3270:	aa 1f       	adc	r26, r26
    3272:	a4 17       	cp	r26, r20
    3274:	10 f0       	brcs	.+4      	; 0x327a <__utoa_common+0x14>
    3276:	a4 1b       	sub	r26, r20
    3278:	83 95       	inc	r24
    327a:	50 51       	subi	r21, 0x10	; 16
    327c:	b9 f7       	brne	.-18     	; 0x326c <__utoa_common+0x6>
    327e:	a0 5d       	subi	r26, 0xD0	; 208
    3280:	aa 33       	cpi	r26, 0x3A	; 58
    3282:	08 f0       	brcs	.+2      	; 0x3286 <__utoa_common+0x20>
    3284:	a9 5d       	subi	r26, 0xD9	; 217
    3286:	a1 93       	st	Z+, r26
    3288:	00 97       	sbiw	r24, 0x00	; 0
    328a:	79 f7       	brne	.-34     	; 0x326a <__utoa_common+0x4>
    328c:	b1 11       	cpse	r27, r1
    328e:	b1 93       	st	Z+, r27
    3290:	11 92       	st	Z+, r1
    3292:	cb 01       	movw	r24, r22
    3294:	0c 94 e7 1d 	jmp	0x3bce	; 0x3bce <strrev>

00003298 <sprintf>:
    3298:	ae e0       	ldi	r26, 0x0E	; 14
    329a:	b0 e0       	ldi	r27, 0x00	; 0
    329c:	e2 e5       	ldi	r30, 0x52	; 82
    329e:	f9 e1       	ldi	r31, 0x19	; 25
    32a0:	0c 94 95 1e 	jmp	0x3d2a	; 0x3d2a <__prologue_saves__+0x1c>
    32a4:	0d 89       	ldd	r16, Y+21	; 0x15
    32a6:	1e 89       	ldd	r17, Y+22	; 0x16
    32a8:	86 e0       	ldi	r24, 0x06	; 6
    32aa:	8c 83       	std	Y+4, r24	; 0x04
    32ac:	1a 83       	std	Y+2, r17	; 0x02
    32ae:	09 83       	std	Y+1, r16	; 0x01
    32b0:	8f ef       	ldi	r24, 0xFF	; 255
    32b2:	9f e7       	ldi	r25, 0x7F	; 127
    32b4:	9e 83       	std	Y+6, r25	; 0x06
    32b6:	8d 83       	std	Y+5, r24	; 0x05
    32b8:	ae 01       	movw	r20, r28
    32ba:	47 5e       	subi	r20, 0xE7	; 231
    32bc:	5f 4f       	sbci	r21, 0xFF	; 255
    32be:	6f 89       	ldd	r22, Y+23	; 0x17
    32c0:	78 8d       	ldd	r23, Y+24	; 0x18
    32c2:	ce 01       	movw	r24, r28
    32c4:	01 96       	adiw	r24, 0x01	; 1
    32c6:	0e 94 6e 19 	call	0x32dc	; 0x32dc <vfprintf>
    32ca:	ef 81       	ldd	r30, Y+7	; 0x07
    32cc:	f8 85       	ldd	r31, Y+8	; 0x08
    32ce:	e0 0f       	add	r30, r16
    32d0:	f1 1f       	adc	r31, r17
    32d2:	10 82       	st	Z, r1
    32d4:	2e 96       	adiw	r28, 0x0e	; 14
    32d6:	e4 e0       	ldi	r30, 0x04	; 4
    32d8:	0c 94 b1 1e 	jmp	0x3d62	; 0x3d62 <__epilogue_restores__+0x1c>

000032dc <vfprintf>:
    32dc:	ac e0       	ldi	r26, 0x0C	; 12
    32de:	b0 e0       	ldi	r27, 0x00	; 0
    32e0:	e4 e7       	ldi	r30, 0x74	; 116
    32e2:	f9 e1       	ldi	r31, 0x19	; 25
    32e4:	0c 94 87 1e 	jmp	0x3d0e	; 0x3d0e <__prologue_saves__>
    32e8:	7c 01       	movw	r14, r24
    32ea:	6b 01       	movw	r12, r22
    32ec:	8a 01       	movw	r16, r20
    32ee:	fc 01       	movw	r30, r24
    32f0:	17 82       	std	Z+7, r1	; 0x07
    32f2:	16 82       	std	Z+6, r1	; 0x06
    32f4:	83 81       	ldd	r24, Z+3	; 0x03
    32f6:	81 ff       	sbrs	r24, 1
    32f8:	bd c1       	rjmp	.+890    	; 0x3674 <vfprintf+0x398>
    32fa:	ce 01       	movw	r24, r28
    32fc:	01 96       	adiw	r24, 0x01	; 1
    32fe:	4c 01       	movw	r8, r24
    3300:	f7 01       	movw	r30, r14
    3302:	93 81       	ldd	r25, Z+3	; 0x03
    3304:	f6 01       	movw	r30, r12
    3306:	93 fd       	sbrc	r25, 3
    3308:	85 91       	lpm	r24, Z+
    330a:	93 ff       	sbrs	r25, 3
    330c:	81 91       	ld	r24, Z+
    330e:	6f 01       	movw	r12, r30
    3310:	88 23       	and	r24, r24
    3312:	09 f4       	brne	.+2      	; 0x3316 <vfprintf+0x3a>
    3314:	ab c1       	rjmp	.+854    	; 0x366c <vfprintf+0x390>
    3316:	85 32       	cpi	r24, 0x25	; 37
    3318:	39 f4       	brne	.+14     	; 0x3328 <vfprintf+0x4c>
    331a:	93 fd       	sbrc	r25, 3
    331c:	85 91       	lpm	r24, Z+
    331e:	93 ff       	sbrs	r25, 3
    3320:	81 91       	ld	r24, Z+
    3322:	6f 01       	movw	r12, r30
    3324:	85 32       	cpi	r24, 0x25	; 37
    3326:	29 f4       	brne	.+10     	; 0x3332 <vfprintf+0x56>
    3328:	b7 01       	movw	r22, r14
    332a:	90 e0       	ldi	r25, 0x00	; 0
    332c:	0e 94 f7 1d 	call	0x3bee	; 0x3bee <fputc>
    3330:	e7 cf       	rjmp	.-50     	; 0x3300 <vfprintf+0x24>
    3332:	51 2c       	mov	r5, r1
    3334:	31 2c       	mov	r3, r1
    3336:	20 e0       	ldi	r18, 0x00	; 0
    3338:	20 32       	cpi	r18, 0x20	; 32
    333a:	a0 f4       	brcc	.+40     	; 0x3364 <vfprintf+0x88>
    333c:	8b 32       	cpi	r24, 0x2B	; 43
    333e:	69 f0       	breq	.+26     	; 0x335a <vfprintf+0x7e>
    3340:	30 f4       	brcc	.+12     	; 0x334e <vfprintf+0x72>
    3342:	80 32       	cpi	r24, 0x20	; 32
    3344:	59 f0       	breq	.+22     	; 0x335c <vfprintf+0x80>
    3346:	83 32       	cpi	r24, 0x23	; 35
    3348:	69 f4       	brne	.+26     	; 0x3364 <vfprintf+0x88>
    334a:	20 61       	ori	r18, 0x10	; 16
    334c:	2c c0       	rjmp	.+88     	; 0x33a6 <vfprintf+0xca>
    334e:	8d 32       	cpi	r24, 0x2D	; 45
    3350:	39 f0       	breq	.+14     	; 0x3360 <vfprintf+0x84>
    3352:	80 33       	cpi	r24, 0x30	; 48
    3354:	39 f4       	brne	.+14     	; 0x3364 <vfprintf+0x88>
    3356:	21 60       	ori	r18, 0x01	; 1
    3358:	26 c0       	rjmp	.+76     	; 0x33a6 <vfprintf+0xca>
    335a:	22 60       	ori	r18, 0x02	; 2
    335c:	24 60       	ori	r18, 0x04	; 4
    335e:	23 c0       	rjmp	.+70     	; 0x33a6 <vfprintf+0xca>
    3360:	28 60       	ori	r18, 0x08	; 8
    3362:	21 c0       	rjmp	.+66     	; 0x33a6 <vfprintf+0xca>
    3364:	27 fd       	sbrc	r18, 7
    3366:	27 c0       	rjmp	.+78     	; 0x33b6 <vfprintf+0xda>
    3368:	30 ed       	ldi	r19, 0xD0	; 208
    336a:	38 0f       	add	r19, r24
    336c:	3a 30       	cpi	r19, 0x0A	; 10
    336e:	78 f4       	brcc	.+30     	; 0x338e <vfprintf+0xb2>
    3370:	26 ff       	sbrs	r18, 6
    3372:	06 c0       	rjmp	.+12     	; 0x3380 <vfprintf+0xa4>
    3374:	fa e0       	ldi	r31, 0x0A	; 10
    3376:	5f 9e       	mul	r5, r31
    3378:	30 0d       	add	r19, r0
    337a:	11 24       	eor	r1, r1
    337c:	53 2e       	mov	r5, r19
    337e:	13 c0       	rjmp	.+38     	; 0x33a6 <vfprintf+0xca>
    3380:	8a e0       	ldi	r24, 0x0A	; 10
    3382:	38 9e       	mul	r3, r24
    3384:	30 0d       	add	r19, r0
    3386:	11 24       	eor	r1, r1
    3388:	33 2e       	mov	r3, r19
    338a:	20 62       	ori	r18, 0x20	; 32
    338c:	0c c0       	rjmp	.+24     	; 0x33a6 <vfprintf+0xca>
    338e:	8e 32       	cpi	r24, 0x2E	; 46
    3390:	21 f4       	brne	.+8      	; 0x339a <vfprintf+0xbe>
    3392:	26 fd       	sbrc	r18, 6
    3394:	6b c1       	rjmp	.+726    	; 0x366c <vfprintf+0x390>
    3396:	20 64       	ori	r18, 0x40	; 64
    3398:	06 c0       	rjmp	.+12     	; 0x33a6 <vfprintf+0xca>
    339a:	8c 36       	cpi	r24, 0x6C	; 108
    339c:	11 f4       	brne	.+4      	; 0x33a2 <vfprintf+0xc6>
    339e:	20 68       	ori	r18, 0x80	; 128
    33a0:	02 c0       	rjmp	.+4      	; 0x33a6 <vfprintf+0xca>
    33a2:	88 36       	cpi	r24, 0x68	; 104
    33a4:	41 f4       	brne	.+16     	; 0x33b6 <vfprintf+0xda>
    33a6:	f6 01       	movw	r30, r12
    33a8:	93 fd       	sbrc	r25, 3
    33aa:	85 91       	lpm	r24, Z+
    33ac:	93 ff       	sbrs	r25, 3
    33ae:	81 91       	ld	r24, Z+
    33b0:	6f 01       	movw	r12, r30
    33b2:	81 11       	cpse	r24, r1
    33b4:	c1 cf       	rjmp	.-126    	; 0x3338 <vfprintf+0x5c>
    33b6:	98 2f       	mov	r25, r24
    33b8:	9f 7d       	andi	r25, 0xDF	; 223
    33ba:	95 54       	subi	r25, 0x45	; 69
    33bc:	93 30       	cpi	r25, 0x03	; 3
    33be:	28 f4       	brcc	.+10     	; 0x33ca <vfprintf+0xee>
    33c0:	0c 5f       	subi	r16, 0xFC	; 252
    33c2:	1f 4f       	sbci	r17, 0xFF	; 255
    33c4:	ff e3       	ldi	r31, 0x3F	; 63
    33c6:	f9 83       	std	Y+1, r31	; 0x01
    33c8:	0d c0       	rjmp	.+26     	; 0x33e4 <vfprintf+0x108>
    33ca:	83 36       	cpi	r24, 0x63	; 99
    33cc:	31 f0       	breq	.+12     	; 0x33da <vfprintf+0xfe>
    33ce:	83 37       	cpi	r24, 0x73	; 115
    33d0:	71 f0       	breq	.+28     	; 0x33ee <vfprintf+0x112>
    33d2:	83 35       	cpi	r24, 0x53	; 83
    33d4:	09 f0       	breq	.+2      	; 0x33d8 <vfprintf+0xfc>
    33d6:	5b c0       	rjmp	.+182    	; 0x348e <vfprintf+0x1b2>
    33d8:	22 c0       	rjmp	.+68     	; 0x341e <vfprintf+0x142>
    33da:	f8 01       	movw	r30, r16
    33dc:	80 81       	ld	r24, Z
    33de:	89 83       	std	Y+1, r24	; 0x01
    33e0:	0e 5f       	subi	r16, 0xFE	; 254
    33e2:	1f 4f       	sbci	r17, 0xFF	; 255
    33e4:	44 24       	eor	r4, r4
    33e6:	43 94       	inc	r4
    33e8:	51 2c       	mov	r5, r1
    33ea:	54 01       	movw	r10, r8
    33ec:	15 c0       	rjmp	.+42     	; 0x3418 <vfprintf+0x13c>
    33ee:	38 01       	movw	r6, r16
    33f0:	f2 e0       	ldi	r31, 0x02	; 2
    33f2:	6f 0e       	add	r6, r31
    33f4:	71 1c       	adc	r7, r1
    33f6:	f8 01       	movw	r30, r16
    33f8:	a0 80       	ld	r10, Z
    33fa:	b1 80       	ldd	r11, Z+1	; 0x01
    33fc:	26 ff       	sbrs	r18, 6
    33fe:	03 c0       	rjmp	.+6      	; 0x3406 <vfprintf+0x12a>
    3400:	65 2d       	mov	r22, r5
    3402:	70 e0       	ldi	r23, 0x00	; 0
    3404:	02 c0       	rjmp	.+4      	; 0x340a <vfprintf+0x12e>
    3406:	6f ef       	ldi	r22, 0xFF	; 255
    3408:	7f ef       	ldi	r23, 0xFF	; 255
    340a:	c5 01       	movw	r24, r10
    340c:	2c 87       	std	Y+12, r18	; 0x0c
    340e:	0e 94 dc 1d 	call	0x3bb8	; 0x3bb8 <strnlen>
    3412:	2c 01       	movw	r4, r24
    3414:	83 01       	movw	r16, r6
    3416:	2c 85       	ldd	r18, Y+12	; 0x0c
    3418:	2f 77       	andi	r18, 0x7F	; 127
    341a:	22 2e       	mov	r2, r18
    341c:	17 c0       	rjmp	.+46     	; 0x344c <vfprintf+0x170>
    341e:	38 01       	movw	r6, r16
    3420:	f2 e0       	ldi	r31, 0x02	; 2
    3422:	6f 0e       	add	r6, r31
    3424:	71 1c       	adc	r7, r1
    3426:	f8 01       	movw	r30, r16
    3428:	a0 80       	ld	r10, Z
    342a:	b1 80       	ldd	r11, Z+1	; 0x01
    342c:	26 ff       	sbrs	r18, 6
    342e:	03 c0       	rjmp	.+6      	; 0x3436 <vfprintf+0x15a>
    3430:	65 2d       	mov	r22, r5
    3432:	70 e0       	ldi	r23, 0x00	; 0
    3434:	02 c0       	rjmp	.+4      	; 0x343a <vfprintf+0x15e>
    3436:	6f ef       	ldi	r22, 0xFF	; 255
    3438:	7f ef       	ldi	r23, 0xFF	; 255
    343a:	c5 01       	movw	r24, r10
    343c:	2c 87       	std	Y+12, r18	; 0x0c
    343e:	0e 94 d1 1d 	call	0x3ba2	; 0x3ba2 <strnlen_P>
    3442:	2c 01       	movw	r4, r24
    3444:	2c 85       	ldd	r18, Y+12	; 0x0c
    3446:	20 68       	ori	r18, 0x80	; 128
    3448:	22 2e       	mov	r2, r18
    344a:	83 01       	movw	r16, r6
    344c:	23 fc       	sbrc	r2, 3
    344e:	1b c0       	rjmp	.+54     	; 0x3486 <vfprintf+0x1aa>
    3450:	83 2d       	mov	r24, r3
    3452:	90 e0       	ldi	r25, 0x00	; 0
    3454:	48 16       	cp	r4, r24
    3456:	59 06       	cpc	r5, r25
    3458:	b0 f4       	brcc	.+44     	; 0x3486 <vfprintf+0x1aa>
    345a:	b7 01       	movw	r22, r14
    345c:	80 e2       	ldi	r24, 0x20	; 32
    345e:	90 e0       	ldi	r25, 0x00	; 0
    3460:	0e 94 f7 1d 	call	0x3bee	; 0x3bee <fputc>
    3464:	3a 94       	dec	r3
    3466:	f4 cf       	rjmp	.-24     	; 0x3450 <vfprintf+0x174>
    3468:	f5 01       	movw	r30, r10
    346a:	27 fc       	sbrc	r2, 7
    346c:	85 91       	lpm	r24, Z+
    346e:	27 fe       	sbrs	r2, 7
    3470:	81 91       	ld	r24, Z+
    3472:	5f 01       	movw	r10, r30
    3474:	b7 01       	movw	r22, r14
    3476:	90 e0       	ldi	r25, 0x00	; 0
    3478:	0e 94 f7 1d 	call	0x3bee	; 0x3bee <fputc>
    347c:	31 10       	cpse	r3, r1
    347e:	3a 94       	dec	r3
    3480:	f1 e0       	ldi	r31, 0x01	; 1
    3482:	4f 1a       	sub	r4, r31
    3484:	51 08       	sbc	r5, r1
    3486:	41 14       	cp	r4, r1
    3488:	51 04       	cpc	r5, r1
    348a:	71 f7       	brne	.-36     	; 0x3468 <vfprintf+0x18c>
    348c:	e5 c0       	rjmp	.+458    	; 0x3658 <vfprintf+0x37c>
    348e:	84 36       	cpi	r24, 0x64	; 100
    3490:	11 f0       	breq	.+4      	; 0x3496 <vfprintf+0x1ba>
    3492:	89 36       	cpi	r24, 0x69	; 105
    3494:	39 f5       	brne	.+78     	; 0x34e4 <vfprintf+0x208>
    3496:	f8 01       	movw	r30, r16
    3498:	27 ff       	sbrs	r18, 7
    349a:	07 c0       	rjmp	.+14     	; 0x34aa <vfprintf+0x1ce>
    349c:	60 81       	ld	r22, Z
    349e:	71 81       	ldd	r23, Z+1	; 0x01
    34a0:	82 81       	ldd	r24, Z+2	; 0x02
    34a2:	93 81       	ldd	r25, Z+3	; 0x03
    34a4:	0c 5f       	subi	r16, 0xFC	; 252
    34a6:	1f 4f       	sbci	r17, 0xFF	; 255
    34a8:	08 c0       	rjmp	.+16     	; 0x34ba <vfprintf+0x1de>
    34aa:	60 81       	ld	r22, Z
    34ac:	71 81       	ldd	r23, Z+1	; 0x01
    34ae:	88 27       	eor	r24, r24
    34b0:	77 fd       	sbrc	r23, 7
    34b2:	80 95       	com	r24
    34b4:	98 2f       	mov	r25, r24
    34b6:	0e 5f       	subi	r16, 0xFE	; 254
    34b8:	1f 4f       	sbci	r17, 0xFF	; 255
    34ba:	2f 76       	andi	r18, 0x6F	; 111
    34bc:	b2 2e       	mov	r11, r18
    34be:	97 ff       	sbrs	r25, 7
    34c0:	09 c0       	rjmp	.+18     	; 0x34d4 <vfprintf+0x1f8>
    34c2:	90 95       	com	r25
    34c4:	80 95       	com	r24
    34c6:	70 95       	com	r23
    34c8:	61 95       	neg	r22
    34ca:	7f 4f       	sbci	r23, 0xFF	; 255
    34cc:	8f 4f       	sbci	r24, 0xFF	; 255
    34ce:	9f 4f       	sbci	r25, 0xFF	; 255
    34d0:	20 68       	ori	r18, 0x80	; 128
    34d2:	b2 2e       	mov	r11, r18
    34d4:	2a e0       	ldi	r18, 0x0A	; 10
    34d6:	30 e0       	ldi	r19, 0x00	; 0
    34d8:	a4 01       	movw	r20, r8
    34da:	0e 94 29 1e 	call	0x3c52	; 0x3c52 <__ultoa_invert>
    34de:	a8 2e       	mov	r10, r24
    34e0:	a8 18       	sub	r10, r8
    34e2:	44 c0       	rjmp	.+136    	; 0x356c <vfprintf+0x290>
    34e4:	85 37       	cpi	r24, 0x75	; 117
    34e6:	29 f4       	brne	.+10     	; 0x34f2 <vfprintf+0x216>
    34e8:	2f 7e       	andi	r18, 0xEF	; 239
    34ea:	b2 2e       	mov	r11, r18
    34ec:	2a e0       	ldi	r18, 0x0A	; 10
    34ee:	30 e0       	ldi	r19, 0x00	; 0
    34f0:	25 c0       	rjmp	.+74     	; 0x353c <vfprintf+0x260>
    34f2:	f2 2f       	mov	r31, r18
    34f4:	f9 7f       	andi	r31, 0xF9	; 249
    34f6:	bf 2e       	mov	r11, r31
    34f8:	8f 36       	cpi	r24, 0x6F	; 111
    34fa:	c1 f0       	breq	.+48     	; 0x352c <vfprintf+0x250>
    34fc:	18 f4       	brcc	.+6      	; 0x3504 <vfprintf+0x228>
    34fe:	88 35       	cpi	r24, 0x58	; 88
    3500:	79 f0       	breq	.+30     	; 0x3520 <vfprintf+0x244>
    3502:	b4 c0       	rjmp	.+360    	; 0x366c <vfprintf+0x390>
    3504:	80 37       	cpi	r24, 0x70	; 112
    3506:	19 f0       	breq	.+6      	; 0x350e <vfprintf+0x232>
    3508:	88 37       	cpi	r24, 0x78	; 120
    350a:	21 f0       	breq	.+8      	; 0x3514 <vfprintf+0x238>
    350c:	af c0       	rjmp	.+350    	; 0x366c <vfprintf+0x390>
    350e:	2f 2f       	mov	r18, r31
    3510:	20 61       	ori	r18, 0x10	; 16
    3512:	b2 2e       	mov	r11, r18
    3514:	b4 fe       	sbrs	r11, 4
    3516:	0d c0       	rjmp	.+26     	; 0x3532 <vfprintf+0x256>
    3518:	8b 2d       	mov	r24, r11
    351a:	84 60       	ori	r24, 0x04	; 4
    351c:	b8 2e       	mov	r11, r24
    351e:	09 c0       	rjmp	.+18     	; 0x3532 <vfprintf+0x256>
    3520:	24 ff       	sbrs	r18, 4
    3522:	0a c0       	rjmp	.+20     	; 0x3538 <vfprintf+0x25c>
    3524:	9f 2f       	mov	r25, r31
    3526:	96 60       	ori	r25, 0x06	; 6
    3528:	b9 2e       	mov	r11, r25
    352a:	06 c0       	rjmp	.+12     	; 0x3538 <vfprintf+0x25c>
    352c:	28 e0       	ldi	r18, 0x08	; 8
    352e:	30 e0       	ldi	r19, 0x00	; 0
    3530:	05 c0       	rjmp	.+10     	; 0x353c <vfprintf+0x260>
    3532:	20 e1       	ldi	r18, 0x10	; 16
    3534:	30 e0       	ldi	r19, 0x00	; 0
    3536:	02 c0       	rjmp	.+4      	; 0x353c <vfprintf+0x260>
    3538:	20 e1       	ldi	r18, 0x10	; 16
    353a:	32 e0       	ldi	r19, 0x02	; 2
    353c:	f8 01       	movw	r30, r16
    353e:	b7 fe       	sbrs	r11, 7
    3540:	07 c0       	rjmp	.+14     	; 0x3550 <vfprintf+0x274>
    3542:	60 81       	ld	r22, Z
    3544:	71 81       	ldd	r23, Z+1	; 0x01
    3546:	82 81       	ldd	r24, Z+2	; 0x02
    3548:	93 81       	ldd	r25, Z+3	; 0x03
    354a:	0c 5f       	subi	r16, 0xFC	; 252
    354c:	1f 4f       	sbci	r17, 0xFF	; 255
    354e:	06 c0       	rjmp	.+12     	; 0x355c <vfprintf+0x280>
    3550:	60 81       	ld	r22, Z
    3552:	71 81       	ldd	r23, Z+1	; 0x01
    3554:	80 e0       	ldi	r24, 0x00	; 0
    3556:	90 e0       	ldi	r25, 0x00	; 0
    3558:	0e 5f       	subi	r16, 0xFE	; 254
    355a:	1f 4f       	sbci	r17, 0xFF	; 255
    355c:	a4 01       	movw	r20, r8
    355e:	0e 94 29 1e 	call	0x3c52	; 0x3c52 <__ultoa_invert>
    3562:	a8 2e       	mov	r10, r24
    3564:	a8 18       	sub	r10, r8
    3566:	fb 2d       	mov	r31, r11
    3568:	ff 77       	andi	r31, 0x7F	; 127
    356a:	bf 2e       	mov	r11, r31
    356c:	b6 fe       	sbrs	r11, 6
    356e:	0b c0       	rjmp	.+22     	; 0x3586 <vfprintf+0x2aa>
    3570:	2b 2d       	mov	r18, r11
    3572:	2e 7f       	andi	r18, 0xFE	; 254
    3574:	a5 14       	cp	r10, r5
    3576:	50 f4       	brcc	.+20     	; 0x358c <vfprintf+0x2b0>
    3578:	b4 fe       	sbrs	r11, 4
    357a:	0a c0       	rjmp	.+20     	; 0x3590 <vfprintf+0x2b4>
    357c:	b2 fc       	sbrc	r11, 2
    357e:	08 c0       	rjmp	.+16     	; 0x3590 <vfprintf+0x2b4>
    3580:	2b 2d       	mov	r18, r11
    3582:	2e 7e       	andi	r18, 0xEE	; 238
    3584:	05 c0       	rjmp	.+10     	; 0x3590 <vfprintf+0x2b4>
    3586:	7a 2c       	mov	r7, r10
    3588:	2b 2d       	mov	r18, r11
    358a:	03 c0       	rjmp	.+6      	; 0x3592 <vfprintf+0x2b6>
    358c:	7a 2c       	mov	r7, r10
    358e:	01 c0       	rjmp	.+2      	; 0x3592 <vfprintf+0x2b6>
    3590:	75 2c       	mov	r7, r5
    3592:	24 ff       	sbrs	r18, 4
    3594:	0d c0       	rjmp	.+26     	; 0x35b0 <vfprintf+0x2d4>
    3596:	fe 01       	movw	r30, r28
    3598:	ea 0d       	add	r30, r10
    359a:	f1 1d       	adc	r31, r1
    359c:	80 81       	ld	r24, Z
    359e:	80 33       	cpi	r24, 0x30	; 48
    35a0:	11 f4       	brne	.+4      	; 0x35a6 <vfprintf+0x2ca>
    35a2:	29 7e       	andi	r18, 0xE9	; 233
    35a4:	09 c0       	rjmp	.+18     	; 0x35b8 <vfprintf+0x2dc>
    35a6:	22 ff       	sbrs	r18, 2
    35a8:	06 c0       	rjmp	.+12     	; 0x35b6 <vfprintf+0x2da>
    35aa:	73 94       	inc	r7
    35ac:	73 94       	inc	r7
    35ae:	04 c0       	rjmp	.+8      	; 0x35b8 <vfprintf+0x2dc>
    35b0:	82 2f       	mov	r24, r18
    35b2:	86 78       	andi	r24, 0x86	; 134
    35b4:	09 f0       	breq	.+2      	; 0x35b8 <vfprintf+0x2dc>
    35b6:	73 94       	inc	r7
    35b8:	23 fd       	sbrc	r18, 3
    35ba:	13 c0       	rjmp	.+38     	; 0x35e2 <vfprintf+0x306>
    35bc:	20 ff       	sbrs	r18, 0
    35be:	06 c0       	rjmp	.+12     	; 0x35cc <vfprintf+0x2f0>
    35c0:	5a 2c       	mov	r5, r10
    35c2:	73 14       	cp	r7, r3
    35c4:	18 f4       	brcc	.+6      	; 0x35cc <vfprintf+0x2f0>
    35c6:	53 0c       	add	r5, r3
    35c8:	57 18       	sub	r5, r7
    35ca:	73 2c       	mov	r7, r3
    35cc:	73 14       	cp	r7, r3
    35ce:	68 f4       	brcc	.+26     	; 0x35ea <vfprintf+0x30e>
    35d0:	b7 01       	movw	r22, r14
    35d2:	80 e2       	ldi	r24, 0x20	; 32
    35d4:	90 e0       	ldi	r25, 0x00	; 0
    35d6:	2c 87       	std	Y+12, r18	; 0x0c
    35d8:	0e 94 f7 1d 	call	0x3bee	; 0x3bee <fputc>
    35dc:	73 94       	inc	r7
    35de:	2c 85       	ldd	r18, Y+12	; 0x0c
    35e0:	f5 cf       	rjmp	.-22     	; 0x35cc <vfprintf+0x2f0>
    35e2:	73 14       	cp	r7, r3
    35e4:	10 f4       	brcc	.+4      	; 0x35ea <vfprintf+0x30e>
    35e6:	37 18       	sub	r3, r7
    35e8:	01 c0       	rjmp	.+2      	; 0x35ec <vfprintf+0x310>
    35ea:	31 2c       	mov	r3, r1
    35ec:	24 ff       	sbrs	r18, 4
    35ee:	12 c0       	rjmp	.+36     	; 0x3614 <vfprintf+0x338>
    35f0:	b7 01       	movw	r22, r14
    35f2:	80 e3       	ldi	r24, 0x30	; 48
    35f4:	90 e0       	ldi	r25, 0x00	; 0
    35f6:	2c 87       	std	Y+12, r18	; 0x0c
    35f8:	0e 94 f7 1d 	call	0x3bee	; 0x3bee <fputc>
    35fc:	2c 85       	ldd	r18, Y+12	; 0x0c
    35fe:	22 ff       	sbrs	r18, 2
    3600:	17 c0       	rjmp	.+46     	; 0x3630 <vfprintf+0x354>
    3602:	21 ff       	sbrs	r18, 1
    3604:	03 c0       	rjmp	.+6      	; 0x360c <vfprintf+0x330>
    3606:	88 e5       	ldi	r24, 0x58	; 88
    3608:	90 e0       	ldi	r25, 0x00	; 0
    360a:	02 c0       	rjmp	.+4      	; 0x3610 <vfprintf+0x334>
    360c:	88 e7       	ldi	r24, 0x78	; 120
    360e:	90 e0       	ldi	r25, 0x00	; 0
    3610:	b7 01       	movw	r22, r14
    3612:	0c c0       	rjmp	.+24     	; 0x362c <vfprintf+0x350>
    3614:	82 2f       	mov	r24, r18
    3616:	86 78       	andi	r24, 0x86	; 134
    3618:	59 f0       	breq	.+22     	; 0x3630 <vfprintf+0x354>
    361a:	21 fd       	sbrc	r18, 1
    361c:	02 c0       	rjmp	.+4      	; 0x3622 <vfprintf+0x346>
    361e:	80 e2       	ldi	r24, 0x20	; 32
    3620:	01 c0       	rjmp	.+2      	; 0x3624 <vfprintf+0x348>
    3622:	8b e2       	ldi	r24, 0x2B	; 43
    3624:	27 fd       	sbrc	r18, 7
    3626:	8d e2       	ldi	r24, 0x2D	; 45
    3628:	b7 01       	movw	r22, r14
    362a:	90 e0       	ldi	r25, 0x00	; 0
    362c:	0e 94 f7 1d 	call	0x3bee	; 0x3bee <fputc>
    3630:	a5 14       	cp	r10, r5
    3632:	38 f4       	brcc	.+14     	; 0x3642 <vfprintf+0x366>
    3634:	b7 01       	movw	r22, r14
    3636:	80 e3       	ldi	r24, 0x30	; 48
    3638:	90 e0       	ldi	r25, 0x00	; 0
    363a:	0e 94 f7 1d 	call	0x3bee	; 0x3bee <fputc>
    363e:	5a 94       	dec	r5
    3640:	f7 cf       	rjmp	.-18     	; 0x3630 <vfprintf+0x354>
    3642:	aa 94       	dec	r10
    3644:	f4 01       	movw	r30, r8
    3646:	ea 0d       	add	r30, r10
    3648:	f1 1d       	adc	r31, r1
    364a:	80 81       	ld	r24, Z
    364c:	b7 01       	movw	r22, r14
    364e:	90 e0       	ldi	r25, 0x00	; 0
    3650:	0e 94 f7 1d 	call	0x3bee	; 0x3bee <fputc>
    3654:	a1 10       	cpse	r10, r1
    3656:	f5 cf       	rjmp	.-22     	; 0x3642 <vfprintf+0x366>
    3658:	33 20       	and	r3, r3
    365a:	09 f4       	brne	.+2      	; 0x365e <vfprintf+0x382>
    365c:	51 ce       	rjmp	.-862    	; 0x3300 <vfprintf+0x24>
    365e:	b7 01       	movw	r22, r14
    3660:	80 e2       	ldi	r24, 0x20	; 32
    3662:	90 e0       	ldi	r25, 0x00	; 0
    3664:	0e 94 f7 1d 	call	0x3bee	; 0x3bee <fputc>
    3668:	3a 94       	dec	r3
    366a:	f6 cf       	rjmp	.-20     	; 0x3658 <vfprintf+0x37c>
    366c:	f7 01       	movw	r30, r14
    366e:	86 81       	ldd	r24, Z+6	; 0x06
    3670:	97 81       	ldd	r25, Z+7	; 0x07
    3672:	02 c0       	rjmp	.+4      	; 0x3678 <vfprintf+0x39c>
    3674:	8f ef       	ldi	r24, 0xFF	; 255
    3676:	9f ef       	ldi	r25, 0xFF	; 255
    3678:	2c 96       	adiw	r28, 0x0c	; 12
    367a:	e2 e1       	ldi	r30, 0x12	; 18
    367c:	0c 94 a3 1e 	jmp	0x3d46	; 0x3d46 <__epilogue_restores__>

00003680 <__eerd_block_m168>:
    3680:	dc 01       	movw	r26, r24
    3682:	cb 01       	movw	r24, r22

00003684 <__eerd_blraw_m168>:
    3684:	fc 01       	movw	r30, r24
    3686:	f9 99       	sbic	0x1f, 1	; 31
    3688:	fe cf       	rjmp	.-4      	; 0x3686 <__eerd_blraw_m168+0x2>
    368a:	06 c0       	rjmp	.+12     	; 0x3698 <__eerd_blraw_m168+0x14>
    368c:	f2 bd       	out	0x22, r31	; 34
    368e:	e1 bd       	out	0x21, r30	; 33
    3690:	f8 9a       	sbi	0x1f, 0	; 31
    3692:	31 96       	adiw	r30, 0x01	; 1
    3694:	00 b4       	in	r0, 0x20	; 32
    3696:	0d 92       	st	X+, r0
    3698:	41 50       	subi	r20, 0x01	; 1
    369a:	50 40       	sbci	r21, 0x00	; 0
    369c:	b8 f7       	brcc	.-18     	; 0x368c <__eerd_blraw_m168+0x8>
    369e:	08 95       	ret

000036a0 <__eerd_byte_m168>:
    36a0:	f9 99       	sbic	0x1f, 1	; 31
    36a2:	fe cf       	rjmp	.-4      	; 0x36a0 <__eerd_byte_m168>
    36a4:	92 bd       	out	0x22, r25	; 34
    36a6:	81 bd       	out	0x21, r24	; 33
    36a8:	f8 9a       	sbi	0x1f, 0	; 31
    36aa:	99 27       	eor	r25, r25
    36ac:	80 b5       	in	r24, 0x20	; 32
    36ae:	08 95       	ret

000036b0 <__eerd_word_m168>:
    36b0:	a8 e1       	ldi	r26, 0x18	; 24
    36b2:	b0 e0       	ldi	r27, 0x00	; 0
    36b4:	42 e0       	ldi	r20, 0x02	; 2
    36b6:	50 e0       	ldi	r21, 0x00	; 0
    36b8:	0c 94 42 1b 	jmp	0x3684	; 0x3684 <__eerd_blraw_m168>

000036bc <__eewr_block_m168>:
    36bc:	dc 01       	movw	r26, r24
    36be:	cb 01       	movw	r24, r22
    36c0:	03 c0       	rjmp	.+6      	; 0x36c8 <__eewr_block_m168+0xc>
    36c2:	2d 91       	ld	r18, X+
    36c4:	0e 94 69 1b 	call	0x36d2	; 0x36d2 <__eewr_r18_m168>
    36c8:	41 50       	subi	r20, 0x01	; 1
    36ca:	50 40       	sbci	r21, 0x00	; 0
    36cc:	d0 f7       	brcc	.-12     	; 0x36c2 <__eewr_block_m168+0x6>
    36ce:	08 95       	ret

000036d0 <__eewr_byte_m168>:
    36d0:	26 2f       	mov	r18, r22

000036d2 <__eewr_r18_m168>:
    36d2:	f9 99       	sbic	0x1f, 1	; 31
    36d4:	fe cf       	rjmp	.-4      	; 0x36d2 <__eewr_r18_m168>
    36d6:	1f ba       	out	0x1f, r1	; 31
    36d8:	92 bd       	out	0x22, r25	; 34
    36da:	81 bd       	out	0x21, r24	; 33
    36dc:	20 bd       	out	0x20, r18	; 32
    36de:	0f b6       	in	r0, 0x3f	; 63
    36e0:	f8 94       	cli
    36e2:	fa 9a       	sbi	0x1f, 2	; 31
    36e4:	f9 9a       	sbi	0x1f, 1	; 31
    36e6:	0f be       	out	0x3f, r0	; 63
    36e8:	01 96       	adiw	r24, 0x01	; 1
    36ea:	08 95       	ret

000036ec <__eewr_word_m168>:
    36ec:	0e 94 68 1b 	call	0x36d0	; 0x36d0 <__eewr_byte_m168>
    36f0:	27 2f       	mov	r18, r23
    36f2:	0c 94 69 1b 	jmp	0x36d2	; 0x36d2 <__eewr_r18_m168>

000036f6 <dtoa_prf>:
    36f6:	6f 92       	push	r6
    36f8:	7f 92       	push	r7
    36fa:	9f 92       	push	r9
    36fc:	af 92       	push	r10
    36fe:	bf 92       	push	r11
    3700:	cf 92       	push	r12
    3702:	df 92       	push	r13
    3704:	ef 92       	push	r14
    3706:	ff 92       	push	r15
    3708:	0f 93       	push	r16
    370a:	1f 93       	push	r17
    370c:	cf 93       	push	r28
    370e:	df 93       	push	r29
    3710:	cd b7       	in	r28, 0x3d	; 61
    3712:	de b7       	in	r29, 0x3e	; 62
    3714:	29 97       	sbiw	r28, 0x09	; 9
    3716:	0f b6       	in	r0, 0x3f	; 63
    3718:	f8 94       	cli
    371a:	de bf       	out	0x3e, r29	; 62
    371c:	0f be       	out	0x3f, r0	; 63
    371e:	cd bf       	out	0x3d, r28	; 61
    3720:	6a 01       	movw	r12, r20
    3722:	b2 2e       	mov	r11, r18
    3724:	10 2f       	mov	r17, r16
    3726:	0c 33       	cpi	r16, 0x3C	; 60
    3728:	20 f4       	brcc	.+8      	; 0x3732 <dtoa_prf+0x3c>
    372a:	ff 24       	eor	r15, r15
    372c:	f3 94       	inc	r15
    372e:	f0 0e       	add	r15, r16
    3730:	02 c0       	rjmp	.+4      	; 0x3736 <dtoa_prf+0x40>
    3732:	4c e3       	ldi	r20, 0x3C	; 60
    3734:	f4 2e       	mov	r15, r20
    3736:	0f 2d       	mov	r16, r15
    3738:	27 e0       	ldi	r18, 0x07	; 7
    373a:	ae 01       	movw	r20, r28
    373c:	4f 5f       	subi	r20, 0xFF	; 255
    373e:	5f 4f       	sbci	r21, 0xFF	; 255
    3740:	0e 94 f9 1c 	call	0x39f2	; 0x39f2 <__ftoa_engine>
    3744:	79 81       	ldd	r23, Y+1	; 0x01
    3746:	27 2f       	mov	r18, r23
    3748:	29 70       	andi	r18, 0x09	; 9
    374a:	21 30       	cpi	r18, 0x01	; 1
    374c:	31 f0       	breq	.+12     	; 0x375a <dtoa_prf+0x64>
    374e:	e1 fc       	sbrc	r14, 1
    3750:	06 c0       	rjmp	.+12     	; 0x375e <dtoa_prf+0x68>
    3752:	e0 fc       	sbrc	r14, 0
    3754:	06 c0       	rjmp	.+12     	; 0x3762 <dtoa_prf+0x6c>
    3756:	60 e0       	ldi	r22, 0x00	; 0
    3758:	05 c0       	rjmp	.+10     	; 0x3764 <dtoa_prf+0x6e>
    375a:	6d e2       	ldi	r22, 0x2D	; 45
    375c:	03 c0       	rjmp	.+6      	; 0x3764 <dtoa_prf+0x6e>
    375e:	6b e2       	ldi	r22, 0x2B	; 43
    3760:	01 c0       	rjmp	.+2      	; 0x3764 <dtoa_prf+0x6e>
    3762:	60 e2       	ldi	r22, 0x20	; 32
    3764:	ae 2d       	mov	r26, r14
    3766:	a0 71       	andi	r26, 0x10	; 16
    3768:	73 ff       	sbrs	r23, 3
    376a:	36 c0       	rjmp	.+108    	; 0x37d8 <dtoa_prf+0xe2>
    376c:	66 23       	and	r22, r22
    376e:	11 f0       	breq	.+4      	; 0x3774 <dtoa_prf+0x7e>
    3770:	84 e0       	ldi	r24, 0x04	; 4
    3772:	01 c0       	rjmp	.+2      	; 0x3776 <dtoa_prf+0x80>
    3774:	83 e0       	ldi	r24, 0x03	; 3
    3776:	8b 15       	cp	r24, r11
    3778:	10 f4       	brcc	.+4      	; 0x377e <dtoa_prf+0x88>
    377a:	b8 1a       	sub	r11, r24
    377c:	01 c0       	rjmp	.+2      	; 0x3780 <dtoa_prf+0x8a>
    377e:	b1 2c       	mov	r11, r1
    3780:	a1 11       	cpse	r26, r1
    3782:	0b c0       	rjmp	.+22     	; 0x379a <dtoa_prf+0xa4>
    3784:	f6 01       	movw	r30, r12
    3786:	8b 2d       	mov	r24, r11
    3788:	90 e2       	ldi	r25, 0x20	; 32
    378a:	88 23       	and	r24, r24
    378c:	19 f0       	breq	.+6      	; 0x3794 <dtoa_prf+0x9e>
    378e:	91 93       	st	Z+, r25
    3790:	81 50       	subi	r24, 0x01	; 1
    3792:	fb cf       	rjmp	.-10     	; 0x378a <dtoa_prf+0x94>
    3794:	cb 0c       	add	r12, r11
    3796:	d1 1c       	adc	r13, r1
    3798:	b1 2c       	mov	r11, r1
    379a:	66 23       	and	r22, r22
    379c:	31 f0       	breq	.+12     	; 0x37aa <dtoa_prf+0xb4>
    379e:	f6 01       	movw	r30, r12
    37a0:	60 83       	st	Z, r22
    37a2:	96 01       	movw	r18, r12
    37a4:	2f 5f       	subi	r18, 0xFF	; 255
    37a6:	3f 4f       	sbci	r19, 0xFF	; 255
    37a8:	69 01       	movw	r12, r18
    37aa:	c6 01       	movw	r24, r12
    37ac:	03 96       	adiw	r24, 0x03	; 3
    37ae:	e2 fe       	sbrs	r14, 2
    37b0:	05 c0       	rjmp	.+10     	; 0x37bc <dtoa_prf+0xc6>
    37b2:	2e e4       	ldi	r18, 0x4E	; 78
    37b4:	f6 01       	movw	r30, r12
    37b6:	20 83       	st	Z, r18
    37b8:	31 e4       	ldi	r19, 0x41	; 65
    37ba:	04 c0       	rjmp	.+8      	; 0x37c4 <dtoa_prf+0xce>
    37bc:	2e e6       	ldi	r18, 0x6E	; 110
    37be:	f6 01       	movw	r30, r12
    37c0:	20 83       	st	Z, r18
    37c2:	31 e6       	ldi	r19, 0x61	; 97
    37c4:	31 83       	std	Z+1, r19	; 0x01
    37c6:	22 83       	std	Z+2, r18	; 0x02
    37c8:	fc 01       	movw	r30, r24
    37ca:	2b 2d       	mov	r18, r11
    37cc:	30 e2       	ldi	r19, 0x20	; 32
    37ce:	22 23       	and	r18, r18
    37d0:	f1 f1       	breq	.+124    	; 0x384e <dtoa_prf+0x158>
    37d2:	31 93       	st	Z+, r19
    37d4:	21 50       	subi	r18, 0x01	; 1
    37d6:	fb cf       	rjmp	.-10     	; 0x37ce <dtoa_prf+0xd8>
    37d8:	72 ff       	sbrs	r23, 2
    37da:	40 c0       	rjmp	.+128    	; 0x385c <dtoa_prf+0x166>
    37dc:	66 23       	and	r22, r22
    37de:	11 f0       	breq	.+4      	; 0x37e4 <dtoa_prf+0xee>
    37e0:	84 e0       	ldi	r24, 0x04	; 4
    37e2:	01 c0       	rjmp	.+2      	; 0x37e6 <dtoa_prf+0xf0>
    37e4:	83 e0       	ldi	r24, 0x03	; 3
    37e6:	8b 15       	cp	r24, r11
    37e8:	10 f4       	brcc	.+4      	; 0x37ee <dtoa_prf+0xf8>
    37ea:	b8 1a       	sub	r11, r24
    37ec:	01 c0       	rjmp	.+2      	; 0x37f0 <dtoa_prf+0xfa>
    37ee:	b1 2c       	mov	r11, r1
    37f0:	a1 11       	cpse	r26, r1
    37f2:	0b c0       	rjmp	.+22     	; 0x380a <dtoa_prf+0x114>
    37f4:	f6 01       	movw	r30, r12
    37f6:	8b 2d       	mov	r24, r11
    37f8:	90 e2       	ldi	r25, 0x20	; 32
    37fa:	88 23       	and	r24, r24
    37fc:	19 f0       	breq	.+6      	; 0x3804 <dtoa_prf+0x10e>
    37fe:	91 93       	st	Z+, r25
    3800:	81 50       	subi	r24, 0x01	; 1
    3802:	fb cf       	rjmp	.-10     	; 0x37fa <dtoa_prf+0x104>
    3804:	cb 0c       	add	r12, r11
    3806:	d1 1c       	adc	r13, r1
    3808:	b1 2c       	mov	r11, r1
    380a:	66 23       	and	r22, r22
    380c:	31 f0       	breq	.+12     	; 0x381a <dtoa_prf+0x124>
    380e:	f6 01       	movw	r30, r12
    3810:	60 83       	st	Z, r22
    3812:	96 01       	movw	r18, r12
    3814:	2f 5f       	subi	r18, 0xFF	; 255
    3816:	3f 4f       	sbci	r19, 0xFF	; 255
    3818:	69 01       	movw	r12, r18
    381a:	c6 01       	movw	r24, r12
    381c:	03 96       	adiw	r24, 0x03	; 3
    381e:	e2 fe       	sbrs	r14, 2
    3820:	07 c0       	rjmp	.+14     	; 0x3830 <dtoa_prf+0x13a>
    3822:	29 e4       	ldi	r18, 0x49	; 73
    3824:	f6 01       	movw	r30, r12
    3826:	20 83       	st	Z, r18
    3828:	2e e4       	ldi	r18, 0x4E	; 78
    382a:	21 83       	std	Z+1, r18	; 0x01
    382c:	26 e4       	ldi	r18, 0x46	; 70
    382e:	06 c0       	rjmp	.+12     	; 0x383c <dtoa_prf+0x146>
    3830:	29 e6       	ldi	r18, 0x69	; 105
    3832:	f6 01       	movw	r30, r12
    3834:	20 83       	st	Z, r18
    3836:	2e e6       	ldi	r18, 0x6E	; 110
    3838:	21 83       	std	Z+1, r18	; 0x01
    383a:	26 e6       	ldi	r18, 0x66	; 102
    383c:	22 83       	std	Z+2, r18	; 0x02
    383e:	fc 01       	movw	r30, r24
    3840:	2b 2d       	mov	r18, r11
    3842:	30 e2       	ldi	r19, 0x20	; 32
    3844:	22 23       	and	r18, r18
    3846:	19 f0       	breq	.+6      	; 0x384e <dtoa_prf+0x158>
    3848:	31 93       	st	Z+, r19
    384a:	21 50       	subi	r18, 0x01	; 1
    384c:	fb cf       	rjmp	.-10     	; 0x3844 <dtoa_prf+0x14e>
    384e:	fc 01       	movw	r30, r24
    3850:	eb 0d       	add	r30, r11
    3852:	f1 1d       	adc	r31, r1
    3854:	10 82       	st	Z, r1
    3856:	8e ef       	ldi	r24, 0xFE	; 254
    3858:	9f ef       	ldi	r25, 0xFF	; 255
    385a:	b7 c0       	rjmp	.+366    	; 0x39ca <dtoa_prf+0x2d4>
    385c:	b1 e0       	ldi	r27, 0x01	; 1
    385e:	61 11       	cpse	r22, r1
    3860:	01 c0       	rjmp	.+2      	; 0x3864 <dtoa_prf+0x16e>
    3862:	b0 e0       	ldi	r27, 0x00	; 0
    3864:	4b 2f       	mov	r20, r27
    3866:	50 e0       	ldi	r21, 0x00	; 0
    3868:	18 16       	cp	r1, r24
    386a:	19 06       	cpc	r1, r25
    386c:	24 f4       	brge	.+8      	; 0x3876 <dtoa_prf+0x180>
    386e:	9c 01       	movw	r18, r24
    3870:	2f 5f       	subi	r18, 0xFF	; 255
    3872:	3f 4f       	sbci	r19, 0xFF	; 255
    3874:	02 c0       	rjmp	.+4      	; 0x387a <dtoa_prf+0x184>
    3876:	21 e0       	ldi	r18, 0x01	; 1
    3878:	30 e0       	ldi	r19, 0x00	; 0
    387a:	24 0f       	add	r18, r20
    387c:	35 1f       	adc	r19, r21
    387e:	11 23       	and	r17, r17
    3880:	29 f0       	breq	.+10     	; 0x388c <dtoa_prf+0x196>
    3882:	41 2f       	mov	r20, r17
    3884:	50 e0       	ldi	r21, 0x00	; 0
    3886:	4f 5f       	subi	r20, 0xFF	; 255
    3888:	5f 4f       	sbci	r21, 0xFF	; 255
    388a:	02 c0       	rjmp	.+4      	; 0x3890 <dtoa_prf+0x19a>
    388c:	40 e0       	ldi	r20, 0x00	; 0
    388e:	50 e0       	ldi	r21, 0x00	; 0
    3890:	42 0f       	add	r20, r18
    3892:	53 1f       	adc	r21, r19
    3894:	2b 2d       	mov	r18, r11
    3896:	30 e0       	ldi	r19, 0x00	; 0
    3898:	42 17       	cp	r20, r18
    389a:	53 07       	cpc	r21, r19
    389c:	14 f4       	brge	.+4      	; 0x38a2 <dtoa_prf+0x1ac>
    389e:	b4 1a       	sub	r11, r20
    38a0:	01 c0       	rjmp	.+2      	; 0x38a4 <dtoa_prf+0x1ae>
    38a2:	b1 2c       	mov	r11, r1
    38a4:	2e 2d       	mov	r18, r14
    38a6:	28 71       	andi	r18, 0x18	; 24
    38a8:	59 f4       	brne	.+22     	; 0x38c0 <dtoa_prf+0x1ca>
    38aa:	f6 01       	movw	r30, r12
    38ac:	2b 2d       	mov	r18, r11
    38ae:	30 e2       	ldi	r19, 0x20	; 32
    38b0:	22 23       	and	r18, r18
    38b2:	19 f0       	breq	.+6      	; 0x38ba <dtoa_prf+0x1c4>
    38b4:	31 93       	st	Z+, r19
    38b6:	21 50       	subi	r18, 0x01	; 1
    38b8:	fb cf       	rjmp	.-10     	; 0x38b0 <dtoa_prf+0x1ba>
    38ba:	cb 0c       	add	r12, r11
    38bc:	d1 1c       	adc	r13, r1
    38be:	b1 2c       	mov	r11, r1
    38c0:	bb 23       	and	r27, r27
    38c2:	31 f0       	breq	.+12     	; 0x38d0 <dtoa_prf+0x1da>
    38c4:	f6 01       	movw	r30, r12
    38c6:	60 83       	st	Z, r22
    38c8:	96 01       	movw	r18, r12
    38ca:	2f 5f       	subi	r18, 0xFF	; 255
    38cc:	3f 4f       	sbci	r19, 0xFF	; 255
    38ce:	69 01       	movw	r12, r18
    38d0:	a1 11       	cpse	r26, r1
    38d2:	0b c0       	rjmp	.+22     	; 0x38ea <dtoa_prf+0x1f4>
    38d4:	f6 01       	movw	r30, r12
    38d6:	2b 2d       	mov	r18, r11
    38d8:	30 e3       	ldi	r19, 0x30	; 48
    38da:	22 23       	and	r18, r18
    38dc:	19 f0       	breq	.+6      	; 0x38e4 <dtoa_prf+0x1ee>
    38de:	31 93       	st	Z+, r19
    38e0:	21 50       	subi	r18, 0x01	; 1
    38e2:	fb cf       	rjmp	.-10     	; 0x38da <dtoa_prf+0x1e4>
    38e4:	cb 0c       	add	r12, r11
    38e6:	d1 1c       	adc	r13, r1
    38e8:	b1 2c       	mov	r11, r1
    38ea:	f8 0e       	add	r15, r24
    38ec:	0a 81       	ldd	r16, Y+2	; 0x02
    38ee:	37 2f       	mov	r19, r23
    38f0:	30 71       	andi	r19, 0x10	; 16
    38f2:	a3 2e       	mov	r10, r19
    38f4:	74 ff       	sbrs	r23, 4
    38f6:	03 c0       	rjmp	.+6      	; 0x38fe <dtoa_prf+0x208>
    38f8:	01 33       	cpi	r16, 0x31	; 49
    38fa:	09 f4       	brne	.+2      	; 0x38fe <dtoa_prf+0x208>
    38fc:	fa 94       	dec	r15
    38fe:	1f 14       	cp	r1, r15
    3900:	2c f4       	brge	.+10     	; 0x390c <dtoa_prf+0x216>
    3902:	2f 2d       	mov	r18, r15
    3904:	29 30       	cpi	r18, 0x09	; 9
    3906:	18 f0       	brcs	.+6      	; 0x390e <dtoa_prf+0x218>
    3908:	28 e0       	ldi	r18, 0x08	; 8
    390a:	01 c0       	rjmp	.+2      	; 0x390e <dtoa_prf+0x218>
    390c:	21 e0       	ldi	r18, 0x01	; 1
    390e:	68 2f       	mov	r22, r24
    3910:	39 2f       	mov	r19, r25
    3912:	97 ff       	sbrs	r25, 7
    3914:	02 c0       	rjmp	.+4      	; 0x391a <dtoa_prf+0x224>
    3916:	60 e0       	ldi	r22, 0x00	; 0
    3918:	30 e0       	ldi	r19, 0x00	; 0
    391a:	46 2f       	mov	r20, r22
    391c:	53 2f       	mov	r21, r19
    391e:	61 2c       	mov	r6, r1
    3920:	71 2c       	mov	r7, r1
    3922:	3e e2       	ldi	r19, 0x2E	; 46
    3924:	93 2e       	mov	r9, r19
    3926:	bc 01       	movw	r22, r24
    3928:	62 1b       	sub	r22, r18
    392a:	71 09       	sbc	r23, r1
    392c:	9b 01       	movw	r18, r22
    392e:	dc 01       	movw	r26, r24
    3930:	a4 1b       	sub	r26, r20
    3932:	b5 0b       	sbc	r27, r21
    3934:	e1 e0       	ldi	r30, 0x01	; 1
    3936:	f0 e0       	ldi	r31, 0x00	; 0
    3938:	ec 0f       	add	r30, r28
    393a:	fd 1f       	adc	r31, r29
    393c:	ae 0f       	add	r26, r30
    393e:	bf 1f       	adc	r27, r31
    3940:	e1 2e       	mov	r14, r17
    3942:	f1 2c       	mov	r15, r1
    3944:	f1 94       	neg	r15
    3946:	e1 94       	neg	r14
    3948:	f1 08       	sbc	r15, r1
    394a:	4f 3f       	cpi	r20, 0xFF	; 255
    394c:	ff ef       	ldi	r31, 0xFF	; 255
    394e:	5f 07       	cpc	r21, r31
    3950:	31 f4       	brne	.+12     	; 0x395e <dtoa_prf+0x268>
    3952:	f6 01       	movw	r30, r12
    3954:	90 82       	st	Z, r9
    3956:	b6 01       	movw	r22, r12
    3958:	6f 5f       	subi	r22, 0xFF	; 255
    395a:	7f 4f       	sbci	r23, 0xFF	; 255
    395c:	6b 01       	movw	r12, r22
    395e:	84 17       	cp	r24, r20
    3960:	95 07       	cpc	r25, r21
    3962:	4c f0       	brlt	.+18     	; 0x3976 <dtoa_prf+0x280>
    3964:	24 17       	cp	r18, r20
    3966:	35 07       	cpc	r19, r21
    3968:	34 f4       	brge	.+12     	; 0x3976 <dtoa_prf+0x280>
    396a:	bd 01       	movw	r22, r26
    396c:	66 0d       	add	r22, r6
    396e:	77 1d       	adc	r23, r7
    3970:	fb 01       	movw	r30, r22
    3972:	11 81       	ldd	r17, Z+1	; 0x01
    3974:	01 c0       	rjmp	.+2      	; 0x3978 <dtoa_prf+0x282>
    3976:	10 e3       	ldi	r17, 0x30	; 48
    3978:	41 50       	subi	r20, 0x01	; 1
    397a:	51 09       	sbc	r21, r1
    397c:	ff ef       	ldi	r31, 0xFF	; 255
    397e:	6f 1a       	sub	r6, r31
    3980:	7f 0a       	sbc	r7, r31
    3982:	b6 01       	movw	r22, r12
    3984:	6f 5f       	subi	r22, 0xFF	; 255
    3986:	7f 4f       	sbci	r23, 0xFF	; 255
    3988:	4e 15       	cp	r20, r14
    398a:	5f 05       	cpc	r21, r15
    398c:	24 f0       	brlt	.+8      	; 0x3996 <dtoa_prf+0x2a0>
    398e:	f6 01       	movw	r30, r12
    3990:	10 83       	st	Z, r17
    3992:	6b 01       	movw	r12, r22
    3994:	da cf       	rjmp	.-76     	; 0x394a <dtoa_prf+0x254>
    3996:	48 17       	cp	r20, r24
    3998:	59 07       	cpc	r21, r25
    399a:	39 f4       	brne	.+14     	; 0x39aa <dtoa_prf+0x2b4>
    399c:	06 33       	cpi	r16, 0x36	; 54
    399e:	20 f4       	brcc	.+8      	; 0x39a8 <dtoa_prf+0x2b2>
    39a0:	05 33       	cpi	r16, 0x35	; 53
    39a2:	19 f4       	brne	.+6      	; 0x39aa <dtoa_prf+0x2b4>
    39a4:	a1 10       	cpse	r10, r1
    39a6:	01 c0       	rjmp	.+2      	; 0x39aa <dtoa_prf+0x2b4>
    39a8:	11 e3       	ldi	r17, 0x31	; 49
    39aa:	f6 01       	movw	r30, r12
    39ac:	10 83       	st	Z, r17
    39ae:	fb 01       	movw	r30, r22
    39b0:	8b 2d       	mov	r24, r11
    39b2:	90 e2       	ldi	r25, 0x20	; 32
    39b4:	88 23       	and	r24, r24
    39b6:	19 f0       	breq	.+6      	; 0x39be <dtoa_prf+0x2c8>
    39b8:	91 93       	st	Z+, r25
    39ba:	81 50       	subi	r24, 0x01	; 1
    39bc:	fb cf       	rjmp	.-10     	; 0x39b4 <dtoa_prf+0x2be>
    39be:	fb 01       	movw	r30, r22
    39c0:	eb 0d       	add	r30, r11
    39c2:	f1 1d       	adc	r31, r1
    39c4:	10 82       	st	Z, r1
    39c6:	80 e0       	ldi	r24, 0x00	; 0
    39c8:	90 e0       	ldi	r25, 0x00	; 0
    39ca:	29 96       	adiw	r28, 0x09	; 9
    39cc:	0f b6       	in	r0, 0x3f	; 63
    39ce:	f8 94       	cli
    39d0:	de bf       	out	0x3e, r29	; 62
    39d2:	0f be       	out	0x3f, r0	; 63
    39d4:	cd bf       	out	0x3d, r28	; 61
    39d6:	df 91       	pop	r29
    39d8:	cf 91       	pop	r28
    39da:	1f 91       	pop	r17
    39dc:	0f 91       	pop	r16
    39de:	ff 90       	pop	r15
    39e0:	ef 90       	pop	r14
    39e2:	df 90       	pop	r13
    39e4:	cf 90       	pop	r12
    39e6:	bf 90       	pop	r11
    39e8:	af 90       	pop	r10
    39ea:	9f 90       	pop	r9
    39ec:	7f 90       	pop	r7
    39ee:	6f 90       	pop	r6
    39f0:	08 95       	ret

000039f2 <__ftoa_engine>:
    39f2:	28 30       	cpi	r18, 0x08	; 8
    39f4:	08 f0       	brcs	.+2      	; 0x39f8 <__ftoa_engine+0x6>
    39f6:	27 e0       	ldi	r18, 0x07	; 7
    39f8:	33 27       	eor	r19, r19
    39fa:	da 01       	movw	r26, r20
    39fc:	99 0f       	add	r25, r25
    39fe:	31 1d       	adc	r19, r1
    3a00:	87 fd       	sbrc	r24, 7
    3a02:	91 60       	ori	r25, 0x01	; 1
    3a04:	00 96       	adiw	r24, 0x00	; 0
    3a06:	61 05       	cpc	r22, r1
    3a08:	71 05       	cpc	r23, r1
    3a0a:	39 f4       	brne	.+14     	; 0x3a1a <__ftoa_engine+0x28>
    3a0c:	32 60       	ori	r19, 0x02	; 2
    3a0e:	2e 5f       	subi	r18, 0xFE	; 254
    3a10:	3d 93       	st	X+, r19
    3a12:	30 e3       	ldi	r19, 0x30	; 48
    3a14:	2a 95       	dec	r18
    3a16:	e1 f7       	brne	.-8      	; 0x3a10 <__ftoa_engine+0x1e>
    3a18:	08 95       	ret
    3a1a:	9f 3f       	cpi	r25, 0xFF	; 255
    3a1c:	30 f0       	brcs	.+12     	; 0x3a2a <__ftoa_engine+0x38>
    3a1e:	80 38       	cpi	r24, 0x80	; 128
    3a20:	71 05       	cpc	r23, r1
    3a22:	61 05       	cpc	r22, r1
    3a24:	09 f0       	breq	.+2      	; 0x3a28 <__ftoa_engine+0x36>
    3a26:	3c 5f       	subi	r19, 0xFC	; 252
    3a28:	3c 5f       	subi	r19, 0xFC	; 252
    3a2a:	3d 93       	st	X+, r19
    3a2c:	91 30       	cpi	r25, 0x01	; 1
    3a2e:	08 f0       	brcs	.+2      	; 0x3a32 <__ftoa_engine+0x40>
    3a30:	80 68       	ori	r24, 0x80	; 128
    3a32:	91 1d       	adc	r25, r1
    3a34:	df 93       	push	r29
    3a36:	cf 93       	push	r28
    3a38:	1f 93       	push	r17
    3a3a:	0f 93       	push	r16
    3a3c:	ff 92       	push	r15
    3a3e:	ef 92       	push	r14
    3a40:	19 2f       	mov	r17, r25
    3a42:	98 7f       	andi	r25, 0xF8	; 248
    3a44:	96 95       	lsr	r25
    3a46:	e9 2f       	mov	r30, r25
    3a48:	96 95       	lsr	r25
    3a4a:	96 95       	lsr	r25
    3a4c:	e9 0f       	add	r30, r25
    3a4e:	ff 27       	eor	r31, r31
    3a50:	ea 59       	subi	r30, 0x9A	; 154
    3a52:	fc 4f       	sbci	r31, 0xFC	; 252
    3a54:	99 27       	eor	r25, r25
    3a56:	33 27       	eor	r19, r19
    3a58:	ee 24       	eor	r14, r14
    3a5a:	ff 24       	eor	r15, r15
    3a5c:	a7 01       	movw	r20, r14
    3a5e:	e7 01       	movw	r28, r14
    3a60:	05 90       	lpm	r0, Z+
    3a62:	08 94       	sec
    3a64:	07 94       	ror	r0
    3a66:	28 f4       	brcc	.+10     	; 0x3a72 <__ftoa_engine+0x80>
    3a68:	36 0f       	add	r19, r22
    3a6a:	e7 1e       	adc	r14, r23
    3a6c:	f8 1e       	adc	r15, r24
    3a6e:	49 1f       	adc	r20, r25
    3a70:	51 1d       	adc	r21, r1
    3a72:	66 0f       	add	r22, r22
    3a74:	77 1f       	adc	r23, r23
    3a76:	88 1f       	adc	r24, r24
    3a78:	99 1f       	adc	r25, r25
    3a7a:	06 94       	lsr	r0
    3a7c:	a1 f7       	brne	.-24     	; 0x3a66 <__ftoa_engine+0x74>
    3a7e:	05 90       	lpm	r0, Z+
    3a80:	07 94       	ror	r0
    3a82:	28 f4       	brcc	.+10     	; 0x3a8e <__ftoa_engine+0x9c>
    3a84:	e7 0e       	add	r14, r23
    3a86:	f8 1e       	adc	r15, r24
    3a88:	49 1f       	adc	r20, r25
    3a8a:	56 1f       	adc	r21, r22
    3a8c:	c1 1d       	adc	r28, r1
    3a8e:	77 0f       	add	r23, r23
    3a90:	88 1f       	adc	r24, r24
    3a92:	99 1f       	adc	r25, r25
    3a94:	66 1f       	adc	r22, r22
    3a96:	06 94       	lsr	r0
    3a98:	a1 f7       	brne	.-24     	; 0x3a82 <__ftoa_engine+0x90>
    3a9a:	05 90       	lpm	r0, Z+
    3a9c:	07 94       	ror	r0
    3a9e:	28 f4       	brcc	.+10     	; 0x3aaa <__ftoa_engine+0xb8>
    3aa0:	f8 0e       	add	r15, r24
    3aa2:	49 1f       	adc	r20, r25
    3aa4:	56 1f       	adc	r21, r22
    3aa6:	c7 1f       	adc	r28, r23
    3aa8:	d1 1d       	adc	r29, r1
    3aaa:	88 0f       	add	r24, r24
    3aac:	99 1f       	adc	r25, r25
    3aae:	66 1f       	adc	r22, r22
    3ab0:	77 1f       	adc	r23, r23
    3ab2:	06 94       	lsr	r0
    3ab4:	a1 f7       	brne	.-24     	; 0x3a9e <__ftoa_engine+0xac>
    3ab6:	05 90       	lpm	r0, Z+
    3ab8:	07 94       	ror	r0
    3aba:	20 f4       	brcc	.+8      	; 0x3ac4 <__ftoa_engine+0xd2>
    3abc:	49 0f       	add	r20, r25
    3abe:	56 1f       	adc	r21, r22
    3ac0:	c7 1f       	adc	r28, r23
    3ac2:	d8 1f       	adc	r29, r24
    3ac4:	99 0f       	add	r25, r25
    3ac6:	66 1f       	adc	r22, r22
    3ac8:	77 1f       	adc	r23, r23
    3aca:	88 1f       	adc	r24, r24
    3acc:	06 94       	lsr	r0
    3ace:	a9 f7       	brne	.-22     	; 0x3aba <__ftoa_engine+0xc8>
    3ad0:	84 91       	lpm	r24, Z
    3ad2:	10 95       	com	r17
    3ad4:	17 70       	andi	r17, 0x07	; 7
    3ad6:	41 f0       	breq	.+16     	; 0x3ae8 <__ftoa_engine+0xf6>
    3ad8:	d6 95       	lsr	r29
    3ada:	c7 95       	ror	r28
    3adc:	57 95       	ror	r21
    3ade:	47 95       	ror	r20
    3ae0:	f7 94       	ror	r15
    3ae2:	e7 94       	ror	r14
    3ae4:	1a 95       	dec	r17
    3ae6:	c1 f7       	brne	.-16     	; 0x3ad8 <__ftoa_engine+0xe6>
    3ae8:	ec e0       	ldi	r30, 0x0C	; 12
    3aea:	f3 e0       	ldi	r31, 0x03	; 3
    3aec:	68 94       	set
    3aee:	15 90       	lpm	r1, Z+
    3af0:	15 91       	lpm	r17, Z+
    3af2:	35 91       	lpm	r19, Z+
    3af4:	65 91       	lpm	r22, Z+
    3af6:	95 91       	lpm	r25, Z+
    3af8:	05 90       	lpm	r0, Z+
    3afa:	7f e2       	ldi	r23, 0x2F	; 47
    3afc:	73 95       	inc	r23
    3afe:	e1 18       	sub	r14, r1
    3b00:	f1 0a       	sbc	r15, r17
    3b02:	43 0b       	sbc	r20, r19
    3b04:	56 0b       	sbc	r21, r22
    3b06:	c9 0b       	sbc	r28, r25
    3b08:	d0 09       	sbc	r29, r0
    3b0a:	c0 f7       	brcc	.-16     	; 0x3afc <__ftoa_engine+0x10a>
    3b0c:	e1 0c       	add	r14, r1
    3b0e:	f1 1e       	adc	r15, r17
    3b10:	43 1f       	adc	r20, r19
    3b12:	56 1f       	adc	r21, r22
    3b14:	c9 1f       	adc	r28, r25
    3b16:	d0 1d       	adc	r29, r0
    3b18:	7e f4       	brtc	.+30     	; 0x3b38 <__ftoa_engine+0x146>
    3b1a:	70 33       	cpi	r23, 0x30	; 48
    3b1c:	11 f4       	brne	.+4      	; 0x3b22 <__ftoa_engine+0x130>
    3b1e:	8a 95       	dec	r24
    3b20:	e6 cf       	rjmp	.-52     	; 0x3aee <__ftoa_engine+0xfc>
    3b22:	e8 94       	clt
    3b24:	01 50       	subi	r16, 0x01	; 1
    3b26:	30 f0       	brcs	.+12     	; 0x3b34 <__ftoa_engine+0x142>
    3b28:	08 0f       	add	r16, r24
    3b2a:	0a f4       	brpl	.+2      	; 0x3b2e <__ftoa_engine+0x13c>
    3b2c:	00 27       	eor	r16, r16
    3b2e:	02 17       	cp	r16, r18
    3b30:	08 f4       	brcc	.+2      	; 0x3b34 <__ftoa_engine+0x142>
    3b32:	20 2f       	mov	r18, r16
    3b34:	23 95       	inc	r18
    3b36:	02 2f       	mov	r16, r18
    3b38:	7a 33       	cpi	r23, 0x3A	; 58
    3b3a:	28 f0       	brcs	.+10     	; 0x3b46 <__ftoa_engine+0x154>
    3b3c:	79 e3       	ldi	r23, 0x39	; 57
    3b3e:	7d 93       	st	X+, r23
    3b40:	2a 95       	dec	r18
    3b42:	e9 f7       	brne	.-6      	; 0x3b3e <__ftoa_engine+0x14c>
    3b44:	10 c0       	rjmp	.+32     	; 0x3b66 <__ftoa_engine+0x174>
    3b46:	7d 93       	st	X+, r23
    3b48:	2a 95       	dec	r18
    3b4a:	89 f6       	brne	.-94     	; 0x3aee <__ftoa_engine+0xfc>
    3b4c:	06 94       	lsr	r0
    3b4e:	97 95       	ror	r25
    3b50:	67 95       	ror	r22
    3b52:	37 95       	ror	r19
    3b54:	17 95       	ror	r17
    3b56:	17 94       	ror	r1
    3b58:	e1 18       	sub	r14, r1
    3b5a:	f1 0a       	sbc	r15, r17
    3b5c:	43 0b       	sbc	r20, r19
    3b5e:	56 0b       	sbc	r21, r22
    3b60:	c9 0b       	sbc	r28, r25
    3b62:	d0 09       	sbc	r29, r0
    3b64:	98 f0       	brcs	.+38     	; 0x3b8c <__ftoa_engine+0x19a>
    3b66:	23 95       	inc	r18
    3b68:	7e 91       	ld	r23, -X
    3b6a:	73 95       	inc	r23
    3b6c:	7a 33       	cpi	r23, 0x3A	; 58
    3b6e:	08 f0       	brcs	.+2      	; 0x3b72 <__ftoa_engine+0x180>
    3b70:	70 e3       	ldi	r23, 0x30	; 48
    3b72:	7c 93       	st	X, r23
    3b74:	20 13       	cpse	r18, r16
    3b76:	b8 f7       	brcc	.-18     	; 0x3b66 <__ftoa_engine+0x174>
    3b78:	7e 91       	ld	r23, -X
    3b7a:	70 61       	ori	r23, 0x10	; 16
    3b7c:	7d 93       	st	X+, r23
    3b7e:	30 f0       	brcs	.+12     	; 0x3b8c <__ftoa_engine+0x19a>
    3b80:	83 95       	inc	r24
    3b82:	71 e3       	ldi	r23, 0x31	; 49
    3b84:	7d 93       	st	X+, r23
    3b86:	70 e3       	ldi	r23, 0x30	; 48
    3b88:	2a 95       	dec	r18
    3b8a:	e1 f7       	brne	.-8      	; 0x3b84 <__ftoa_engine+0x192>
    3b8c:	11 24       	eor	r1, r1
    3b8e:	ef 90       	pop	r14
    3b90:	ff 90       	pop	r15
    3b92:	0f 91       	pop	r16
    3b94:	1f 91       	pop	r17
    3b96:	cf 91       	pop	r28
    3b98:	df 91       	pop	r29
    3b9a:	99 27       	eor	r25, r25
    3b9c:	87 fd       	sbrc	r24, 7
    3b9e:	90 95       	com	r25
    3ba0:	08 95       	ret

00003ba2 <strnlen_P>:
    3ba2:	fc 01       	movw	r30, r24
    3ba4:	05 90       	lpm	r0, Z+
    3ba6:	61 50       	subi	r22, 0x01	; 1
    3ba8:	70 40       	sbci	r23, 0x00	; 0
    3baa:	01 10       	cpse	r0, r1
    3bac:	d8 f7       	brcc	.-10     	; 0x3ba4 <strnlen_P+0x2>
    3bae:	80 95       	com	r24
    3bb0:	90 95       	com	r25
    3bb2:	8e 0f       	add	r24, r30
    3bb4:	9f 1f       	adc	r25, r31
    3bb6:	08 95       	ret

00003bb8 <strnlen>:
    3bb8:	fc 01       	movw	r30, r24
    3bba:	61 50       	subi	r22, 0x01	; 1
    3bbc:	70 40       	sbci	r23, 0x00	; 0
    3bbe:	01 90       	ld	r0, Z+
    3bc0:	01 10       	cpse	r0, r1
    3bc2:	d8 f7       	brcc	.-10     	; 0x3bba <strnlen+0x2>
    3bc4:	80 95       	com	r24
    3bc6:	90 95       	com	r25
    3bc8:	8e 0f       	add	r24, r30
    3bca:	9f 1f       	adc	r25, r31
    3bcc:	08 95       	ret

00003bce <strrev>:
    3bce:	dc 01       	movw	r26, r24
    3bd0:	fc 01       	movw	r30, r24
    3bd2:	67 2f       	mov	r22, r23
    3bd4:	71 91       	ld	r23, Z+
    3bd6:	77 23       	and	r23, r23
    3bd8:	e1 f7       	brne	.-8      	; 0x3bd2 <strrev+0x4>
    3bda:	32 97       	sbiw	r30, 0x02	; 2
    3bdc:	04 c0       	rjmp	.+8      	; 0x3be6 <strrev+0x18>
    3bde:	7c 91       	ld	r23, X
    3be0:	6d 93       	st	X+, r22
    3be2:	70 83       	st	Z, r23
    3be4:	62 91       	ld	r22, -Z
    3be6:	ae 17       	cp	r26, r30
    3be8:	bf 07       	cpc	r27, r31
    3bea:	c8 f3       	brcs	.-14     	; 0x3bde <strrev+0x10>
    3bec:	08 95       	ret

00003bee <fputc>:
    3bee:	0f 93       	push	r16
    3bf0:	1f 93       	push	r17
    3bf2:	cf 93       	push	r28
    3bf4:	df 93       	push	r29
    3bf6:	18 2f       	mov	r17, r24
    3bf8:	09 2f       	mov	r16, r25
    3bfa:	eb 01       	movw	r28, r22
    3bfc:	8b 81       	ldd	r24, Y+3	; 0x03
    3bfe:	81 fd       	sbrc	r24, 1
    3c00:	03 c0       	rjmp	.+6      	; 0x3c08 <fputc+0x1a>
    3c02:	8f ef       	ldi	r24, 0xFF	; 255
    3c04:	9f ef       	ldi	r25, 0xFF	; 255
    3c06:	20 c0       	rjmp	.+64     	; 0x3c48 <fputc+0x5a>
    3c08:	82 ff       	sbrs	r24, 2
    3c0a:	10 c0       	rjmp	.+32     	; 0x3c2c <fputc+0x3e>
    3c0c:	4e 81       	ldd	r20, Y+6	; 0x06
    3c0e:	5f 81       	ldd	r21, Y+7	; 0x07
    3c10:	2c 81       	ldd	r18, Y+4	; 0x04
    3c12:	3d 81       	ldd	r19, Y+5	; 0x05
    3c14:	42 17       	cp	r20, r18
    3c16:	53 07       	cpc	r21, r19
    3c18:	7c f4       	brge	.+30     	; 0x3c38 <fputc+0x4a>
    3c1a:	e8 81       	ld	r30, Y
    3c1c:	f9 81       	ldd	r31, Y+1	; 0x01
    3c1e:	9f 01       	movw	r18, r30
    3c20:	2f 5f       	subi	r18, 0xFF	; 255
    3c22:	3f 4f       	sbci	r19, 0xFF	; 255
    3c24:	39 83       	std	Y+1, r19	; 0x01
    3c26:	28 83       	st	Y, r18
    3c28:	10 83       	st	Z, r17
    3c2a:	06 c0       	rjmp	.+12     	; 0x3c38 <fputc+0x4a>
    3c2c:	e8 85       	ldd	r30, Y+8	; 0x08
    3c2e:	f9 85       	ldd	r31, Y+9	; 0x09
    3c30:	81 2f       	mov	r24, r17
    3c32:	09 95       	icall
    3c34:	89 2b       	or	r24, r25
    3c36:	29 f7       	brne	.-54     	; 0x3c02 <fputc+0x14>
    3c38:	2e 81       	ldd	r18, Y+6	; 0x06
    3c3a:	3f 81       	ldd	r19, Y+7	; 0x07
    3c3c:	2f 5f       	subi	r18, 0xFF	; 255
    3c3e:	3f 4f       	sbci	r19, 0xFF	; 255
    3c40:	3f 83       	std	Y+7, r19	; 0x07
    3c42:	2e 83       	std	Y+6, r18	; 0x06
    3c44:	81 2f       	mov	r24, r17
    3c46:	90 2f       	mov	r25, r16
    3c48:	df 91       	pop	r29
    3c4a:	cf 91       	pop	r28
    3c4c:	1f 91       	pop	r17
    3c4e:	0f 91       	pop	r16
    3c50:	08 95       	ret

00003c52 <__ultoa_invert>:
    3c52:	fa 01       	movw	r30, r20
    3c54:	aa 27       	eor	r26, r26
    3c56:	28 30       	cpi	r18, 0x08	; 8
    3c58:	51 f1       	breq	.+84     	; 0x3cae <__ultoa_invert+0x5c>
    3c5a:	20 31       	cpi	r18, 0x10	; 16
    3c5c:	81 f1       	breq	.+96     	; 0x3cbe <__ultoa_invert+0x6c>
    3c5e:	e8 94       	clt
    3c60:	6f 93       	push	r22
    3c62:	6e 7f       	andi	r22, 0xFE	; 254
    3c64:	6e 5f       	subi	r22, 0xFE	; 254
    3c66:	7f 4f       	sbci	r23, 0xFF	; 255
    3c68:	8f 4f       	sbci	r24, 0xFF	; 255
    3c6a:	9f 4f       	sbci	r25, 0xFF	; 255
    3c6c:	af 4f       	sbci	r26, 0xFF	; 255
    3c6e:	b1 e0       	ldi	r27, 0x01	; 1
    3c70:	3e d0       	rcall	.+124    	; 0x3cee <__ultoa_invert+0x9c>
    3c72:	b4 e0       	ldi	r27, 0x04	; 4
    3c74:	3c d0       	rcall	.+120    	; 0x3cee <__ultoa_invert+0x9c>
    3c76:	67 0f       	add	r22, r23
    3c78:	78 1f       	adc	r23, r24
    3c7a:	89 1f       	adc	r24, r25
    3c7c:	9a 1f       	adc	r25, r26
    3c7e:	a1 1d       	adc	r26, r1
    3c80:	68 0f       	add	r22, r24
    3c82:	79 1f       	adc	r23, r25
    3c84:	8a 1f       	adc	r24, r26
    3c86:	91 1d       	adc	r25, r1
    3c88:	a1 1d       	adc	r26, r1
    3c8a:	6a 0f       	add	r22, r26
    3c8c:	71 1d       	adc	r23, r1
    3c8e:	81 1d       	adc	r24, r1
    3c90:	91 1d       	adc	r25, r1
    3c92:	a1 1d       	adc	r26, r1
    3c94:	20 d0       	rcall	.+64     	; 0x3cd6 <__ultoa_invert+0x84>
    3c96:	09 f4       	brne	.+2      	; 0x3c9a <__ultoa_invert+0x48>
    3c98:	68 94       	set
    3c9a:	3f 91       	pop	r19
    3c9c:	2a e0       	ldi	r18, 0x0A	; 10
    3c9e:	26 9f       	mul	r18, r22
    3ca0:	11 24       	eor	r1, r1
    3ca2:	30 19       	sub	r19, r0
    3ca4:	30 5d       	subi	r19, 0xD0	; 208
    3ca6:	31 93       	st	Z+, r19
    3ca8:	de f6       	brtc	.-74     	; 0x3c60 <__ultoa_invert+0xe>
    3caa:	cf 01       	movw	r24, r30
    3cac:	08 95       	ret
    3cae:	46 2f       	mov	r20, r22
    3cb0:	47 70       	andi	r20, 0x07	; 7
    3cb2:	40 5d       	subi	r20, 0xD0	; 208
    3cb4:	41 93       	st	Z+, r20
    3cb6:	b3 e0       	ldi	r27, 0x03	; 3
    3cb8:	0f d0       	rcall	.+30     	; 0x3cd8 <__ultoa_invert+0x86>
    3cba:	c9 f7       	brne	.-14     	; 0x3cae <__ultoa_invert+0x5c>
    3cbc:	f6 cf       	rjmp	.-20     	; 0x3caa <__ultoa_invert+0x58>
    3cbe:	46 2f       	mov	r20, r22
    3cc0:	4f 70       	andi	r20, 0x0F	; 15
    3cc2:	40 5d       	subi	r20, 0xD0	; 208
    3cc4:	4a 33       	cpi	r20, 0x3A	; 58
    3cc6:	18 f0       	brcs	.+6      	; 0x3cce <__ultoa_invert+0x7c>
    3cc8:	49 5d       	subi	r20, 0xD9	; 217
    3cca:	31 fd       	sbrc	r19, 1
    3ccc:	40 52       	subi	r20, 0x20	; 32
    3cce:	41 93       	st	Z+, r20
    3cd0:	02 d0       	rcall	.+4      	; 0x3cd6 <__ultoa_invert+0x84>
    3cd2:	a9 f7       	brne	.-22     	; 0x3cbe <__ultoa_invert+0x6c>
    3cd4:	ea cf       	rjmp	.-44     	; 0x3caa <__ultoa_invert+0x58>
    3cd6:	b4 e0       	ldi	r27, 0x04	; 4
    3cd8:	a6 95       	lsr	r26
    3cda:	97 95       	ror	r25
    3cdc:	87 95       	ror	r24
    3cde:	77 95       	ror	r23
    3ce0:	67 95       	ror	r22
    3ce2:	ba 95       	dec	r27
    3ce4:	c9 f7       	brne	.-14     	; 0x3cd8 <__ultoa_invert+0x86>
    3ce6:	00 97       	sbiw	r24, 0x00	; 0
    3ce8:	61 05       	cpc	r22, r1
    3cea:	71 05       	cpc	r23, r1
    3cec:	08 95       	ret
    3cee:	9b 01       	movw	r18, r22
    3cf0:	ac 01       	movw	r20, r24
    3cf2:	0a 2e       	mov	r0, r26
    3cf4:	06 94       	lsr	r0
    3cf6:	57 95       	ror	r21
    3cf8:	47 95       	ror	r20
    3cfa:	37 95       	ror	r19
    3cfc:	27 95       	ror	r18
    3cfe:	ba 95       	dec	r27
    3d00:	c9 f7       	brne	.-14     	; 0x3cf4 <__ultoa_invert+0xa2>
    3d02:	62 0f       	add	r22, r18
    3d04:	73 1f       	adc	r23, r19
    3d06:	84 1f       	adc	r24, r20
    3d08:	95 1f       	adc	r25, r21
    3d0a:	a0 1d       	adc	r26, r0
    3d0c:	08 95       	ret

00003d0e <__prologue_saves__>:
    3d0e:	2f 92       	push	r2
    3d10:	3f 92       	push	r3
    3d12:	4f 92       	push	r4
    3d14:	5f 92       	push	r5
    3d16:	6f 92       	push	r6
    3d18:	7f 92       	push	r7
    3d1a:	8f 92       	push	r8
    3d1c:	9f 92       	push	r9
    3d1e:	af 92       	push	r10
    3d20:	bf 92       	push	r11
    3d22:	cf 92       	push	r12
    3d24:	df 92       	push	r13
    3d26:	ef 92       	push	r14
    3d28:	ff 92       	push	r15
    3d2a:	0f 93       	push	r16
    3d2c:	1f 93       	push	r17
    3d2e:	cf 93       	push	r28
    3d30:	df 93       	push	r29
    3d32:	cd b7       	in	r28, 0x3d	; 61
    3d34:	de b7       	in	r29, 0x3e	; 62
    3d36:	ca 1b       	sub	r28, r26
    3d38:	db 0b       	sbc	r29, r27
    3d3a:	0f b6       	in	r0, 0x3f	; 63
    3d3c:	f8 94       	cli
    3d3e:	de bf       	out	0x3e, r29	; 62
    3d40:	0f be       	out	0x3f, r0	; 63
    3d42:	cd bf       	out	0x3d, r28	; 61
    3d44:	09 94       	ijmp

00003d46 <__epilogue_restores__>:
    3d46:	2a 88       	ldd	r2, Y+18	; 0x12
    3d48:	39 88       	ldd	r3, Y+17	; 0x11
    3d4a:	48 88       	ldd	r4, Y+16	; 0x10
    3d4c:	5f 84       	ldd	r5, Y+15	; 0x0f
    3d4e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3d50:	7d 84       	ldd	r7, Y+13	; 0x0d
    3d52:	8c 84       	ldd	r8, Y+12	; 0x0c
    3d54:	9b 84       	ldd	r9, Y+11	; 0x0b
    3d56:	aa 84       	ldd	r10, Y+10	; 0x0a
    3d58:	b9 84       	ldd	r11, Y+9	; 0x09
    3d5a:	c8 84       	ldd	r12, Y+8	; 0x08
    3d5c:	df 80       	ldd	r13, Y+7	; 0x07
    3d5e:	ee 80       	ldd	r14, Y+6	; 0x06
    3d60:	fd 80       	ldd	r15, Y+5	; 0x05
    3d62:	0c 81       	ldd	r16, Y+4	; 0x04
    3d64:	1b 81       	ldd	r17, Y+3	; 0x03
    3d66:	aa 81       	ldd	r26, Y+2	; 0x02
    3d68:	b9 81       	ldd	r27, Y+1	; 0x01
    3d6a:	ce 0f       	add	r28, r30
    3d6c:	d1 1d       	adc	r29, r1
    3d6e:	0f b6       	in	r0, 0x3f	; 63
    3d70:	f8 94       	cli
    3d72:	de bf       	out	0x3e, r29	; 62
    3d74:	0f be       	out	0x3f, r0	; 63
    3d76:	cd bf       	out	0x3d, r28	; 61
    3d78:	ed 01       	movw	r28, r26
    3d7a:	08 95       	ret

00003d7c <_exit>:
    3d7c:	f8 94       	cli

00003d7e <__stop_program>:
    3d7e:	ff cf       	rjmp	.-2      	; 0x3d7e <__stop_program>
