
8xDS18x20_BMP180_LCD_UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000f8  00800100  00003d98  00003e4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003d98  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000161  008001f8  008001f8  00003f44  2**0
                  ALLOC
  3 .eeprom       0000004c  00810000  00810000  00003f44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005c  00000000  00000000  00003f90  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  00003fec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003c3d  00000000  00000000  00004154  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001045  00000000  00000000  00007d91  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dda  00000000  00000000  00008dd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000af0  00000000  00000000  00009bb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a6c  00000000  00000000  0000a6a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000035cb  00000000  00000000  0000b10c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  0000e6d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 03 02 	jmp	0x406	; 0x406 <__ctors_end>
       4:	0c 94 20 02 	jmp	0x440	; 0x440 <__bad_interrupt>
       8:	0c 94 20 02 	jmp	0x440	; 0x440 <__bad_interrupt>
       c:	0c 94 20 02 	jmp	0x440	; 0x440 <__bad_interrupt>
      10:	0c 94 20 02 	jmp	0x440	; 0x440 <__bad_interrupt>
      14:	0c 94 20 02 	jmp	0x440	; 0x440 <__bad_interrupt>
      18:	0c 94 20 02 	jmp	0x440	; 0x440 <__bad_interrupt>
      1c:	0c 94 20 02 	jmp	0x440	; 0x440 <__bad_interrupt>
      20:	0c 94 20 02 	jmp	0x440	; 0x440 <__bad_interrupt>
      24:	0c 94 20 02 	jmp	0x440	; 0x440 <__bad_interrupt>
      28:	0c 94 20 02 	jmp	0x440	; 0x440 <__bad_interrupt>
      2c:	0c 94 22 02 	jmp	0x444	; 0x444 <__vector_11>
      30:	0c 94 20 02 	jmp	0x440	; 0x440 <__bad_interrupt>
      34:	0c 94 20 02 	jmp	0x440	; 0x440 <__bad_interrupt>
      38:	0c 94 20 02 	jmp	0x440	; 0x440 <__bad_interrupt>
      3c:	0c 94 20 02 	jmp	0x440	; 0x440 <__bad_interrupt>
      40:	0c 94 20 02 	jmp	0x440	; 0x440 <__bad_interrupt>
      44:	0c 94 20 02 	jmp	0x440	; 0x440 <__bad_interrupt>
      48:	0c 94 58 09 	jmp	0x12b0	; 0x12b0 <__vector_18>
      4c:	0c 94 86 09 	jmp	0x130c	; 0x130c <__vector_19>
      50:	0c 94 20 02 	jmp	0x440	; 0x440 <__bad_interrupt>
      54:	0c 94 20 02 	jmp	0x440	; 0x440 <__bad_interrupt>
      58:	0c 94 20 02 	jmp	0x440	; 0x440 <__bad_interrupt>
      5c:	0c 94 20 02 	jmp	0x440	; 0x440 <__bad_interrupt>
      60:	0c 94 20 02 	jmp	0x440	; 0x440 <__bad_interrupt>
      64:	0c 94 20 02 	jmp	0x440	; 0x440 <__bad_interrupt>
      68:	07 63       	ori	r16, 0x37	; 55
      6a:	42 36       	cpi	r20, 0x62	; 98
      6c:	b7 9b       	sbis	0x16, 7	; 22
      6e:	d8 a7       	std	Y+40, r29	; 0x28
      70:	1a 39       	cpi	r17, 0x9A	; 154
      72:	68 56       	subi	r22, 0x68	; 104
      74:	18 ae       	std	Y+56, r1	; 0x38
      76:	ba ab       	std	Y+50, r27	; 0x32
      78:	55 8c       	ldd	r5, Z+29	; 0x1d
      7a:	1d 3c       	cpi	r17, 0xCD	; 205
      7c:	b7 cc       	rjmp	.-1682   	; 0xfffff9ec <__eeprom_end+0xff7ef9a0>
      7e:	57 63       	ori	r21, 0x37	; 55
      80:	bd 6d       	ori	r27, 0xDD	; 221
      82:	ed fd       	.word	0xfded	; ????
      84:	75 3e       	cpi	r23, 0xE5	; 229
      86:	f6 17       	cp	r31, r22
      88:	72 31       	cpi	r23, 0x12	; 18
      8a:	bf 00       	.word	0x00bf	; ????
      8c:	00 00       	nop
      8e:	80 3f       	cpi	r24, 0xF0	; 240
      90:	08 00       	.word	0x0008	; ????
      92:	00 00       	nop
      94:	be 92       	st	-X, r11
      96:	24 49       	sbci	r18, 0x94	; 148
      98:	12 3e       	cpi	r17, 0xE2	; 226
      9a:	ab aa       	std	Y+51, r10	; 0x33
      9c:	aa 2a       	or	r10, r26
      9e:	be cd       	rjmp	.-1156   	; 0xfffffc1c <__eeprom_end+0xff7efbd0>
      a0:	cc cc       	rjmp	.-1640   	; 0xfffffa3a <__eeprom_end+0xff7ef9ee>
      a2:	4c 3e       	cpi	r20, 0xEC	; 236
      a4:	00 00       	nop
      a6:	00 80       	ld	r0, Z
      a8:	be ab       	std	Y+54, r27	; 0x36
      aa:	aa aa       	std	Y+50, r10	; 0x32
      ac:	aa 3e       	cpi	r26, 0xEA	; 234
      ae:	00 00       	nop
      b0:	00 00       	nop
      b2:	bf 00       	.word	0x00bf	; ????
      b4:	00 00       	nop
      b6:	80 3f       	cpi	r24, 0xF0	; 240
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	00 08       	sbc	r0, r0
      be:	41 78       	andi	r20, 0x81	; 129
      c0:	d3 bb       	out	0x13, r29	; 19
      c2:	43 87       	std	Z+11, r20	; 0x0b
      c4:	d1 13       	cpse	r29, r17
      c6:	3d 19       	sub	r19, r13
      c8:	0e 3c       	cpi	r16, 0xCE	; 206
      ca:	c3 bd       	out	0x23, r28	; 35
      cc:	42 82       	std	Z+2, r4	; 0x02
      ce:	ad 2b       	or	r26, r29
      d0:	3e 68       	ori	r19, 0x8E	; 142
      d2:	ec 82       	std	Y+4, r14	; 0x04
      d4:	76 be       	out	0x36, r7	; 54
      d6:	d9 8f       	std	Y+25, r29	; 0x19
      d8:	e1 a9       	ldd	r30, Z+49	; 0x31
      da:	3e 4c       	sbci	r19, 0xCE	; 206
      dc:	80 ef       	ldi	r24, 0xF0	; 240
      de:	ff be       	out	0x3f, r15	; 63
      e0:	01 c4       	rjmp	.+2050   	; 0x8e4 <display_temperatures+0x2ca>
      e2:	ff 7f       	andi	r31, 0xFF	; 255
      e4:	3f 00       	.word	0x003f	; ????
      e6:	00 00       	nop
	...

000000ea <__trampolines_end>:
      ea:	3f 3a       	cpi	r19, 0xAF	; 175
	...

000000ed <__c.2625>:
      ed:	31 38 42 3a 00                                      18B:.

000000f2 <__c.2623>:
      f2:	31 38 53 3a 00                                      18S:.

000000f7 <__c.2621>:
      f7:	20 20 20 20 20 20 20 00                                    .

000000ff <__c.2619>:
      ff:	2f 42 75 73 00                                      /Bus.

00000104 <__c.2617>:
     104:	44 73 70 00                                         Dsp.

00000108 <__c.2607>:
     108:	28 3f 29 00                                         (?).

0000010c <__c.2605>:
     10c:	28 31 38 42 29 00                                   (18B).

00000112 <__c.2603>:
     112:	28 31 38 53 29 00                                   (18S).

00000118 <__c.2601>:
     118:	20 53 4e 3a 00                                       SN:.

0000011d <__c.2599>:
     11d:	20 43 52 43 3a 00                                    CRC:.

00000123 <__c.2597>:
     123:	46 43 3a 00                                         FC:.

00000127 <__c.2591>:
     127:	53 74 61 72 74 20 6d 65 61 73 2e 20 66 61 69 6c     Start meas. fail
     137:	0d 00                                               ..

00000139 <__c.2579>:
     139:	0d 00                                               ..

0000013b <__c.2569>:
     13b:	68 50 61 00                                         hPa.

0000013f <__c.2567>:
     13f:	20 20 20 20 20 20 20 20 20 20 20 20 00                          .

0000014c <__c.2565>:
     14c:	20 20 20 20 20 20 20 20 20 20 20 20 00                          .

00000159 <__c.2563>:
     159:	20 20 20 20 20 20 20 20 20 20 20 20 00                          .

00000166 <__c.2552>:
     166:	0d 00                                               ..

00000168 <__c.2547>:
     168:	43 52 43 20 66 61 69 6c 65 64 20 2d 20 69 67 6e     CRC failed - ign
     178:	6f 72 69 6e 67 20 73 65 6e 73 6f 72 3a 20 00        oring sensor: .

00000187 <__c.2539>:
     187:	42 75 73 20 45 72 72 6f 72 0d 00                    Bus Error..

00000192 <__c.2537>:
     192:	42 75 73 20 45 72 72 6f 72 00                       Bus Error.

0000019c <__c.2534>:
     19c:	4e 6f 20 6f 77 20 53 65 6e 73 6f 72 73 20 66 6f     No ow Sensors fo
     1ac:	75 6e 64 0d 00                                      und..

000001b1 <__c.2532>:
     1b1:	4e 6f 20 6f 77 20 53 65 6e 73 6f 72 73 20 66 6f     No ow Sensors fo
     1c1:	75 6e 64 00                                         und.

000001c5 <__c.2504>:
     1c5:	4c 43 44 20 62 72 69 67 68 74 6e 65 73 73 0a 00     LCD brightness..

000001d5 <__c.2476>:
     1d5:	4c 6f 67 67 69 6e 67 20 69 6e 74 65 72 76 61 6c     Logging interval
     1e5:	0a 00                                               ..

000001e7 <__c.2449>:
     1e7:	31 57 69 72 65 20 64 69 73 70 6c 61 79 20 6f 72     1Wire display or
     1f7:	64 65 72 00                                         der.

000001fb <__c.2447>:
     1fb:	77 72 69 74 65 20 74 6f 20 45 45 50 52 4f 4d 00     write to EEPROM.

0000020b <__c.2444>:
     20b:	0d 0d 00                                            ...

0000020e <__c.2439>:
     20e:	0d 00                                               ..

00000210 <__c.2437>:
     210:	20 3d 20 00                                          = .

00000214 <__c.2435>:
     214:	44 53 31 38 42 32 30 00                             DS18B20.

0000021c <__c.2433>:
     21c:	44 53 31 38 53 32 30 2f 44 53 31 38 32 30 00        DS18S20/DS1820.

0000022b <__c.2431>:
     22b:	20 69 73 20 61 20 00                                 is a .

00000232 <__c.2429>:
     232:	20 2f 20 42 75 73 00                                 / Bus.

00000239 <__c.2427>:
     239:	53 65 6e 73 6f 72 20 44 69 73 70 6c 61 79 00        Sensor Display.

00000248 <__c.2425>:
     248:	0d 0d 00                                            ...

0000024b <__c.2414>:
     24b:	70 72 65 73 73 20 4d 4f 44 45 20 74 6f 20 6f 74     press MODE to ot
     25b:	68 65 72 00                                         her.

0000025f <__c.2412>:
     25f:	20 74 6f 20 73 74 61 72 74 0a 0a 00                  to start...

0000026b <__c.2410>:
     26b:	20 6f 72 20 00                                       or .

00000270 <__c.2408>:
     270:	53 74 61 72 74 20 4c 6f 67 67 69 6e 67 3f 0a 00     Start Logging?..

00000280 <__c.2383>:
     280:	20 44 53 31 38 58 32 30 20 53 65 6e 73 6f 72 28      DS18X20 Sensor(
     290:	73 29 20 61 76 61 69 6c 61 62 6c 65 0d 00           s) available..

0000029e <__c.2381>:
     29e:	20 53 65 6e 73 6f 72 28 73 29 00                     Sensor(s).

000002a9 <__c.2379>:
     2a9:	4e 6f 20 53 65 6e 73 6f 72 73 20 46 6f 75 6e 64     No Sensors Found
	...

000002ba <__c.2377>:
     2ba:	4e 6f 20 44 53 20 53 65 6e 73 6f 72 73 20 46 6f     No DS Sensors Fo
     2ca:	75 6e 64 00                                         und.

000002ce <__c.2375>:
     2ce:	44 53 31 38 78 32 30 20 4c 6f 67 67 65 72 20 76     DS18x20 Logger v
     2de:	31 2e 30 31 00                                      1.01.

000002e3 <__c.2373>:
     2e3:	44 53 31 38 32 30 20 4c 6f 67 67 65 72 20 76 31     DS1820 Logger v1
     2f3:	2e 30 31 2e 31 31 34 0d 00                          .01.114..

000002fc <lcdChars>:
     2fc:	04 04 04 04 15 1f 0e 04 04 0e 1f 15 04 04 04 04     ................
     30c:	00 40 7a 10 f3 5a 00 a0 72 4e 18 09 00 10 a5 d4     .@z..Z..rN......
     31c:	e8 00 00 e8 76 48 17 00 00 e4 0b 54 02 00 00 ca     ....vH.....T....
     32c:	9a 3b 00 00 00 e1 f5 05 00 00 80 96 98 00 00 00     .;..............
     33c:	40 42 0f 00 00 00 a0 86 01 00 00 00 10 27 00 00     @B...........'..
     34c:	00 00 e8 03 00 00 00 00 64 00 00 00 00 00 0a 00     ........d.......
     35c:	00 00 00 00 01 00 00 00 00 00 2c 76 d8 88 dc 67     ..........,v...g
     36c:	4f 08 23 df c1 df ae 59 e1 b1 b7 96 e5 e3 e4 53     O.#....Y.......S
     37c:	c6 3a e6 51 99 76 96 e8 e6 c2 84 26 eb 89 8c 9b     .:.Q.v.....&....
     38c:	62 ed 40 7c 6f fc ef bc 9c 9f 40 f2 ba a5 6f a5     b.@|o.....@...o.
     39c:	f4 90 05 5a 2a f7 5c 93 6b 6c f9 67 6d c1 1b fc     ...Z*.\.kl.gm...
     3ac:	e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed 90 2e 03 00     ...G.. .........
     3bc:	94 35 77 05 00 80 84 1e 08 00 00 20 4e 0a 00 00     .5w........ N...
     3cc:	00 c8 0c 33 33 33 33 0f 98 6e 12 83 11 41 ef 8d     ...3333..n...A..
     3dc:	21 14 89 3b e6 55 16 cf fe e6 db 18 d1 84 4b 38     !..;.U........K8
     3ec:	1b f7 7c 1d 90 1d a4 bb e4 24 20 32 84 72 5e 22     ..|......$ 2.r^"
     3fc:	81 00 c9 f1 24 ec a1 e5 3d 27                       ....$...='

00000406 <__ctors_end>:
     406:	11 24       	eor	r1, r1
     408:	1f be       	out	0x3f, r1	; 63
     40a:	cf ef       	ldi	r28, 0xFF	; 255
     40c:	d4 e0       	ldi	r29, 0x04	; 4
     40e:	de bf       	out	0x3e, r29	; 62
     410:	cd bf       	out	0x3d, r28	; 61

00000412 <__do_copy_data>:
     412:	11 e0       	ldi	r17, 0x01	; 1
     414:	a0 e0       	ldi	r26, 0x00	; 0
     416:	b1 e0       	ldi	r27, 0x01	; 1
     418:	e8 e9       	ldi	r30, 0x98	; 152
     41a:	fd e3       	ldi	r31, 0x3D	; 61
     41c:	02 c0       	rjmp	.+4      	; 0x422 <__do_copy_data+0x10>
     41e:	05 90       	lpm	r0, Z+
     420:	0d 92       	st	X+, r0
     422:	a8 3f       	cpi	r26, 0xF8	; 248
     424:	b1 07       	cpc	r27, r17
     426:	d9 f7       	brne	.-10     	; 0x41e <__do_copy_data+0xc>

00000428 <__do_clear_bss>:
     428:	23 e0       	ldi	r18, 0x03	; 3
     42a:	a8 ef       	ldi	r26, 0xF8	; 248
     42c:	b1 e0       	ldi	r27, 0x01	; 1
     42e:	01 c0       	rjmp	.+2      	; 0x432 <.do_clear_bss_start>

00000430 <.do_clear_bss_loop>:
     430:	1d 92       	st	X+, r1

00000432 <.do_clear_bss_start>:
     432:	a9 35       	cpi	r26, 0x59	; 89
     434:	b2 07       	cpc	r27, r18
     436:	e1 f7       	brne	.-8      	; 0x430 <.do_clear_bss_loop>
     438:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <main>
     43c:	0c 94 ca 1e 	jmp	0x3d94	; 0x3d94 <_exit>

00000440 <__bad_interrupt>:
     440:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000444 <__vector_11>:
 *                                                                                      *
 ***************************************************************************************/

// service routine should occur every 1/TMR_TICK seconds.
ISR( TIMER1_COMPA_vect)
{
     444:	1f 92       	push	r1
     446:	0f 92       	push	r0
     448:	0f b6       	in	r0, 0x3f	; 63
     44a:	0f 92       	push	r0
     44c:	11 24       	eor	r1, r1
     44e:	8f 93       	push	r24
     450:	9f 93       	push	r25
     452:	af 93       	push	r26
     454:	bf 93       	push	r27
	static uint8_t second_counter;	// second_counter == TMR_TICK = 1 second
//static uint8_t tcounter = 0; // pocita interval
	// increment the counters
	if( ++second_counter >= TMR_TICK)	// one second elapsed?
     456:	80 91 f8 01 	lds	r24, 0x01F8
     45a:	8f 5f       	subi	r24, 0xFF	; 255
     45c:	80 93 f8 01 	sts	0x01F8, r24
     460:	88 3c       	cpi	r24, 0xC8	; 200
     462:	10 f1       	brcs	.+68     	; 0x4a8 <__vector_11+0x64>
	{
		gElapsed++;
     464:	80 91 f9 01 	lds	r24, 0x01F9
     468:	90 91 fa 01 	lds	r25, 0x01FA
     46c:	01 96       	adiw	r24, 0x01	; 1
     46e:	90 93 fa 01 	sts	0x01FA, r25
     472:	80 93 f9 01 	sts	0x01F9, r24
		second_counter = 0;
     476:	10 92 f8 01 	sts	0x01F8, r1
		//tcounter++;
		//if (tcounter >= 60)
		//	{tcounter = 0; // nulovanie pocitadla po 1 min
		//	min_counter++;
		//	}
		if( gRTC_status == 0) gRTC_clk++;
     47a:	80 91 ff 01 	lds	r24, 0x01FF
     47e:	81 11       	cpse	r24, r1
     480:	13 c0       	rjmp	.+38     	; 0x4a8 <__vector_11+0x64>
     482:	80 91 fb 01 	lds	r24, 0x01FB
     486:	90 91 fc 01 	lds	r25, 0x01FC
     48a:	a0 91 fd 01 	lds	r26, 0x01FD
     48e:	b0 91 fe 01 	lds	r27, 0x01FE
     492:	01 96       	adiw	r24, 0x01	; 1
     494:	a1 1d       	adc	r26, r1
     496:	b1 1d       	adc	r27, r1
     498:	80 93 fb 01 	sts	0x01FB, r24
     49c:	90 93 fc 01 	sts	0x01FC, r25
     4a0:	a0 93 fd 01 	sts	0x01FD, r26
     4a4:	b0 93 fe 01 	sts	0x01FE, r27
	}
}
     4a8:	bf 91       	pop	r27
     4aa:	af 91       	pop	r26
     4ac:	9f 91       	pop	r25
     4ae:	8f 91       	pop	r24
     4b0:	0f 90       	pop	r0
     4b2:	0f be       	out	0x3f, r0	; 63
     4b4:	0f 90       	pop	r0
     4b6:	1f 90       	pop	r1
     4b8:	18 95       	reti

000004ba <onewire_search>:
/********************************************************/
// search 1-wire bus for active devices
uint8_t onewire_search( void)
{
     4ba:	cf 92       	push	r12
     4bc:	df 92       	push	r13
     4be:	ef 92       	push	r14
     4c0:	ff 92       	push	r15
     4c2:	0f 93       	push	r16
     4c4:	1f 93       	push	r17
     4c6:	cf 93       	push	r28
     4c8:	df 93       	push	r29
     4ca:	cd b7       	in	r28, 0x3d	; 61
     4cc:	de b7       	in	r29, 0x3e	; 62
     4ce:	28 97       	sbiw	r28, 0x08	; 8
     4d0:	0f b6       	in	r0, 0x3f	; 63
     4d2:	f8 94       	cli
     4d4:	de bf       	out	0x3e, r29	; 62
     4d6:	0f be       	out	0x3f, r0	; 63
     4d8:	cd bf       	out	0x3d, r28	; 61
	uint8_t i, diff, num_sensors;
	uint8_t id[OWI_ROMCODE_SIZE];
	
	num_sensors = 0;
     4da:	d1 2c       	mov	r13, r1
	
	for( diff = OWI_SEARCH_FIRST; 
     4dc:	cc 24       	eor	r12, r12
     4de:	ca 94       	dec	r12
     4e0:	7e 01       	movw	r14, r28
     4e2:	89 e0       	ldi	r24, 0x09	; 9
     4e4:	e8 0e       	add	r14, r24
     4e6:	f1 1c       	adc	r15, r1
			diff != OWI_LAST_DEVICE && num_sensors < MAX_SENSORS ;)
	{
		diff = owi_search( diff, &id[0], OWI_SEARCH_ROM);	// search all sensors
     4e8:	40 ef       	ldi	r20, 0xF0	; 240
     4ea:	be 01       	movw	r22, r28
     4ec:	6f 5f       	subi	r22, 0xFF	; 255
     4ee:	7f 4f       	sbci	r23, 0xFF	; 255
     4f0:	8c 2d       	mov	r24, r12
     4f2:	0e 94 82 08 	call	0x1104	; 0x1104 <owi_search>
     4f6:	c8 2e       	mov	r12, r24
		
		if( diff == OWI_PRESENCE_ERROR)
     4f8:	ee ef       	ldi	r30, 0xFE	; 254
     4fa:	8e 13       	cpse	r24, r30
     4fc:	0b c0       	rjmp	.+22     	; 0x514 <__stack+0x15>
		{
			lcd_gotoxy(0,1);
     4fe:	61 e0       	ldi	r22, 0x01	; 1
     500:	80 e0       	ldi	r24, 0x00	; 0
     502:	0e 94 98 07 	call	0xf30	; 0xf30 <lcd_gotoxy>
			lcd_puts_P( "No ow Sensors found");
     506:	81 eb       	ldi	r24, 0xB1	; 177
     508:	91 e0       	ldi	r25, 0x01	; 1
     50a:	0e 94 dd 07 	call	0xfba	; 0xfba <lcd_puts_p>
			uart_puts_P( "No ow Sensors found\r"); 	
     50e:	8c e9       	ldi	r24, 0x9C	; 156
     510:	91 e0       	ldi	r25, 0x01	; 1
     512:	0d c0       	rjmp	.+26     	; 0x52e <__stack+0x2f>
			break;
		}
		else if( diff == OWI_DATA_ERR)
     514:	fd ef       	ldi	r31, 0xFD	; 253
     516:	8f 13       	cpse	r24, r31
     518:	0d c0       	rjmp	.+26     	; 0x534 <__stack+0x35>
		{
			lcd_gotoxy(0,1);
     51a:	61 e0       	ldi	r22, 0x01	; 1
     51c:	80 e0       	ldi	r24, 0x00	; 0
     51e:	0e 94 98 07 	call	0xf30	; 0xf30 <lcd_gotoxy>
			lcd_puts_P( "Bus Error");
     522:	82 e9       	ldi	r24, 0x92	; 146
     524:	91 e0       	ldi	r25, 0x01	; 1
     526:	0e 94 dd 07 	call	0xfba	; 0xfba <lcd_puts_p>
			uart_puts_P( "Bus Error\r"); 	
     52a:	87 e8       	ldi	r24, 0x87	; 135
     52c:	91 e0       	ldi	r25, 0x01	; 1
     52e:	0e 94 08 0a 	call	0x1410	; 0x1410 <uart_puts_p>
			break;
     532:	63 c0       	rjmp	.+198    	; 0x5fa <__stack+0xfb>
		}
		else if( ! crc8( id, OWI_ROMCODE_SIZE))	// is it a valid id?
     534:	68 e0       	ldi	r22, 0x08	; 8
     536:	ce 01       	movw	r24, r28
     538:	01 96       	adiw	r24, 0x01	; 1
     53a:	0e 94 0a 06 	call	0xc14	; 0xc14 <crc8>
     53e:	81 11       	cpse	r24, r1
     540:	43 c0       	rjmp	.+134    	; 0x5c8 <__stack+0xc9>
		{
			if( OWI_FAMILY( id[0]) == DS18B20_FAMILY_CODE || OWI_FAMILY( id[0]) == DS18S20_FAMILY_CODE)
     542:	89 81       	ldd	r24, Y+1	; 0x01
     544:	8f 77       	andi	r24, 0x7F	; 127
     546:	88 32       	cpi	r24, 0x28	; 40
     548:	11 f0       	breq	.+4      	; 0x54e <__stack+0x4f>
     54a:	80 31       	cpi	r24, 0x10	; 16
     54c:	b1 f4       	brne	.+44     	; 0x57a <__stack+0x7b>
     54e:	fe 01       	movw	r30, r28
     550:	31 96       	adiw	r30, 0x01	; 1
     552:	88 e0       	ldi	r24, 0x08	; 8
     554:	d8 9e       	mul	r13, r24
     556:	a0 01       	movw	r20, r0
     558:	11 24       	eor	r1, r1
     55a:	43 50       	subi	r20, 0x03	; 3
     55c:	5d 4f       	sbci	r21, 0xFD	; 253
	uint8_t i, diff, num_sensors;
	uint8_t id[OWI_ROMCODE_SIZE];
	
	num_sensors = 0;
	
	for( diff = OWI_SEARCH_FIRST; 
     55e:	20 e0       	ldi	r18, 0x00	; 0
     560:	30 e0       	ldi	r19, 0x00	; 0
		else if( ! crc8( id, OWI_ROMCODE_SIZE))	// is it a valid id?
		{
			if( OWI_FAMILY( id[0]) == DS18B20_FAMILY_CODE || OWI_FAMILY( id[0]) == DS18S20_FAMILY_CODE)
			{
				for( i = 0; i < OWI_ROMCODE_SIZE; i++)
					gSensorIDs[num_sensors][i] = id[i];
     562:	81 91       	ld	r24, Z+
     564:	da 01       	movw	r26, r20
     566:	a2 0f       	add	r26, r18
     568:	b3 1f       	adc	r27, r19
     56a:	8c 93       	st	X, r24
     56c:	2f 5f       	subi	r18, 0xFF	; 255
     56e:	3f 4f       	sbci	r19, 0xFF	; 255
		}
		else if( ! crc8( id, OWI_ROMCODE_SIZE))	// is it a valid id?
		{
			if( OWI_FAMILY( id[0]) == DS18B20_FAMILY_CODE || OWI_FAMILY( id[0]) == DS18S20_FAMILY_CODE)
			{
				for( i = 0; i < OWI_ROMCODE_SIZE; i++)
     570:	28 30       	cpi	r18, 0x08	; 8
     572:	31 05       	cpc	r19, r1
     574:	b1 f7       	brne	.-20     	; 0x562 <__stack+0x63>
					gSensorIDs[num_sensors][i] = id[i];
				num_sensors++;
     576:	d3 94       	inc	r13
     578:	3a c0       	rjmp	.+116    	; 0x5ee <__stack+0xef>
			}
			else if( OWI_FAMILY( id[0]) == DS2415_FAMILY_CODE)
     57a:	84 32       	cpi	r24, 0x24	; 36
     57c:	c1 f5       	brne	.+112    	; 0x5ee <__stack+0xef>
     57e:	fe 01       	movw	r30, r28
     580:	31 96       	adiw	r30, 0x01	; 1
     582:	a3 ec       	ldi	r26, 0xC3	; 195
     584:	b2 e0       	ldi	r27, 0x02	; 2
			{
				for( i = 0; i < OWI_ROMCODE_SIZE; i++)
					gRTC_ID[i] = id[i];
     586:	81 91       	ld	r24, Z+
     588:	8d 93       	st	X+, r24
					gSensorIDs[num_sensors][i] = id[i];
				num_sensors++;
			}
			else if( OWI_FAMILY( id[0]) == DS2415_FAMILY_CODE)
			{
				for( i = 0; i < OWI_ROMCODE_SIZE; i++)
     58a:	ee 15       	cp	r30, r14
     58c:	ff 05       	cpc	r31, r15
     58e:	d9 f7       	brne	.-10     	; 0x586 <__stack+0x87>
					gRTC_ID[i] = id[i];

				// make sure the RTC oscillator is turned on
				if( DS2415_read_clock( &gRTC_status, &gRTC_clk, id) == DS2415_CLOCK_OK)
     590:	ae 01       	movw	r20, r28
     592:	4f 5f       	subi	r20, 0xFF	; 255
     594:	5f 4f       	sbci	r21, 0xFF	; 255
     596:	6b ef       	ldi	r22, 0xFB	; 251
     598:	71 e0       	ldi	r23, 0x01	; 1
     59a:	8f ef       	ldi	r24, 0xFF	; 255
     59c:	91 e0       	ldi	r25, 0x01	; 1
     59e:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <DS2415_read_clock>
     5a2:	81 11       	cpse	r24, r1
     5a4:	24 c0       	rjmp	.+72     	; 0x5ee <__stack+0xef>
				{
					DS2415_write_clock( DS2415_OSC_ON( gRTC_status), gRTC_clk, id);
     5a6:	40 91 fb 01 	lds	r20, 0x01FB
     5aa:	50 91 fc 01 	lds	r21, 0x01FC
     5ae:	60 91 fd 01 	lds	r22, 0x01FD
     5b2:	70 91 fe 01 	lds	r23, 0x01FE
     5b6:	80 91 ff 01 	lds	r24, 0x01FF
     5ba:	9e 01       	movw	r18, r28
     5bc:	2f 5f       	subi	r18, 0xFF	; 255
     5be:	3f 4f       	sbci	r19, 0xFF	; 255
     5c0:	8c 60       	ori	r24, 0x0C	; 12
     5c2:	0e 94 45 0a 	call	0x148a	; 0x148a <DS2415_write_clock>
     5c6:	13 c0       	rjmp	.+38     	; 0x5ee <__stack+0xef>
			}
		}
		else
		{
			// id failed CRC check
			uart_puts_P( "CRC failed - ignoring sensor: "); 	
     5c8:	88 e6       	ldi	r24, 0x68	; 104
     5ca:	91 e0       	ldi	r25, 0x01	; 1
     5cc:	0e 94 08 0a 	call	0x1410	; 0x1410 <uart_puts_p>
     5d0:	8e 01       	movw	r16, r28
     5d2:	0f 5f       	subi	r16, 0xFF	; 255
     5d4:	1f 4f       	sbci	r17, 0xFF	; 255
			for( i = 0; i < OWI_ROMCODE_SIZE; i++)
				uart_puthex_byte( id[i]);
     5d6:	f8 01       	movw	r30, r16
     5d8:	81 91       	ld	r24, Z+
     5da:	8f 01       	movw	r16, r30
     5dc:	0e 94 3b 0a 	call	0x1476	; 0x1476 <uart_puthex_byte>
		}
		else
		{
			// id failed CRC check
			uart_puts_P( "CRC failed - ignoring sensor: "); 	
			for( i = 0; i < OWI_ROMCODE_SIZE; i++)
     5e0:	0e 15       	cp	r16, r14
     5e2:	1f 05       	cpc	r17, r15
     5e4:	c1 f7       	brne	.-16     	; 0x5d6 <__stack+0xd7>
				uart_puthex_byte( id[i]);
			uart_puts_P( "\r"); 	
     5e6:	86 e6       	ldi	r24, 0x66	; 102
     5e8:	91 e0       	ldi	r25, 0x01	; 1
     5ea:	0e 94 08 0a 	call	0x1410	; 0x1410 <uart_puts_p>
	uint8_t i, diff, num_sensors;
	uint8_t id[OWI_ROMCODE_SIZE];
	
	num_sensors = 0;
	
	for( diff = OWI_SEARCH_FIRST; 
     5ee:	cc 20       	and	r12, r12
     5f0:	21 f0       	breq	.+8      	; 0x5fa <__stack+0xfb>
			diff != OWI_LAST_DEVICE && num_sensors < MAX_SENSORS ;)
     5f2:	f7 e0       	ldi	r31, 0x07	; 7
     5f4:	fd 15       	cp	r31, r13
     5f6:	08 f0       	brcs	.+2      	; 0x5fa <__stack+0xfb>
     5f8:	77 cf       	rjmp	.-274    	; 0x4e8 <onewire_search+0x2e>
				uart_puthex_byte( id[i]);
			uart_puts_P( "\r"); 	
		}
	}
	return num_sensors;
}
     5fa:	8d 2d       	mov	r24, r13
     5fc:	28 96       	adiw	r28, 0x08	; 8
     5fe:	0f b6       	in	r0, 0x3f	; 63
     600:	f8 94       	cli
     602:	de bf       	out	0x3e, r29	; 62
     604:	0f be       	out	0x3f, r0	; 63
     606:	cd bf       	out	0x3d, r28	; 61
     608:	df 91       	pop	r29
     60a:	cf 91       	pop	r28
     60c:	1f 91       	pop	r17
     60e:	0f 91       	pop	r16
     610:	ff 90       	pop	r15
     612:	ef 90       	pop	r14
     614:	df 90       	pop	r13
     616:	cf 90       	pop	r12
     618:	08 95       	ret

0000061a <display_temperatures>:
/************************************************************/
// display one page of most recent temperature data on lcd
void display_temperatures( uint8_t num_sensors, uint8_t page)
{
     61a:	cf 92       	push	r12
     61c:	df 92       	push	r13
     61e:	ef 92       	push	r14
     620:	ff 92       	push	r15
     622:	0f 93       	push	r16
     624:	1f 93       	push	r17
     626:	cf 93       	push	r28
     628:	df 93       	push	r29
     62a:	c8 2e       	mov	r12, r24
     62c:	c6 2f       	mov	r28, r22
	int *pom1 = &gReadings[0];
	int *pom2 = &gReadings_old[0];
	//int *pom1;
	// should always have at least one sensor on a page
	//temperature = ( gReadings[device] / 10 );
	lcd_home();
     62e:	0e 94 ae 07 	call	0xf5c	; 0xf5c <lcd_home>
	device = g1Wire_order[page];
     632:	0c 2f       	mov	r16, r28
     634:	10 e0       	ldi	r17, 0x00	; 0
     636:	f8 01       	movw	r30, r16
     638:	e7 51       	subi	r30, 0x17	; 23
     63a:	fd 4f       	sbci	r31, 0xFD	; 253
     63c:	e0 81       	ld	r30, Z
	//*pom1 = &gReadings[0];
	//podmienka so zobrazenim sipky hore/dole/rovno -kod podla displeja C5hore/C6dole/C7rovno, pre vonkajsiu teplotu
			if( ( ( pom1[0] ) < ( pom2[0]) ) && ((pom2[0]-pom1[0]) > HYSTER) )
     63e:	40 91 3f 03 	lds	r20, 0x033F
     642:	50 91 40 03 	lds	r21, 0x0340
     646:	20 91 99 02 	lds	r18, 0x0299
     64a:	30 91 9a 02 	lds	r19, 0x029A
     64e:	f0 e0       	ldi	r31, 0x00	; 0
     650:	42 17       	cp	r20, r18
     652:	53 07       	cpc	r21, r19
     654:	74 f5       	brge	.+92     	; 0x6b2 <display_temperatures+0x98>
     656:	24 1b       	sub	r18, r20
     658:	35 0b       	sbc	r19, r21
     65a:	2b 30       	cpi	r18, 0x0B	; 11
     65c:	31 05       	cpc	r19, r1
     65e:	0c f4       	brge	.+2      	; 0x662 <display_temperatures+0x48>
     660:	58 c0       	rjmp	.+176    	; 0x712 <display_temperatures+0xf8>
				{sprintf( gBuffer, "%02i#Out %+04i.%c\xC6\n",(int)page, gReadings[device] / 10,(gReadings[device] % 10) + '0');
     662:	ee 0f       	add	r30, r30
     664:	ff 1f       	adc	r31, r31
     666:	e1 5c       	subi	r30, 0xC1	; 193
     668:	fc 4f       	sbci	r31, 0xFC	; 252
     66a:	80 81       	ld	r24, Z
     66c:	91 81       	ldd	r25, Z+1	; 0x01
     66e:	6a e0       	ldi	r22, 0x0A	; 10
     670:	70 e0       	ldi	r23, 0x00	; 0
     672:	0e 94 28 15 	call	0x2a50	; 0x2a50 <__divmodhi4>
     676:	c0 96       	adiw	r24, 0x30	; 48
     678:	9f 93       	push	r25
     67a:	8f 93       	push	r24
     67c:	7f 93       	push	r23
     67e:	6f 93       	push	r22
     680:	1f 92       	push	r1
     682:	cf 93       	push	r28
     684:	82 e2       	ldi	r24, 0x22	; 34
     686:	91 e0       	ldi	r25, 0x01	; 1
     688:	9f 93       	push	r25
     68a:	8f 93       	push	r24
     68c:	8c ea       	ldi	r24, 0xAC	; 172
     68e:	92 e0       	ldi	r25, 0x02	; 2
     690:	9f 93       	push	r25
     692:	8f 93       	push	r24
     694:	0e 94 58 19 	call	0x32b0	; 0x32b0 <sprintf>
				lcd_puts( gBuffer);
     698:	8c ea       	ldi	r24, 0xAC	; 172
     69a:	92 e0       	ldi	r25, 0x02	; 2
     69c:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <lcd_puts>
     6a0:	8d b7       	in	r24, 0x3d	; 61
     6a2:	9e b7       	in	r25, 0x3e	; 62
     6a4:	0a 96       	adiw	r24, 0x0a	; 10
     6a6:	0f b6       	in	r0, 0x3f	; 63
     6a8:	f8 94       	cli
     6aa:	9e bf       	out	0x3e, r25	; 62
     6ac:	0f be       	out	0x3f, r0	; 63
     6ae:	8d bf       	out	0x3d, r24	; 61
     6b0:	57 c0       	rjmp	.+174    	; 0x760 <display_temperatures+0x146>
				}
			else if( ( ( pom1[0] ) > ( pom2[0]) ) && ((pom1[0]-pom2[0]) > HYSTER) )
     6b2:	24 17       	cp	r18, r20
     6b4:	35 07       	cpc	r19, r21
     6b6:	6c f5       	brge	.+90     	; 0x712 <display_temperatures+0xf8>
     6b8:	42 1b       	sub	r20, r18
     6ba:	53 0b       	sbc	r21, r19
     6bc:	4b 30       	cpi	r20, 0x0B	; 11
     6be:	51 05       	cpc	r21, r1
     6c0:	44 f1       	brlt	.+80     	; 0x712 <display_temperatures+0xf8>
				{sprintf( gBuffer, "%02i#Out %+04i.%c\xC5\n",(int)page, gReadings[device] / 10,(gReadings[device] % 10) + '0');
     6c2:	ee 0f       	add	r30, r30
     6c4:	ff 1f       	adc	r31, r31
     6c6:	e1 5c       	subi	r30, 0xC1	; 193
     6c8:	fc 4f       	sbci	r31, 0xFC	; 252
     6ca:	80 81       	ld	r24, Z
     6cc:	91 81       	ldd	r25, Z+1	; 0x01
     6ce:	6a e0       	ldi	r22, 0x0A	; 10
     6d0:	70 e0       	ldi	r23, 0x00	; 0
     6d2:	0e 94 28 15 	call	0x2a50	; 0x2a50 <__divmodhi4>
     6d6:	c0 96       	adiw	r24, 0x30	; 48
     6d8:	9f 93       	push	r25
     6da:	8f 93       	push	r24
     6dc:	7f 93       	push	r23
     6de:	6f 93       	push	r22
     6e0:	1f 92       	push	r1
     6e2:	cf 93       	push	r28
     6e4:	86 e3       	ldi	r24, 0x36	; 54
     6e6:	91 e0       	ldi	r25, 0x01	; 1
     6e8:	9f 93       	push	r25
     6ea:	8f 93       	push	r24
     6ec:	8c ea       	ldi	r24, 0xAC	; 172
     6ee:	92 e0       	ldi	r25, 0x02	; 2
     6f0:	9f 93       	push	r25
     6f2:	8f 93       	push	r24
     6f4:	0e 94 58 19 	call	0x32b0	; 0x32b0 <sprintf>
				lcd_puts( gBuffer);
     6f8:	8c ea       	ldi	r24, 0xAC	; 172
     6fa:	92 e0       	ldi	r25, 0x02	; 2
     6fc:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <lcd_puts>
     700:	8d b7       	in	r24, 0x3d	; 61
     702:	9e b7       	in	r25, 0x3e	; 62
     704:	0a 96       	adiw	r24, 0x0a	; 10
     706:	0f b6       	in	r0, 0x3f	; 63
     708:	f8 94       	cli
     70a:	9e bf       	out	0x3e, r25	; 62
     70c:	0f be       	out	0x3f, r0	; 63
     70e:	8d bf       	out	0x3d, r24	; 61
     710:	27 c0       	rjmp	.+78     	; 0x760 <display_temperatures+0x146>
				}
			else
			{sprintf( gBuffer, "%02i#Out %+04i.%c\xC7\n",(int)page, gReadings[device] / 10,(gReadings[device] % 10) + '0');
     712:	ee 0f       	add	r30, r30
     714:	ff 1f       	adc	r31, r31
     716:	e1 5c       	subi	r30, 0xC1	; 193
     718:	fc 4f       	sbci	r31, 0xFC	; 252
     71a:	80 81       	ld	r24, Z
     71c:	91 81       	ldd	r25, Z+1	; 0x01
     71e:	6a e0       	ldi	r22, 0x0A	; 10
     720:	70 e0       	ldi	r23, 0x00	; 0
     722:	0e 94 28 15 	call	0x2a50	; 0x2a50 <__divmodhi4>
     726:	c0 96       	adiw	r24, 0x30	; 48
     728:	9f 93       	push	r25
     72a:	8f 93       	push	r24
     72c:	7f 93       	push	r23
     72e:	6f 93       	push	r22
     730:	1f 92       	push	r1
     732:	cf 93       	push	r28
     734:	8a e4       	ldi	r24, 0x4A	; 74
     736:	91 e0       	ldi	r25, 0x01	; 1
     738:	9f 93       	push	r25
     73a:	8f 93       	push	r24
     73c:	8c ea       	ldi	r24, 0xAC	; 172
     73e:	92 e0       	ldi	r25, 0x02	; 2
     740:	9f 93       	push	r25
     742:	8f 93       	push	r24
     744:	0e 94 58 19 	call	0x32b0	; 0x32b0 <sprintf>
			lcd_puts( gBuffer);
     748:	8c ea       	ldi	r24, 0xAC	; 172
     74a:	92 e0       	ldi	r25, 0x02	; 2
     74c:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <lcd_puts>
     750:	8d b7       	in	r24, 0x3d	; 61
     752:	9e b7       	in	r25, 0x3e	; 62
     754:	0a 96       	adiw	r24, 0x0a	; 10
     756:	0f b6       	in	r0, 0x3f	; 63
     758:	f8 94       	cli
     75a:	9e bf       	out	0x3e, r25	; 62
     75c:	0f be       	out	0x3f, r0	; 63
     75e:	8d bf       	out	0x3d, r24	; 61
			}
			pom2[0] = pom1[0];
     760:	80 91 3f 03 	lds	r24, 0x033F
     764:	90 91 40 03 	lds	r25, 0x0340
     768:	90 93 9a 02 	sts	0x029A, r25
     76c:	80 93 99 02 	sts	0x0299, r24
			
			//min_counter = 0;
		
			// is there a second sensor to display?
		if( (page + 1) < num_sensors)
     770:	98 01       	movw	r18, r16
     772:	2f 5f       	subi	r18, 0xFF	; 255
     774:	3f 4f       	sbci	r19, 0xFF	; 255
     776:	d1 2c       	mov	r13, r1
     778:	2c 15       	cp	r18, r12
     77a:	3d 05       	cpc	r19, r13
     77c:	0c f0       	brlt	.+2      	; 0x780 <display_temperatures+0x166>
     77e:	90 c0       	rjmp	.+288    	; 0x8a0 <display_temperatures+0x286>
		{
				device = g1Wire_order[page + 1];
     780:	f9 01       	movw	r30, r18
     782:	e7 51       	subi	r30, 0x17	; 23
     784:	fd 4f       	sbci	r31, 0xFD	; 253
				sprintf( gBuffer, "%02i#PmpW%+04i.%c\n",(int)page + 1, gReadings[device] / 10,(gReadings[device] % 10) + '0'); // pumpwell
     786:	e0 81       	ld	r30, Z
     788:	f0 e0       	ldi	r31, 0x00	; 0
     78a:	ee 0f       	add	r30, r30
     78c:	ff 1f       	adc	r31, r31
     78e:	e1 5c       	subi	r30, 0xC1	; 193
     790:	fc 4f       	sbci	r31, 0xFC	; 252
     792:	80 81       	ld	r24, Z
     794:	91 81       	ldd	r25, Z+1	; 0x01
     796:	5a e0       	ldi	r21, 0x0A	; 10
     798:	e5 2e       	mov	r14, r21
     79a:	f1 2c       	mov	r15, r1
     79c:	b7 01       	movw	r22, r14
     79e:	0e 94 28 15 	call	0x2a50	; 0x2a50 <__divmodhi4>
     7a2:	c0 96       	adiw	r24, 0x30	; 48
     7a4:	9f 93       	push	r25
     7a6:	8f 93       	push	r24
     7a8:	7f 93       	push	r23
     7aa:	6f 93       	push	r22
     7ac:	3f 93       	push	r19
     7ae:	2f 93       	push	r18
     7b0:	8e e5       	ldi	r24, 0x5E	; 94
     7b2:	91 e0       	ldi	r25, 0x01	; 1
     7b4:	9f 93       	push	r25
     7b6:	8f 93       	push	r24
     7b8:	cc ea       	ldi	r28, 0xAC	; 172
     7ba:	d2 e0       	ldi	r29, 0x02	; 2
     7bc:	df 93       	push	r29
     7be:	cf 93       	push	r28
     7c0:	0e 94 58 19 	call	0x32b0	; 0x32b0 <sprintf>
				lcd_puts( gBuffer);
     7c4:	ce 01       	movw	r24, r28
     7c6:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <lcd_puts>
				if( (page + 2) < num_sensors)
     7ca:	98 01       	movw	r18, r16
     7cc:	2e 5f       	subi	r18, 0xFE	; 254
     7ce:	3f 4f       	sbci	r19, 0xFF	; 255
     7d0:	8d b7       	in	r24, 0x3d	; 61
     7d2:	9e b7       	in	r25, 0x3e	; 62
     7d4:	0a 96       	adiw	r24, 0x0a	; 10
     7d6:	0f b6       	in	r0, 0x3f	; 63
     7d8:	f8 94       	cli
     7da:	9e bf       	out	0x3e, r25	; 62
     7dc:	0f be       	out	0x3f, r0	; 63
     7de:	8d bf       	out	0x3d, r24	; 61
     7e0:	2c 15       	cp	r18, r12
     7e2:	3d 05       	cpc	r19, r13
     7e4:	0c f0       	brlt	.+2      	; 0x7e8 <display_temperatures+0x1ce>
     7e6:	59 c0       	rjmp	.+178    	; 0x89a <display_temperatures+0x280>
	      	 {
	 	      	 device = g1Wire_order[page + 2];
     7e8:	f9 01       	movw	r30, r18
     7ea:	e7 51       	subi	r30, 0x17	; 23
     7ec:	fd 4f       	sbci	r31, 0xFD	; 253
	 	       	sprintf( gBuffer, "%02i#Cllr%+04i.%c\n",(int)page + 2, gReadings[device] / 10,(gReadings[device] % 10) + '0'); //cellar
     7ee:	e0 81       	ld	r30, Z
     7f0:	f0 e0       	ldi	r31, 0x00	; 0
     7f2:	ee 0f       	add	r30, r30
     7f4:	ff 1f       	adc	r31, r31
     7f6:	e1 5c       	subi	r30, 0xC1	; 193
     7f8:	fc 4f       	sbci	r31, 0xFC	; 252
     7fa:	80 81       	ld	r24, Z
     7fc:	91 81       	ldd	r25, Z+1	; 0x01
     7fe:	b7 01       	movw	r22, r14
     800:	0e 94 28 15 	call	0x2a50	; 0x2a50 <__divmodhi4>
     804:	c0 96       	adiw	r24, 0x30	; 48
     806:	9f 93       	push	r25
     808:	8f 93       	push	r24
     80a:	7f 93       	push	r23
     80c:	6f 93       	push	r22
     80e:	3f 93       	push	r19
     810:	2f 93       	push	r18
     812:	81 e7       	ldi	r24, 0x71	; 113
     814:	91 e0       	ldi	r25, 0x01	; 1
     816:	9f 93       	push	r25
     818:	8f 93       	push	r24
     81a:	df 93       	push	r29
     81c:	cf 93       	push	r28
     81e:	0e 94 58 19 	call	0x32b0	; 0x32b0 <sprintf>
           	lcd_puts( gBuffer);
     822:	ce 01       	movw	r24, r28
     824:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <lcd_puts>
            if( (page + 3) < num_sensors)
     828:	0d 5f       	subi	r16, 0xFD	; 253
     82a:	1f 4f       	sbci	r17, 0xFF	; 255
     82c:	8d b7       	in	r24, 0x3d	; 61
     82e:	9e b7       	in	r25, 0x3e	; 62
     830:	0a 96       	adiw	r24, 0x0a	; 10
     832:	0f b6       	in	r0, 0x3f	; 63
     834:	f8 94       	cli
     836:	9e bf       	out	0x3e, r25	; 62
     838:	0f be       	out	0x3f, r0	; 63
     83a:	8d bf       	out	0x3d, r24	; 61
     83c:	0c 15       	cp	r16, r12
     83e:	1d 05       	cpc	r17, r13
     840:	4c f5       	brge	.+82     	; 0x894 <display_temperatures+0x27a>
	        	   {
	 	        	  device = g1Wire_order[page + 3];
     842:	f8 01       	movw	r30, r16
     844:	e7 51       	subi	r30, 0x17	; 23
     846:	fd 4f       	sbci	r31, 0xFD	; 253
	 	          	sprintf( gBuffer, "%02i#Bler%+04i.%c\n",(int)page + 3, gReadings[device] / 10,(gReadings[device] % 10) + '0'); //boiler
     848:	e0 81       	ld	r30, Z
     84a:	f0 e0       	ldi	r31, 0x00	; 0
     84c:	ee 0f       	add	r30, r30
     84e:	ff 1f       	adc	r31, r31
     850:	e1 5c       	subi	r30, 0xC1	; 193
     852:	fc 4f       	sbci	r31, 0xFC	; 252
     854:	80 81       	ld	r24, Z
     856:	91 81       	ldd	r25, Z+1	; 0x01
     858:	b7 01       	movw	r22, r14
     85a:	0e 94 28 15 	call	0x2a50	; 0x2a50 <__divmodhi4>
     85e:	c0 96       	adiw	r24, 0x30	; 48
     860:	9f 93       	push	r25
     862:	8f 93       	push	r24
     864:	7f 93       	push	r23
     866:	6f 93       	push	r22
     868:	1f 93       	push	r17
     86a:	0f 93       	push	r16
     86c:	84 e8       	ldi	r24, 0x84	; 132
     86e:	91 e0       	ldi	r25, 0x01	; 1
     870:	9f 93       	push	r25
     872:	8f 93       	push	r24
     874:	df 93       	push	r29
     876:	cf 93       	push	r28
     878:	0e 94 58 19 	call	0x32b0	; 0x32b0 <sprintf>
               	lcd_puts( gBuffer);
     87c:	ce 01       	movw	r24, r28
     87e:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <lcd_puts>
     882:	8d b7       	in	r24, 0x3d	; 61
     884:	9e b7       	in	r25, 0x3e	; 62
     886:	0a 96       	adiw	r24, 0x0a	; 10
     888:	0f b6       	in	r0, 0x3f	; 63
     88a:	f8 94       	cli
     88c:	9e bf       	out	0x3e, r25	; 62
     88e:	0f be       	out	0x3f, r0	; 63
     890:	8d bf       	out	0x3d, r24	; 61
     892:	0a c0       	rjmp	.+20     	; 0x8a8 <display_temperatures+0x28e>
	           		}
             	else lcd_puts_P( "            ");
     894:	89 e5       	ldi	r24, 0x59	; 89
     896:	91 e0       	ldi	r25, 0x01	; 1
     898:	05 c0       	rjmp	.+10     	; 0x8a4 <display_temperatures+0x28a>
	       		}
         	else lcd_puts_P( "            ");
     89a:	8c e4       	ldi	r24, 0x4C	; 76
     89c:	91 e0       	ldi	r25, 0x01	; 1
     89e:	02 c0       	rjmp	.+4      	; 0x8a4 <display_temperatures+0x28a>
      }
		else lcd_puts_P( "            ");
     8a0:	8f e3       	ldi	r24, 0x3F	; 63
     8a2:	91 e0       	ldi	r25, 0x01	; 1
     8a4:	0e 94 dd 07 	call	0xfba	; 0xfba <lcd_puts_p>
		{
		//get temperature
		d = bmp085_gettemperature();
     8a8:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <bmp085_gettemperature>
     8ac:	60 93 f1 02 	sts	0x02F1, r22
     8b0:	70 93 f2 02 	sts	0x02F2, r23
     8b4:	80 93 f3 02 	sts	0x02F3, r24
     8b8:	90 93 f4 02 	sts	0x02F4, r25
		dtostrf(d, 10, 2, printbuff);
     8bc:	0f e4       	ldi	r16, 0x4F	; 79
     8be:	13 e0       	ldi	r17, 0x03	; 3
     8c0:	22 e0       	ldi	r18, 0x02	; 2
     8c2:	4a e0       	ldi	r20, 0x0A	; 10
     8c4:	0e 94 d6 18 	call	0x31ac	; 0x31ac <dtostrf>
		uart_puts("temperature: "); 
     8c8:	87 e9       	ldi	r24, 0x97	; 151
     8ca:	91 e0       	ldi	r25, 0x01	; 1
     8cc:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <uart_puts>
		uart_puts(printbuff);  
     8d0:	c8 01       	movw	r24, r16
     8d2:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <uart_puts>
		uart_puts(" C deg"); 
     8d6:	85 ea       	ldi	r24, 0xA5	; 165
     8d8:	91 e0       	ldi	r25, 0x01	; 1
     8da:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <uart_puts>
		uart_puts("\r\n");
     8de:	8c ea       	ldi	r24, 0xAC	; 172
     8e0:	91 e0       	ldi	r25, 0x01	; 1
     8e2:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <uart_puts>

		//get pressure
		l = bmp085_getpressure();
     8e6:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <bmp085_getpressure>
     8ea:	60 93 d1 02 	sts	0x02D1, r22
     8ee:	70 93 d2 02 	sts	0x02D2, r23
     8f2:	80 93 d3 02 	sts	0x02D3, r24
     8f6:	90 93 d4 02 	sts	0x02D4, r25
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ltoa_ncheck (long, char *, unsigned char);
	return __ltoa_ncheck (__val, __s, __radix);
     8fa:	2a e0       	ldi	r18, 0x0A	; 10
     8fc:	a8 01       	movw	r20, r16
     8fe:	0e 94 0d 19 	call	0x321a	; 0x321a <__ltoa_ncheck>
		ltoa(l, printbuff, 10); 
		uart_puts("pressure   :   "); 
     902:	8f ea       	ldi	r24, 0xAF	; 175
     904:	91 e0       	ldi	r25, 0x01	; 1
     906:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <uart_puts>
		uart_puts(printbuff);
     90a:	c8 01       	movw	r24, r16
     90c:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <uart_puts>
		uart_puts(" Pa");
     910:	8f eb       	ldi	r24, 0xBF	; 191
     912:	91 e0       	ldi	r25, 0x01	; 1
     914:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <uart_puts>
		uart_puts("\r\n");
     918:	8c ea       	ldi	r24, 0xAC	; 172
     91a:	91 e0       	ldi	r25, 0x01	; 1
     91c:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <uart_puts>
		lcd_gotoxy( 17, 2);
     920:	62 e0       	ldi	r22, 0x02	; 2
     922:	81 e1       	ldi	r24, 0x11	; 17
     924:	0e 94 98 07 	call	0xf30	; 0xf30 <lcd_gotoxy>
		lcd_puts_P( "hPa");
     928:	8b e3       	ldi	r24, 0x3B	; 59
     92a:	91 e0       	ldi	r25, 0x01	; 1
     92c:	0e 94 dd 07 	call	0xfba	; 0xfba <lcd_puts_p>
		lcd_gotoxy( 15, 2);
     930:	62 e0       	ldi	r22, 0x02	; 2
     932:	8f e0       	ldi	r24, 0x0F	; 15
     934:	0e 94 98 07 	call	0xf30	; 0xf30 <lcd_gotoxy>
		ltoa(l/100, printbuff, 10); // in hPa (/100)
     938:	60 91 d1 02 	lds	r22, 0x02D1
     93c:	70 91 d2 02 	lds	r23, 0x02D2
     940:	80 91 d3 02 	lds	r24, 0x02D3
     944:	90 91 d4 02 	lds	r25, 0x02D4
     948:	24 e6       	ldi	r18, 0x64	; 100
     94a:	30 e0       	ldi	r19, 0x00	; 0
     94c:	40 e0       	ldi	r20, 0x00	; 0
     94e:	50 e0       	ldi	r21, 0x00	; 0
     950:	0e 94 5e 15 	call	0x2abc	; 0x2abc <__divmodsi4>
     954:	ca 01       	movw	r24, r20
     956:	b9 01       	movw	r22, r18
     958:	2a e0       	ldi	r18, 0x0A	; 10
     95a:	a8 01       	movw	r20, r16
     95c:	0e 94 0d 19 	call	0x321a	; 0x321a <__ltoa_ncheck>
		lcd_puts( printbuff);
     960:	c8 01       	movw	r24, r16
     962:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <lcd_puts>

		//get altitude
		d = bmp085_getaltitude();
     966:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <bmp085_getaltitude>
     96a:	60 93 f1 02 	sts	0x02F1, r22
     96e:	70 93 f2 02 	sts	0x02F2, r23
     972:	80 93 f3 02 	sts	0x02F3, r24
     976:	90 93 f4 02 	sts	0x02F4, r25
		dtostrf(d, 10, 2, printbuff);
     97a:	22 e0       	ldi	r18, 0x02	; 2
     97c:	4a e0       	ldi	r20, 0x0A	; 10
     97e:	0e 94 d6 18 	call	0x31ac	; 0x31ac <dtostrf>
		uart_puts("altitude   : ");
     982:	83 ec       	ldi	r24, 0xC3	; 195
     984:	91 e0       	ldi	r25, 0x01	; 1
     986:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <uart_puts>
		uart_puts(printbuff);
     98a:	c8 01       	movw	r24, r16
     98c:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <uart_puts>
		uart_puts(" M above sea");
     990:	81 ed       	ldi	r24, 0xD1	; 209
     992:	91 e0       	ldi	r25, 0x01	; 1
     994:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <uart_puts>
		uart_puts("\r\n");
     998:	8c ea       	ldi	r24, 0xAC	; 172
     99a:	91 e0       	ldi	r25, 0x01	; 1
     99c:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <uart_puts>

		uart_puts("\r\n");
     9a0:	8c ea       	ldi	r24, 0xAC	; 172
     9a2:	91 e0       	ldi	r25, 0x01	; 1
     9a4:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <uart_puts>
		delay_ms(500);
     9a8:	64 e8       	ldi	r22, 0x84	; 132
     9aa:	7b e2       	ldi	r23, 0x2B	; 43
     9ac:	8a e0       	ldi	r24, 0x0A	; 10
     9ae:	90 e0       	ldi	r25, 0x00	; 0
		}
}
     9b0:	df 91       	pop	r29
     9b2:	cf 91       	pop	r28
     9b4:	1f 91       	pop	r17
     9b6:	0f 91       	pop	r16
     9b8:	ff 90       	pop	r15
     9ba:	ef 90       	pop	r14
     9bc:	df 90       	pop	r13
     9be:	cf 90       	pop	r12
		uart_puts(printbuff);
		uart_puts(" M above sea");
		uart_puts("\r\n");

		uart_puts("\r\n");
		delay_ms(500);
     9c0:	0c 94 36 06 	jmp	0xc6c	; 0xc6c <delayloop32>

000009c4 <log_temperatures>:
		}
}
/**************************************************************/
// output most recent temperatures to comm port
void log_temperatures( uint8_t num_sensors)
{
     9c4:	9f 92       	push	r9
     9c6:	af 92       	push	r10
     9c8:	bf 92       	push	r11
     9ca:	cf 92       	push	r12
     9cc:	df 92       	push	r13
     9ce:	ef 92       	push	r14
     9d0:	ff 92       	push	r15
     9d2:	0f 93       	push	r16
     9d4:	1f 93       	push	r17
     9d6:	cf 93       	push	r28
     9d8:	df 93       	push	r29
     9da:	98 2e       	mov	r9, r24
	uint8_t i, device;
//	DS2415_date_t dt;

	// output the timestamp at the start of the record
	//DS2415_epoch_to_gregorian( gRTC_clk, &dt);
	uart_putc( '#');	// marker for data record to help parsing via external program
     9dc:	83 e2       	ldi	r24, 0x23	; 35
     9de:	0e 94 e7 09 	call	0x13ce	; 0x13ce <uart_putc>
     9e2:	c9 ee       	ldi	r28, 0xE9	; 233
     9e4:	cc 2e       	mov	r12, r28
     9e6:	c2 e0       	ldi	r28, 0x02	; 2
     9e8:	dc 2e       	mov	r13, r28

	//sprintf( gBuffer, " %02i:%02i:%02i;", (int)dt.hour, (int)dt.min, (int)dt.sec);
	//uart_puts( gBuffer);
	
	// output a semicolon delimited list of the sensors data
	for( i = 0; i < num_sensors; i++)
     9ea:	e6 01       	movw	r28, r12
	{
		device = g1Wire_order[i];   //premenna, zoradene snimace
		sprintf( gBuffer, "%+04i.%c;", gReadings[device] / 10, (gReadings[device] % 10) + '0');
     9ec:	1a e0       	ldi	r17, 0x0A	; 10
     9ee:	a1 2e       	mov	r10, r17
     9f0:	b1 2c       	mov	r11, r1
     9f2:	0e ed       	ldi	r16, 0xDE	; 222
     9f4:	11 e0       	ldi	r17, 0x01	; 1
     9f6:	8c ea       	ldi	r24, 0xAC	; 172
     9f8:	e8 2e       	mov	r14, r24
     9fa:	82 e0       	ldi	r24, 0x02	; 2
     9fc:	f8 2e       	mov	r15, r24
     9fe:	8c 2f       	mov	r24, r28
     a00:	8c 19       	sub	r24, r12

	//sprintf( gBuffer, " %02i:%02i:%02i;", (int)dt.hour, (int)dt.min, (int)dt.sec);
	//uart_puts( gBuffer);
	
	// output a semicolon delimited list of the sensors data
	for( i = 0; i < num_sensors; i++)
     a02:	89 15       	cp	r24, r9
     a04:	28 f5       	brcc	.+74     	; 0xa50 <log_temperatures+0x8c>
	{
		device = g1Wire_order[i];   //premenna, zoradene snimace
     a06:	e9 91       	ld	r30, Y+
		sprintf( gBuffer, "%+04i.%c;", gReadings[device] / 10, (gReadings[device] % 10) + '0');
     a08:	f0 e0       	ldi	r31, 0x00	; 0
     a0a:	ee 0f       	add	r30, r30
     a0c:	ff 1f       	adc	r31, r31
     a0e:	e1 5c       	subi	r30, 0xC1	; 193
     a10:	fc 4f       	sbci	r31, 0xFC	; 252
     a12:	80 81       	ld	r24, Z
     a14:	91 81       	ldd	r25, Z+1	; 0x01
     a16:	b5 01       	movw	r22, r10
     a18:	0e 94 28 15 	call	0x2a50	; 0x2a50 <__divmodhi4>
     a1c:	9c 01       	movw	r18, r24
     a1e:	20 5d       	subi	r18, 0xD0	; 208
     a20:	3f 4f       	sbci	r19, 0xFF	; 255
     a22:	3f 93       	push	r19
     a24:	2f 93       	push	r18
     a26:	7f 93       	push	r23
     a28:	6f 93       	push	r22
     a2a:	1f 93       	push	r17
     a2c:	0f 93       	push	r16
     a2e:	ff 92       	push	r15
     a30:	ef 92       	push	r14
     a32:	0e 94 58 19 	call	0x32b0	; 0x32b0 <sprintf>
		uart_puts( gBuffer);
     a36:	8c ea       	ldi	r24, 0xAC	; 172
     a38:	92 e0       	ldi	r25, 0x02	; 2
     a3a:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <uart_puts>
     a3e:	8d b7       	in	r24, 0x3d	; 61
     a40:	9e b7       	in	r25, 0x3e	; 62
     a42:	08 96       	adiw	r24, 0x08	; 8
     a44:	0f b6       	in	r0, 0x3f	; 63
     a46:	f8 94       	cli
     a48:	9e bf       	out	0x3e, r25	; 62
     a4a:	0f be       	out	0x3f, r0	; 63
     a4c:	8d bf       	out	0x3d, r24	; 61
     a4e:	d7 cf       	rjmp	.-82     	; 0x9fe <log_temperatures+0x3a>
	}
	uart_puts_P( "\r");      //vycital vsetky za sebou a poslal znak novy riadok
     a50:	89 e3       	ldi	r24, 0x39	; 57
     a52:	91 e0       	ldi	r25, 0x01	; 1
}
     a54:	df 91       	pop	r29
     a56:	cf 91       	pop	r28
     a58:	1f 91       	pop	r17
     a5a:	0f 91       	pop	r16
     a5c:	ff 90       	pop	r15
     a5e:	ef 90       	pop	r14
     a60:	df 90       	pop	r13
     a62:	cf 90       	pop	r12
     a64:	bf 90       	pop	r11
     a66:	af 90       	pop	r10
     a68:	9f 90       	pop	r9
	{
		device = g1Wire_order[i];   //premenna, zoradene snimace
		sprintf( gBuffer, "%+04i.%c;", gReadings[device] / 10, (gReadings[device] % 10) + '0');
		uart_puts( gBuffer);
	}
	uart_puts_P( "\r");      //vycital vsetky za sebou a poslal znak novy riadok
     a6a:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <uart_puts_p>

00000a6e <read_temperatures>:
}
/**********************************************************/
// read all DS18x20 sensors on 1-wire buss, 12-bit resolution
void read_temperatures( uint8_t num_sensors)
{
     a6e:	ef 92       	push	r14
     a70:	ff 92       	push	r15
     a72:	0f 93       	push	r16
     a74:	1f 93       	push	r17
     a76:	cf 93       	push	r28
     a78:	df 93       	push	r29
     a7a:	e8 2e       	mov	r14, r24
	uint8_t i;
	
	if( DS18X20_start_meas( NULL) == OWI_BUS_OK)
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	0e 94 43 06 	call	0xc86	; 0xc86 <DS18X20_start_meas>
     a84:	88 23       	and	r24, r24
     a86:	21 f0       	breq	.+8      	; 0xa90 <read_temperatures+0x22>
     a88:	ef e3       	ldi	r30, 0x3F	; 63
     a8a:	f3 e0       	ldi	r31, 0x03	; 3
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	11 c0       	rjmp	.+34     	; 0xab2 <read_temperatures+0x44>
     a90:	cd ef       	ldi	r28, 0xFD	; 253
     a92:	d2 e0       	ldi	r29, 0x02	; 2
     a94:	0f e3       	ldi	r16, 0x3F	; 63
     a96:	13 e0       	ldi	r17, 0x03	; 3
     a98:	f1 2c       	mov	r15, r1
	{
		//if( gRTC_status) DS2415_read_clock( &gRTC_status, &gRTC_clk, gRTC_ID);
		for( i = 0; i < num_sensors; i++)
     a9a:	fe 14       	cp	r15, r14
     a9c:	d1 f0       	breq	.+52     	; 0xad2 <read_temperatures+0x64>
			gReadings[i] = DS18X20_get_temp( &gSensorIDs[i][0]);
     a9e:	ce 01       	movw	r24, r28
     aa0:	0e 94 9b 06 	call	0xd36	; 0xd36 <DS18X20_get_temp>
     aa4:	f8 01       	movw	r30, r16
     aa6:	81 93       	st	Z+, r24
     aa8:	91 93       	st	Z+, r25
     aaa:	8f 01       	movw	r16, r30
	uint8_t i;
	
	if( DS18X20_start_meas( NULL) == OWI_BUS_OK)
	{
		//if( gRTC_status) DS2415_read_clock( &gRTC_status, &gRTC_clk, gRTC_ID);
		for( i = 0; i < num_sensors; i++)
     aac:	f3 94       	inc	r15
     aae:	28 96       	adiw	r28, 0x08	; 8
     ab0:	f4 cf       	rjmp	.-24     	; 0xa9a <read_temperatures+0x2c>
			gReadings[i] = DS18X20_get_temp( &gSensorIDs[i][0]);
	}
	else
	{
		for( i = 0; i < num_sensors; i++)
     ab2:	9e 15       	cp	r25, r14
     ab4:	21 f0       	breq	.+8      	; 0xabe <read_temperatures+0x50>
			gReadings[i] = 0;
     ab6:	11 92       	st	Z+, r1
     ab8:	11 92       	st	Z+, r1
		for( i = 0; i < num_sensors; i++)
			gReadings[i] = DS18X20_get_temp( &gSensorIDs[i][0]);
	}
	else
	{
		for( i = 0; i < num_sensors; i++)
     aba:	9f 5f       	subi	r25, 0xFF	; 255
     abc:	fa cf       	rjmp	.-12     	; 0xab2 <read_temperatures+0x44>
			gReadings[i] = 0;
		uart_puts_P( "Start meas. fail\r"); 	
     abe:	87 e2       	ldi	r24, 0x27	; 39
     ac0:	91 e0       	ldi	r25, 0x01	; 1
	}
}
     ac2:	df 91       	pop	r29
     ac4:	cf 91       	pop	r28
     ac6:	1f 91       	pop	r17
     ac8:	0f 91       	pop	r16
     aca:	ff 90       	pop	r15
     acc:	ef 90       	pop	r14
	}
	else
	{
		for( i = 0; i < num_sensors; i++)
			gReadings[i] = 0;
		uart_puts_P( "Start meas. fail\r"); 	
     ace:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <uart_puts_p>
	}
}
     ad2:	df 91       	pop	r29
     ad4:	cf 91       	pop	r28
     ad6:	1f 91       	pop	r17
     ad8:	0f 91       	pop	r16
     ada:	ff 90       	pop	r15
     adc:	ef 90       	pop	r14
     ade:	08 95       	ret

00000ae0 <show_id_uart>:
/***************************************************/
// display the sensor ID info on the serial port
void show_id_uart( uint8_t *id)
{
     ae0:	ef 92       	push	r14
     ae2:	ff 92       	push	r15
     ae4:	0f 93       	push	r16
     ae6:	1f 93       	push	r17
     ae8:	cf 93       	push	r28
     aea:	df 93       	push	r29
     aec:	7c 01       	movw	r14, r24
     aee:	8c 01       	movw	r16, r24
	size_t i;
	for( i = 0; i < OWI_ROMCODE_SIZE; i++)
     af0:	c0 e0       	ldi	r28, 0x00	; 0
     af2:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if( i == 0) uart_puts_P( "FC:");
     af4:	20 97       	sbiw	r28, 0x00	; 0
     af6:	19 f4       	brne	.+6      	; 0xafe <show_id_uart+0x1e>
     af8:	83 e2       	ldi	r24, 0x23	; 35
     afa:	91 e0       	ldi	r25, 0x01	; 1
     afc:	0b c0       	rjmp	.+22     	; 0xb14 <show_id_uart+0x34>
		else if( i == OWI_ROMCODE_SIZE - 1) uart_puts_P( " CRC:");
     afe:	c7 30       	cpi	r28, 0x07	; 7
     b00:	d1 05       	cpc	r29, r1
     b02:	19 f4       	brne	.+6      	; 0xb0a <show_id_uart+0x2a>
     b04:	8d e1       	ldi	r24, 0x1D	; 29
     b06:	91 e0       	ldi	r25, 0x01	; 1
     b08:	05 c0       	rjmp	.+10     	; 0xb14 <show_id_uart+0x34>
		if( i == 1) uart_puts_P( " SN:");
     b0a:	c1 30       	cpi	r28, 0x01	; 1
     b0c:	d1 05       	cpc	r29, r1
     b0e:	21 f4       	brne	.+8      	; 0xb18 <show_id_uart+0x38>
     b10:	88 e1       	ldi	r24, 0x18	; 24
     b12:	91 e0       	ldi	r25, 0x01	; 1
     b14:	0e 94 08 0a 	call	0x1410	; 0x1410 <uart_puts_p>
		uart_puthex_byte( id[i]);
     b18:	f8 01       	movw	r30, r16
     b1a:	81 91       	ld	r24, Z+
     b1c:	8f 01       	movw	r16, r30
     b1e:	0e 94 3b 0a 	call	0x1476	; 0x1476 <uart_puthex_byte>
		if( i == 0)
     b22:	20 97       	sbiw	r28, 0x00	; 0
     b24:	89 f4       	brne	.+34     	; 0xb48 <show_id_uart+0x68>
		{
			if( OWI_FAMILY( id[0]) == DS18S20_FAMILY_CODE) uart_puts_P( "(18S)");
     b26:	f7 01       	movw	r30, r14
     b28:	80 81       	ld	r24, Z
     b2a:	8f 77       	andi	r24, 0x7F	; 127
     b2c:	80 31       	cpi	r24, 0x10	; 16
     b2e:	19 f4       	brne	.+6      	; 0xb36 <show_id_uart+0x56>
     b30:	82 e1       	ldi	r24, 0x12	; 18
     b32:	91 e0       	ldi	r25, 0x01	; 1
     b34:	07 c0       	rjmp	.+14     	; 0xb44 <show_id_uart+0x64>
			else if( OWI_FAMILY( id[0]) == DS18B20_FAMILY_CODE) uart_puts_P( "(18B)");
     b36:	88 32       	cpi	r24, 0x28	; 40
     b38:	19 f4       	brne	.+6      	; 0xb40 <show_id_uart+0x60>
     b3a:	8c e0       	ldi	r24, 0x0C	; 12
     b3c:	91 e0       	ldi	r25, 0x01	; 1
     b3e:	02 c0       	rjmp	.+4      	; 0xb44 <show_id_uart+0x64>
			else uart_puts_P( "(?)");
     b40:	88 e0       	ldi	r24, 0x08	; 8
     b42:	91 e0       	ldi	r25, 0x01	; 1
     b44:	0e 94 08 0a 	call	0x1410	; 0x1410 <uart_puts_p>
/***************************************************/
// display the sensor ID info on the serial port
void show_id_uart( uint8_t *id)
{
	size_t i;
	for( i = 0; i < OWI_ROMCODE_SIZE; i++)
     b48:	21 96       	adiw	r28, 0x01	; 1
     b4a:	c8 30       	cpi	r28, 0x08	; 8
     b4c:	d1 05       	cpc	r29, r1
     b4e:	91 f6       	brne	.-92     	; 0xaf4 <show_id_uart+0x14>
			if( OWI_FAMILY( id[0]) == DS18S20_FAMILY_CODE) uart_puts_P( "(18S)");
			else if( OWI_FAMILY( id[0]) == DS18B20_FAMILY_CODE) uart_puts_P( "(18B)");
			else uart_puts_P( "(?)");
		}
	}
}
     b50:	df 91       	pop	r29
     b52:	cf 91       	pop	r28
     b54:	1f 91       	pop	r17
     b56:	0f 91       	pop	r16
     b58:	ff 90       	pop	r15
     b5a:	ef 90       	pop	r14
     b5c:	08 95       	ret

00000b5e <show_exinfo_lcd>:
/*****************************************************/
// condense the extended 1Wire device info into
// two 16-character lines and display on the LCD
void show_exinfo_lcd( uint8_t index)
{
     b5e:	0f 93       	push	r16
     b60:	1f 93       	push	r17
     b62:	cf 93       	push	r28
     b64:	df 93       	push	r29
     b66:	c8 2f       	mov	r28, r24
	uint8_t device, i;

	// show the displayed order and the identified order
	device = g1Wire_order[index];
     b68:	e8 2f       	mov	r30, r24
     b6a:	f0 e0       	ldi	r31, 0x00	; 0
     b6c:	e7 51       	subi	r30, 0x17	; 23
     b6e:	fd 4f       	sbci	r31, 0xFD	; 253
     b70:	00 81       	ld	r16, Z
	lcd_gotoxy( 0, 0);
     b72:	60 e0       	ldi	r22, 0x00	; 0
     b74:	80 e0       	ldi	r24, 0x00	; 0
     b76:	0e 94 98 07 	call	0xf30	; 0xf30 <lcd_gotoxy>
	lcd_puts_P( "Dsp");
     b7a:	84 e0       	ldi	r24, 0x04	; 4
     b7c:	91 e0       	ldi	r25, 0x01	; 1
     b7e:	0e 94 dd 07 	call	0xfba	; 0xfba <lcd_puts_p>
	lcd_putc( index + '0');
     b82:	80 e3       	ldi	r24, 0x30	; 48
     b84:	8c 0f       	add	r24, r28
     b86:	0e 94 b1 07 	call	0xf62	; 0xf62 <lcd_putc>
	lcd_puts_P( "/Bus");
     b8a:	8f ef       	ldi	r24, 0xFF	; 255
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	0e 94 dd 07 	call	0xfba	; 0xfba <lcd_puts_p>
	lcd_putc( device + '0');
     b92:	80 e3       	ldi	r24, 0x30	; 48
     b94:	80 0f       	add	r24, r16
     b96:	0e 94 b1 07 	call	0xf62	; 0xf62 <lcd_putc>

	lcd_puts_P( "       ");//	 clear any previously displayed measurement data
     b9a:	87 ef       	ldi	r24, 0xF7	; 247
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	0e 94 dd 07 	call	0xfba	; 0xfba <lcd_puts_p>

	// show the device information on next line
	lcd_gotoxy( 0, 1);
     ba2:	61 e0       	ldi	r22, 0x01	; 1
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	0e 94 98 07 	call	0xf30	; 0xf30 <lcd_gotoxy>
	if( OWI_FAMILY( gSensorIDs[device][0]) == DS18S20_FAMILY_CODE)
     baa:	10 e0       	ldi	r17, 0x00	; 0
     bac:	f8 01       	movw	r30, r16
     bae:	23 e0       	ldi	r18, 0x03	; 3
     bb0:	ee 0f       	add	r30, r30
     bb2:	ff 1f       	adc	r31, r31
     bb4:	2a 95       	dec	r18
     bb6:	e1 f7       	brne	.-8      	; 0xbb0 <show_exinfo_lcd+0x52>
     bb8:	e3 50       	subi	r30, 0x03	; 3
     bba:	fd 4f       	sbci	r31, 0xFD	; 253
     bbc:	80 81       	ld	r24, Z
     bbe:	98 2f       	mov	r25, r24
     bc0:	9f 77       	andi	r25, 0x7F	; 127
     bc2:	90 31       	cpi	r25, 0x10	; 16
     bc4:	71 f4       	brne	.+28     	; 0xbe2 <show_exinfo_lcd+0x84>
		lcd_puts_P( "18S:");
     bc6:	82 ef       	ldi	r24, 0xF2	; 242
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	0e 94 dd 07 	call	0xfba	; 0xfba <lcd_puts_p>
     bce:	93 e0       	ldi	r25, 0x03	; 3
     bd0:	00 0f       	add	r16, r16
     bd2:	11 1f       	adc	r17, r17
     bd4:	9a 95       	dec	r25
     bd6:	e1 f7       	brne	.-8      	; 0xbd0 <show_exinfo_lcd+0x72>
     bd8:	03 50       	subi	r16, 0x03	; 3
     bda:	1d 4f       	sbci	r17, 0xFD	; 253
}
/*****************************************************/
// condense the extended 1Wire device info into
// two 16-character lines and display on the LCD
void show_exinfo_lcd( uint8_t index)
{
     bdc:	c0 e0       	ldi	r28, 0x00	; 0
     bde:	d0 e0       	ldi	r29, 0x00	; 0
     be0:	0a c0       	rjmp	.+20     	; 0xbf6 <show_exinfo_lcd+0x98>

	// show the device information on next line
	lcd_gotoxy( 0, 1);
	if( OWI_FAMILY( gSensorIDs[device][0]) == DS18S20_FAMILY_CODE)
		lcd_puts_P( "18S:");
	else if( OWI_FAMILY( gSensorIDs[device][0]) == DS18B20_FAMILY_CODE)
     be2:	98 32       	cpi	r25, 0x28	; 40
     be4:	19 f4       	brne	.+6      	; 0xbec <show_exinfo_lcd+0x8e>
		lcd_puts_P( "18B:");
     be6:	8d ee       	ldi	r24, 0xED	; 237
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	ef cf       	rjmp	.-34     	; 0xbca <show_exinfo_lcd+0x6c>
	else
	{
		 // unknown device type
		 lcd_puthex_byte( gSensorIDs[device][0]);
     bec:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <lcd_puthex_byte>
		 lcd_puts_P( "?:");
     bf0:	8a ee       	ldi	r24, 0xEA	; 234
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	ea cf       	rjmp	.-44     	; 0xbca <show_exinfo_lcd+0x6c>
     bf6:	f8 01       	movw	r30, r16
     bf8:	ec 0f       	add	r30, r28
     bfa:	fd 1f       	adc	r31, r29
	}

	// show the serial number and CRC byte
	for( i = 1; i < OWI_ROMCODE_SIZE - 1; i++)
		lcd_puthex_byte( gSensorIDs[device][i]);
     bfc:	81 81       	ldd	r24, Z+1	; 0x01
     bfe:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <lcd_puthex_byte>
     c02:	21 96       	adiw	r28, 0x01	; 1
		 lcd_puthex_byte( gSensorIDs[device][0]);
		 lcd_puts_P( "?:");
	}

	// show the serial number and CRC byte
	for( i = 1; i < OWI_ROMCODE_SIZE - 1; i++)
     c04:	c6 30       	cpi	r28, 0x06	; 6
     c06:	d1 05       	cpc	r29, r1
     c08:	b1 f7       	brne	.-20     	; 0xbf6 <show_exinfo_lcd+0x98>
		lcd_puthex_byte( gSensorIDs[device][i]);
}
     c0a:	df 91       	pop	r29
     c0c:	cf 91       	pop	r28
     c0e:	1f 91       	pop	r17
     c10:	0f 91       	pop	r16
     c12:	08 95       	ret

00000c14 <crc8>:
{
	uint16_t byte_ctr;
	uint8_t bit_ctr, temp, crc, cur_byte;

	crc = 0;
	for( byte_ctr = 0; byte_ctr < num_bytes; byte_ctr++)
     c14:	fc 01       	movw	r30, r24
extern uint8_t crc8( uint8_t *data, uint8_t num_bytes)
{
	uint16_t byte_ctr;
	uint8_t bit_ctr, temp, crc, cur_byte;

	crc = 0;
     c16:	40 e0       	ldi	r20, 0x00	; 0
	for( byte_ctr = 0; byte_ctr < num_bytes; byte_ctr++)
     c18:	70 e0       	ldi	r23, 0x00	; 0
			{
				crc >>= 1;
			}
			else
			{
				crc ^= 0x18;
     c1a:	58 e1       	ldi	r21, 0x18	; 24
     c1c:	9f 01       	movw	r18, r30
     c1e:	28 1b       	sub	r18, r24
     c20:	39 0b       	sbc	r19, r25
{
	uint16_t byte_ctr;
	uint8_t bit_ctr, temp, crc, cur_byte;

	crc = 0;
	for( byte_ctr = 0; byte_ctr < num_bytes; byte_ctr++)
     c22:	26 17       	cp	r18, r22
     c24:	37 07       	cpc	r19, r23
     c26:	78 f4       	brcc	.+30     	; 0xc46 <crc8+0x32>
	{
		cur_byte = data[byte_ctr];
     c28:	31 91       	ld	r19, Z+
     c2a:	28 e0       	ldi	r18, 0x08	; 8
		for( bit_ctr = 8; bit_ctr > 0; bit_ctr--)
		{
			temp = ((crc ^ cur_byte) & 0x01);
     c2c:	a3 2f       	mov	r26, r19
     c2e:	a4 27       	eor	r26, r20
			if( temp == 0)
     c30:	a0 fd       	sbrc	r26, 0
     c32:	02 c0       	rjmp	.+4      	; 0xc38 <crc8+0x24>
			{
				crc >>= 1;
     c34:	46 95       	lsr	r20
     c36:	03 c0       	rjmp	.+6      	; 0xc3e <crc8+0x2a>
			}
			else
			{
				crc ^= 0x18;
     c38:	45 27       	eor	r20, r21
				crc >>= 1;
     c3a:	46 95       	lsr	r20
				crc |= 0x80;
     c3c:	40 68       	ori	r20, 0x80	; 128
			}
			cur_byte >>= 1;
     c3e:	36 95       	lsr	r19
     c40:	21 50       	subi	r18, 0x01	; 1

	crc = 0;
	for( byte_ctr = 0; byte_ctr < num_bytes; byte_ctr++)
	{
		cur_byte = data[byte_ctr];
		for( bit_ctr = 8; bit_ctr > 0; bit_ctr--)
     c42:	a1 f7       	brne	.-24     	; 0xc2c <crc8+0x18>
     c44:	eb cf       	rjmp	.-42     	; 0xc1c <crc8+0x8>
			}
			cur_byte >>= 1;
		}
	}
	return crc;
}
     c46:	84 2f       	mov	r24, r20
     c48:	08 95       	ret

00000c4a <crc16>:
*         *data : pointer to array of bytes to compute CRC
*     num_bytes : number of bytes in the array
*       returns : the CRC of the data
*/
uint16_t crc16( uint8_t *data, uint16_t num_bytes)
{
     c4a:	fc 01       	movw	r30, r24
     c4c:	68 0f       	add	r22, r24
     c4e:	79 1f       	adc	r23, r25
	uint16_t byte_ctr;
	uint8_t bit_ctr, temp, crc, cur_byte;

	crc = 0;
     c50:	80 e0       	ldi	r24, 0x00	; 0
	for( byte_ctr = 0; byte_ctr < num_bytes; byte_ctr++)
     c52:	e6 17       	cp	r30, r22
     c54:	f7 07       	cpc	r31, r23
     c56:	41 f0       	breq	.+16     	; 0xc68 <crc16+0x1e>
	{
		cur_byte = data[byte_ctr];
     c58:	21 91       	ld	r18, Z+
     c5a:	98 e0       	ldi	r25, 0x08	; 8
		for( bit_ctr = 8; bit_ctr > 0; bit_ctr--)
		{
			temp = ((crc ^ cur_byte) & 0x01);
     c5c:	82 27       	eor	r24, r18
     c5e:	81 70       	andi	r24, 0x01	; 1
			{
				crc ^= 0x4002;
				crc >>= 1;
				crc |= 0x8000;
			}
			cur_byte >>= 1;
     c60:	26 95       	lsr	r18
     c62:	91 50       	subi	r25, 0x01	; 1

	crc = 0;
	for( byte_ctr = 0; byte_ctr < num_bytes; byte_ctr++)
	{
		cur_byte = data[byte_ctr];
		for( bit_ctr = 8; bit_ctr > 0; bit_ctr--)
     c64:	d9 f7       	brne	.-10     	; 0xc5c <crc16+0x12>
     c66:	f5 cf       	rjmp	.-22     	; 0xc52 <crc16+0x8>
			}
			cur_byte >>= 1;
		}
	}
	return crc;
}
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	08 95       	ret

00000c6c <delayloop32>:
#include <inttypes.h>

#include "delay.h"

void delayloop32(uint32_t loops) 
{
     c6c:	dc 01       	movw	r26, r24
     c6e:	cb 01       	movw	r24, r22
  __asm__ volatile ( "cp  %A0,__zero_reg__ \n\t"  \
     c70:	81 15       	cp	r24, r1
     c72:	91 05       	cpc	r25, r1
     c74:	a1 05       	cpc	r26, r1
     c76:	b1 05       	cpc	r27, r1
     c78:	29 f0       	breq	.+10     	; 0xc84 <L_Exit_7>

00000c7a <L_LOOP_7>:
     c7a:	81 50       	subi	r24, 0x01	; 1
     c7c:	90 40       	sbci	r25, 0x00	; 0
     c7e:	a0 40       	sbci	r26, 0x00	; 0
     c80:	b0 40       	sbci	r27, 0x00	; 0
     c82:	d9 f7       	brne	.-10     	; 0xc7a <L_LOOP_7>

00000c84 <L_Exit_7>:
     c84:	08 95       	ret

00000c86 <DS18X20_start_meas>:

/* start measurement (CONVERT_T) for all sensors if input id==NULL 
   or for single sensor. then id is the rom-code */
extern uint8_t DS18X20_start_meas( uint8_t id[])
{
	if( ! owi_device_command( DS18X20_CONVERT_T, id))
     c86:	bc 01       	movw	r22, r24
     c88:	84 e4       	ldi	r24, 0x44	; 68
     c8a:	0e 94 59 08 	call	0x10b2	; 0x10b2 <owi_device_command>
     c8e:	81 11       	cpse	r24, r1
     c90:	08 c0       	rjmp	.+16     	; 0xca2 <DS18X20_start_meas+0x1c>
	{
		// wait for measurement cycle to complete
		delay_ms( DS18B20_TCONV_12BIT);
     c92:	66 e4       	ldi	r22, 0x46	; 70
     c94:	71 e4       	ldi	r23, 0x41	; 65
     c96:	8f e0       	ldi	r24, 0x0F	; 15
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	0e 94 36 06 	call	0xc6c	; 0xc6c <delayloop32>
		return OWI_BUS_OK;
     c9e:	80 e0       	ldi	r24, 0x00	; 0
     ca0:	08 95       	ret
	}
	return OWI_BUS_ERROR;
     ca2:	8f ef       	ldi	r24, 0xFF	; 255
}
     ca4:	08 95       	ret

00000ca6 <DS18X20_get_meas>:
/*************************************************************/
extern int DS18X20_get_meas( uint8_t id[])
{
     ca6:	df 92       	push	r13
     ca8:	ef 92       	push	r14
     caa:	ff 92       	push	r15
     cac:	0f 93       	push	r16
     cae:	1f 93       	push	r17
     cb0:	cf 93       	push	r28
     cb2:	df 93       	push	r29
     cb4:	cd b7       	in	r28, 0x3d	; 61
     cb6:	de b7       	in	r29, 0x3e	; 62
     cb8:	2a 97       	sbiw	r28, 0x0a	; 10
     cba:	0f b6       	in	r0, 0x3f	; 63
     cbc:	f8 94       	cli
     cbe:	de bf       	out	0x3e, r29	; 62
     cc0:	0f be       	out	0x3f, r0	; 63
     cc2:	cd bf       	out	0x3d, r28	; 61
	uint8_t i, sp[DS18X20_SP_SIZE];
	uint16_t meas;

	// make sure we have a device to check and the bus is working
	if( id == NULL || owi_device_command( DS18X20_READ, id)) return DS18X20_BAD_TEMP;
     cc4:	00 97       	sbiw	r24, 0x00	; 0
     cc6:	19 f4       	brne	.+6      	; 0xcce <DS18X20_get_meas+0x28>
     cc8:	8f e0       	ldi	r24, 0x0F	; 15
     cca:	97 e2       	ldi	r25, 0x27	; 39
     ccc:	26 c0       	rjmp	.+76     	; 0xd1a <DS18X20_get_meas+0x74>
     cce:	bc 01       	movw	r22, r24
     cd0:	8e eb       	ldi	r24, 0xBE	; 190
     cd2:	0e 94 59 08 	call	0x10b2	; 0x10b2 <owi_device_command>
     cd6:	81 11       	cpse	r24, r1
     cd8:	f7 cf       	rjmp	.-18     	; 0xcc8 <DS18X20_get_meas+0x22>
     cda:	8e 01       	movw	r16, r28
     cdc:	0f 5f       	subi	r16, 0xFF	; 255
     cde:	1f 4f       	sbci	r17, 0xFF	; 255
     ce0:	7e 01       	movw	r14, r28
     ce2:	8a e0       	ldi	r24, 0x0A	; 10
     ce4:	e8 0e       	add	r14, r24
     ce6:	f1 1c       	adc	r15, r1
     ce8:	d0 2e       	mov	r13, r16
     cea:	91 2f       	mov	r25, r17

	// get the scratchpad data
	for( i = 0 ; i < DS18X20_SP_SIZE; i++) sp[i] = owi_byte_io( 0xFF);
     cec:	8f ef       	ldi	r24, 0xFF	; 255
     cee:	9a 87       	std	Y+10, r25	; 0x0a
     cf0:	0e 94 31 08 	call	0x1062	; 0x1062 <owi_byte_io>
     cf4:	f8 01       	movw	r30, r16
     cf6:	81 93       	st	Z+, r24
     cf8:	8f 01       	movw	r16, r30
     cfa:	9a 85       	ldd	r25, Y+10	; 0x0a
     cfc:	ee 15       	cp	r30, r14
     cfe:	ff 05       	cpc	r31, r15
     d00:	a9 f7       	brne	.-22     	; 0xcec <DS18X20_get_meas+0x46>
	if( crc8( &sp[0], DS18X20_SP_SIZE)) return DS18X20_BAD_TEMP;
     d02:	69 e0       	ldi	r22, 0x09	; 9
     d04:	8d 2d       	mov	r24, r13
     d06:	0e 94 0a 06 	call	0xc14	; 0xc14 <crc8>
     d0a:	81 11       	cpse	r24, r1
     d0c:	dd cf       	rjmp	.-70     	; 0xcc8 <DS18X20_get_meas+0x22>

	// got good data
	meas = sp[0] | (((uint16_t)sp[1]) << 8);
     d0e:	8a 81       	ldd	r24, Y+2	; 0x02
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	98 2f       	mov	r25, r24
     d14:	88 27       	eor	r24, r24
     d16:	29 81       	ldd	r18, Y+1	; 0x01
     d18:	82 2b       	or	r24, r18

	return meas;
}
     d1a:	2a 96       	adiw	r28, 0x0a	; 10
     d1c:	0f b6       	in	r0, 0x3f	; 63
     d1e:	f8 94       	cli
     d20:	de bf       	out	0x3e, r29	; 62
     d22:	0f be       	out	0x3f, r0	; 63
     d24:	cd bf       	out	0x3d, r28	; 61
     d26:	df 91       	pop	r29
     d28:	cf 91       	pop	r28
     d2a:	1f 91       	pop	r17
     d2c:	0f 91       	pop	r16
     d2e:	ff 90       	pop	r15
     d30:	ef 90       	pop	r14
     d32:	df 90       	pop	r13
     d34:	08 95       	ret

00000d36 <DS18X20_get_temp>:
/**************************************************************/
// returns the temperature * 100 as an int
extern int DS18X20_get_temp( uint8_t id[])
{
     d36:	bf 92       	push	r11
     d38:	cf 92       	push	r12
     d3a:	df 92       	push	r13
     d3c:	ef 92       	push	r14
     d3e:	ff 92       	push	r15
     d40:	0f 93       	push	r16
     d42:	1f 93       	push	r17
     d44:	cf 93       	push	r28
     d46:	df 93       	push	r29
     d48:	cd b7       	in	r28, 0x3d	; 61
     d4a:	de b7       	in	r29, 0x3e	; 62
     d4c:	62 97       	sbiw	r28, 0x12	; 18
     d4e:	0f b6       	in	r0, 0x3f	; 63
     d50:	f8 94       	cli
     d52:	de bf       	out	0x3e, r29	; 62
     d54:	0f be       	out	0x3f, r0	; 63
     d56:	cd bf       	out	0x3d, r28	; 61
     d58:	7c 01       	movw	r14, r24
	uint8_t sp[DS18X20_SP_SIZE];
	uint16_t meas;
	uint8_t i, subzero, cel;
	uint8_t need_rounding[] = { 1, 3, 4, 6, 9, 11, 12, 14 };
     d5a:	88 e0       	ldi	r24, 0x08	; 8
     d5c:	ea e1       	ldi	r30, 0x1A	; 26
     d5e:	f1 e0       	ldi	r31, 0x01	; 1
     d60:	de 01       	movw	r26, r28
     d62:	1a 96       	adiw	r26, 0x0a	; 10
     d64:	01 90       	ld	r0, Z+
     d66:	0d 92       	st	X+, r0
     d68:	8a 95       	dec	r24
     d6a:	e1 f7       	brne	.-8      	; 0xd64 <DS18X20_get_temp+0x2e>

	// make sure we have a device to check and the bus is working
	if( id == NULL || owi_device_command( DS18X20_READ, id)) return DS18X20_BAD_TEMP;
     d6c:	e1 14       	cp	r14, r1
     d6e:	f1 04       	cpc	r15, r1
     d70:	19 f4       	brne	.+6      	; 0xd78 <DS18X20_get_temp+0x42>
     d72:	8f e0       	ldi	r24, 0x0F	; 15
     d74:	97 e2       	ldi	r25, 0x27	; 39
     d76:	73 c0       	rjmp	.+230    	; 0xe5e <DS18X20_get_temp+0x128>
     d78:	b7 01       	movw	r22, r14
     d7a:	8e eb       	ldi	r24, 0xBE	; 190
     d7c:	0e 94 59 08 	call	0x10b2	; 0x10b2 <owi_device_command>
     d80:	81 11       	cpse	r24, r1
     d82:	f7 cf       	rjmp	.-18     	; 0xd72 <DS18X20_get_temp+0x3c>
     d84:	8e 01       	movw	r16, r28
     d86:	0f 5f       	subi	r16, 0xFF	; 255
     d88:	1f 4f       	sbci	r17, 0xFF	; 255
     d8a:	6e 01       	movw	r12, r28
     d8c:	4a e0       	ldi	r20, 0x0A	; 10
     d8e:	c4 0e       	add	r12, r20
     d90:	d1 1c       	adc	r13, r1
     d92:	b0 2e       	mov	r11, r16
     d94:	91 2f       	mov	r25, r17
	// get the scratchpad data
	for( i = 0 ; i < DS18X20_SP_SIZE; i++) sp[i] = owi_byte_io( 0xFF);
     d96:	8f ef       	ldi	r24, 0xFF	; 255
     d98:	9a 8b       	std	Y+18, r25	; 0x12
     d9a:	0e 94 31 08 	call	0x1062	; 0x1062 <owi_byte_io>
     d9e:	f8 01       	movw	r30, r16
     da0:	81 93       	st	Z+, r24
     da2:	8f 01       	movw	r16, r30
     da4:	9a 89       	ldd	r25, Y+18	; 0x12
     da6:	ec 15       	cp	r30, r12
     da8:	fd 05       	cpc	r31, r13
     daa:	a9 f7       	brne	.-22     	; 0xd96 <DS18X20_get_temp+0x60>
	if( crc8( &sp[0], DS18X20_SP_SIZE)) return DS18X20_BAD_TEMP;
     dac:	69 e0       	ldi	r22, 0x09	; 9
     dae:	8b 2d       	mov	r24, r11
     db0:	0e 94 0a 06 	call	0xc14	; 0xc14 <crc8>
     db4:	81 11       	cpse	r24, r1
     db6:	dd cf       	rjmp	.-70     	; 0xd72 <DS18X20_get_temp+0x3c>

	// got good data so start conversion
	meas = sp[0];  // LSB
     db8:	29 81       	ldd	r18, Y+1	; 0x01
	meas |= ((uint16_t)sp[1]) << 8; // MSB
     dba:	8a 81       	ldd	r24, Y+2	; 0x02
     dbc:	30 e0       	ldi	r19, 0x00	; 0
     dbe:	38 2b       	or	r19, r24

	// convert to 18S20 9bit temp to 12bit temperature 
	if( OWI_FAMILY( id[0]) == DS18S20_FAMILY_CODE)
     dc0:	f7 01       	movw	r30, r14
     dc2:	40 81       	ld	r20, Z
     dc4:	4f 77       	andi	r20, 0x7F	; 127
     dc6:	40 31       	cpi	r20, 0x10	; 16
     dc8:	71 f4       	brne	.+28     	; 0xde6 <DS18X20_get_temp+0xb0>
	{
		/* Extended measurements for DS18S20 contributed by Carsten Foss */
		meas &= (uint16_t) 0xfffe;	// Discard LSB , needed for later extended precicion calc
     dca:	c9 01       	movw	r24, r18
     dcc:	8e 7f       	andi	r24, 0xFE	; 254
		meas <<= 3;					// Convert to 12-bit , now degrees are in 1/16 degrees units
     dce:	53 e0       	ldi	r21, 0x03	; 3
     dd0:	88 0f       	add	r24, r24
     dd2:	99 1f       	adc	r25, r25
     dd4:	5a 95       	dec	r21
     dd6:	e1 f7       	brne	.-8      	; 0xdd0 <DS18X20_get_temp+0x9a>
		meas += (16 - sp[6]) - 4;	// Add the compensation , and remember to subtract 0.25 degree (4/16)
     dd8:	5f 81       	ldd	r21, Y+7	; 0x07
     dda:	2c e0       	ldi	r18, 0x0C	; 12
     ddc:	30 e0       	ldi	r19, 0x00	; 0
     dde:	25 1b       	sub	r18, r21
     de0:	31 09       	sbc	r19, r1
     de2:	28 0f       	add	r18, r24
     de4:	39 1f       	adc	r19, r25
	}

	// check for negative 
	if( meas & 0x8000) 
     de6:	37 ff       	sbrs	r19, 7
     de8:	05 c0       	rjmp	.+10     	; 0xdf4 <DS18X20_get_temp+0xbe>
	{
		subzero = 1;      // mark negative
		meas ^= 0xffff;  // convert to positive => (twos complement)++
		meas++;
     dea:	31 95       	neg	r19
     dec:	21 95       	neg	r18
     dee:	31 09       	sbc	r19, r1
	}

	// check for negative 
	if( meas & 0x8000) 
	{
		subzero = 1;      // mark negative
     df0:	a1 e0       	ldi	r26, 0x01	; 1
     df2:	01 c0       	rjmp	.+2      	; 0xdf6 <DS18X20_get_temp+0xc0>
		meas ^= 0xffff;  // convert to positive => (twos complement)++
		meas++;
	}
	else subzero = 0;
     df4:	a0 e0       	ldi	r26, 0x00	; 0
	
	// clear undefined bits for B != 12bit
	if( OWI_FAMILY( id[0]) == DS18B20_FAMILY_CODE)
     df6:	48 32       	cpi	r20, 0x28	; 40
     df8:	71 f4       	brne	.+28     	; 0xe16 <DS18X20_get_temp+0xe0>
	{
		i = sp[DS18B20_CONF_REG];
     dfa:	8d 81       	ldd	r24, Y+5	; 0x05
		if ( (i & DS18B20_12_BIT) == DS18B20_12_BIT ) ;	// both bits set
     dfc:	98 2f       	mov	r25, r24
     dfe:	90 76       	andi	r25, 0x60	; 96
     e00:	90 36       	cpi	r25, 0x60	; 96
     e02:	49 f0       	breq	.+18     	; 0xe16 <DS18X20_get_temp+0xe0>
		else if( (i & DS18B20_11_BIT) == DS18B20_11_BIT) // bit 6
     e04:	86 ff       	sbrs	r24, 6
     e06:	02 c0       	rjmp	.+4      	; 0xe0c <DS18X20_get_temp+0xd6>
			meas &= ~(DS18B20_11_BIT_UNDF);
     e08:	2e 7f       	andi	r18, 0xFE	; 254
     e0a:	05 c0       	rjmp	.+10     	; 0xe16 <DS18X20_get_temp+0xe0>
		else if( (i & DS18B20_10_BIT) == DS18B20_10_BIT) // bit 5
     e0c:	85 ff       	sbrs	r24, 5
     e0e:	02 c0       	rjmp	.+4      	; 0xe14 <DS18X20_get_temp+0xde>
			meas &= ~(DS18B20_10_BIT_UNDF);
     e10:	2c 7f       	andi	r18, 0xFC	; 252
     e12:	01 c0       	rjmp	.+2      	; 0xe16 <DS18X20_get_temp+0xe0>
		else // neither bit 6 or 5
			meas &= ~(DS18B20_9_BIT_UNDF);
     e14:	28 7f       	andi	r18, 0xF8	; 248
	}			
	
	cel = (uint8_t)(meas >> 4);	// save the integer degrees 
     e16:	c9 01       	movw	r24, r18
     e18:	44 e0       	ldi	r20, 0x04	; 4
     e1a:	96 95       	lsr	r25
     e1c:	87 95       	ror	r24
     e1e:	4a 95       	dec	r20
     e20:	e1 f7       	brne	.-8      	; 0xe1a <DS18X20_get_temp+0xe4>
	meas = (uint8_t)(meas & 0x000F);	// get the fractional part
     e22:	2f 70       	andi	r18, 0x0F	; 15
     e24:	33 27       	eor	r19, r19

	// need rounding?
	if( !subzero)
     e26:	a1 11       	cpse	r26, r1
     e28:	0f c0       	rjmp	.+30     	; 0xe48 <DS18X20_get_temp+0x112>
     e2a:	f6 01       	movw	r30, r12
     e2c:	ae 01       	movw	r20, r28
     e2e:	4e 5e       	subi	r20, 0xEE	; 238
     e30:	5f 4f       	sbci	r21, 0xFF	; 255
	{
		for( i = 0; i < sizeof(need_rounding); i++)
		{
			if( meas == need_rounding[i])
     e32:	61 91       	ld	r22, Z+
     e34:	70 e0       	ldi	r23, 0x00	; 0
     e36:	26 17       	cp	r18, r22
     e38:	37 07       	cpc	r19, r23
     e3a:	19 f4       	brne	.+6      	; 0xe42 <DS18X20_get_temp+0x10c>
			{
				meas++;
     e3c:	2f 5f       	subi	r18, 0xFF	; 255
     e3e:	3f 4f       	sbci	r19, 0xFF	; 255
				break;
     e40:	03 c0       	rjmp	.+6      	; 0xe48 <DS18X20_get_temp+0x112>
	meas = (uint8_t)(meas & 0x000F);	// get the fractional part

	// need rounding?
	if( !subzero)
	{
		for( i = 0; i < sizeof(need_rounding); i++)
     e42:	e4 17       	cp	r30, r20
     e44:	f5 07       	cpc	r31, r21
     e46:	a9 f7       	brne	.-22     	; 0xe32 <DS18X20_get_temp+0xfc>
				meas++;
				break;
			}
		}
	}
	meas += cel * 10;
     e48:	fa e0       	ldi	r31, 0x0A	; 10
     e4a:	8f 9f       	mul	r24, r31
     e4c:	20 0d       	add	r18, r0
     e4e:	31 1d       	adc	r19, r1
     e50:	11 24       	eor	r1, r1

	return ((subzero) ? -meas : meas);
     e52:	aa 23       	and	r26, r26
     e54:	19 f0       	breq	.+6      	; 0xe5c <DS18X20_get_temp+0x126>
     e56:	31 95       	neg	r19
     e58:	21 95       	neg	r18
     e5a:	31 09       	sbc	r19, r1
     e5c:	c9 01       	movw	r24, r18
}
     e5e:	62 96       	adiw	r28, 0x12	; 18
     e60:	0f b6       	in	r0, 0x3f	; 63
     e62:	f8 94       	cli
     e64:	de bf       	out	0x3e, r29	; 62
     e66:	0f be       	out	0x3f, r0	; 63
     e68:	cd bf       	out	0x3d, r28	; 61
     e6a:	df 91       	pop	r29
     e6c:	cf 91       	pop	r28
     e6e:	1f 91       	pop	r17
     e70:	0f 91       	pop	r16
     e72:	ff 90       	pop	r15
     e74:	ef 90       	pop	r14
     e76:	df 90       	pop	r13
     e78:	cf 90       	pop	r12
     e7a:	bf 90       	pop	r11
     e7c:	08 95       	ret

00000e7e <toggle_e>:

#if LCD_IO_MODE
	/* toggle Enable Pin to initiate write */
	static void toggle_e( void)
	{
		lcd_e_high();
     e7e:	2e 9a       	sbi	0x05, 6	; 5
		lcd_e_delay();
     e80:	00 c0       	rjmp	.+0      	; 0xe82 <toggle_e+0x4>
		lcd_e_low();
     e82:	2e 98       	cbi	0x05, 6	; 5
     e84:	08 95       	ret

00000e86 <lcd_write>:
				 0: write instruction
Returns:  none
*************************************************************************/
#if LCD_IO_MODE
	static void lcd_write( uint8_t data, uint8_t rs) 
	{
     e86:	1f 93       	push	r17
     e88:	cf 93       	push	r28
     e8a:	df 93       	push	r29
     e8c:	1f 92       	push	r1
     e8e:	cd b7       	in	r28, 0x3d	; 61
     e90:	de b7       	in	r29, 0x3e	; 62
		unsigned char dataBits ;


		if( rs)	/* write data		( RS=1, RW=0) */
     e92:	66 23       	and	r22, r22
     e94:	11 f0       	breq	.+4      	; 0xe9a <lcd_write+0x14>
		{
			lcd_rs_high();
     e96:	2c 9a       	sbi	0x05, 4	; 5
     e98:	01 c0       	rjmp	.+2      	; 0xe9c <lcd_write+0x16>
		}
		else	/* write instruction ( RS=0, RW=0) */
		{
			lcd_rs_low();
     e9a:	2c 98       	cbi	0x05, 4	; 5
		}
		lcd_rw_low();
     e9c:	2d 98       	cbi	0x05, 5	; 5

		if( (&LCD_DATA0_PORT == &LCD_DATA1_PORT) && (&LCD_DATA1_PORT == &LCD_DATA2_PORT) && (&LCD_DATA2_PORT == &LCD_DATA3_PORT)
				&& (LCD_DATA0_PIN == 0) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3))
		{
			/* configure data pins as output */
			DDR( LCD_DATA0_PORT) |= 0x0F;
     e9e:	94 b1       	in	r25, 0x04	; 4
     ea0:	9f 60       	ori	r25, 0x0F	; 15
     ea2:	94 b9       	out	0x04, r25	; 4

			/* output high nibble first */
			dataBits = LCD_DATA0_PORT & 0xF0;
     ea4:	15 b1       	in	r17, 0x05	; 5
     ea6:	10 7f       	andi	r17, 0xF0	; 240
			LCD_DATA0_PORT = dataBits | ((data>>4) & 0x0F);
     ea8:	98 2f       	mov	r25, r24
     eaa:	92 95       	swap	r25
     eac:	9f 70       	andi	r25, 0x0F	; 15
     eae:	91 2b       	or	r25, r17
     eb0:	95 b9       	out	0x05, r25	; 5
			lcd_e_toggle();
     eb2:	89 83       	std	Y+1, r24	; 0x01
     eb4:	0e 94 3f 07 	call	0xe7e	; 0xe7e <toggle_e>

			/* output low nibble */
			LCD_DATA0_PORT = dataBits | (data & 0x0F);
     eb8:	89 81       	ldd	r24, Y+1	; 0x01
     eba:	8f 70       	andi	r24, 0x0F	; 15
     ebc:	81 2b       	or	r24, r17
     ebe:	85 b9       	out	0x05, r24	; 5
			lcd_e_toggle();
     ec0:	0e 94 3f 07 	call	0xe7e	; 0xe7e <toggle_e>

			/* all data pins high ( inactive) */
			LCD_DATA0_PORT = dataBits | 0x0F;
     ec4:	1f 60       	ori	r17, 0x0F	; 15
     ec6:	15 b9       	out	0x05, r17	; 5
			LCD_DATA0_PORT |= _BV( LCD_DATA0_PIN);
			LCD_DATA1_PORT |= _BV( LCD_DATA1_PIN);
			LCD_DATA2_PORT |= _BV( LCD_DATA2_PIN);
			LCD_DATA3_PORT |= _BV( LCD_DATA3_PIN);
		}
	}
     ec8:	0f 90       	pop	r0
     eca:	df 91       	pop	r29
     ecc:	cf 91       	pop	r28
     ece:	1f 91       	pop	r17
     ed0:	08 95       	ret

00000ed2 <lcd_read.constprop.0>:
	
	
	if( rs)
		lcd_rs_high();						/* RS=1: read data	  */
	else
		lcd_rs_low();						/* RS=0: read busy flag */
     ed2:	2c 98       	cbi	0x05, 4	; 5
	lcd_rw_high();							/* RW=1  read mode	  */
     ed4:	2d 9a       	sbi	0x05, 5	; 5
	
	if( (&LCD_DATA0_PORT == &LCD_DATA1_PORT) && (&LCD_DATA1_PORT == &LCD_DATA2_PORT) && (&LCD_DATA2_PORT == &LCD_DATA3_PORT)
	  && (LCD_DATA0_PIN == 0) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3))
	{
		DDR( LCD_DATA0_PORT) &= 0xF0;		 /* configure data pins as input */
     ed6:	84 b1       	in	r24, 0x04	; 4
     ed8:	80 7f       	andi	r24, 0xF0	; 240
     eda:	84 b9       	out	0x04, r24	; 4
		
		lcd_e_high();
     edc:	2e 9a       	sbi	0x05, 6	; 5
		lcd_e_delay();		
     ede:	00 c0       	rjmp	.+0      	; 0xee0 <lcd_read.constprop.0+0xe>
		data = PIN( LCD_DATA0_PORT) << 4;	 /* read high nibble first */
     ee0:	83 b1       	in	r24, 0x03	; 3
		lcd_e_low();
     ee2:	2e 98       	cbi	0x05, 6	; 5
		
		lcd_e_delay();						/* Enable 500ns low		*/
     ee4:	00 c0       	rjmp	.+0      	; 0xee6 <lcd_read.constprop.0+0x14>
		
		lcd_e_high();
     ee6:	2e 9a       	sbi	0x05, 6	; 5
		lcd_e_delay();
     ee8:	00 c0       	rjmp	.+0      	; 0xeea <lcd_read.constprop.0+0x18>
		data |= PIN( LCD_DATA0_PORT) & 0x0F;	/* read low nibble		*/
     eea:	93 b1       	in	r25, 0x03	; 3
     eec:	9f 70       	andi	r25, 0x0F	; 15
	{
		DDR( LCD_DATA0_PORT) &= 0xF0;		 /* configure data pins as input */
		
		lcd_e_high();
		lcd_e_delay();		
		data = PIN( LCD_DATA0_PORT) << 4;	 /* read high nibble first */
     eee:	82 95       	swap	r24
     ef0:	80 7f       	andi	r24, 0xF0	; 240
		lcd_e_delay();						/* Enable 500ns low		*/
		
		lcd_e_high();
		lcd_e_delay();
		data |= PIN( LCD_DATA0_PORT) & 0x0F;	/* read low nibble		*/
		lcd_e_low();
     ef2:	2e 98       	cbi	0x05, 6	; 5
		if( PIN( LCD_DATA2_PORT) & _BV( LCD_DATA2_PIN)) data |= 0x04;
		if( PIN( LCD_DATA3_PORT) & _BV( LCD_DATA3_PIN)) data |= 0x08;		
		lcd_e_low();
	}
	return data;
}
     ef4:	89 2b       	or	r24, r25
     ef6:	08 95       	ret

00000ef8 <lcd_waitbusy>:

{
	register uint8_t c;
	
	/* wait until busy flag is cleared */
	while ( (c = lcd_read( 0)) & (1 << LCD_BUSY)) {}
     ef8:	0e 94 69 07 	call	0xed2	; 0xed2 <lcd_read.constprop.0>
     efc:	87 fd       	sbrc	r24, 7
     efe:	fc cf       	rjmp	.-8      	; 0xef8 <lcd_waitbusy>
static inline void _delayFourCycles( unsigned int __count)
{
	if( __count == 0)	
		__asm__ __volatile__( "rjmp 1f\n 1:");	// 2 cycles
	else
		__asm__ __volatile__( 
     f00:	84 e0       	ldi	r24, 0x04	; 4
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	01 97       	sbiw	r24, 0x01	; 1
     f06:	f1 f7       	brne	.-4      	; 0xf04 <lcd_waitbusy+0xc>
	
	/* the address counter is updated 4us after the busy flag is cleared */
	delay( 2);

	/* now read the address counter */
	return ( lcd_read( 0));  // return address counter
     f08:	0c 94 69 07 	jmp	0xed2	; 0xed2 <lcd_read.constprop.0>

00000f0c <lcd_command>:
Send LCD controller instruction command
Input:	instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command( uint8_t cmd)
{
     f0c:	cf 93       	push	r28
     f0e:	c8 2f       	mov	r28, r24
	lcd_waitbusy();
     f10:	0e 94 7c 07 	call	0xef8	; 0xef8 <lcd_waitbusy>
	lcd_write( cmd, 0);
     f14:	60 e0       	ldi	r22, 0x00	; 0
     f16:	8c 2f       	mov	r24, r28
}
     f18:	cf 91       	pop	r28
Returns: none
*************************************************************************/
void lcd_command( uint8_t cmd)
{
	lcd_waitbusy();
	lcd_write( cmd, 0);
     f1a:	0c 94 43 07 	jmp	0xe86	; 0xe86 <lcd_write>

00000f1e <lcd_data>:
Send data byte to LCD controller 
Input:	data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data( uint8_t data)
{
     f1e:	cf 93       	push	r28
     f20:	c8 2f       	mov	r28, r24
	lcd_waitbusy();
     f22:	0e 94 7c 07 	call	0xef8	; 0xef8 <lcd_waitbusy>
	lcd_write( data, 1);
     f26:	61 e0       	ldi	r22, 0x01	; 1
     f28:	8c 2f       	mov	r24, r28
}
     f2a:	cf 91       	pop	r28
Returns: none
*************************************************************************/
void lcd_data( uint8_t data)
{
	lcd_waitbusy();
	lcd_write( data, 1);
     f2c:	0c 94 43 07 	jmp	0xe86	; 0xe86 <lcd_write>

00000f30 <lcd_gotoxy>:
		lcd_command( (1 << LCD_DDRAM) + LCD_START_LINE1 + x);
	else
		lcd_command( (1 << LCD_DDRAM) + LCD_START_LINE2 + x);
#endif
#if LCD_LINES == 4
	if( y == 0)
     f30:	61 11       	cpse	r22, r1
     f32:	02 c0       	rjmp	.+4      	; 0xf38 <lcd_gotoxy+0x8>
		lcd_command( (1 << LCD_DDRAM) + LCD_START_LINE1 + x);
     f34:	80 58       	subi	r24, 0x80	; 128
     f36:	09 c0       	rjmp	.+18     	; 0xf4a <lcd_gotoxy+0x1a>
	else if( y == 1)
     f38:	61 30       	cpi	r22, 0x01	; 1
     f3a:	11 f4       	brne	.+4      	; 0xf40 <lcd_gotoxy+0x10>
		lcd_command( (1 << LCD_DDRAM) + LCD_START_LINE2 + x);
     f3c:	80 54       	subi	r24, 0x40	; 64
     f3e:	05 c0       	rjmp	.+10     	; 0xf4a <lcd_gotoxy+0x1a>
	else if( y == 2)
     f40:	62 30       	cpi	r22, 0x02	; 2
     f42:	11 f4       	brne	.+4      	; 0xf48 <lcd_gotoxy+0x18>
		lcd_command( (1 << LCD_DDRAM) + LCD_START_LINE3 + x);
     f44:	8c 56       	subi	r24, 0x6C	; 108
     f46:	01 c0       	rjmp	.+2      	; 0xf4a <lcd_gotoxy+0x1a>
	else /* y == 3 */
		lcd_command( (1 << LCD_DDRAM) + LCD_START_LINE4 + x);
     f48:	8c 52       	subi	r24, 0x2C	; 44
     f4a:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <lcd_command>

00000f4e <lcd_getxy>:

/*************************************************************************
*************************************************************************/
int lcd_getxy( void)
{
	return lcd_waitbusy();
     f4e:	0e 94 7c 07 	call	0xef8	; 0xef8 <lcd_waitbusy>
}
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	08 95       	ret

00000f56 <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr( void)
{
	lcd_command(1 << LCD_CLR);
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <lcd_command>

00000f5c <lcd_home>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home( void)
{
	lcd_command(1 << LCD_HOME);
     f5c:	82 e0       	ldi	r24, 0x02	; 2
     f5e:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <lcd_command>

00000f62 <lcd_putc>:
Display character at current cursor position 
Input:	character to be displayed										
Returns:  none
*************************************************************************/
void lcd_putc( char c)
{
     f62:	cf 93       	push	r28
     f64:	c8 2f       	mov	r28, r24
	uint8_t pos;


	pos = lcd_waitbusy();	// read busy-flag and address counter
     f66:	0e 94 7c 07 	call	0xef8	; 0xef8 <lcd_waitbusy>
     f6a:	98 2f       	mov	r25, r24
	if( c == '\n')
     f6c:	ca 30       	cpi	r28, 0x0A	; 10
     f6e:	a1 f4       	brne	.+40     	; 0xf98 <lcd_putc+0x36>
	else if( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE4))
		addressCounter = LCD_START_LINE4;
	else 
		addressCounter = LCD_START_LINE1;
#else
	if( pos < LCD_START_LINE3)
     f70:	84 31       	cpi	r24, 0x14	; 20
     f72:	48 f0       	brcs	.+18     	; 0xf86 <lcd_putc+0x24>
		addressCounter = LCD_START_LINE2;
	else if( (pos >= LCD_START_LINE2) && (pos < LCD_START_LINE4))
     f74:	80 ec       	ldi	r24, 0xC0	; 192
     f76:	89 0f       	add	r24, r25
     f78:	84 31       	cpi	r24, 0x14	; 20
     f7a:	38 f0       	brcs	.+14     	; 0xf8a <lcd_putc+0x28>
		addressCounter = LCD_START_LINE3;
	else if( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE2))
     f7c:	94 51       	subi	r25, 0x14	; 20
     f7e:	9c 32       	cpi	r25, 0x2C	; 44
     f80:	30 f4       	brcc	.+12     	; 0xf8e <lcd_putc+0x2c>
		addressCounter = LCD_START_LINE4;
     f82:	84 e5       	ldi	r24, 0x54	; 84
     f84:	05 c0       	rjmp	.+10     	; 0xf90 <lcd_putc+0x2e>
		addressCounter = LCD_START_LINE4;
	else 
		addressCounter = LCD_START_LINE1;
#else
	if( pos < LCD_START_LINE3)
		addressCounter = LCD_START_LINE2;
     f86:	80 e4       	ldi	r24, 0x40	; 64
     f88:	03 c0       	rjmp	.+6      	; 0xf90 <lcd_putc+0x2e>
	else if( (pos >= LCD_START_LINE2) && (pos < LCD_START_LINE4))
		addressCounter = LCD_START_LINE3;
     f8a:	84 e1       	ldi	r24, 0x14	; 20
     f8c:	01 c0       	rjmp	.+2      	; 0xf90 <lcd_putc+0x2e>
	else if( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE2))
		addressCounter = LCD_START_LINE4;
	else 
		addressCounter = LCD_START_LINE1;
     f8e:	80 e0       	ldi	r24, 0x00	; 0
#endif
#endif
	lcd_command( (1 << LCD_DDRAM) + addressCounter);
     f90:	80 58       	subi	r24, 0x80	; 128
		lcd_waitbusy();
#endif
		lcd_write( c, 1);
	}

}/* lcd_putc */
     f92:	cf 91       	pop	r28
		addressCounter = LCD_START_LINE4;
	else 
		addressCounter = LCD_START_LINE1;
#endif
#endif
	lcd_command( (1 << LCD_DDRAM) + addressCounter);
     f94:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <lcd_command>
			lcd_write( (1 << LCD_DDRAM) + LCD_START_LINE1, 0);
		}
#endif
		lcd_waitbusy();
#endif
		lcd_write( c, 1);
     f98:	61 e0       	ldi	r22, 0x01	; 1
     f9a:	8c 2f       	mov	r24, r28
	}

}/* lcd_putc */
     f9c:	cf 91       	pop	r28
			lcd_write( (1 << LCD_DDRAM) + LCD_START_LINE1, 0);
		}
#endif
		lcd_waitbusy();
#endif
		lcd_write( c, 1);
     f9e:	0c 94 43 07 	jmp	0xe86	; 0xe86 <lcd_write>

00000fa2 <lcd_puts>:
Input:	string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts( const char *s)
/* print string on lcd ( no auto linefeed) */
{
     fa2:	cf 93       	push	r28
     fa4:	df 93       	push	r29
     fa6:	ec 01       	movw	r28, r24
	register char c;

	while ( (c = *s++))
     fa8:	89 91       	ld	r24, Y+
     faa:	88 23       	and	r24, r24
     fac:	19 f0       	breq	.+6      	; 0xfb4 <lcd_puts+0x12>
	{
		lcd_putc( c);
     fae:	0e 94 b1 07 	call	0xf62	; 0xf62 <lcd_putc>
     fb2:	fa cf       	rjmp	.-12     	; 0xfa8 <lcd_puts+0x6>
	}

}/* lcd_puts */
     fb4:	df 91       	pop	r29
     fb6:	cf 91       	pop	r28
     fb8:	08 95       	ret

00000fba <lcd_puts_p>:
Input:	 string from program memory be be displayed										
Returns:	none
*************************************************************************/
void lcd_puts_p( const char *progmem_s)
/* print string from program memory on lcd ( no auto linefeed) */
{
     fba:	cf 93       	push	r28
     fbc:	df 93       	push	r29
     fbe:	fc 01       	movw	r30, r24
	register char c;

	while ( ( c = pgm_read_byte( progmem_s++)))
     fc0:	84 91       	lpm	r24, Z
     fc2:	ef 01       	movw	r28, r30
     fc4:	21 96       	adiw	r28, 0x01	; 1
     fc6:	88 23       	and	r24, r24
     fc8:	21 f0       	breq	.+8      	; 0xfd2 <lcd_puts_p+0x18>
	{
		lcd_putc( c);
     fca:	0e 94 b1 07 	call	0xf62	; 0xf62 <lcd_putc>
     fce:	fe 01       	movw	r30, r28
     fd0:	f7 cf       	rjmp	.-18     	; 0xfc0 <lcd_puts_p+0x6>
	}

}/* lcd_puts_p */
     fd2:	df 91       	pop	r29
     fd4:	cf 91       	pop	r28
     fd6:	08 95       	ret

00000fd8 <lcd_puthex_nibble>:
for his UART library.  Adapted for the LCD lib by Tom Blough
Don't blame P. Fleury if it doesn't work ;-)
**************************************************************************/
void lcd_puthex_nibble(const unsigned char b)
{
    unsigned char  c = b & 0x0f;
     fd8:	8f 70       	andi	r24, 0x0F	; 15
    if (c>9) c += 'A'-10;
     fda:	8a 30       	cpi	r24, 0x0A	; 10
     fdc:	10 f0       	brcs	.+4      	; 0xfe2 <lcd_puthex_nibble+0xa>
     fde:	89 5c       	subi	r24, 0xC9	; 201
     fe0:	01 c0       	rjmp	.+2      	; 0xfe4 <lcd_puthex_nibble+0xc>
    else c += '0';
     fe2:	80 5d       	subi	r24, 0xD0	; 208
    lcd_putc(c);
     fe4:	0c 94 b1 07 	jmp	0xf62	; 0xf62 <lcd_putc>

00000fe8 <lcd_puthex_byte>:
This functions was created by Martin Thomas <eversmith@heizung-thomas.de>
for his UART library.  Adapted for the LCD lib by Tom Blough
Don't blame P. Fleury if it doesn't work ;-)
**************************************************************************/
void lcd_puthex_byte(const unsigned char  b)
{
     fe8:	cf 93       	push	r28
     fea:	c8 2f       	mov	r28, r24
    lcd_puthex_nibble(b>>4);
     fec:	82 95       	swap	r24
     fee:	8f 70       	andi	r24, 0x0F	; 15
     ff0:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <lcd_puthex_nibble>
    lcd_puthex_nibble(b);
     ff4:	8c 2f       	mov	r24, r28
} /* lcd_puthex_byte */
     ff6:	cf 91       	pop	r28
Don't blame P. Fleury if it doesn't work ;-)
**************************************************************************/
void lcd_puthex_byte(const unsigned char  b)
{
    lcd_puthex_nibble(b>>4);
    lcd_puthex_nibble(b);
     ff8:	0c 94 ec 07 	jmp	0xfd8	; 0xfd8 <lcd_puthex_nibble>

00000ffc <lcd_init>:
					LCD_DISP_ON_CURSOR	  display on, cursor on
					LCD_DISP_CURSOR_BLINK	display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init( uint8_t dispAttr)
{
     ffc:	cf 93       	push	r28
     ffe:	c8 2f       	mov	r28, r24
	  && (&LCD_RS_PORT == &LCD_DATA0_PORT) && (&LCD_RW_PORT == &LCD_DATA0_PORT) && (&LCD_E_PORT == &LCD_DATA0_PORT)
	  && (LCD_DATA0_PIN == 0) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) 
	  && (LCD_RS_PIN == 4) && (LCD_RW_PIN == 5) && (LCD_E_PIN == 6))
	{
		/* configure all port bits as output ( all LCD lines on same port) */
		DDR( LCD_DATA0_PORT) |= 0x7F;
    1000:	94 b1       	in	r25, 0x04	; 4
    1002:	9f 67       	ori	r25, 0x7F	; 127
    1004:	94 b9       	out	0x04, r25	; 4
static inline void _delayFourCycles( unsigned int __count)
{
	if( __count == 0)	
		__asm__ __volatile__( "rjmp 1f\n 1:");	// 2 cycles
	else
		__asm__ __volatile__( 
    1006:	e0 e0       	ldi	r30, 0x00	; 0
    1008:	fd e7       	ldi	r31, 0x7D	; 125
    100a:	31 97       	sbiw	r30, 0x01	; 1
    100c:	f1 f7       	brne	.-4      	; 0x100a <lcd_init+0xe>
		DDR( LCD_DATA3_PORT) |= _BV( LCD_DATA3_PIN);
	}
	delay(16000);		/* wait 16ms or more after power-on		*/
	
	/* initial write to lcd is 8bit */
	LCD_DATA1_PORT |= _BV( LCD_DATA1_PIN);  // _BV( LCD_FUNCTION)>>4;
    100e:	29 9a       	sbi	0x05, 1	; 5
	LCD_DATA0_PORT |= _BV( LCD_DATA0_PIN);  // _BV( LCD_FUNCTION_8BIT)>>4;
    1010:	28 9a       	sbi	0x05, 0	; 5
	lcd_e_toggle();
    1012:	0e 94 3f 07 	call	0xe7e	; 0xe7e <toggle_e>
static inline void _delayFourCycles( unsigned int __count)
{
	if( __count == 0)	
		__asm__ __volatile__( "rjmp 1f\n 1:");	// 2 cycles
	else
		__asm__ __volatile__( 
    1016:	e0 e0       	ldi	r30, 0x00	; 0
    1018:	f7 e2       	ldi	r31, 0x27	; 39
    101a:	31 97       	sbiw	r30, 0x01	; 1
    101c:	f1 f7       	brne	.-4      	; 0x101a <lcd_init+0x1e>
	LCD_DATA0_PORT |= _BV( LCD_DATA0_PIN);  // _BV( LCD_FUNCTION_8BIT)>>4;
	lcd_e_toggle();
	delay( 4992);		 /* delay, busy flag can't be checked here */
	
	/* repeat last command */ 
	lcd_e_toggle();	  
    101e:	0e 94 3f 07 	call	0xe7e	; 0xe7e <toggle_e>
static inline void _delayFourCycles( unsigned int __count)
{
	if( __count == 0)	
		__asm__ __volatile__( "rjmp 1f\n 1:");	// 2 cycles
	else
		__asm__ __volatile__( 
    1022:	e0 e8       	ldi	r30, 0x80	; 128
    1024:	f0 e0       	ldi	r31, 0x00	; 0
    1026:	31 97       	sbiw	r30, 0x01	; 1
    1028:	f1 f7       	brne	.-4      	; 0x1026 <lcd_init+0x2a>
	/* repeat last command */ 
	lcd_e_toggle();	  
	delay( 64);			/* delay, busy flag can't be checked here */
	
	/* repeat last command a third time */
	lcd_e_toggle();	  
    102a:	0e 94 3f 07 	call	0xe7e	; 0xe7e <toggle_e>
static inline void _delayFourCycles( unsigned int __count)
{
	if( __count == 0)	
		__asm__ __volatile__( "rjmp 1f\n 1:");	// 2 cycles
	else
		__asm__ __volatile__( 
    102e:	e0 e8       	ldi	r30, 0x80	; 128
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	31 97       	sbiw	r30, 0x01	; 1
    1034:	f1 f7       	brne	.-4      	; 0x1032 <lcd_init+0x36>
	/* repeat last command a third time */
	lcd_e_toggle();	  
	delay( 64);			/* delay, busy flag can't be checked here */

	/* now configure for 4bit mode */
	LCD_DATA0_PORT &= ~_BV( LCD_DATA0_PIN);	// LCD_FUNCTION_4BIT_1LINE>>4
    1036:	28 98       	cbi	0x05, 0	; 5
	lcd_e_toggle();
    1038:	0e 94 3f 07 	call	0xe7e	; 0xe7e <toggle_e>
static inline void _delayFourCycles( unsigned int __count)
{
	if( __count == 0)	
		__asm__ __volatile__( "rjmp 1f\n 1:");	// 2 cycles
	else
		__asm__ __volatile__( 
    103c:	e0 e8       	ldi	r30, 0x80	; 128
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	31 97       	sbiw	r30, 0x01	; 1
    1042:	f1 f7       	brne	.-4      	; 0x1040 <lcd_init+0x44>
	/* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command( KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command( KS0073_4LINES_MODE);
	lcd_command( KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
	lcd_command( LCD_FUNCTION_DEFAULT);	  /* function set: display lines  */
    1044:	88 e2       	ldi	r24, 0x28	; 40
    1046:	0e 94 86 07 	call	0xf0c	; 0xf0c <lcd_command>
#endif
	lcd_command( LCD_DISP_OFF);			  /* display off				  */
    104a:	88 e0       	ldi	r24, 0x08	; 8
    104c:	0e 94 86 07 	call	0xf0c	; 0xf0c <lcd_command>
	lcd_clrscr();							/* display clear				*/ 
    1050:	0e 94 ab 07 	call	0xf56	; 0xf56 <lcd_clrscr>
	lcd_command( LCD_MODE_DEFAULT);		  /* set entry mode				*/
    1054:	86 e0       	ldi	r24, 0x06	; 6
    1056:	0e 94 86 07 	call	0xf0c	; 0xf0c <lcd_command>
	lcd_command( dispAttr);				  /* display/cursor control		*/
    105a:	8c 2f       	mov	r24, r28

}/* lcd_init */
    105c:	cf 91       	pop	r28
	lcd_command( LCD_FUNCTION_DEFAULT);	  /* function set: display lines  */
#endif
	lcd_command( LCD_DISP_OFF);			  /* display off				  */
	lcd_clrscr();							/* display clear				*/ 
	lcd_command( LCD_MODE_DEFAULT);		  /* set entry mode				*/
	lcd_command( dispAttr);				  /* display/cursor control		*/
    105e:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <lcd_command>

00001062 <owi_byte_io>:
/* read or write a full byte of data to the 1-Wire bus
 * note that owi_byte_io( 0xff) is the same as owi_byte_rd()
 * and owi_byte_io( data) is the same as owi_byte_wr( data)
 */
extern uint8_t owi_byte_io( uint8_t data)
{
    1062:	ef 92       	push	r14
    1064:	ff 92       	push	r15
    1066:	0f 93       	push	r16
    1068:	1f 93       	push	r17
    106a:	cf 93       	push	r28
    106c:	df 93       	push	r29
    106e:	e8 2e       	mov	r14, r24
    1070:	c0 e0       	ldi	r28, 0x00	; 0
    1072:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t i, result = 0;
    1074:	f1 2c       	mov	r15, r1

	// write the data, and add it to the result
	for( i = 0; i < 8; i++)
		result |= (owi_bit_io( data & (1 << i)) << i);
    1076:	01 e0       	ldi	r16, 0x01	; 1
    1078:	10 e0       	ldi	r17, 0x00	; 0
    107a:	c8 01       	movw	r24, r16
    107c:	0c 2e       	mov	r0, r28
    107e:	01 c0       	rjmp	.+2      	; 0x1082 <owi_byte_io+0x20>
    1080:	88 0f       	add	r24, r24
    1082:	0a 94       	dec	r0
    1084:	ea f7       	brpl	.-6      	; 0x1080 <owi_byte_io+0x1e>
    1086:	8e 21       	and	r24, r14
    1088:	0e 94 07 09 	call	0x120e	; 0x120e <owi_bit_io>
    108c:	28 2f       	mov	r18, r24
    108e:	0c 2e       	mov	r0, r28
    1090:	01 c0       	rjmp	.+2      	; 0x1094 <owi_byte_io+0x32>
    1092:	22 0f       	add	r18, r18
    1094:	0a 94       	dec	r0
    1096:	ea f7       	brpl	.-6      	; 0x1092 <owi_byte_io+0x30>
    1098:	f2 2a       	or	r15, r18
    109a:	21 96       	adiw	r28, 0x01	; 1
extern uint8_t owi_byte_io( uint8_t data)
{
	uint8_t i, result = 0;

	// write the data, and add it to the result
	for( i = 0; i < 8; i++)
    109c:	c8 30       	cpi	r28, 0x08	; 8
    109e:	d1 05       	cpc	r29, r1
    10a0:	61 f7       	brne	.-40     	; 0x107a <owi_byte_io+0x18>
		result |= (owi_bit_io( data & (1 << i)) << i);

	return result;
}
    10a2:	8f 2d       	mov	r24, r15
    10a4:	df 91       	pop	r29
    10a6:	cf 91       	pop	r28
    10a8:	1f 91       	pop	r17
    10aa:	0f 91       	pop	r16
    10ac:	ff 90       	pop	r15
    10ae:	ef 90       	pop	r14
    10b0:	08 95       	ret

000010b2 <owi_device_command>:
 * if id contains the rom code of one of the devices on the bus, that device
 * will be selected and the command sent to the single device.  if id is
 * null, the command will be sent to all devices on the 1-wire bus
 */
extern uint8_t owi_device_command( uint8_t command, uint8_t *id)
{
    10b2:	ff 92       	push	r15
    10b4:	0f 93       	push	r16
    10b6:	1f 93       	push	r17
    10b8:	cf 93       	push	r28
    10ba:	df 93       	push	r29
    10bc:	f8 2e       	mov	r15, r24
    10be:	eb 01       	movw	r28, r22
	uint8_t i;

	if( owi_reset())
    10c0:	0e 94 e5 08 	call	0x11ca	; 0x11ca <owi_reset>
    10c4:	88 23       	and	r24, r24
    10c6:	b9 f0       	breq	.+46     	; 0x10f6 <owi_device_command+0x44>
	{
		if( id)
    10c8:	20 97       	sbiw	r28, 0x00	; 0
    10ca:	69 f0       	breq	.+26     	; 0x10e6 <owi_device_command+0x34>
		{
			owi_byte_io( OWI_MATCH_ROM); // to a single device
    10cc:	85 e5       	ldi	r24, 0x55	; 85
    10ce:	0e 94 31 08 	call	0x1062	; 0x1062 <owi_byte_io>
    10d2:	8e 01       	movw	r16, r28
    10d4:	08 5f       	subi	r16, 0xF8	; 248
    10d6:	1f 4f       	sbci	r17, 0xFF	; 255
			i = OWI_ROMCODE_SIZE;
			do
			{
				owi_byte_io( *id);
    10d8:	89 91       	ld	r24, Y+
    10da:	0e 94 31 08 	call	0x1062	; 0x1062 <owi_byte_io>
				id++;
			} while( --i);
    10de:	c0 17       	cp	r28, r16
    10e0:	d1 07       	cpc	r29, r17
    10e2:	d1 f7       	brne	.-12     	; 0x10d8 <owi_device_command+0x26>
    10e4:	03 c0       	rjmp	.+6      	; 0x10ec <owi_device_command+0x3a>
		} else
		{
			owi_byte_io( OWI_SKIP_ROM); // to all devices
    10e6:	8c ec       	ldi	r24, 0xCC	; 204
    10e8:	0e 94 31 08 	call	0x1062	; 0x1062 <owi_byte_io>
		}
		owi_byte_io( command);	// send the command
    10ec:	8f 2d       	mov	r24, r15
    10ee:	0e 94 31 08 	call	0x1062	; 0x1062 <owi_byte_io>

		return OWI_BUS_OK;
    10f2:	80 e0       	ldi	r24, 0x00	; 0
    10f4:	01 c0       	rjmp	.+2      	; 0x10f8 <owi_device_command+0x46>
	}
	return OWI_BUS_ERROR;
    10f6:	8f ef       	ldi	r24, 0xFF	; 255
}
    10f8:	df 91       	pop	r29
    10fa:	cf 91       	pop	r28
    10fc:	1f 91       	pop	r17
    10fe:	0f 91       	pop	r16
    1100:	ff 90       	pop	r15
    1102:	08 95       	ret

00001104 <owi_search>:
 *         discovered identifier will be placed.
 *
 *   cmd   Either SearchROM (0xF0) or AlarmSearch (0xEC)
 */
extern uint8_t owi_search( uint8_t diff, uint8_t *id, uint8_t cmd)
{
    1104:	af 92       	push	r10
    1106:	bf 92       	push	r11
    1108:	df 92       	push	r13
    110a:	ef 92       	push	r14
    110c:	ff 92       	push	r15
    110e:	0f 93       	push	r16
    1110:	1f 93       	push	r17
    1112:	cf 93       	push	r28
    1114:	df 93       	push	r29
    1116:	1f 92       	push	r1
    1118:	cd b7       	in	r28, 0x3d	; 61
    111a:	de b7       	in	r29, 0x3e	; 62
    111c:	e8 2e       	mov	r14, r24
    111e:	5b 01       	movw	r10, r22
	uint8_t i, j, next_diff;
	uint8_t b;

	if( ! owi_reset())
    1120:	49 83       	std	Y+1, r20	; 0x01
    1122:	0e 94 e5 08 	call	0x11ca	; 0x11ca <owi_reset>
    1126:	49 81       	ldd	r20, Y+1	; 0x01
    1128:	88 23       	and	r24, r24
    112a:	a9 f1       	breq	.+106    	; 0x1196 <owi_search+0x92>
		return OWI_PRESENCE_ERROR; // error, no device found

	owi_byte_io( cmd); // ROM search command
    112c:	84 2f       	mov	r24, r20
    112e:	0e 94 31 08 	call	0x1062	; 0x1062 <owi_byte_io>
	next_diff = OWI_LAST_DEVICE; // unchanged on last device
    1132:	f1 2c       	mov	r15, r1

	i = OWI_ROMCODE_SIZE * 8; // 8 bytes
    1134:	10 e4       	ldi	r17, 0x40	; 64
    1136:	88 ef       	ldi	r24, 0xF8	; 248
    1138:	d8 2e       	mov	r13, r24
    113a:	d1 0e       	add	r13, r17
	do
	{
		j = 8; // 8 bits
		do
		{
			b = owi_bit_io( 1); // read bit
    113c:	81 e0       	ldi	r24, 0x01	; 1
    113e:	0e 94 07 09 	call	0x120e	; 0x120e <owi_bit_io>
    1142:	08 2f       	mov	r16, r24
			if( owi_bit_io( 1) )
    1144:	81 e0       	ldi	r24, 0x01	; 1
    1146:	0e 94 07 09 	call	0x120e	; 0x120e <owi_bit_io>
    114a:	88 23       	and	r24, r24
    114c:	19 f0       	breq	.+6      	; 0x1154 <owi_search+0x50>
			{ // read complement bit
				if( b) // 11
    114e:	00 23       	and	r16, r16
    1150:	69 f0       	breq	.+26     	; 0x116c <owi_search+0x68>
    1152:	23 c0       	rjmp	.+70     	; 0x119a <owi_search+0x96>
					return OWI_DATA_ERR; // data error
			} else
			{
				if( !b)
    1154:	01 11       	cpse	r16, r1
    1156:	0a c0       	rjmp	.+20     	; 0x116c <owi_search+0x68>
				{ // 00 = 2 devices
					if( diff > i || (( *id & 1) && diff != i))
    1158:	1e 15       	cp	r17, r14
    115a:	30 f0       	brcs	.+12     	; 0x1168 <owi_search+0x64>
    115c:	f5 01       	movw	r30, r10
    115e:	80 81       	ld	r24, Z
    1160:	80 ff       	sbrs	r24, 0
    1162:	04 c0       	rjmp	.+8      	; 0x116c <owi_search+0x68>
    1164:	e1 16       	cp	r14, r17
    1166:	11 f0       	breq	.+4      	; 0x116c <owi_search+0x68>
    1168:	f1 2e       	mov	r15, r17
					{
						b = 1; // now 1
    116a:	01 e0       	ldi	r16, 0x01	; 1
						next_diff = i; // next pass 0
					}
				}
			}
			owi_bit_io( b); // write bit
    116c:	80 2f       	mov	r24, r16
    116e:	0e 94 07 09 	call	0x120e	; 0x120e <owi_bit_io>
			*id >>= 1;
    1172:	f5 01       	movw	r30, r10
    1174:	90 81       	ld	r25, Z
    1176:	96 95       	lsr	r25
			if( b)
    1178:	00 23       	and	r16, r16
    117a:	11 f0       	breq	.+4      	; 0x1180 <owi_search+0x7c>
				*id |= 0x80; // store bit
    117c:	90 68       	ori	r25, 0x80	; 128
    117e:	f5 01       	movw	r30, r10
    1180:	90 83       	st	Z, r25

			i--;
    1182:	11 50       	subi	r17, 0x01	; 1

		} while( --j);
    1184:	1d 11       	cpse	r17, r13
    1186:	da cf       	rjmp	.-76     	; 0x113c <owi_search+0x38>

		id++; // next byte
    1188:	ff ef       	ldi	r31, 0xFF	; 255
    118a:	af 1a       	sub	r10, r31
    118c:	bf 0a       	sbc	r11, r31

	} while( i);
    118e:	11 11       	cpse	r17, r1
    1190:	d2 cf       	rjmp	.-92     	; 0x1136 <owi_search+0x32>
    1192:	8f 2d       	mov	r24, r15
    1194:	03 c0       	rjmp	.+6      	; 0x119c <owi_search+0x98>
{
	uint8_t i, j, next_diff;
	uint8_t b;

	if( ! owi_reset())
		return OWI_PRESENCE_ERROR; // error, no device found
    1196:	8e ef       	ldi	r24, 0xFE	; 254
    1198:	01 c0       	rjmp	.+2      	; 0x119c <owi_search+0x98>
		{
			b = owi_bit_io( 1); // read bit
			if( owi_bit_io( 1) )
			{ // read complement bit
				if( b) // 11
					return OWI_DATA_ERR; // data error
    119a:	8d ef       	ldi	r24, 0xFD	; 253
		id++; // next byte

	} while( i);

	return next_diff; // to continue search
}
    119c:	0f 90       	pop	r0
    119e:	df 91       	pop	r29
    11a0:	cf 91       	pop	r28
    11a2:	1f 91       	pop	r17
    11a4:	0f 91       	pop	r16
    11a6:	ff 90       	pop	r15
    11a8:	ef 90       	pop	r14
    11aa:	df 90       	pop	r13
    11ac:	bf 90       	pop	r11
    11ae:	af 90       	pop	r10
    11b0:	08 95       	ret

000011b2 <delayloop16>:
 * 4 cpu cycles per loop + 1 cycles(?) overhead 
 * when a constant is passed.
 */
static inline void delayloop16(uint16_t count)
{
	asm volatile (  "cp  %A0,__zero_reg__ \n\t"  \
    11b2:	81 15       	cp	r24, r1
    11b4:	91 05       	cpc	r25, r1
    11b6:	11 f0       	breq	.+4      	; 0x11bc <L_Exit_7>

000011b8 <L_LOOP_7>:
    11b8:	01 97       	sbiw	r24, 0x01	; 1
    11ba:	f1 f7       	brne	.-4      	; 0x11b8 <L_LOOP_7>

000011bc <L_Exit_7>:
    11bc:	08 95       	ret

000011be <owi_init>:
/*  This function initializes the 1-Wire bus(es) by releasing it and
 *  waiting until any presence sinals are finished.
 */
extern void owi_init()
{
    OWI_RELEASE_BUS();
    11be:	56 98       	cbi	0x0a, 6	; 10
    11c0:	5e 98       	cbi	0x0b, 6	; 11
    // The first rising edge can be interpreted by a slave as the end of a
    // Reset pulse. Delay for the required reset recovery time (H) to be 
    // sure that the real reset is interpreted correctly.
    delay_us( OWI_DELAY_H);
    11c2:	8f eb       	ldi	r24, 0xBF	; 191
    11c4:	93 e0       	ldi	r25, 0x03	; 3
    11c6:	0c 94 d9 08 	jmp	0x11b2	; 0x11b2 <delayloop16>

000011ca <owi_reset>:
 *
 *  returns OWI_BUS_OK if presence signal was detected or OWI_BUS_ERROR
 *  if no devices present or bus error exists
 */
extern uint8_t owi_reset()
{
    11ca:	cf 93       	push	r28
    11cc:	df 93       	push	r29
	uint8_t sreg, b;

	// first part is long delay with significant timing leeway so
	// don't disable interrupts until after
	OWI_PULL_BUS_LOW();
    11ce:	56 9a       	sbi	0x0a, 6	; 10
    11d0:	5e 98       	cbi	0x0b, 6	; 11
	delay_us( OWI_DELAY_H + 12);
    11d2:	87 ed       	ldi	r24, 0xD7	; 215
    11d4:	93 e0       	ldi	r25, 0x03	; 3
    11d6:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <delayloop16>

	sreg = SREG;
    11da:	df b7       	in	r29, 0x3f	; 63
	cli();	// disable interrupts
    11dc:	f8 94       	cli

	OWI_RELEASE_BUS();	// allow bus high
    11de:	56 98       	cbi	0x0a, 6	; 10
    11e0:	5e 98       	cbi	0x0b, 6	; 11
	delay_us( OWI_DELAY_I);
    11e2:	8b e8       	ldi	r24, 0x8B	; 139
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <delayloop16>

	b = ~OWI_GET_IN();
    11ea:	c9 b1       	in	r28, 0x09	; 9

	SREG = sreg;	// restore interrupts
    11ec:	df bf       	out	0x3f, r29	; 63

	// another long delay without max so re-enable interrupts before
	delay_us( OWI_DELAY_J);
    11ee:	83 e3       	ldi	r24, 0x33	; 51
    11f0:	93 e0       	ldi	r25, 0x03	; 3
    11f2:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <delayloop16>
	// check to see if the bus is stull pulled low (shorted?)
	return b & OWI_GET_IN();
    11f6:	99 b1       	in	r25, 0x09	; 9
	cli();	// disable interrupts

	OWI_RELEASE_BUS();	// allow bus high
	delay_us( OWI_DELAY_I);

	b = ~OWI_GET_IN();
    11f8:	c6 fb       	bst	r28, 6
    11fa:	88 27       	eor	r24, r24
    11fc:	80 f9       	bld	r24, 0
    11fe:	80 95       	com	r24
	SREG = sreg;	// restore interrupts

	// another long delay without max so re-enable interrupts before
	delay_us( OWI_DELAY_J);
	// check to see if the bus is stull pulled low (shorted?)
	return b & OWI_GET_IN();
    1200:	96 fb       	bst	r25, 6
    1202:	99 27       	eor	r25, r25
    1204:	90 f9       	bld	r25, 0
}
    1206:	89 23       	and	r24, r25
    1208:	df 91       	pop	r29
    120a:	cf 91       	pop	r28
    120c:	08 95       	ret

0000120e <owi_bit_io>:
/* write or read a single bit from the bus
 * note that owi_bit_io( b) is the same as owi_bit_wr( b)
 * and b = owi_bit_io( 0x01) is the same as b = owi_bit_rd();
 */
extern uint8_t owi_bit_io( uint8_t b)
{
    120e:	cf 93       	push	r28
    1210:	df 93       	push	r29
	uint8_t sreg;

	sreg = SREG;
    1212:	df b7       	in	r29, 0x3f	; 63
	cli();
    1214:	f8 94       	cli

	// attention pulse
	OWI_PULL_BUS_LOW();	// drive bus low
    1216:	56 9a       	sbi	0x0a, 6	; 10
    1218:	5e 98       	cbi	0x0b, 6	; 11
	...
	DELAY_1US();
	DELAY_1US();
	DELAY_1US();

	// if writing 1 (or reading), stop pulling low data period
	if( b)
    1262:	81 11       	cpse	r24, r1
		OWI_RELEASE_BUS();	// allow bus high
    1264:	56 98       	cbi	0x0a, 6	; 10
    1266:	5e 98       	cbi	0x0b, 6	; 11

	// response wait
	//delay_us( OWI_DELAY_E);
	delay_us( 1);
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <delayloop16>
	b = OWI_GET_IN();	// sample at end of response wait
    1270:	c9 b1       	in	r28, 0x09	; 9

	delay_us( OWI_DELAY_F - OWI_DELAY_D - 3);	// wait for rest of R/W time slot
    1272:	83 e5       	ldi	r24, 0x53	; 83
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <delayloop16>

	// recovery time
	OWI_RELEASE_BUS();	// allow bus high if we were reading or writing 0, else we were already there
    127a:	56 98       	cbi	0x0a, 6	; 10
    127c:	5e 98       	cbi	0x0b, 6	; 11
	...
	// delay_us( OWI_DELAY_D);
	//delay_us( 1); // code was too long - replace with assembler delays
	DELAY_1US();
	DELAY_1US();

	SREG = sreg; // sei();
    12a2:	df bf       	out	0x3f, r29	; 63

	return b;
}
    12a4:	c6 fb       	bst	r28, 6
    12a6:	88 27       	eor	r24, r24
    12a8:	80 f9       	bld	r24, 0
    12aa:	df 91       	pop	r29
    12ac:	cf 91       	pop	r28
    12ae:	08 95       	ret

000012b0 <__vector_18>:
ISR (UART0_RECEIVE_INTERRUPT)	
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
    12b0:	1f 92       	push	r1
    12b2:	0f 92       	push	r0
    12b4:	0f b6       	in	r0, 0x3f	; 63
    12b6:	0f 92       	push	r0
    12b8:	11 24       	eor	r1, r1
    12ba:	2f 93       	push	r18
    12bc:	8f 93       	push	r24
    12be:	9f 93       	push	r25
    12c0:	ef 93       	push	r30
    12c2:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */
    usr  = UART0_STATUS;
    12c4:	80 91 c0 00 	lds	r24, 0x00C0
    data = UART0_DATA;
    12c8:	90 91 c6 00 	lds	r25, 0x00C6
    
    /* get FEn (Frame Error) DORn (Data OverRun) UPEn (USART Parity Error) bits */
#if defined(FE) && defined(DOR) && defined(UPE)
    lastRxError = usr & (_BV(FE)|_BV(DOR)|_BV(UPE) );
#elif defined(FE0) && defined(DOR0) && defined(UPE0)
    lastRxError = usr & (_BV(FE0)|_BV(DOR0)|_BV(UPE0) );
    12cc:	8c 71       	andi	r24, 0x1C	; 28
#elif defined(FE) && defined(DOR)
    lastRxError = usr & (_BV(FE)|_BV(DOR) );
#endif

    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    12ce:	e0 91 02 02 	lds	r30, 0x0202
    12d2:	ef 5f       	subi	r30, 0xFF	; 255
    12d4:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART_RxTail ) {
    12d6:	20 91 01 02 	lds	r18, 0x0201
    12da:	e2 17       	cp	r30, r18
    12dc:	39 f0       	breq	.+14     	; 0x12ec <__vector_18+0x3c>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
    12de:	e0 93 02 02 	sts	0x0202, r30
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	eb 5f       	subi	r30, 0xFB	; 251
    12e6:	fd 4f       	sbci	r31, 0xFD	; 253
    12e8:	90 83       	st	Z, r25
    12ea:	01 c0       	rjmp	.+2      	; 0x12ee <__vector_18+0x3e>
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    12ec:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError |= lastRxError;   
    12ee:	90 91 00 02 	lds	r25, 0x0200
    12f2:	98 2b       	or	r25, r24
    12f4:	90 93 00 02 	sts	0x0200, r25
}
    12f8:	ff 91       	pop	r31
    12fa:	ef 91       	pop	r30
    12fc:	9f 91       	pop	r25
    12fe:	8f 91       	pop	r24
    1300:	2f 91       	pop	r18
    1302:	0f 90       	pop	r0
    1304:	0f be       	out	0x3f, r0	; 63
    1306:	0f 90       	pop	r0
    1308:	1f 90       	pop	r1
    130a:	18 95       	reti

0000130c <__vector_19>:
ISR (UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
    130c:	1f 92       	push	r1
    130e:	0f 92       	push	r0
    1310:	0f b6       	in	r0, 0x3f	; 63
    1312:	0f 92       	push	r0
    1314:	11 24       	eor	r1, r1
    1316:	8f 93       	push	r24
    1318:	9f 93       	push	r25
    131a:	ef 93       	push	r30
    131c:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
    131e:	90 91 04 02 	lds	r25, 0x0204
    1322:	80 91 03 02 	lds	r24, 0x0203
    1326:	98 17       	cp	r25, r24
    1328:	69 f0       	breq	.+26     	; 0x1344 <__vector_19+0x38>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
    132a:	e0 91 03 02 	lds	r30, 0x0203
    132e:	ef 5f       	subi	r30, 0xFF	; 255
    1330:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
    1332:	e0 93 03 02 	sts	0x0203, r30
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	eb 5d       	subi	r30, 0xDB	; 219
    133a:	fd 4f       	sbci	r31, 0xFD	; 253
    133c:	80 81       	ld	r24, Z
    133e:	80 93 c6 00 	sts	0x00C6, r24
    1342:	05 c0       	rjmp	.+10     	; 0x134e <__vector_19+0x42>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
    1344:	80 91 c1 00 	lds	r24, 0x00C1
    1348:	8f 7d       	andi	r24, 0xDF	; 223
    134a:	80 93 c1 00 	sts	0x00C1, r24
    }
}
    134e:	ff 91       	pop	r31
    1350:	ef 91       	pop	r30
    1352:	9f 91       	pop	r25
    1354:	8f 91       	pop	r24
    1356:	0f 90       	pop	r0
    1358:	0f be       	out	0x3f, r0	; 63
    135a:	0f 90       	pop	r0
    135c:	1f 90       	pop	r1
    135e:	18 95       	reti

00001360 <uart_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
    1360:	10 92 04 02 	sts	0x0204, r1
    UART_TxTail = 0;
    1364:	10 92 03 02 	sts	0x0203, r1
    UART_RxHead = 0;
    1368:	10 92 02 02 	sts	0x0202, r1
    UART_RxTail = 0;
    136c:	10 92 01 02 	sts	0x0201, r1
#endif
#endif
#endif

    /* Set baud rate */
    if ( baudrate & 0x8000 )
    1370:	97 ff       	sbrs	r25, 7
    1372:	03 c0       	rjmp	.+6      	; 0x137a <uart_init+0x1a>
    {
        #if UART0_BIT_U2X
        UART0_STATUS = (1<<UART0_BIT_U2X);  //Enable 2x speed 
    1374:	22 e0       	ldi	r18, 0x02	; 2
    1376:	20 93 c0 00 	sts	0x00C0, r18
        #endif
    } 
    #if defined(UART0_UBRRH)
    UART0_UBRRH = (unsigned char)((baudrate>>8)&0x80) ;
    137a:	90 78       	andi	r25, 0x80	; 128
    137c:	90 93 c5 00 	sts	0x00C5, r25
    #endif    
    UART0_UBRRL = (unsigned char) (baudrate&0x00FF);
    1380:	80 93 c4 00 	sts	0x00C4, r24
      
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(UART0_BIT_RXCIE)|(1<<UART0_BIT_RXEN)|(1<<UART0_BIT_TXEN);
    1384:	88 e9       	ldi	r24, 0x98	; 152
    1386:	80 93 c1 00 	sts	0x00C1, r24
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef UART0_CONTROLC
    #ifdef UART0_BIT_URSEL
    UART0_CONTROLC = (1<<UART0_BIT_URSEL)|(1<<UART0_BIT_UCSZ1)|(1<<UART0_BIT_UCSZ0);
    #else
    UART0_CONTROLC = (1<<UART0_BIT_UCSZ1)|(1<<UART0_BIT_UCSZ0);
    138a:	86 e0       	ldi	r24, 0x06	; 6
    138c:	80 93 c2 00 	sts	0x00C2, r24
    1390:	08 95       	ret

00001392 <uart_getc>:
    unsigned char tmptail;
    unsigned char data;
    unsigned char lastRxError;


    if ( UART_RxHead == UART_RxTail ) {
    1392:	90 91 02 02 	lds	r25, 0x0202
    1396:	80 91 01 02 	lds	r24, 0x0201
    139a:	98 17       	cp	r25, r24
    139c:	a9 f0       	breq	.+42     	; 0x13c8 <uart_getc+0x36>
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
    139e:	90 91 01 02 	lds	r25, 0x0201
    13a2:	9f 5f       	subi	r25, 0xFF	; 255
    13a4:	9f 71       	andi	r25, 0x1F	; 31
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
    13a6:	e9 2f       	mov	r30, r25
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	eb 5f       	subi	r30, 0xFB	; 251
    13ac:	fd 4f       	sbci	r31, 0xFD	; 253
    13ae:	20 81       	ld	r18, Z
    lastRxError = UART_LastRxError;
    13b0:	80 91 00 02 	lds	r24, 0x0200
    
    /* store buffer index */
    UART_RxTail = tmptail; 
    13b4:	90 93 01 02 	sts	0x0201, r25
    
    UART_LastRxError = 0;
    13b8:	10 92 00 02 	sts	0x0200, r1
    return (lastRxError << 8) + data;
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	98 2f       	mov	r25, r24
    13c0:	88 27       	eor	r24, r24
    13c2:	82 0f       	add	r24, r18
    13c4:	91 1d       	adc	r25, r1
    13c6:	08 95       	ret
    unsigned char data;
    unsigned char lastRxError;


    if ( UART_RxHead == UART_RxTail ) {
        return UART_NO_DATA;   /* no data available */
    13c8:	80 e0       	ldi	r24, 0x00	; 0
    13ca:	91 e0       	ldi	r25, 0x01	; 1
    UART_RxTail = tmptail; 
    
    UART_LastRxError = 0;
    return (lastRxError << 8) + data;

}/* uart_getc */
    13cc:	08 95       	ret

000013ce <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
    13ce:	90 91 04 02 	lds	r25, 0x0204
    13d2:	9f 5f       	subi	r25, 0xFF	; 255
    13d4:	9f 71       	andi	r25, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
    13d6:	20 91 03 02 	lds	r18, 0x0203
    13da:	92 17       	cp	r25, r18
    13dc:	e1 f3       	breq	.-8      	; 0x13d6 <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
    13de:	e9 2f       	mov	r30, r25
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	eb 5d       	subi	r30, 0xDB	; 219
    13e4:	fd 4f       	sbci	r31, 0xFD	; 253
    13e6:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
    13e8:	90 93 04 02 	sts	0x0204, r25

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
    13ec:	80 91 c1 00 	lds	r24, 0x00C1
    13f0:	80 62       	ori	r24, 0x20	; 32
    13f2:	80 93 c1 00 	sts	0x00C1, r24
    13f6:	08 95       	ret

000013f8 <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    13f8:	cf 93       	push	r28
    13fa:	df 93       	push	r29
    13fc:	ec 01       	movw	r28, r24
    while (*s) 
    13fe:	89 91       	ld	r24, Y+
    1400:	88 23       	and	r24, r24
    1402:	19 f0       	breq	.+6      	; 0x140a <uart_puts+0x12>
      uart_putc(*s++);
    1404:	0e 94 e7 09 	call	0x13ce	; 0x13ce <uart_putc>
    1408:	fa cf       	rjmp	.-12     	; 0x13fe <uart_puts+0x6>

}/* uart_puts */
    140a:	df 91       	pop	r29
    140c:	cf 91       	pop	r28
    140e:	08 95       	ret

00001410 <uart_puts_p>:
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    1410:	cf 93       	push	r28
    1412:	df 93       	push	r29
    1414:	fc 01       	movw	r30, r24
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
    1416:	84 91       	lpm	r24, Z
    1418:	ef 01       	movw	r28, r30
    141a:	21 96       	adiw	r28, 0x01	; 1
    141c:	88 23       	and	r24, r24
    141e:	21 f0       	breq	.+8      	; 0x1428 <uart_puts_p+0x18>
      uart_putc(c);
    1420:	0e 94 e7 09 	call	0x13ce	; 0x13ce <uart_putc>
    1424:	fe 01       	movw	r30, r28
    1426:	f7 cf       	rjmp	.-18     	; 0x1416 <uart_puts_p+0x6>

}/* uart_puts_p */
    1428:	df 91       	pop	r29
    142a:	cf 91       	pop	r28
    142c:	08 95       	ret

0000142e <uart_puti>:
Returns:  none
This functions has been added by Martin Thomas <eversmith@heizung-thomas.de>
Don't blame P. Fleury if it doesn't work ;-)
**************************************************************************/
void uart_puti( const int val )
{
    142e:	cf 93       	push	r28
    1430:	df 93       	push	r29
    1432:	cd b7       	in	r28, 0x3d	; 61
    1434:	de b7       	in	r29, 0x3e	; 62
    1436:	61 97       	sbiw	r28, 0x11	; 17
    1438:	0f b6       	in	r0, 0x3f	; 63
    143a:	f8 94       	cli
    143c:	de bf       	out	0x3e, r29	; 62
    143e:	0f be       	out	0x3f, r0	; 63
    1440:	cd bf       	out	0x3d, r28	; 61
    char buffer[sizeof(int)*8+1];
    
    uart_puts( itoa(val, buffer, 10) );
    1442:	4a e0       	ldi	r20, 0x0A	; 10
    1444:	50 e0       	ldi	r21, 0x00	; 0
    1446:	be 01       	movw	r22, r28
    1448:	6f 5f       	subi	r22, 0xFF	; 255
    144a:	7f 4f       	sbci	r23, 0xFF	; 255
    144c:	0e 94 f7 18 	call	0x31ee	; 0x31ee <itoa>
    1450:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <uart_puts>

}/* uart_puti */
    1454:	61 96       	adiw	r28, 0x11	; 17
    1456:	0f b6       	in	r0, 0x3f	; 63
    1458:	f8 94       	cli
    145a:	de bf       	out	0x3e, r29	; 62
    145c:	0f be       	out	0x3f, r0	; 63
    145e:	cd bf       	out	0x3d, r28	; 61
    1460:	df 91       	pop	r29
    1462:	cf 91       	pop	r28
    1464:	08 95       	ret

00001466 <uart_puthex_nibble>:
This functions has been added by Martin Thomas <eversmith@heizung-thomas.de>
Don't blame P. Fleury if it doesn't work ;-)
**************************************************************************/
void uart_puthex_nibble(const unsigned char b)
{
    unsigned char  c = b & 0x0f;
    1466:	8f 70       	andi	r24, 0x0F	; 15
    if (c>9) c += 'A'-10;
    1468:	8a 30       	cpi	r24, 0x0A	; 10
    146a:	10 f0       	brcs	.+4      	; 0x1470 <uart_puthex_nibble+0xa>
    146c:	89 5c       	subi	r24, 0xC9	; 201
    146e:	01 c0       	rjmp	.+2      	; 0x1472 <uart_puthex_nibble+0xc>
    else c += '0';
    1470:	80 5d       	subi	r24, 0xD0	; 208
    uart_putc(c);
    1472:	0c 94 e7 09 	jmp	0x13ce	; 0x13ce <uart_putc>

00001476 <uart_puthex_byte>:
Returns:  none
This functions has been added by Martin Thomas <eversmith@heizung-thomas.de>
Don't blame P. Fleury if it doesn't work ;-)
**************************************************************************/
void uart_puthex_byte(const unsigned char  b)
{
    1476:	cf 93       	push	r28
    1478:	c8 2f       	mov	r28, r24
    uart_puthex_nibble(b>>4);
    147a:	82 95       	swap	r24
    147c:	8f 70       	andi	r24, 0x0F	; 15
    147e:	0e 94 33 0a 	call	0x1466	; 0x1466 <uart_puthex_nibble>
    uart_puthex_nibble(b);
    1482:	8c 2f       	mov	r24, r28
} /* uart_puthex_byte */
    1484:	cf 91       	pop	r28
Don't blame P. Fleury if it doesn't work ;-)
**************************************************************************/
void uart_puthex_byte(const unsigned char  b)
{
    uart_puthex_nibble(b>>4);
    uart_puthex_nibble(b);
    1486:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <uart_puthex_nibble>

0000148a <DS2415_write_clock>:

/* Write the control byte and 4 data bytes comprising the 32 bit seconds counter
 * to the DS2415
 */
extern uint8_t DS2415_write_clock( uint8_t ctrl, uint32_t rtc, uint8_t id[])
{
    148a:	ff 92       	push	r15
    148c:	0f 93       	push	r16
    148e:	1f 93       	push	r17
    1490:	cf 93       	push	r28
    1492:	df 93       	push	r29
    1494:	f8 2e       	mov	r15, r24
    1496:	8a 01       	movw	r16, r20
    1498:	d6 2f       	mov	r29, r22
    149a:	c7 2f       	mov	r28, r23
	// make sure we have a device to check and the bus is working
	if( id == NULL || owi_device_command( DS2415_WRITE_CLOCK, id)) return DS2415_CLOCK_ERROR;
    149c:	21 15       	cp	r18, r1
    149e:	31 05       	cpc	r19, r1
    14a0:	11 f4       	brne	.+4      	; 0x14a6 <DS2415_write_clock+0x1c>
    14a2:	8f ef       	ldi	r24, 0xFF	; 255
    14a4:	18 c0       	rjmp	.+48     	; 0x14d6 <DS2415_write_clock+0x4c>
    14a6:	b9 01       	movw	r22, r18
    14a8:	89 e9       	ldi	r24, 0x99	; 153
    14aa:	0e 94 59 08 	call	0x10b2	; 0x10b2 <owi_device_command>
    14ae:	81 11       	cpse	r24, r1
    14b0:	f8 cf       	rjmp	.-16     	; 0x14a2 <DS2415_write_clock+0x18>

	// set the clock data
	owi_byte_io( ctrl);
    14b2:	8f 2d       	mov	r24, r15
    14b4:	0e 94 31 08 	call	0x1062	; 0x1062 <owi_byte_io>
	owi_byte_io( (uint8_t)rtc); // LSB
    14b8:	80 2f       	mov	r24, r16
    14ba:	0e 94 31 08 	call	0x1062	; 0x1062 <owi_byte_io>
	owi_byte_io( (uint8_t)(rtc >> 8));
    14be:	81 2f       	mov	r24, r17
    14c0:	0e 94 31 08 	call	0x1062	; 0x1062 <owi_byte_io>
	owi_byte_io( (uint8_t)(rtc >> 16));
    14c4:	8d 2f       	mov	r24, r29
    14c6:	0e 94 31 08 	call	0x1062	; 0x1062 <owi_byte_io>
	owi_byte_io( (uint8_t)(rtc >> 24));	// MSB
    14ca:	8c 2f       	mov	r24, r28
    14cc:	0e 94 31 08 	call	0x1062	; 0x1062 <owi_byte_io>
	owi_reset();	// activate the changes
    14d0:	0e 94 e5 08 	call	0x11ca	; 0x11ca <owi_reset>
	return DS2415_CLOCK_OK;
    14d4:	80 e0       	ldi	r24, 0x00	; 0
}
    14d6:	df 91       	pop	r29
    14d8:	cf 91       	pop	r28
    14da:	1f 91       	pop	r17
    14dc:	0f 91       	pop	r16
    14de:	ff 90       	pop	r15
    14e0:	08 95       	ret

000014e2 <DS2415_read_clock>:

/* Read the control byte and 4 data bytes comprising the 32 bit seconds counter
 * from the DS2415
 */
extern uint8_t DS2415_read_clock( uint8_t *ctrl, uint32_t *rtc, uint8_t id[])
{
    14e2:	cf 92       	push	r12
    14e4:	df 92       	push	r13
    14e6:	ef 92       	push	r14
    14e8:	ff 92       	push	r15
    14ea:	cf 93       	push	r28
    14ec:	df 93       	push	r29
    14ee:	7c 01       	movw	r14, r24
    14f0:	eb 01       	movw	r28, r22
	// make sure we have a device to check and the bus is working
	if( id == NULL || owi_device_command( DS2415_READ_CLOCK, id)) return DS2415_CLOCK_ERROR;
    14f2:	41 15       	cp	r20, r1
    14f4:	51 05       	cpc	r21, r1
    14f6:	11 f4       	brne	.+4      	; 0x14fc <DS2415_read_clock+0x1a>
    14f8:	8f ef       	ldi	r24, 0xFF	; 255
    14fa:	31 c0       	rjmp	.+98     	; 0x155e <DS2415_read_clock+0x7c>
    14fc:	ba 01       	movw	r22, r20
    14fe:	86 e6       	ldi	r24, 0x66	; 102
    1500:	0e 94 59 08 	call	0x10b2	; 0x10b2 <owi_device_command>
    1504:	81 11       	cpse	r24, r1
    1506:	f8 cf       	rjmp	.-16     	; 0x14f8 <DS2415_read_clock+0x16>

	// get the clock data
	*ctrl = owi_byte_io( 0xFF);
    1508:	8f ef       	ldi	r24, 0xFF	; 255
    150a:	0e 94 31 08 	call	0x1062	; 0x1062 <owi_byte_io>
    150e:	f7 01       	movw	r30, r14
    1510:	80 83       	st	Z, r24
	*rtc = ((uint32_t)owi_byte_io( 0xFF));	// LSB
    1512:	8f ef       	ldi	r24, 0xFF	; 255
    1514:	0e 94 31 08 	call	0x1062	; 0x1062 <owi_byte_io>
    1518:	c8 2e       	mov	r12, r24
    151a:	d1 2c       	mov	r13, r1
    151c:	e1 2c       	mov	r14, r1
    151e:	f1 2c       	mov	r15, r1
    1520:	c8 82       	st	Y, r12
    1522:	d9 82       	std	Y+1, r13	; 0x01
    1524:	ea 82       	std	Y+2, r14	; 0x02
    1526:	fb 82       	std	Y+3, r15	; 0x03
	*rtc |= ((uint32_t)owi_byte_io( 0xFF)) << 8;
    1528:	8f ef       	ldi	r24, 0xFF	; 255
    152a:	0e 94 31 08 	call	0x1062	; 0x1062 <owi_byte_io>
    152e:	d8 2a       	or	r13, r24
    1530:	c8 82       	st	Y, r12
    1532:	d9 82       	std	Y+1, r13	; 0x01
    1534:	ea 82       	std	Y+2, r14	; 0x02
    1536:	fb 82       	std	Y+3, r15	; 0x03
	*rtc |= ((uint32_t)owi_byte_io( 0xFF)) << 16;
    1538:	8f ef       	ldi	r24, 0xFF	; 255
    153a:	0e 94 31 08 	call	0x1062	; 0x1062 <owi_byte_io>
    153e:	e8 2a       	or	r14, r24
    1540:	c8 82       	st	Y, r12
    1542:	d9 82       	std	Y+1, r13	; 0x01
    1544:	ea 82       	std	Y+2, r14	; 0x02
    1546:	fb 82       	std	Y+3, r15	; 0x03
	*rtc |= ((uint32_t)owi_byte_io( 0xFF)) << 24;	// MSB
    1548:	8f ef       	ldi	r24, 0xFF	; 255
    154a:	0e 94 31 08 	call	0x1062	; 0x1062 <owi_byte_io>
    154e:	f8 2a       	or	r15, r24
    1550:	c8 82       	st	Y, r12
    1552:	d9 82       	std	Y+1, r13	; 0x01
    1554:	ea 82       	std	Y+2, r14	; 0x02
    1556:	fb 82       	std	Y+3, r15	; 0x03
	owi_reset();	// stop further clock transmissions
    1558:	0e 94 e5 08 	call	0x11ca	; 0x11ca <owi_reset>
	return DS2415_CLOCK_OK;
    155c:	80 e0       	ldi	r24, 0x00	; 0
}
    155e:	df 91       	pop	r29
    1560:	cf 91       	pop	r28
    1562:	ff 90       	pop	r15
    1564:	ef 90       	pop	r14
    1566:	df 90       	pop	r13
    1568:	cf 90       	pop	r12
    156a:	08 95       	ret

0000156c <DS2415_gregorian_to_epoch>:

// Convert a Gregorian calendar date and time into a Unix Epoch seconds count
extern uint32_t DS2415_gregorian_to_epoch( DS2415_date_t *dt)
{
    156c:	cf 92       	push	r12
    156e:	df 92       	push	r13
    1570:	ef 92       	push	r14
    1572:	ff 92       	push	r15
    1574:	cf 93       	push	r28
    1576:	df 93       	push	r29
    1578:	fc 01       	movw	r30, r24
	uint16_t days;
	uint32_t rtc;

	// convert gregorian date (dt) into total days
	days = 365 * (dt->year - 70) + accum_days[dt->month] + (dt->day - 1);
    157a:	c0 81       	ld	r28, Z
    157c:	2c 2f       	mov	r18, r28
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	d1 81       	ldd	r29, Z+1	; 0x01
    1582:	82 81       	ldd	r24, Z+2	; 0x02
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	01 97       	sbiw	r24, 0x01	; 1
    1588:	ad 2f       	mov	r26, r29
    158a:	b0 e0       	ldi	r27, 0x00	; 0
    158c:	aa 0f       	add	r26, r26
    158e:	bb 1f       	adc	r27, r27
    1590:	a0 50       	subi	r26, 0x00	; 0
    1592:	bf 4f       	sbci	r27, 0xFF	; 255
    1594:	4d 91       	ld	r20, X+
    1596:	5c 91       	ld	r21, X
    1598:	84 0f       	add	r24, r20
    159a:	95 1f       	adc	r25, r21
    159c:	d9 01       	movw	r26, r18
    159e:	a6 54       	subi	r26, 0x46	; 70
    15a0:	b1 09       	sbc	r27, r1
    15a2:	6d e6       	ldi	r22, 0x6D	; 109
    15a4:	71 e0       	ldi	r23, 0x01	; 1
    15a6:	a6 9f       	mul	r26, r22
    15a8:	a0 01       	movw	r20, r0
    15aa:	a7 9f       	mul	r26, r23
    15ac:	50 0d       	add	r21, r0
    15ae:	b6 9f       	mul	r27, r22
    15b0:	50 0d       	add	r21, r0
    15b2:	11 24       	eor	r1, r1
    15b4:	84 0f       	add	r24, r20
    15b6:	95 1f       	adc	r25, r21
	days += (dt->year - 69) / 4;	// fixup for past leap years
    15b8:	25 54       	subi	r18, 0x45	; 69
    15ba:	31 09       	sbc	r19, r1
    15bc:	37 ff       	sbrs	r19, 7
    15be:	02 c0       	rjmp	.+4      	; 0x15c4 <DS2415_gregorian_to_epoch+0x58>
    15c0:	2d 5f       	subi	r18, 0xFD	; 253
    15c2:	3f 4f       	sbci	r19, 0xFF	; 255
    15c4:	35 95       	asr	r19
    15c6:	27 95       	ror	r18
    15c8:	35 95       	asr	r19
    15ca:	27 95       	ror	r18
    15cc:	28 0f       	add	r18, r24
    15ce:	39 1f       	adc	r19, r25
	if( (dt->month > 1) && ((dt->year % 4) == 0)) days++;	// fixup for current leapyear
    15d0:	d2 30       	cpi	r29, 0x02	; 2
    15d2:	20 f0       	brcs	.+8      	; 0x15dc <DS2415_gregorian_to_epoch+0x70>
    15d4:	c3 70       	andi	r28, 0x03	; 3
    15d6:	11 f4       	brne	.+4      	; 0x15dc <DS2415_gregorian_to_epoch+0x70>
    15d8:	2f 5f       	subi	r18, 0xFF	; 255
    15da:	3f 4f       	sbci	r19, 0xFF	; 255

	// convert to seconds and add the time offset
	rtc = 3600 * ((uint32_t)dt->hour + (24 * (uint32_t)days));
    15dc:	a8 e1       	ldi	r26, 0x18	; 24
    15de:	b0 e0       	ldi	r27, 0x00	; 0
    15e0:	0e 94 7d 15 	call	0x2afa	; 0x2afa <__umulhisi3>
    15e4:	9b 01       	movw	r18, r22
    15e6:	ac 01       	movw	r20, r24
    15e8:	83 81       	ldd	r24, Z+3	; 0x03
    15ea:	28 0f       	add	r18, r24
    15ec:	31 1d       	adc	r19, r1
    15ee:	41 1d       	adc	r20, r1
    15f0:	51 1d       	adc	r21, r1
    15f2:	a0 e1       	ldi	r26, 0x10	; 16
    15f4:	be e0       	ldi	r27, 0x0E	; 14
    15f6:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <__muluhisi3>
    15fa:	6b 01       	movw	r12, r22
    15fc:	7c 01       	movw	r14, r24
	rtc += 60 * (uint32_t)dt->min;
    15fe:	24 81       	ldd	r18, Z+4	; 0x04
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	ac e3       	ldi	r26, 0x3C	; 60
    1604:	b0 e0       	ldi	r27, 0x00	; 0
    1606:	0e 94 7d 15 	call	0x2afa	; 0x2afa <__umulhisi3>
	rtc += (uint32_t)dt->sec;
    160a:	25 81       	ldd	r18, Z+5	; 0x05
	days += (dt->year - 69) / 4;	// fixup for past leap years
	if( (dt->month > 1) && ((dt->year % 4) == 0)) days++;	// fixup for current leapyear

	// convert to seconds and add the time offset
	rtc = 3600 * ((uint32_t)dt->hour + (24 * (uint32_t)days));
	rtc += 60 * (uint32_t)dt->min;
    160c:	62 0f       	add	r22, r18
    160e:	71 1d       	adc	r23, r1
    1610:	81 1d       	adc	r24, r1
    1612:	91 1d       	adc	r25, r1
	rtc += (uint32_t)dt->sec;
    1614:	6c 0d       	add	r22, r12
    1616:	7d 1d       	adc	r23, r13
    1618:	8e 1d       	adc	r24, r14
    161a:	9f 1d       	adc	r25, r15

	return rtc;
}
    161c:	df 91       	pop	r29
    161e:	cf 91       	pop	r28
    1620:	ff 90       	pop	r15
    1622:	ef 90       	pop	r14
    1624:	df 90       	pop	r13
    1626:	cf 90       	pop	r12
    1628:	08 95       	ret

0000162a <DS2415_epoch_to_gregorian>:

// Convert a Unix Epoch seconds count into a Gregorian calendar date and time 
extern void DS2415_epoch_to_gregorian( uint32_t seconds, DS2415_date_t *dt)
{
    162a:	8f 92       	push	r8
    162c:	9f 92       	push	r9
    162e:	af 92       	push	r10
    1630:	bf 92       	push	r11
    1632:	cf 92       	push	r12
    1634:	df 92       	push	r13
    1636:	ef 92       	push	r14
    1638:	ff 92       	push	r15
    163a:	0f 93       	push	r16
    163c:	1f 93       	push	r17
    163e:	cf 93       	push	r28
    1640:	df 93       	push	r29
    1642:	16 2f       	mov	r17, r22
    1644:	ea 01       	movw	r28, r20
	uint16_t tmp_uint_1, tmp_uint_2, tmp_uint_3;
	uint32_t tmp_ulong_1, tmp_ulong_2;

	// convert elapsed epoch seconds (rtc) count into gregorian date (dt)
	tmp_ulong_1 = seconds / 60;	// whole minutes
    1646:	6c e3       	ldi	r22, 0x3C	; 60
    1648:	c6 2e       	mov	r12, r22
    164a:	d1 2c       	mov	r13, r1
    164c:	e1 2c       	mov	r14, r1
    164e:	f1 2c       	mov	r15, r1
    1650:	61 2f       	mov	r22, r17
    1652:	a7 01       	movw	r20, r14
    1654:	96 01       	movw	r18, r12
    1656:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <__udivmodsi4>
    165a:	02 2f       	mov	r16, r18
    165c:	ca 01       	movw	r24, r20
	dt->sec = seconds - (60 * tmp_ulong_1);
    165e:	7c e3       	ldi	r23, 0x3C	; 60
    1660:	b7 2e       	mov	r11, r23
    1662:	b2 9e       	mul	r11, r18
    1664:	10 19       	sub	r17, r0
    1666:	11 24       	eor	r1, r1
    1668:	1d 83       	std	Y+5, r17	; 0x05

	tmp_ulong_2 = tmp_ulong_1 / 60;	// whole hours
    166a:	62 2f       	mov	r22, r18
    166c:	73 2f       	mov	r23, r19
    166e:	a7 01       	movw	r20, r14
    1670:	96 01       	movw	r18, r12
    1672:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <__udivmodsi4>
    1676:	12 2f       	mov	r17, r18
    1678:	ca 01       	movw	r24, r20
	dt->min = tmp_ulong_1 - (60 * tmp_ulong_2);
    167a:	b2 9e       	mul	r11, r18
    167c:	00 19       	sub	r16, r0
    167e:	11 24       	eor	r1, r1
    1680:	0c 83       	std	Y+4, r16	; 0x04

	tmp_ulong_1 = tmp_ulong_2 / 24;	// whole days
    1682:	62 2f       	mov	r22, r18
    1684:	73 2f       	mov	r23, r19
    1686:	28 e1       	ldi	r18, 0x18	; 24
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	40 e0       	ldi	r20, 0x00	; 0
    168c:	50 e0       	ldi	r21, 0x00	; 0
    168e:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <__udivmodsi4>
	dt->hour = tmp_ulong_2 - (24 * tmp_ulong_1);
    1692:	88 e1       	ldi	r24, 0x18	; 24
    1694:	28 9f       	mul	r18, r24
    1696:	10 19       	sub	r17, r0
    1698:	11 24       	eor	r1, r1
    169a:	1b 83       	std	Y+3, r17	; 0x03

	tmp_ulong_2 = tmp_ulong_1 + 365 + 366;	// whole days since 1968
    169c:	69 01       	movw	r12, r18
    169e:	7a 01       	movw	r14, r20
    16a0:	8b ed       	ldi	r24, 0xDB	; 219
    16a2:	c8 0e       	add	r12, r24
    16a4:	82 e0       	ldi	r24, 0x02	; 2
    16a6:	d8 1e       	adc	r13, r24
    16a8:	e1 1c       	adc	r14, r1
    16aa:	f1 1c       	adc	r15, r1
	tmp_uint_1 = tmp_ulong_2 / ((4 * 365) + 1);	// leap year periods
    16ac:	c7 01       	movw	r24, r14
    16ae:	b6 01       	movw	r22, r12
    16b0:	25 eb       	ldi	r18, 0xB5	; 181
    16b2:	35 e0       	ldi	r19, 0x05	; 5
    16b4:	40 e0       	ldi	r20, 0x00	; 0
    16b6:	50 e0       	ldi	r21, 0x00	; 0
    16b8:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <__udivmodsi4>
    16bc:	4b 01       	movw	r8, r22
    16be:	5c 01       	movw	r10, r24
    16c0:	89 01       	movw	r16, r18

	tmp_uint_2 = tmp_ulong_2 % ((4 * 365) + 1);	// days since current lyear

	// if days are after a current leap year then add a leap year period
	if ((tmp_uint_2 >= (31 + 29))) tmp_uint_1++;
    16c2:	8c e3       	ldi	r24, 0x3C	; 60
    16c4:	88 16       	cp	r8, r24
    16c6:	91 04       	cpc	r9, r1
    16c8:	10 f0       	brcs	.+4      	; 0x16ce <DS2415_epoch_to_gregorian+0xa4>
    16ca:	0f 5f       	subi	r16, 0xFF	; 255
    16cc:	1f 4f       	sbci	r17, 0xFF	; 255

	tmp_uint_3 = (tmp_ulong_2 - tmp_uint_1) / 365;	// whole years
    16ce:	c7 01       	movw	r24, r14
    16d0:	b6 01       	movw	r22, r12
    16d2:	60 1b       	sub	r22, r16
    16d4:	71 0b       	sbc	r23, r17
    16d6:	81 09       	sbc	r24, r1
    16d8:	91 09       	sbc	r25, r1
    16da:	2d e6       	ldi	r18, 0x6D	; 109
    16dc:	31 e0       	ldi	r19, 0x01	; 1
    16de:	40 e0       	ldi	r20, 0x00	; 0
    16e0:	50 e0       	ldi	r21, 0x00	; 0
    16e2:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <__udivmodsi4>
	tmp_uint_1 = tmp_ulong_2 - (tmp_uint_3 * 365) - tmp_uint_1;	// days since first of year
    16e6:	6d e6       	ldi	r22, 0x6D	; 109
    16e8:	71 e0       	ldi	r23, 0x01	; 1
    16ea:	62 9f       	mul	r22, r18
    16ec:	c0 01       	movw	r24, r0
    16ee:	63 9f       	mul	r22, r19
    16f0:	90 0d       	add	r25, r0
    16f2:	72 9f       	mul	r23, r18
    16f4:	90 0d       	add	r25, r0
    16f6:	11 24       	eor	r1, r1
    16f8:	c8 1a       	sub	r12, r24
    16fa:	d9 0a       	sbc	r13, r25
    16fc:	c0 1a       	sub	r12, r16
    16fe:	d1 0a       	sbc	r13, r17

	if ((tmp_uint_2 <= 365) && (tmp_uint_2 >= 60)) {
    1700:	8c e3       	ldi	r24, 0x3C	; 60
    1702:	88 1a       	sub	r8, r24
    1704:	91 08       	sbc	r9, r1
    1706:	82 e3       	ldi	r24, 0x32	; 50
    1708:	88 16       	cp	r8, r24
    170a:	81 e0       	ldi	r24, 0x01	; 1
    170c:	98 06       	cpc	r9, r24
    170e:	18 f4       	brcc	.+6      	; 0x1716 <DS2415_epoch_to_gregorian+0xec>
		tmp_uint_1++;
    1710:	8f ef       	ldi	r24, 0xFF	; 255
    1712:	c8 1a       	sub	r12, r24
    1714:	d8 0a       	sbc	r13, r24
	}
	dt->year = tmp_uint_3 + 68;		
    1716:	44 e4       	ldi	r20, 0x44	; 68
    1718:	42 0f       	add	r20, r18
    171a:	48 83       	st	Y, r20
    171c:	ea e1       	ldi	r30, 0x1A	; 26
    171e:	f1 e0       	ldi	r31, 0x01	; 1

	// search for what month it is based on how many days have past
	// within the current year
	tmp_uint_2 = 13;	// month
	tmp_uint_3 = 366;	// days to month
    1720:	8e e6       	ldi	r24, 0x6E	; 110
    1722:	91 e0       	ldi	r25, 0x01	; 1
	}
	dt->year = tmp_uint_3 + 68;		

	// search for what month it is based on how many days have past
	// within the current year
	tmp_uint_2 = 13;	// month
    1724:	2d e0       	ldi	r18, 0x0D	; 13
    1726:	30 e0       	ldi	r19, 0x00	; 0
	while (tmp_uint_1 < tmp_uint_3)
	{
		 tmp_uint_2--;
		 tmp_uint_3 = accum_days[tmp_uint_2];
		 // fixup if month is past February and it is a leap year
		 if ((tmp_uint_2 >= 2) && ((dt->year % 4) == 0)) tmp_uint_3++;
    1728:	43 70       	andi	r20, 0x03	; 3

	// search for what month it is based on how many days have past
	// within the current year
	tmp_uint_2 = 13;	// month
	tmp_uint_3 = 366;	// days to month
	while (tmp_uint_1 < tmp_uint_3)
    172a:	c8 16       	cp	r12, r24
    172c:	d9 06       	cpc	r13, r25
    172e:	58 f4       	brcc	.+22     	; 0x1746 <DS2415_epoch_to_gregorian+0x11c>
	{
		 tmp_uint_2--;
    1730:	21 50       	subi	r18, 0x01	; 1
    1732:	31 09       	sbc	r19, r1
		 tmp_uint_3 = accum_days[tmp_uint_2];
    1734:	92 91       	ld	r25, -Z
    1736:	82 91       	ld	r24, -Z
		 // fixup if month is past February and it is a leap year
		 if ((tmp_uint_2 >= 2) && ((dt->year % 4) == 0)) tmp_uint_3++;
    1738:	22 30       	cpi	r18, 0x02	; 2
    173a:	31 05       	cpc	r19, r1
    173c:	b0 f3       	brcs	.-20     	; 0x172a <DS2415_epoch_to_gregorian+0x100>
    173e:	41 11       	cpse	r20, r1
    1740:	f4 cf       	rjmp	.-24     	; 0x172a <DS2415_epoch_to_gregorian+0x100>
    1742:	01 96       	adiw	r24, 0x01	; 1
    1744:	f2 cf       	rjmp	.-28     	; 0x172a <DS2415_epoch_to_gregorian+0x100>
	}
	dt->month = tmp_uint_2;
    1746:	29 83       	std	Y+1, r18	; 0x01
	dt->day = tmp_uint_1 - tmp_uint_3 + 1;
    1748:	c3 94       	inc	r12
    174a:	c8 1a       	sub	r12, r24
    174c:	ca 82       	std	Y+2, r12	; 0x02
}
    174e:	df 91       	pop	r29
    1750:	cf 91       	pop	r28
    1752:	1f 91       	pop	r17
    1754:	0f 91       	pop	r16
    1756:	ff 90       	pop	r15
    1758:	ef 90       	pop	r14
    175a:	df 90       	pop	r13
    175c:	cf 90       	pop	r12
    175e:	bf 90       	pop	r11
    1760:	af 90       	pop	r10
    1762:	9f 90       	pop	r9
    1764:	8f 90       	pop	r8
    1766:	08 95       	ret

00001768 <bmp085_writemem>:
#include BMP085_I2CFLEURYPATH

/*
 * i2c write
 */
void bmp085_writemem(uint8_t reg, uint8_t value) {
    1768:	1f 93       	push	r17
    176a:	cf 93       	push	r28
    176c:	df 93       	push	r29
    176e:	1f 92       	push	r1
    1770:	cd b7       	in	r28, 0x3d	; 61
    1772:	de b7       	in	r29, 0x3e	; 62
    1774:	18 2f       	mov	r17, r24
	i2c_start_wait(BMP085_ADDR | I2C_WRITE);
    1776:	8e ee       	ldi	r24, 0xEE	; 238
    1778:	69 83       	std	Y+1, r22	; 0x01
    177a:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <i2c_start_wait>
	i2c_write(reg);
    177e:	81 2f       	mov	r24, r17
    1780:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <i2c_write>
	i2c_write(value);
    1784:	69 81       	ldd	r22, Y+1	; 0x01
    1786:	86 2f       	mov	r24, r22
    1788:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <i2c_write>
	i2c_stop();
}
    178c:	0f 90       	pop	r0
    178e:	df 91       	pop	r29
    1790:	cf 91       	pop	r28
    1792:	1f 91       	pop	r17
 */
void bmp085_writemem(uint8_t reg, uint8_t value) {
	i2c_start_wait(BMP085_ADDR | I2C_WRITE);
	i2c_write(reg);
	i2c_write(value);
	i2c_stop();
    1794:	0c 94 94 0f 	jmp	0x1f28	; 0x1f28 <i2c_stop>

00001798 <bmp085_readmem>:
}

/*
 * i2c read
 */
void bmp085_readmem(uint8_t reg, uint8_t buff[], uint8_t bytes) {
    1798:	af 92       	push	r10
    179a:	bf 92       	push	r11
    179c:	df 92       	push	r13
    179e:	ef 92       	push	r14
    17a0:	ff 92       	push	r15
    17a2:	0f 93       	push	r16
    17a4:	1f 93       	push	r17
    17a6:	cf 93       	push	r28
    17a8:	df 93       	push	r29
    17aa:	00 d0       	rcall	.+0      	; 0x17ac <bmp085_readmem+0x14>
    17ac:	cd b7       	in	r28, 0x3d	; 61
    17ae:	de b7       	in	r29, 0x3e	; 62
    17b0:	18 2f       	mov	r17, r24
    17b2:	d4 2e       	mov	r13, r20
	uint8_t i =0;
	i2c_start_wait(BMP085_ADDR | I2C_WRITE);
    17b4:	8e ee       	ldi	r24, 0xEE	; 238
    17b6:	69 83       	std	Y+1, r22	; 0x01
    17b8:	7a 83       	std	Y+2, r23	; 0x02
    17ba:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <i2c_start_wait>
	i2c_write(reg);
    17be:	81 2f       	mov	r24, r17
    17c0:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <i2c_write>
	i2c_rep_start(BMP085_ADDR | I2C_READ);
    17c4:	8f ee       	ldi	r24, 0xEF	; 239
    17c6:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <i2c_rep_start>
    17ca:	69 81       	ldd	r22, Y+1	; 0x01
    17cc:	a6 2e       	mov	r10, r22
    17ce:	7a 81       	ldd	r23, Y+2	; 0x02
    17d0:	b7 2e       	mov	r11, r23
	for(i=0; i<bytes; i++) {
    17d2:	00 e0       	ldi	r16, 0x00	; 0
    17d4:	10 e0       	ldi	r17, 0x00	; 0
		if(i==bytes-1)
    17d6:	ed 2c       	mov	r14, r13
    17d8:	f1 2c       	mov	r15, r1
    17da:	81 e0       	ldi	r24, 0x01	; 1
    17dc:	e8 1a       	sub	r14, r24
    17de:	f1 08       	sbc	r15, r1
void bmp085_readmem(uint8_t reg, uint8_t buff[], uint8_t bytes) {
	uint8_t i =0;
	i2c_start_wait(BMP085_ADDR | I2C_WRITE);
	i2c_write(reg);
	i2c_rep_start(BMP085_ADDR | I2C_READ);
	for(i=0; i<bytes; i++) {
    17e0:	0d 15       	cp	r16, r13
    17e2:	80 f4       	brcc	.+32     	; 0x1804 <bmp085_readmem+0x6c>
		if(i==bytes-1)
    17e4:	0e 15       	cp	r16, r14
    17e6:	1f 05       	cpc	r17, r15
    17e8:	19 f4       	brne	.+6      	; 0x17f0 <bmp085_readmem+0x58>
			buff[i] = i2c_readNak();
    17ea:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <i2c_readNak>
    17ee:	02 c0       	rjmp	.+4      	; 0x17f4 <bmp085_readmem+0x5c>
		else
			buff[i] = i2c_readAck();
    17f0:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <i2c_readAck>
    17f4:	f5 01       	movw	r30, r10
    17f6:	80 83       	st	Z, r24
    17f8:	0f 5f       	subi	r16, 0xFF	; 255
    17fa:	1f 4f       	sbci	r17, 0xFF	; 255
    17fc:	ff ef       	ldi	r31, 0xFF	; 255
    17fe:	af 1a       	sub	r10, r31
    1800:	bf 0a       	sbc	r11, r31
    1802:	ee cf       	rjmp	.-36     	; 0x17e0 <bmp085_readmem+0x48>
	}
	i2c_stop();
}
    1804:	0f 90       	pop	r0
    1806:	0f 90       	pop	r0
    1808:	df 91       	pop	r29
    180a:	cf 91       	pop	r28
    180c:	1f 91       	pop	r17
    180e:	0f 91       	pop	r16
    1810:	ff 90       	pop	r15
    1812:	ef 90       	pop	r14
    1814:	df 90       	pop	r13
    1816:	bf 90       	pop	r11
    1818:	af 90       	pop	r10
		if(i==bytes-1)
			buff[i] = i2c_readNak();
		else
			buff[i] = i2c_readAck();
	}
	i2c_stop();
    181a:	0c 94 94 0f 	jmp	0x1f28	; 0x1f28 <i2c_stop>

0000181e <bmp085_avaragefilter>:


#if BMP085_FILTERPRESSURE == 1
#define BMP085_AVARAGECOEF 21
static long k[BMP085_AVARAGECOEF];
long bmp085_avaragefilter(long input) {
    181e:	0f 93       	push	r16
    1820:	1f 93       	push	r17
    1822:	e5 e4       	ldi	r30, 0x45	; 69
    1824:	f2 e0       	ldi	r31, 0x02	; 2
	uint8_t i=0;
	long sum=0;
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
		k[i] = k[i+1];
    1826:	04 81       	ldd	r16, Z+4	; 0x04
    1828:	15 81       	ldd	r17, Z+5	; 0x05
    182a:	26 81       	ldd	r18, Z+6	; 0x06
    182c:	37 81       	ldd	r19, Z+7	; 0x07
    182e:	01 93       	st	Z+, r16
    1830:	11 93       	st	Z+, r17
    1832:	21 93       	st	Z+, r18
    1834:	31 93       	st	Z+, r19
#define BMP085_AVARAGECOEF 21
static long k[BMP085_AVARAGECOEF];
long bmp085_avaragefilter(long input) {
	uint8_t i=0;
	long sum=0;
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
    1836:	22 e0       	ldi	r18, 0x02	; 2
    1838:	e9 39       	cpi	r30, 0x99	; 153
    183a:	f2 07       	cpc	r31, r18
    183c:	a1 f7       	brne	.-24     	; 0x1826 <bmp085_avaragefilter+0x8>
		k[i] = k[i+1];
	}
	k[BMP085_AVARAGECOEF-1] = input;
    183e:	60 93 95 02 	sts	0x0295, r22
    1842:	70 93 96 02 	sts	0x0296, r23
    1846:	80 93 97 02 	sts	0x0297, r24
    184a:	90 93 98 02 	sts	0x0298, r25
    184e:	e5 e4       	ldi	r30, 0x45	; 69
    1850:	f2 e0       	ldi	r31, 0x02	; 2
#if BMP085_FILTERPRESSURE == 1
#define BMP085_AVARAGECOEF 21
static long k[BMP085_AVARAGECOEF];
long bmp085_avaragefilter(long input) {
	uint8_t i=0;
	long sum=0;
    1852:	60 e0       	ldi	r22, 0x00	; 0
    1854:	70 e0       	ldi	r23, 0x00	; 0
    1856:	cb 01       	movw	r24, r22
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
		k[i] = k[i+1];
	}
	k[BMP085_AVARAGECOEF-1] = input;
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
		sum += k[i];
    1858:	01 91       	ld	r16, Z+
    185a:	11 91       	ld	r17, Z+
    185c:	21 91       	ld	r18, Z+
    185e:	31 91       	ld	r19, Z+
    1860:	60 0f       	add	r22, r16
    1862:	71 1f       	adc	r23, r17
    1864:	82 1f       	adc	r24, r18
    1866:	93 1f       	adc	r25, r19
	long sum=0;
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
		k[i] = k[i+1];
	}
	k[BMP085_AVARAGECOEF-1] = input;
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
    1868:	22 e0       	ldi	r18, 0x02	; 2
    186a:	e9 39       	cpi	r30, 0x99	; 153
    186c:	f2 07       	cpc	r31, r18
    186e:	a1 f7       	brne	.-24     	; 0x1858 <bmp085_avaragefilter+0x3a>
		sum += k[i];
	}
	return (sum /BMP085_AVARAGECOEF) ;
    1870:	25 e1       	ldi	r18, 0x15	; 21
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	40 e0       	ldi	r20, 0x00	; 0
    1876:	50 e0       	ldi	r21, 0x00	; 0
    1878:	0e 94 5e 15 	call	0x2abc	; 0x2abc <__divmodsi4>
}
    187c:	ca 01       	movw	r24, r20
    187e:	b9 01       	movw	r22, r18
    1880:	1f 91       	pop	r17
    1882:	0f 91       	pop	r16
    1884:	08 95       	ret

00001886 <bmp085_getcalibration>:
#endif

/*
 * read calibration registers
 */
void bmp085_getcalibration() {
    1886:	cf 93       	push	r28
    1888:	df 93       	push	r29
    188a:	00 d0       	rcall	.+0      	; 0x188c <bmp085_getcalibration+0x6>
    188c:	cd b7       	in	r28, 0x3d	; 61
    188e:	de b7       	in	r29, 0x3e	; 62
	uint8_t buff[2];
	memset(buff, 0, sizeof(buff));
    1890:	1a 82       	std	Y+2, r1	; 0x02
    1892:	19 82       	std	Y+1, r1	; 0x01

	bmp085_readmem(BMP085_REGAC1, buff, 2);
    1894:	42 e0       	ldi	r20, 0x02	; 2
    1896:	be 01       	movw	r22, r28
    1898:	6f 5f       	subi	r22, 0xFF	; 255
    189a:	7f 4f       	sbci	r23, 0xFF	; 255
    189c:	8a ea       	ldi	r24, 0xAA	; 170
    189e:	0e 94 cc 0b 	call	0x1798	; 0x1798 <bmp085_readmem>
	bmp085_regac1 = ((int)buff[0] <<8 | ((int)buff[1]));
    18a2:	89 81       	ldd	r24, Y+1	; 0x01
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	98 2f       	mov	r25, r24
    18a8:	88 27       	eor	r24, r24
    18aa:	2a 81       	ldd	r18, Y+2	; 0x02
    18ac:	82 2b       	or	r24, r18
    18ae:	90 93 e8 02 	sts	0x02E8, r25
    18b2:	80 93 e7 02 	sts	0x02E7, r24
	bmp085_readmem(BMP085_REGAC2, buff, 2);
    18b6:	42 e0       	ldi	r20, 0x02	; 2
    18b8:	be 01       	movw	r22, r28
    18ba:	6f 5f       	subi	r22, 0xFF	; 255
    18bc:	7f 4f       	sbci	r23, 0xFF	; 255
    18be:	8c ea       	ldi	r24, 0xAC	; 172
    18c0:	0e 94 cc 0b 	call	0x1798	; 0x1798 <bmp085_readmem>
	bmp085_regac2 = ((int)buff[0] <<8 | ((int)buff[1]));
    18c4:	89 81       	ldd	r24, Y+1	; 0x01
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	98 2f       	mov	r25, r24
    18ca:	88 27       	eor	r24, r24
    18cc:	2a 81       	ldd	r18, Y+2	; 0x02
    18ce:	82 2b       	or	r24, r18
    18d0:	90 93 3e 03 	sts	0x033E, r25
    18d4:	80 93 3d 03 	sts	0x033D, r24
	bmp085_readmem(BMP085_REGAC3, buff, 2);
    18d8:	42 e0       	ldi	r20, 0x02	; 2
    18da:	be 01       	movw	r22, r28
    18dc:	6f 5f       	subi	r22, 0xFF	; 255
    18de:	7f 4f       	sbci	r23, 0xFF	; 255
    18e0:	8e ea       	ldi	r24, 0xAE	; 174
    18e2:	0e 94 cc 0b 	call	0x1798	; 0x1798 <bmp085_readmem>
	bmp085_regac3 = ((int)buff[0] <<8 | ((int)buff[1]));
    18e6:	89 81       	ldd	r24, Y+1	; 0x01
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	98 2f       	mov	r25, r24
    18ec:	88 27       	eor	r24, r24
    18ee:	2a 81       	ldd	r18, Y+2	; 0x02
    18f0:	82 2b       	or	r24, r18
    18f2:	90 93 d0 02 	sts	0x02D0, r25
    18f6:	80 93 cf 02 	sts	0x02CF, r24
	bmp085_readmem(BMP085_REGAC4, buff, 2);
    18fa:	42 e0       	ldi	r20, 0x02	; 2
    18fc:	be 01       	movw	r22, r28
    18fe:	6f 5f       	subi	r22, 0xFF	; 255
    1900:	7f 4f       	sbci	r23, 0xFF	; 255
    1902:	80 eb       	ldi	r24, 0xB0	; 176
    1904:	0e 94 cc 0b 	call	0x1798	; 0x1798 <bmp085_readmem>
	bmp085_regac4 = ((unsigned int)buff[0] <<8 | ((unsigned int)buff[1]));
    1908:	89 81       	ldd	r24, Y+1	; 0x01
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	98 2f       	mov	r25, r24
    190e:	88 27       	eor	r24, r24
    1910:	2a 81       	ldd	r18, Y+2	; 0x02
    1912:	82 2b       	or	r24, r18
    1914:	90 93 aa 02 	sts	0x02AA, r25
    1918:	80 93 a9 02 	sts	0x02A9, r24
	bmp085_readmem(BMP085_REGAC5, buff, 2);
    191c:	42 e0       	ldi	r20, 0x02	; 2
    191e:	be 01       	movw	r22, r28
    1920:	6f 5f       	subi	r22, 0xFF	; 255
    1922:	7f 4f       	sbci	r23, 0xFF	; 255
    1924:	82 eb       	ldi	r24, 0xB2	; 178
    1926:	0e 94 cc 0b 	call	0x1798	; 0x1798 <bmp085_readmem>
	bmp085_regac5 = ((unsigned int)buff[0] <<8 | ((unsigned int)buff[1]));
    192a:	89 81       	ldd	r24, Y+1	; 0x01
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	98 2f       	mov	r25, r24
    1930:	88 27       	eor	r24, r24
    1932:	2a 81       	ldd	r18, Y+2	; 0x02
    1934:	82 2b       	or	r24, r18
    1936:	90 93 fa 02 	sts	0x02FA, r25
    193a:	80 93 f9 02 	sts	0x02F9, r24
	bmp085_readmem(BMP085_REGAC6, buff, 2);
    193e:	42 e0       	ldi	r20, 0x02	; 2
    1940:	be 01       	movw	r22, r28
    1942:	6f 5f       	subi	r22, 0xFF	; 255
    1944:	7f 4f       	sbci	r23, 0xFF	; 255
    1946:	84 eb       	ldi	r24, 0xB4	; 180
    1948:	0e 94 cc 0b 	call	0x1798	; 0x1798 <bmp085_readmem>
	bmp085_regac6 = ((unsigned int)buff[0] <<8 | ((unsigned int)buff[1]));
    194c:	89 81       	ldd	r24, Y+1	; 0x01
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	98 2f       	mov	r25, r24
    1952:	88 27       	eor	r24, r24
    1954:	2a 81       	ldd	r18, Y+2	; 0x02
    1956:	82 2b       	or	r24, r18
    1958:	90 93 dc 02 	sts	0x02DC, r25
    195c:	80 93 db 02 	sts	0x02DB, r24
	bmp085_readmem(BMP085_REGB1, buff, 2);
    1960:	42 e0       	ldi	r20, 0x02	; 2
    1962:	be 01       	movw	r22, r28
    1964:	6f 5f       	subi	r22, 0xFF	; 255
    1966:	7f 4f       	sbci	r23, 0xFF	; 255
    1968:	86 eb       	ldi	r24, 0xB6	; 182
    196a:	0e 94 cc 0b 	call	0x1798	; 0x1798 <bmp085_readmem>
	bmp085_regb1 = ((int)buff[0] <<8 | ((int)buff[1]));
    196e:	89 81       	ldd	r24, Y+1	; 0x01
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	98 2f       	mov	r25, r24
    1974:	88 27       	eor	r24, r24
    1976:	2a 81       	ldd	r18, Y+2	; 0x02
    1978:	82 2b       	or	r24, r18
    197a:	90 93 da 02 	sts	0x02DA, r25
    197e:	80 93 d9 02 	sts	0x02D9, r24
	bmp085_readmem(BMP085_REGB2, buff, 2);
    1982:	42 e0       	ldi	r20, 0x02	; 2
    1984:	be 01       	movw	r22, r28
    1986:	6f 5f       	subi	r22, 0xFF	; 255
    1988:	7f 4f       	sbci	r23, 0xFF	; 255
    198a:	88 eb       	ldi	r24, 0xB8	; 184
    198c:	0e 94 cc 0b 	call	0x1798	; 0x1798 <bmp085_readmem>
	bmp085_regb2 = ((int)buff[0] <<8 | ((int)buff[1]));
    1990:	89 81       	ldd	r24, Y+1	; 0x01
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	98 2f       	mov	r25, r24
    1996:	88 27       	eor	r24, r24
    1998:	2a 81       	ldd	r18, Y+2	; 0x02
    199a:	82 2b       	or	r24, r18
    199c:	90 93 c2 02 	sts	0x02C2, r25
    19a0:	80 93 c1 02 	sts	0x02C1, r24
	bmp085_readmem(BMP085_REGMB, buff, 2);
    19a4:	42 e0       	ldi	r20, 0x02	; 2
    19a6:	be 01       	movw	r22, r28
    19a8:	6f 5f       	subi	r22, 0xFF	; 255
    19aa:	7f 4f       	sbci	r23, 0xFF	; 255
    19ac:	8a eb       	ldi	r24, 0xBA	; 186
    19ae:	0e 94 cc 0b 	call	0x1798	; 0x1798 <bmp085_readmem>
	bmp085_regmb = ((int)buff[0] <<8 | ((int)buff[1]));
    19b2:	89 81       	ldd	r24, Y+1	; 0x01
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	98 2f       	mov	r25, r24
    19b8:	88 27       	eor	r24, r24
    19ba:	2a 81       	ldd	r18, Y+2	; 0x02
    19bc:	82 2b       	or	r24, r18
    19be:	90 93 f8 02 	sts	0x02F8, r25
    19c2:	80 93 f7 02 	sts	0x02F7, r24
	bmp085_readmem(BMP085_REGMC, buff, 2);
    19c6:	42 e0       	ldi	r20, 0x02	; 2
    19c8:	be 01       	movw	r22, r28
    19ca:	6f 5f       	subi	r22, 0xFF	; 255
    19cc:	7f 4f       	sbci	r23, 0xFF	; 255
    19ce:	8c eb       	ldi	r24, 0xBC	; 188
    19d0:	0e 94 cc 0b 	call	0x1798	; 0x1798 <bmp085_readmem>
	bmp085_regmc = ((int)buff[0] <<8 | ((int)buff[1]));
    19d4:	89 81       	ldd	r24, Y+1	; 0x01
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	98 2f       	mov	r25, r24
    19da:	88 27       	eor	r24, r24
    19dc:	2a 81       	ldd	r18, Y+2	; 0x02
    19de:	82 2b       	or	r24, r18
    19e0:	90 93 fc 02 	sts	0x02FC, r25
    19e4:	80 93 fb 02 	sts	0x02FB, r24
	bmp085_readmem(BMP085_REGMD, buff, 2);
    19e8:	42 e0       	ldi	r20, 0x02	; 2
    19ea:	be 01       	movw	r22, r28
    19ec:	6f 5f       	subi	r22, 0xFF	; 255
    19ee:	7f 4f       	sbci	r23, 0xFF	; 255
    19f0:	8e eb       	ldi	r24, 0xBE	; 190
    19f2:	0e 94 cc 0b 	call	0x1798	; 0x1798 <bmp085_readmem>
	bmp085_regmd = ((int)buff[0] <<8 | ((int)buff[1]));
    19f6:	89 81       	ldd	r24, Y+1	; 0x01
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	98 2f       	mov	r25, r24
    19fc:	88 27       	eor	r24, r24
    19fe:	2a 81       	ldd	r18, Y+2	; 0x02
    1a00:	82 2b       	or	r24, r18
    1a02:	90 93 de 02 	sts	0x02DE, r25
    1a06:	80 93 dd 02 	sts	0x02DD, r24
}
    1a0a:	0f 90       	pop	r0
    1a0c:	0f 90       	pop	r0
    1a0e:	df 91       	pop	r29
    1a10:	cf 91       	pop	r28
    1a12:	08 95       	ret

00001a14 <bmp085_getrawtemperature>:

/*
 * get raw temperature as read by registers, and do some calculation to convert it
 */
void bmp085_getrawtemperature() {
    1a14:	cf 92       	push	r12
    1a16:	df 92       	push	r13
    1a18:	ef 92       	push	r14
    1a1a:	ff 92       	push	r15
    1a1c:	cf 93       	push	r28
    1a1e:	df 93       	push	r29
    1a20:	00 d0       	rcall	.+0      	; 0x1a22 <bmp085_getrawtemperature+0xe>
    1a22:	cd b7       	in	r28, 0x3d	; 61
    1a24:	de b7       	in	r29, 0x3e	; 62
	uint8_t buff[2];
	memset(buff, 0, sizeof(buff));
    1a26:	1a 82       	std	Y+2, r1	; 0x02
    1a28:	19 82       	std	Y+1, r1	; 0x01
	long ut,x1,x2;

	//read raw temperature
	bmp085_writemem(BMP085_REGCONTROL, BMP085_REGREADTEMPERATURE);
    1a2a:	6e e2       	ldi	r22, 0x2E	; 46
    1a2c:	84 ef       	ldi	r24, 0xF4	; 244
    1a2e:	0e 94 b4 0b 	call	0x1768	; 0x1768 <bmp085_writemem>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1a32:	8f e0       	ldi	r24, 0x0F	; 15
    1a34:	97 e2       	ldi	r25, 0x27	; 39
    1a36:	01 97       	sbiw	r24, 0x01	; 1
    1a38:	f1 f7       	brne	.-4      	; 0x1a36 <bmp085_getrawtemperature+0x22>
    1a3a:	00 c0       	rjmp	.+0      	; 0x1a3c <bmp085_getrawtemperature+0x28>
    1a3c:	00 00       	nop
	_delay_ms(5); // min. 4.5ms read Temp delay
	bmp085_readmem(BMP085_REGCONTROLOUTPUT, buff, 2);
    1a3e:	42 e0       	ldi	r20, 0x02	; 2
    1a40:	be 01       	movw	r22, r28
    1a42:	6f 5f       	subi	r22, 0xFF	; 255
    1a44:	7f 4f       	sbci	r23, 0xFF	; 255
    1a46:	86 ef       	ldi	r24, 0xF6	; 246
    1a48:	0e 94 cc 0b 	call	0x1798	; 0x1798 <bmp085_readmem>
	ut = ((long)buff[0] << 8 | ((long)buff[1])); //uncompensated temperature value
    1a4c:	29 81       	ldd	r18, Y+1	; 0x01
    1a4e:	82 2f       	mov	r24, r18
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	a0 e0       	ldi	r26, 0x00	; 0
    1a54:	b0 e0       	ldi	r27, 0x00	; 0
    1a56:	22 27       	eor	r18, r18
    1a58:	38 2f       	mov	r19, r24
    1a5a:	49 2f       	mov	r20, r25
    1a5c:	5a 2f       	mov	r21, r26
    1a5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a60:	28 2b       	or	r18, r24

	//calculate raw temperature
	x1 = ((long)ut - bmp085_regac6) * bmp085_regac5 >> 15;
    1a62:	80 91 db 02 	lds	r24, 0x02DB
    1a66:	90 91 dc 02 	lds	r25, 0x02DC
    1a6a:	28 1b       	sub	r18, r24
    1a6c:	39 0b       	sbc	r19, r25
    1a6e:	41 09       	sbc	r20, r1
    1a70:	51 09       	sbc	r21, r1
    1a72:	a0 91 f9 02 	lds	r26, 0x02F9
    1a76:	b0 91 fa 02 	lds	r27, 0x02FA
    1a7a:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <__muluhisi3>
    1a7e:	6b 01       	movw	r12, r22
    1a80:	7c 01       	movw	r14, r24
    1a82:	4f e0       	ldi	r20, 0x0F	; 15
    1a84:	f5 94       	asr	r15
    1a86:	e7 94       	ror	r14
    1a88:	d7 94       	ror	r13
    1a8a:	c7 94       	ror	r12
    1a8c:	4a 95       	dec	r20
    1a8e:	d1 f7       	brne	.-12     	; 0x1a84 <bmp085_getrawtemperature+0x70>
	x2 = ((long)bmp085_regmc << 11) / (x1 + bmp085_regmd);
    1a90:	60 91 fb 02 	lds	r22, 0x02FB
    1a94:	70 91 fc 02 	lds	r23, 0x02FC
    1a98:	88 27       	eor	r24, r24
    1a9a:	77 fd       	sbrc	r23, 7
    1a9c:	80 95       	com	r24
    1a9e:	98 2f       	mov	r25, r24
    1aa0:	5b e0       	ldi	r21, 0x0B	; 11
    1aa2:	66 0f       	add	r22, r22
    1aa4:	77 1f       	adc	r23, r23
    1aa6:	88 1f       	adc	r24, r24
    1aa8:	99 1f       	adc	r25, r25
    1aaa:	5a 95       	dec	r21
    1aac:	d1 f7       	brne	.-12     	; 0x1aa2 <bmp085_getrawtemperature+0x8e>
    1aae:	20 91 dd 02 	lds	r18, 0x02DD
    1ab2:	30 91 de 02 	lds	r19, 0x02DE
    1ab6:	44 27       	eor	r20, r20
    1ab8:	37 fd       	sbrc	r19, 7
    1aba:	40 95       	com	r20
    1abc:	54 2f       	mov	r21, r20
    1abe:	2c 0d       	add	r18, r12
    1ac0:	3d 1d       	adc	r19, r13
    1ac2:	4e 1d       	adc	r20, r14
    1ac4:	5f 1d       	adc	r21, r15
    1ac6:	0e 94 5e 15 	call	0x2abc	; 0x2abc <__divmodsi4>
	bmp085_rawtemperature = x1 + x2;
    1aca:	2c 0d       	add	r18, r12
    1acc:	3d 1d       	adc	r19, r13
    1ace:	4e 1d       	adc	r20, r14
    1ad0:	5f 1d       	adc	r21, r15
    1ad2:	20 93 d5 02 	sts	0x02D5, r18
    1ad6:	30 93 d6 02 	sts	0x02D6, r19
    1ada:	40 93 d7 02 	sts	0x02D7, r20
    1ade:	50 93 d8 02 	sts	0x02D8, r21
}
    1ae2:	0f 90       	pop	r0
    1ae4:	0f 90       	pop	r0
    1ae6:	df 91       	pop	r29
    1ae8:	cf 91       	pop	r28
    1aea:	ff 90       	pop	r15
    1aec:	ef 90       	pop	r14
    1aee:	df 90       	pop	r13
    1af0:	cf 90       	pop	r12
    1af2:	08 95       	ret

00001af4 <bmp085_getrawpressure>:

/*
 * get raw pressure as read by registers, and do some calculation to convert it
 */
void bmp085_getrawpressure() {
    1af4:	4f 92       	push	r4
    1af6:	5f 92       	push	r5
    1af8:	6f 92       	push	r6
    1afa:	7f 92       	push	r7
    1afc:	8f 92       	push	r8
    1afe:	9f 92       	push	r9
    1b00:	af 92       	push	r10
    1b02:	bf 92       	push	r11
    1b04:	cf 92       	push	r12
    1b06:	df 92       	push	r13
    1b08:	ef 92       	push	r14
    1b0a:	ff 92       	push	r15
    1b0c:	cf 93       	push	r28
    1b0e:	df 93       	push	r29
    1b10:	cd b7       	in	r28, 0x3d	; 61
    1b12:	de b7       	in	r29, 0x3e	; 62
    1b14:	2b 97       	sbiw	r28, 0x0b	; 11
    1b16:	0f b6       	in	r0, 0x3f	; 63
    1b18:	f8 94       	cli
    1b1a:	de bf       	out	0x3e, r29	; 62
    1b1c:	0f be       	out	0x3f, r0	; 63
    1b1e:	cd bf       	out	0x3d, r28	; 61
	uint8_t buff[3];
	memset(buff, 0, sizeof(buff));
    1b20:	19 82       	std	Y+1, r1	; 0x01
    1b22:	1a 82       	std	Y+2, r1	; 0x02
    1b24:	1b 82       	std	Y+3, r1	; 0x03
	long up,x1,x2,x3,b3,b6,p;
	unsigned long b4,b7;

	#if BMP085_AUTOUPDATETEMP == 1
	bmp085_getrawtemperature();
    1b26:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <bmp085_getrawtemperature>
	#endif

	//read raw pressure
	bmp085_writemem(BMP085_REGCONTROL, BMP085_REGREADPRESSURE+(BMP085_MODE << 6));
    1b2a:	64 ef       	ldi	r22, 0xF4	; 244
    1b2c:	84 ef       	ldi	r24, 0xF4	; 244
    1b2e:	0e 94 b4 0b 	call	0x1768	; 0x1768 <bmp085_writemem>
    1b32:	8f e1       	ldi	r24, 0x1F	; 31
    1b34:	9b ec       	ldi	r25, 0xCB	; 203
    1b36:	01 97       	sbiw	r24, 0x01	; 1
    1b38:	f1 f7       	brne	.-4      	; 0x1b36 <bmp085_getrawpressure+0x42>
    1b3a:	00 c0       	rjmp	.+0      	; 0x1b3c <bmp085_getrawpressure+0x48>
    1b3c:	00 00       	nop
	_delay_ms(2 + (3<<BMP085_MODE));
	bmp085_readmem(BMP085_REGCONTROLOUTPUT, buff, 3);
    1b3e:	43 e0       	ldi	r20, 0x03	; 3
    1b40:	be 01       	movw	r22, r28
    1b42:	6f 5f       	subi	r22, 0xFF	; 255
    1b44:	7f 4f       	sbci	r23, 0xFF	; 255
    1b46:	86 ef       	ldi	r24, 0xF6	; 246
    1b48:	0e 94 cc 0b 	call	0x1798	; 0x1798 <bmp085_readmem>
	up = ((((long)buff[0] <<16) | ((long)buff[1] <<8) | ((long)buff[2])) >> (8-BMP085_MODE)); // uncompensated pressure value

	//calculate raw pressure
	b6 = bmp085_rawtemperature - 4000;
    1b4c:	80 91 d5 02 	lds	r24, 0x02D5
    1b50:	90 91 d6 02 	lds	r25, 0x02D6
    1b54:	a0 91 d7 02 	lds	r26, 0x02D7
    1b58:	b0 91 d8 02 	lds	r27, 0x02D8
    1b5c:	80 5a       	subi	r24, 0xA0	; 160
    1b5e:	9f 40       	sbci	r25, 0x0F	; 15
    1b60:	a1 09       	sbc	r26, r1
    1b62:	b1 09       	sbc	r27, r1
    1b64:	8c 83       	std	Y+4, r24	; 0x04
    1b66:	9d 83       	std	Y+5, r25	; 0x05
    1b68:	ae 83       	std	Y+6, r26	; 0x06
    1b6a:	bf 83       	std	Y+7, r27	; 0x07
	x1 = (bmp085_regb2* (b6 * b6) >> 12) >> 11;
    1b6c:	9c 01       	movw	r18, r24
    1b6e:	ad 01       	movw	r20, r26
    1b70:	bc 01       	movw	r22, r24
    1b72:	cd 01       	movw	r24, r26
    1b74:	0e 94 18 15 	call	0x2a30	; 0x2a30 <__mulsi3>
    1b78:	2b 01       	movw	r4, r22
    1b7a:	3c 01       	movw	r6, r24
	x2 = (bmp085_regac2 * b6) >> 11;
	x3 = x1 + x2;
	b3 = (((((long)bmp085_regac1) * 4 + x3) << BMP085_MODE) + 2) >> 2;
    1b7c:	e0 91 e7 02 	lds	r30, 0x02E7
    1b80:	f0 91 e8 02 	lds	r31, 0x02E8
	x1 = (bmp085_regac3 * b6) >> 13;
    1b84:	a0 91 cf 02 	lds	r26, 0x02CF
    1b88:	b0 91 d0 02 	lds	r27, 0x02D0
    1b8c:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <__mulshisi3>
    1b90:	6b 01       	movw	r12, r22
    1b92:	7c 01       	movw	r14, r24
    1b94:	3d e0       	ldi	r19, 0x0D	; 13
    1b96:	f5 94       	asr	r15
    1b98:	e7 94       	ror	r14
    1b9a:	d7 94       	ror	r13
    1b9c:	c7 94       	ror	r12
    1b9e:	3a 95       	dec	r19
    1ba0:	d1 f7       	brne	.-12     	; 0x1b96 <bmp085_getrawpressure+0xa2>
	x2 = (bmp085_regb1 * ((b6 * b6) >> 12)) >> 16;
    1ba2:	a0 91 d9 02 	lds	r26, 0x02D9
    1ba6:	b0 91 da 02 	lds	r27, 0x02DA
    1baa:	a3 01       	movw	r20, r6
    1bac:	92 01       	movw	r18, r4
    1bae:	6c e0       	ldi	r22, 0x0C	; 12
    1bb0:	55 95       	asr	r21
    1bb2:	47 95       	ror	r20
    1bb4:	37 95       	ror	r19
    1bb6:	27 95       	ror	r18
    1bb8:	6a 95       	dec	r22
    1bba:	d1 f7       	brne	.-12     	; 0x1bb0 <bmp085_getrawpressure+0xbc>
    1bbc:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <__mulshisi3>
    1bc0:	bb 27       	eor	r27, r27
    1bc2:	97 fd       	sbrc	r25, 7
    1bc4:	b0 95       	com	r27
    1bc6:	ab 2f       	mov	r26, r27
	x3 = ((x1 + x2) + 2) >> 2;
    1bc8:	c8 0e       	add	r12, r24
    1bca:	d9 1e       	adc	r13, r25
    1bcc:	ea 1e       	adc	r14, r26
    1bce:	fb 1e       	adc	r15, r27
    1bd0:	92 e0       	ldi	r25, 0x02	; 2
    1bd2:	c9 0e       	add	r12, r25
    1bd4:	d1 1c       	adc	r13, r1
    1bd6:	e1 1c       	adc	r14, r1
    1bd8:	f1 1c       	adc	r15, r1
    1bda:	b2 e0       	ldi	r27, 0x02	; 2
    1bdc:	f5 94       	asr	r15
    1bde:	e7 94       	ror	r14
    1be0:	d7 94       	ror	r13
    1be2:	c7 94       	ror	r12
    1be4:	ba 95       	dec	r27
    1be6:	d1 f7       	brne	.-12     	; 0x1bdc <bmp085_getrawpressure+0xe8>
	b4 = (bmp085_regac4 * (uint32_t)(x3 + 32768)) >> 15;
    1be8:	a0 e8       	ldi	r26, 0x80	; 128
    1bea:	da 0e       	add	r13, r26
    1bec:	e1 1c       	adc	r14, r1
    1bee:	f1 1c       	adc	r15, r1
    1bf0:	a0 91 a9 02 	lds	r26, 0x02A9
    1bf4:	b0 91 aa 02 	lds	r27, 0x02AA
    1bf8:	a7 01       	movw	r20, r14
    1bfa:	96 01       	movw	r18, r12
    1bfc:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <__muluhisi3>
    1c00:	dc 01       	movw	r26, r24
    1c02:	cb 01       	movw	r24, r22
    1c04:	2f e0       	ldi	r18, 0x0F	; 15
    1c06:	b6 95       	lsr	r27
    1c08:	a7 95       	ror	r26
    1c0a:	97 95       	ror	r25
    1c0c:	87 95       	ror	r24
    1c0e:	2a 95       	dec	r18
    1c10:	d1 f7       	brne	.-12     	; 0x1c06 <bmp085_getrawpressure+0x112>
    1c12:	88 87       	std	Y+8, r24	; 0x08
    1c14:	99 87       	std	Y+9, r25	; 0x09
    1c16:	aa 87       	std	Y+10, r26	; 0x0a
    1c18:	bb 87       	std	Y+11, r27	; 0x0b

	//read raw pressure
	bmp085_writemem(BMP085_REGCONTROL, BMP085_REGREADPRESSURE+(BMP085_MODE << 6));
	_delay_ms(2 + (3<<BMP085_MODE));
	bmp085_readmem(BMP085_REGCONTROLOUTPUT, buff, 3);
	up = ((((long)buff[0] <<16) | ((long)buff[1] <<8) | ((long)buff[2])) >> (8-BMP085_MODE)); // uncompensated pressure value
    1c1a:	89 81       	ldd	r24, Y+1	; 0x01
    1c1c:	ca 80       	ldd	r12, Y+2	; 0x02
    1c1e:	d1 2c       	mov	r13, r1
    1c20:	e1 2c       	mov	r14, r1
    1c22:	f1 2c       	mov	r15, r1
    1c24:	fe 2c       	mov	r15, r14
    1c26:	ed 2c       	mov	r14, r13
    1c28:	dc 2c       	mov	r13, r12
    1c2a:	cc 24       	eor	r12, r12
    1c2c:	e8 2a       	or	r14, r24
    1c2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c30:	c8 2a       	or	r12, r24
    1c32:	45 e0       	ldi	r20, 0x05	; 5
    1c34:	f5 94       	asr	r15
    1c36:	e7 94       	ror	r14
    1c38:	d7 94       	ror	r13
    1c3a:	c7 94       	ror	r12
    1c3c:	4a 95       	dec	r20
    1c3e:	d1 f7       	brne	.-12     	; 0x1c34 <bmp085_getrawpressure+0x140>
	//calculate raw pressure
	b6 = bmp085_rawtemperature - 4000;
	x1 = (bmp085_regb2* (b6 * b6) >> 12) >> 11;
	x2 = (bmp085_regac2 * b6) >> 11;
	x3 = x1 + x2;
	b3 = (((((long)bmp085_regac1) * 4 + x3) << BMP085_MODE) + 2) >> 2;
    1c40:	4f 01       	movw	r8, r30
    1c42:	aa 24       	eor	r10, r10
    1c44:	97 fc       	sbrc	r9, 7
    1c46:	a0 94       	com	r10
    1c48:	ba 2c       	mov	r11, r10
    1c4a:	52 e0       	ldi	r21, 0x02	; 2
    1c4c:	88 0c       	add	r8, r8
    1c4e:	99 1c       	adc	r9, r9
    1c50:	aa 1c       	adc	r10, r10
    1c52:	bb 1c       	adc	r11, r11
    1c54:	5a 95       	dec	r21
    1c56:	d1 f7       	brne	.-12     	; 0x1c4c <bmp085_getrawpressure+0x158>
	bmp085_readmem(BMP085_REGCONTROLOUTPUT, buff, 3);
	up = ((((long)buff[0] <<16) | ((long)buff[1] <<8) | ((long)buff[2])) >> (8-BMP085_MODE)); // uncompensated pressure value

	//calculate raw pressure
	b6 = bmp085_rawtemperature - 4000;
	x1 = (bmp085_regb2* (b6 * b6) >> 12) >> 11;
    1c58:	a0 91 c1 02 	lds	r26, 0x02C1
    1c5c:	b0 91 c2 02 	lds	r27, 0x02C2
    1c60:	a3 01       	movw	r20, r6
    1c62:	92 01       	movw	r18, r4
    1c64:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <__mulshisi3>
    1c68:	2b 01       	movw	r4, r22
    1c6a:	3c 01       	movw	r6, r24
    1c6c:	67 e1       	ldi	r22, 0x17	; 23
    1c6e:	75 94       	asr	r7
    1c70:	67 94       	ror	r6
    1c72:	57 94       	ror	r5
    1c74:	47 94       	ror	r4
    1c76:	6a 95       	dec	r22
    1c78:	d1 f7       	brne	.-12     	; 0x1c6e <bmp085_getrawpressure+0x17a>
	x2 = (bmp085_regac2 * b6) >> 11;
    1c7a:	a0 91 3d 03 	lds	r26, 0x033D
    1c7e:	b0 91 3e 03 	lds	r27, 0x033E
    1c82:	2c 81       	ldd	r18, Y+4	; 0x04
    1c84:	3d 81       	ldd	r19, Y+5	; 0x05
    1c86:	4e 81       	ldd	r20, Y+6	; 0x06
    1c88:	5f 81       	ldd	r21, Y+7	; 0x07
    1c8a:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <__mulshisi3>
    1c8e:	eb e0       	ldi	r30, 0x0B	; 11
    1c90:	95 95       	asr	r25
    1c92:	87 95       	ror	r24
    1c94:	77 95       	ror	r23
    1c96:	67 95       	ror	r22
    1c98:	ea 95       	dec	r30
    1c9a:	d1 f7       	brne	.-12     	; 0x1c90 <bmp085_getrawpressure+0x19c>
	x3 = x1 + x2;
    1c9c:	46 0e       	add	r4, r22
    1c9e:	57 1e       	adc	r5, r23
    1ca0:	68 1e       	adc	r6, r24
    1ca2:	79 1e       	adc	r7, r25
	b3 = (((((long)bmp085_regac1) * 4 + x3) << BMP085_MODE) + 2) >> 2;
    1ca4:	84 0c       	add	r8, r4
    1ca6:	95 1c       	adc	r9, r5
    1ca8:	a6 1c       	adc	r10, r6
    1caa:	b7 1c       	adc	r11, r7
    1cac:	88 0c       	add	r8, r8
    1cae:	99 1c       	adc	r9, r9
    1cb0:	aa 1c       	adc	r10, r10
    1cb2:	bb 1c       	adc	r11, r11
	x1 = (bmp085_regac3 * b6) >> 13;
	x2 = (bmp085_regb1 * ((b6 * b6) >> 12)) >> 16;
	x3 = ((x1 + x2) + 2) >> 2;
	b4 = (bmp085_regac4 * (uint32_t)(x3 + 32768)) >> 15;
	b7 = ((uint32_t)up - b3) * (50000 >> BMP085_MODE);
    1cb4:	c8 18       	sub	r12, r8
    1cb6:	d9 08       	sbc	r13, r9
    1cb8:	ea 08       	sbc	r14, r10
    1cba:	fb 08       	sbc	r15, r11
    1cbc:	aa e6       	ldi	r26, 0x6A	; 106
    1cbe:	b8 e1       	ldi	r27, 0x18	; 24
    1cc0:	a7 01       	movw	r20, r14
    1cc2:	96 01       	movw	r18, r12
    1cc4:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <__muluhisi3>
	p = b7 < 0x80000000 ? (b7 << 1) / b4 : (b7 / b4) << 1;
    1cc8:	97 fd       	sbrc	r25, 7
    1cca:	0d c0       	rjmp	.+26     	; 0x1ce6 <bmp085_getrawpressure+0x1f2>
    1ccc:	66 0f       	add	r22, r22
    1cce:	77 1f       	adc	r23, r23
    1cd0:	88 1f       	adc	r24, r24
    1cd2:	99 1f       	adc	r25, r25
    1cd4:	28 85       	ldd	r18, Y+8	; 0x08
    1cd6:	39 85       	ldd	r19, Y+9	; 0x09
    1cd8:	4a 85       	ldd	r20, Y+10	; 0x0a
    1cda:	5b 85       	ldd	r21, Y+11	; 0x0b
    1cdc:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <__udivmodsi4>
    1ce0:	49 01       	movw	r8, r18
    1ce2:	5a 01       	movw	r10, r20
    1ce4:	0c c0       	rjmp	.+24     	; 0x1cfe <bmp085_getrawpressure+0x20a>
    1ce6:	28 85       	ldd	r18, Y+8	; 0x08
    1ce8:	39 85       	ldd	r19, Y+9	; 0x09
    1cea:	4a 85       	ldd	r20, Y+10	; 0x0a
    1cec:	5b 85       	ldd	r21, Y+11	; 0x0b
    1cee:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <__udivmodsi4>
    1cf2:	49 01       	movw	r8, r18
    1cf4:	5a 01       	movw	r10, r20
    1cf6:	88 0c       	add	r8, r8
    1cf8:	99 1c       	adc	r9, r9
    1cfa:	aa 1c       	adc	r10, r10
    1cfc:	bb 1c       	adc	r11, r11
	x1 = (p >> 8) * (p >> 8);
    1cfe:	99 27       	eor	r25, r25
    1d00:	b7 fc       	sbrc	r11, 7
    1d02:	9a 95       	dec	r25
    1d04:	8b 2d       	mov	r24, r11
    1d06:	7a 2d       	mov	r23, r10
    1d08:	69 2d       	mov	r22, r9
    1d0a:	9b 01       	movw	r18, r22
    1d0c:	ac 01       	movw	r20, r24
    1d0e:	0e 94 18 15 	call	0x2a30	; 0x2a30 <__mulsi3>
    1d12:	9b 01       	movw	r18, r22
    1d14:	ac 01       	movw	r20, r24
	x1 = (x1 * 3038) >> 16;
    1d16:	ae ed       	ldi	r26, 0xDE	; 222
    1d18:	bb e0       	ldi	r27, 0x0B	; 11
    1d1a:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <__muluhisi3>
    1d1e:	6c 01       	movw	r12, r24
    1d20:	ff 24       	eor	r15, r15
    1d22:	d7 fc       	sbrc	r13, 7
    1d24:	f0 94       	com	r15
    1d26:	ef 2c       	mov	r14, r15
	x2 = (-7357 * p) >> 16;
    1d28:	a3 e4       	ldi	r26, 0x43	; 67
    1d2a:	b3 ee       	ldi	r27, 0xE3	; 227
    1d2c:	a5 01       	movw	r20, r10
    1d2e:	94 01       	movw	r18, r8
    1d30:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <__mulohisi3>
    1d34:	bb 27       	eor	r27, r27
    1d36:	97 fd       	sbrc	r25, 7
    1d38:	b0 95       	com	r27
    1d3a:	ab 2f       	mov	r26, r27
	bmp085_rawpressure = p + ((x1 + x2 + 3791) >> 4);
    1d3c:	c8 0e       	add	r12, r24
    1d3e:	d9 1e       	adc	r13, r25
    1d40:	ea 1e       	adc	r14, r26
    1d42:	fb 1e       	adc	r15, r27
    1d44:	9f ec       	ldi	r25, 0xCF	; 207
    1d46:	c9 0e       	add	r12, r25
    1d48:	9e e0       	ldi	r25, 0x0E	; 14
    1d4a:	d9 1e       	adc	r13, r25
    1d4c:	e1 1c       	adc	r14, r1
    1d4e:	f1 1c       	adc	r15, r1
    1d50:	a4 e0       	ldi	r26, 0x04	; 4
    1d52:	f5 94       	asr	r15
    1d54:	e7 94       	ror	r14
    1d56:	d7 94       	ror	r13
    1d58:	c7 94       	ror	r12
    1d5a:	aa 95       	dec	r26
    1d5c:	d1 f7       	brne	.-12     	; 0x1d52 <bmp085_getrawpressure+0x25e>
    1d5e:	c8 0c       	add	r12, r8
    1d60:	d9 1c       	adc	r13, r9
    1d62:	ea 1c       	adc	r14, r10
    1d64:	fb 1c       	adc	r15, r11
    1d66:	c0 92 cb 02 	sts	0x02CB, r12
    1d6a:	d0 92 cc 02 	sts	0x02CC, r13
    1d6e:	e0 92 cd 02 	sts	0x02CD, r14
    1d72:	f0 92 ce 02 	sts	0x02CE, r15

	#if BMP085_FILTERPRESSURE == 1
	bmp085_rawpressure = bmp085_avaragefilter(bmp085_rawpressure);
    1d76:	c7 01       	movw	r24, r14
    1d78:	b6 01       	movw	r22, r12
    1d7a:	0e 94 0f 0c 	call	0x181e	; 0x181e <bmp085_avaragefilter>
    1d7e:	60 93 cb 02 	sts	0x02CB, r22
    1d82:	70 93 cc 02 	sts	0x02CC, r23
    1d86:	80 93 cd 02 	sts	0x02CD, r24
    1d8a:	90 93 ce 02 	sts	0x02CE, r25
	#endif
}
    1d8e:	2b 96       	adiw	r28, 0x0b	; 11
    1d90:	0f b6       	in	r0, 0x3f	; 63
    1d92:	f8 94       	cli
    1d94:	de bf       	out	0x3e, r29	; 62
    1d96:	0f be       	out	0x3f, r0	; 63
    1d98:	cd bf       	out	0x3d, r28	; 61
    1d9a:	df 91       	pop	r29
    1d9c:	cf 91       	pop	r28
    1d9e:	ff 90       	pop	r15
    1da0:	ef 90       	pop	r14
    1da2:	df 90       	pop	r13
    1da4:	cf 90       	pop	r12
    1da6:	bf 90       	pop	r11
    1da8:	af 90       	pop	r10
    1daa:	9f 90       	pop	r9
    1dac:	8f 90       	pop	r8
    1dae:	7f 90       	pop	r7
    1db0:	6f 90       	pop	r6
    1db2:	5f 90       	pop	r5
    1db4:	4f 90       	pop	r4
    1db6:	08 95       	ret

00001db8 <bmp085_gettemperature>:

/*
 * get celsius temperature
 */
double bmp085_gettemperature() {
	bmp085_getrawtemperature();
    1db8:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <bmp085_getrawtemperature>
	double temperature = ((bmp085_rawtemperature + 8)>>4);
    1dbc:	60 91 d5 02 	lds	r22, 0x02D5
    1dc0:	70 91 d6 02 	lds	r23, 0x02D6
    1dc4:	80 91 d7 02 	lds	r24, 0x02D7
    1dc8:	90 91 d8 02 	lds	r25, 0x02D8
    1dcc:	68 5f       	subi	r22, 0xF8	; 248
    1dce:	7f 4f       	sbci	r23, 0xFF	; 255
    1dd0:	8f 4f       	sbci	r24, 0xFF	; 255
    1dd2:	9f 4f       	sbci	r25, 0xFF	; 255
    1dd4:	a4 e0       	ldi	r26, 0x04	; 4
    1dd6:	95 95       	asr	r25
    1dd8:	87 95       	ror	r24
    1dda:	77 95       	ror	r23
    1ddc:	67 95       	ror	r22
    1dde:	aa 95       	dec	r26
    1de0:	d1 f7       	brne	.-12     	; 0x1dd6 <bmp085_gettemperature+0x1e>
    1de2:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__floatsisf>
	temperature = temperature /10;
    1de6:	20 e0       	ldi	r18, 0x00	; 0
    1de8:	30 e0       	ldi	r19, 0x00	; 0
    1dea:	40 e2       	ldi	r20, 0x20	; 32
    1dec:	51 e4       	ldi	r21, 0x41	; 65
    1dee:	0e 94 18 16 	call	0x2c30	; 0x2c30 <__divsf3>
	return temperature;
}
    1df2:	08 95       	ret

00001df4 <bmp085_getpressure>:

/*
 * get pressure
 */
int32_t bmp085_getpressure() {
	bmp085_getrawpressure();
    1df4:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <bmp085_getrawpressure>
	return bmp085_rawpressure + BMP085_UNITPAOFFSET;
    1df8:	60 91 cb 02 	lds	r22, 0x02CB
    1dfc:	70 91 cc 02 	lds	r23, 0x02CC
    1e00:	80 91 cd 02 	lds	r24, 0x02CD
    1e04:	90 91 ce 02 	lds	r25, 0x02CE
}
    1e08:	08 95       	ret

00001e0a <bmp085_getaltitude>:

/*
 * get altitude
 */
double bmp085_getaltitude() {
	bmp085_getrawpressure();
    1e0a:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <bmp085_getrawpressure>
	return ((1 - pow(bmp085_rawpressure/(double)101325, 0.1903 )) / 0.0000225577) + BMP085_UNITMOFFSET;
    1e0e:	60 91 cb 02 	lds	r22, 0x02CB
    1e12:	70 91 cc 02 	lds	r23, 0x02CC
    1e16:	80 91 cd 02 	lds	r24, 0x02CD
    1e1a:	90 91 ce 02 	lds	r25, 0x02CE
    1e1e:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__floatsisf>
    1e22:	20 e8       	ldi	r18, 0x80	; 128
    1e24:	36 ee       	ldi	r19, 0xE6	; 230
    1e26:	45 ec       	ldi	r20, 0xC5	; 197
    1e28:	57 e4       	ldi	r21, 0x47	; 71
    1e2a:	0e 94 18 16 	call	0x2c30	; 0x2c30 <__divsf3>
    1e2e:	21 e0       	ldi	r18, 0x01	; 1
    1e30:	3e ed       	ldi	r19, 0xDE	; 222
    1e32:	42 e4       	ldi	r20, 0x42	; 66
    1e34:	5e e3       	ldi	r21, 0x3E	; 62
    1e36:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <pow>
    1e3a:	9b 01       	movw	r18, r22
    1e3c:	ac 01       	movw	r20, r24
    1e3e:	60 e0       	ldi	r22, 0x00	; 0
    1e40:	70 e0       	ldi	r23, 0x00	; 0
    1e42:	80 e8       	ldi	r24, 0x80	; 128
    1e44:	9f e3       	ldi	r25, 0x3F	; 63
    1e46:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <__subsf3>
    1e4a:	2b e4       	ldi	r18, 0x4B	; 75
    1e4c:	3a e3       	ldi	r19, 0x3A	; 58
    1e4e:	4d eb       	ldi	r20, 0xBD	; 189
    1e50:	57 e3       	ldi	r21, 0x37	; 55
    1e52:	0e 94 18 16 	call	0x2c30	; 0x2c30 <__divsf3>
    1e56:	20 e0       	ldi	r18, 0x00	; 0
    1e58:	30 e0       	ldi	r19, 0x00	; 0
    1e5a:	a9 01       	movw	r20, r18
    1e5c:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <__addsf3>
}
    1e60:	08 95       	ret

00001e62 <bmp085_init>:

/*
 * init bmp085
 */
void bmp085_init() {
    1e62:	cf 93       	push	r28
	#if BMP085_I2CINIT == 1
	//init i2c
	i2c_init();
    1e64:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <i2c_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1e68:	8a e1       	ldi	r24, 0x1A	; 26
    1e6a:	8a 95       	dec	r24
    1e6c:	f1 f7       	brne	.-4      	; 0x1e6a <bmp085_init+0x8>
    1e6e:	00 c0       	rjmp	.+0      	; 0x1e70 <bmp085_init+0xe>
	_delay_us(10);
	#endif

	bmp085_getcalibration(); //get calibration data
    1e70:	0e 94 43 0c 	call	0x1886	; 0x1886 <bmp085_getcalibration>
	bmp085_getrawtemperature(); //update raw temperature, at least the first time
    1e74:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <bmp085_getrawtemperature>
    1e78:	c5 e1       	ldi	r28, 0x15	; 21

	#if BMP085_FILTERPRESSURE == 1
	//initialize the avarage filter
	uint8_t i=0;
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
		bmp085_getrawpressure();
    1e7a:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <bmp085_getrawpressure>
    1e7e:	c1 50       	subi	r28, 0x01	; 1
	bmp085_getrawtemperature(); //update raw temperature, at least the first time

	#if BMP085_FILTERPRESSURE == 1
	//initialize the avarage filter
	uint8_t i=0;
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
    1e80:	e1 f7       	brne	.-8      	; 0x1e7a <bmp085_init+0x18>
		bmp085_getrawpressure();
	}
	#endif
}
    1e82:	cf 91       	pop	r28
    1e84:	08 95       	ret

00001e86 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
    1e86:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    1e8a:	80 e2       	ldi	r24, 0x20	; 32
    1e8c:	80 93 b8 00 	sts	0x00B8, r24
    1e90:	08 95       	ret

00001e92 <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    1e92:	94 ea       	ldi	r25, 0xA4	; 164
    1e94:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    1e98:	90 91 bc 00 	lds	r25, 0x00BC
    1e9c:	97 ff       	sbrs	r25, 7
    1e9e:	fc cf       	rjmp	.-8      	; 0x1e98 <i2c_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    1ea0:	90 91 b9 00 	lds	r25, 0x00B9
    1ea4:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    1ea6:	98 30       	cpi	r25, 0x08	; 8
    1ea8:	21 f0       	breq	.+8      	; 0x1eb2 <i2c_start+0x20>
    1eaa:	90 31       	cpi	r25, 0x10	; 16
    1eac:	11 f0       	breq	.+4      	; 0x1eb2 <i2c_start+0x20>
    1eae:	81 e0       	ldi	r24, 0x01	; 1
    1eb0:	08 95       	ret

	// send device address
	TWDR = address;
    1eb2:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    1eb6:	84 e8       	ldi	r24, 0x84	; 132
    1eb8:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    1ebc:	80 91 bc 00 	lds	r24, 0x00BC
    1ec0:	87 ff       	sbrs	r24, 7
    1ec2:	fc cf       	rjmp	.-8      	; 0x1ebc <i2c_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    1ec4:	80 91 b9 00 	lds	r24, 0x00B9
    1ec8:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
    1eca:	88 31       	cpi	r24, 0x18	; 24
    1ecc:	11 f0       	breq	.+4      	; 0x1ed2 <i2c_start+0x40>
    1ece:	80 34       	cpi	r24, 0x40	; 64
    1ed0:	71 f7       	brne	.-36     	; 0x1eae <i2c_start+0x1c>

	return 0;
    1ed2:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
    1ed4:	08 95       	ret

00001ed6 <i2c_start_wait>:


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    1ed6:	24 ea       	ldi	r18, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    1ed8:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    1eda:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    1edc:	20 93 bc 00 	sts	0x00BC, r18
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    1ee0:	90 91 bc 00 	lds	r25, 0x00BC
    1ee4:	97 ff       	sbrs	r25, 7
    1ee6:	fc cf       	rjmp	.-8      	; 0x1ee0 <i2c_start_wait+0xa>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    1ee8:	90 91 b9 00 	lds	r25, 0x00B9
    1eec:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    1eee:	98 30       	cpi	r25, 0x08	; 8
    1ef0:	11 f0       	breq	.+4      	; 0x1ef6 <i2c_start_wait+0x20>
    1ef2:	90 31       	cpi	r25, 0x10	; 16
    1ef4:	99 f7       	brne	.-26     	; 0x1edc <i2c_start_wait+0x6>
    
    	// send device address
    	TWDR = address;
    1ef6:	80 93 bb 00 	sts	0x00BB, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
    1efa:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    1efe:	90 91 bc 00 	lds	r25, 0x00BC
    1f02:	97 ff       	sbrs	r25, 7
    1f04:	fc cf       	rjmp	.-8      	; 0x1efe <i2c_start_wait+0x28>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    1f06:	90 91 b9 00 	lds	r25, 0x00B9
    1f0a:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    1f0c:	90 32       	cpi	r25, 0x20	; 32
    1f0e:	11 f0       	breq	.+4      	; 0x1f14 <i2c_start_wait+0x3e>
    1f10:	98 35       	cpi	r25, 0x58	; 88
    1f12:	39 f4       	brne	.+14     	; 0x1f22 <i2c_start_wait+0x4c>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    1f14:	40 93 bc 00 	sts	0x00BC, r20
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
    1f18:	90 91 bc 00 	lds	r25, 0x00BC
    1f1c:	94 fd       	sbrc	r25, 4
    1f1e:	fc cf       	rjmp	.-8      	; 0x1f18 <i2c_start_wait+0x42>
    1f20:	dd cf       	rjmp	.-70     	; 0x1edc <i2c_start_wait+0x6>
    1f22:	08 95       	ret

00001f24 <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
    1f24:	0c 94 49 0f 	jmp	0x1e92	; 0x1e92 <i2c_start>

00001f28 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    1f28:	84 e9       	ldi	r24, 0x94	; 148
    1f2a:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    1f2e:	80 91 bc 00 	lds	r24, 0x00BC
    1f32:	84 fd       	sbrc	r24, 4
    1f34:	fc cf       	rjmp	.-8      	; 0x1f2e <i2c_stop+0x6>

}/* i2c_stop */
    1f36:	08 95       	ret

00001f38 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    1f38:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    1f3c:	84 e8       	ldi	r24, 0x84	; 132
    1f3e:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    1f42:	80 91 bc 00 	lds	r24, 0x00BC
    1f46:	87 ff       	sbrs	r24, 7
    1f48:	fc cf       	rjmp	.-8      	; 0x1f42 <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    1f4a:	90 91 b9 00 	lds	r25, 0x00B9
    1f4e:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    1f50:	81 e0       	ldi	r24, 0x01	; 1
    1f52:	98 32       	cpi	r25, 0x28	; 40
    1f54:	09 f4       	brne	.+2      	; 0x1f58 <i2c_write+0x20>
    1f56:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
    1f58:	08 95       	ret

00001f5a <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    1f5a:	84 ec       	ldi	r24, 0xC4	; 196
    1f5c:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
    1f60:	80 91 bc 00 	lds	r24, 0x00BC
    1f64:	87 ff       	sbrs	r24, 7
    1f66:	fc cf       	rjmp	.-8      	; 0x1f60 <i2c_readAck+0x6>

    return TWDR;
    1f68:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
    1f6c:	08 95       	ret

00001f6e <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    1f6e:	84 e8       	ldi	r24, 0x84	; 132
    1f70:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    1f74:	80 91 bc 00 	lds	r24, 0x00BC
    1f78:	87 ff       	sbrs	r24, 7
    1f7a:	fc cf       	rjmp	.-8      	; 0x1f74 <i2c_readNak+0x6>
	
    return TWDR;
    1f7c:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
    1f80:	08 95       	ret

00001f82 <main>:
	uint8_t i, num_sensors, device, page, mode, pos, tmp, up_held, dn_held;
	uint16_t bitmap;
//	DS2415_date_t dt;	// date structure for RTC

	// set unused I/O to input and enable pull-ups;
	DDRC = 0;	// all of port C is unused
    1f82:	17 b8       	out	0x07, r1	; 7
	PORTC = 0x0f;
    1f84:	8f e0       	ldi	r24, 0x0F	; 15
    1f86:	88 b9       	out	0x08, r24	; 8
#if defined(__AVR_ATmega168__)
	DDRD &= ~(1 << PD7);
    1f88:	57 98       	cbi	0x0a, 7	; 10
	PORTD |= (1 << PD7);
    1f8a:	5f 9a       	sbi	0x0b, 7	; 11
#else
#error "Unknown target device"
#endif
	
	// enable our push buttons
	DDRB &= ~(1 << PB7);	// set for input - button 1
    1f8c:	27 98       	cbi	0x04, 7	; 4
	PORTB |= (1 << PB7);	// enable pull-up
    1f8e:	2f 9a       	sbi	0x05, 7	; 5
	DDRD &= ~((1 << PD2) | (1 << PD3) | (1 << PD4));	// buttons 2,3,4
    1f90:	8a b1       	in	r24, 0x0a	; 10
    1f92:	83 7e       	andi	r24, 0xE3	; 227
    1f94:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << PD2) | (1 << PD3) | (1 << PD4);
    1f96:	8b b1       	in	r24, 0x0b	; 11
    1f98:	8c 61       	ori	r24, 0x1C	; 28
    1f9a:	8b b9       	out	0x0b, r24	; 11

	// set up PWM for LCD backlight control
#if defined(__AVR_ATmega168__)
#define PWM_OUT OCR0B
	DDRD |= _BV( PD5);	// OC0B pin as output
    1f9c:	55 9a       	sbi	0x0a, 5	; 10
	TCCR0A = _BV( WGM00) | _BV( WGM01) | _BV( COM0B1);	// Fast PWM, CTC+TOP
    1f9e:	83 e2       	ldi	r24, 0x23	; 35
    1fa0:	84 bd       	out	0x24, r24	; 36
	TCCR0B = _BV( CS01);	// 1/8 prescale
    1fa2:	82 e0       	ldi	r24, 0x02	; 2
    1fa4:	85 bd       	out	0x25, r24	; 37
	DDRD |= _BV( PD7);	// OC2 pin as output
	TCCR2 = _BV( WGM20) | _BV( WGM21) | _BV( COM21) | _BV( CS21);	// fast PWM, CTC+TOP, 1/8 prescale
#else
#error "Unknown target device"
#endif
	PWM_OUT = gBacklight = eeprom_read_byte( &nvBacklight);	// grab our persistant data
    1fa6:	89 e4       	ldi	r24, 0x49	; 73
    1fa8:	90 e0       	ldi	r25, 0x00	; 0
    1faa:	0e 94 5c 1b 	call	0x36b8	; 0x36b8 <__eerd_byte_m168>
    1fae:	80 93 ab 02 	sts	0x02AB, r24
    1fb2:	88 bd       	out	0x28, r24	; 40

	// set up the elapsed timer
	OCR1A = F_CPU / TMR_TICK;	// timer = 5 msec
    1fb4:	80 e4       	ldi	r24, 0x40	; 64
    1fb6:	9c e9       	ldi	r25, 0x9C	; 156
    1fb8:	90 93 89 00 	sts	0x0089, r25
    1fbc:	80 93 88 00 	sts	0x0088, r24
	TCCR1B = _BV( WGM12) + _BV( CS10);	// clear timer on compare match, no prescaler
    1fc0:	89 e0       	ldi	r24, 0x09	; 9
    1fc2:	80 93 81 00 	sts	0x0081, r24

	sei();	// enable global interrupts
    1fc6:	78 94       	sei
	
	// load userdefined characters from program memory
	// into LCD controller CG RAM
	lcd_init( LCD_DISP_ON);
    1fc8:	8c e0       	ldi	r24, 0x0C	; 12
    1fca:	0e 94 fe 07 	call	0xffc	; 0xffc <lcd_init>
	lcd_command( _BV( LCD_CGRAM));	/* set CG RAM start address 0 */
    1fce:	80 e4       	ldi	r24, 0x40	; 64
    1fd0:	0e 94 86 07 	call	0xf0c	; 0xf0c <lcd_command>
    1fd4:	cc ef       	ldi	r28, 0xFC	; 252
    1fd6:	d2 e0       	ldi	r29, 0x02	; 2
	for( i = 0; i < (sizeof lcdChars / sizeof lcdChars[0]); i++)
		lcd_data( pgm_read_byte_near( &lcdChars[i]));
    1fd8:	fe 01       	movw	r30, r28
    1fda:	84 91       	lpm	r24, Z
    1fdc:	0e 94 8f 07 	call	0xf1e	; 0xf1e <lcd_data>
    1fe0:	21 96       	adiw	r28, 0x01	; 1
	
	// load userdefined characters from program memory
	// into LCD controller CG RAM
	lcd_init( LCD_DISP_ON);
	lcd_command( _BV( LCD_CGRAM));	/* set CG RAM start address 0 */
	for( i = 0; i < (sizeof lcdChars / sizeof lcdChars[0]); i++)
    1fe2:	f3 e0       	ldi	r31, 0x03	; 3
    1fe4:	cc 30       	cpi	r28, 0x0C	; 12
    1fe6:	df 07       	cpc	r29, r31
    1fe8:	b9 f7       	brne	.-18     	; 0x1fd8 <main+0x56>
		lcd_data( pgm_read_byte_near( &lcdChars[i]));
	lcd_clrscr();
    1fea:	0e 94 ab 07 	call	0xf56	; 0xf56 <lcd_clrscr>

	// set up the comm port
	uart_init( UART_BAUD_SELECT( BAUD, F_CPU));
    1fee:	89 e1       	ldi	r24, 0x19	; 25
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	0e 94 b0 09 	call	0x1360	; 0x1360 <uart_init>
	
	// set up bmp085board
	bmp085_init();
    1ff6:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <bmp085_init>

	// announce our birth
	uart_puts_P( "DS1820 Logger v" MAJOR_VER "." MINOR_VER "\r");
    1ffa:	83 ee       	ldi	r24, 0xE3	; 227
    1ffc:	92 e0       	ldi	r25, 0x02	; 2
    1ffe:	0e 94 08 0a 	call	0x1410	; 0x1410 <uart_puts_p>
	lcd_gotoxy( 0, 0);
    2002:	60 e0       	ldi	r22, 0x00	; 0
    2004:	80 e0       	ldi	r24, 0x00	; 0
    2006:	0e 94 98 07 	call	0xf30	; 0xf30 <lcd_gotoxy>
	lcd_puts_P( "DS18x20 Logger v" MAJOR_VER);
    200a:	8e ec       	ldi	r24, 0xCE	; 206
    200c:	92 e0       	ldi	r25, 0x02	; 2
    200e:	0e 94 dd 07 	call	0xfba	; 0xfba <lcd_puts_p>
	
	
	delay_ms( 1000);	// pause lcd display for a moment
    2012:	68 e0       	ldi	r22, 0x08	; 8
    2014:	77 e5       	ldi	r23, 0x57	; 87
    2016:	84 e1       	ldi	r24, 0x14	; 20
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	0e 94 36 06 	call	0xc6c	; 0xc6c <delayloop32>

	// get attached 1-wire sensor info
	num_sensors = onewire_search();
    201e:	0e 94 5d 02 	call	0x4ba	; 0x4ba <onewire_search>
    2022:	38 2e       	mov	r3, r24
	if( num_sensors == 0 && ! gRTC_status) // bolo povodne
    2024:	81 11       	cpse	r24, r1
    2026:	0e c0       	rjmp	.+28     	; 0x2044 <main+0xc2>
    2028:	80 91 ff 01 	lds	r24, 0x01FF
    202c:	81 11       	cpse	r24, r1
    202e:	0a c0       	rjmp	.+20     	; 0x2044 <main+0xc2>
//	if( num_sensors == 0) 
	{
		lcd_gotoxy( 0, 2);
    2030:	62 e0       	ldi	r22, 0x02	; 2
    2032:	0e 94 98 07 	call	0xf30	; 0xf30 <lcd_gotoxy>
		lcd_puts_P( "No DS Sensors Found");
    2036:	8a eb       	ldi	r24, 0xBA	; 186
    2038:	92 e0       	ldi	r25, 0x02	; 2
    203a:	0e 94 dd 07 	call	0xfba	; 0xfba <lcd_puts_p>
		uart_puts_P( "No Sensors Found");
    203e:	89 ea       	ldi	r24, 0xA9	; 169
    2040:	92 e0       	ldi	r25, 0x02	; 2
    2042:	19 c0       	rjmp	.+50     	; 0x2076 <main+0xf4>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    2044:	4a e0       	ldi	r20, 0x0A	; 10
    2046:	6c ea       	ldi	r22, 0xAC	; 172
    2048:	72 e0       	ldi	r23, 0x02	; 2
    204a:	83 2d       	mov	r24, r3
    204c:	90 e0       	ldi	r25, 0x00	; 0
    204e:	0e 94 02 19 	call	0x3204	; 0x3204 <__itoa_ncheck>
	} 
	else
	{
		// display the count of sensors found on 1-Wire bus
		itoa( (int)num_sensors, gBuffer, 10);
		lcd_gotoxy( 0, 2);
    2052:	62 e0       	ldi	r22, 0x02	; 2
    2054:	80 e0       	ldi	r24, 0x00	; 0
    2056:	0e 94 98 07 	call	0xf30	; 0xf30 <lcd_gotoxy>
		lcd_puts( gBuffer);
    205a:	8c ea       	ldi	r24, 0xAC	; 172
    205c:	92 e0       	ldi	r25, 0x02	; 2
    205e:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <lcd_puts>
		lcd_puts_P( " Sensor(s)");
    2062:	8e e9       	ldi	r24, 0x9E	; 158
    2064:	92 e0       	ldi	r25, 0x02	; 2
    2066:	0e 94 dd 07 	call	0xfba	; 0xfba <lcd_puts_p>
		uart_puts( gBuffer);
    206a:	8c ea       	ldi	r24, 0xAC	; 172
    206c:	92 e0       	ldi	r25, 0x02	; 2
    206e:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <uart_puts>
		uart_puts_P( " DS18X20 Sensor(s) available\r");
    2072:	80 e8       	ldi	r24, 0x80	; 128
    2074:	92 e0       	ldi	r25, 0x02	; 2
    2076:	0e 94 08 0a 	call	0x1410	; 0x1410 <uart_puts_p>
	}
	delay_ms( 2000);	// pause lcd display for a moment
    207a:	60 e1       	ldi	r22, 0x10	; 16
    207c:	7e ea       	ldi	r23, 0xAE	; 174
    207e:	88 e2       	ldi	r24, 0x28	; 40
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	0e 94 36 06 	call	0xc6c	; 0xc6c <delayloop32>
	
	// initialize 1-wire output order from EEPROM.  make sure the order we read in
	// accounts for every sensor number by flipping the corresponding bit for each sensor
	// in the bitmap
	bitmap = 0;
	for( i = 0; i < num_sensors; i++)
    2086:	80 e0       	ldi	r24, 0x00	; 0
    2088:	90 e0       	ldi	r25, 0x00	; 0
	
	
	// initialize 1-wire output order from EEPROM.  make sure the order we read in
	// accounts for every sensor number by flipping the corresponding bit for each sensor
	// in the bitmap
	bitmap = 0;
    208a:	c0 e0       	ldi	r28, 0x00	; 0
    208c:	d0 e0       	ldi	r29, 0x00	; 0
	for( i = 0; i < num_sensors; i++)
		bitmap |= _BV( i);
    208e:	21 e0       	ldi	r18, 0x01	; 1
    2090:	30 e0       	ldi	r19, 0x00	; 0
	
	// initialize 1-wire output order from EEPROM.  make sure the order we read in
	// accounts for every sensor number by flipping the corresponding bit for each sensor
	// in the bitmap
	bitmap = 0;
	for( i = 0; i < num_sensors; i++)
    2092:	83 15       	cp	r24, r3
    2094:	58 f4       	brcc	.+22     	; 0x20ac <main+0x12a>
		bitmap |= _BV( i);
    2096:	a9 01       	movw	r20, r18
    2098:	08 2e       	mov	r0, r24
    209a:	02 c0       	rjmp	.+4      	; 0x20a0 <main+0x11e>
    209c:	44 0f       	add	r20, r20
    209e:	55 1f       	adc	r21, r21
    20a0:	0a 94       	dec	r0
    20a2:	e2 f7       	brpl	.-8      	; 0x209c <main+0x11a>
    20a4:	c4 2b       	or	r28, r20
    20a6:	d5 2b       	or	r29, r21
    20a8:	01 96       	adiw	r24, 0x01	; 1
    20aa:	f3 cf       	rjmp	.-26     	; 0x2092 <main+0x110>
		if( eeprom_read_byte( &nvNum_sensors) == num_sensors)
    20ac:	88 e4       	ldi	r24, 0x48	; 72
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	0e 94 5c 1b 	call	0x36b8	; 0x36b8 <__eerd_byte_m168>
    20b4:	18 2f       	mov	r17, r24
    20b6:	83 11       	cpse	r24, r3
    20b8:	1d c0       	rjmp	.+58     	; 0x20f4 <main+0x172>
		{
		// assume if we have same number of sensors, we want to use the prev. order
		 eeprom_read_block( g1Wire_order, nv1Wire_order, MAX_SENSORS);
    20ba:	48 e0       	ldi	r20, 0x08	; 8
    20bc:	50 e0       	ldi	r21, 0x00	; 0
    20be:	60 e4       	ldi	r22, 0x40	; 64
    20c0:	70 e0       	ldi	r23, 0x00	; 0
    20c2:	89 ee       	ldi	r24, 0xE9	; 233
    20c4:	92 e0       	ldi	r25, 0x02	; 2
    20c6:	0e 94 4c 1b 	call	0x3698	; 0x3698 <__eerd_block_m168>
    20ca:	49 ee       	ldi	r20, 0xE9	; 233
    20cc:	52 e0       	ldi	r21, 0x02	; 2

		// in the order we just loaded, check to see if all sensor
		// numbers were accounted for, by turning off bits in the bitmap
		 for( i = 0; i < num_sensors; i++)
    20ce:	fa 01       	movw	r30, r20
			 bitmap &= ~_BV( g1Wire_order[i]);
    20d0:	61 e0       	ldi	r22, 0x01	; 1
    20d2:	70 e0       	ldi	r23, 0x00	; 0
    20d4:	8e 2f       	mov	r24, r30
    20d6:	84 1b       	sub	r24, r20
		// assume if we have same number of sensors, we want to use the prev. order
		 eeprom_read_block( g1Wire_order, nv1Wire_order, MAX_SENSORS);

		// in the order we just loaded, check to see if all sensor
		// numbers were accounted for, by turning off bits in the bitmap
		 for( i = 0; i < num_sensors; i++)
    20d8:	81 17       	cp	r24, r17
    20da:	60 f4       	brcc	.+24     	; 0x20f4 <main+0x172>
			 bitmap &= ~_BV( g1Wire_order[i]);
    20dc:	9b 01       	movw	r18, r22
    20de:	01 90       	ld	r0, Z+
    20e0:	02 c0       	rjmp	.+4      	; 0x20e6 <main+0x164>
    20e2:	22 0f       	add	r18, r18
    20e4:	33 1f       	adc	r19, r19
    20e6:	0a 94       	dec	r0
    20e8:	e2 f7       	brpl	.-8      	; 0x20e2 <main+0x160>
    20ea:	20 95       	com	r18
    20ec:	30 95       	com	r19
    20ee:	c2 23       	and	r28, r18
    20f0:	d3 23       	and	r29, r19
    20f2:	f0 cf       	rjmp	.-32     	; 0x20d4 <main+0x152>
		}

	if( bitmap != 0)	// were any sensors unaccounted for?
    20f4:	cd 2b       	or	r28, r29
    20f6:	b1 f0       	breq	.+44     	; 0x2124 <main+0x1a2>
	{
		// yes, so load the default order
		eeprom_write_byte( &nvNum_sensors, num_sensors);
    20f8:	63 2d       	mov	r22, r3
    20fa:	88 e4       	ldi	r24, 0x48	; 72
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	0e 94 74 1b 	call	0x36e8	; 0x36e8 <__eewr_byte_m168>
    2102:	89 ee       	ldi	r24, 0xE9	; 233
    2104:	92 e0       	ldi	r25, 0x02	; 2
		for( i = 0; i < num_sensors; i++)
    2106:	fc 01       	movw	r30, r24
    2108:	2e 2f       	mov	r18, r30
    210a:	28 1b       	sub	r18, r24
    210c:	23 15       	cp	r18, r3
    210e:	10 f4       	brcc	.+4      	; 0x2114 <main+0x192>
			g1Wire_order[i] = i;
    2110:	21 93       	st	Z+, r18
    2112:	fa cf       	rjmp	.-12     	; 0x2108 <main+0x186>
		eeprom_write_block( g1Wire_order, nv1Wire_order, MAX_SENSORS);
    2114:	48 e0       	ldi	r20, 0x08	; 8
    2116:	50 e0       	ldi	r21, 0x00	; 0
    2118:	60 e4       	ldi	r22, 0x40	; 64
    211a:	70 e0       	ldi	r23, 0x00	; 0
    211c:	89 ee       	ldi	r24, 0xE9	; 233
    211e:	92 e0       	ldi	r25, 0x02	; 2
    2120:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <__eewr_block_m168>
	}

	// load and sanitize the reading interval from EEPROM
	gLog_interval = eeprom_read_word( &nvLog_interval);
    2124:	8a e4       	ldi	r24, 0x4A	; 74
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <__eerd_word_m168>
    212c:	90 93 f6 02 	sts	0x02F6, r25
    2130:	80 93 f5 02 	sts	0x02F5, r24
	if( gLog_interval > MAX_INTERVAL || gLog_interval < MIN_INTERVAL)
    2134:	05 97       	sbiw	r24, 0x05	; 5
    2136:	8b 30       	cpi	r24, 0x0B	; 11
    2138:	97 42       	sbci	r25, 0x27	; 39
    213a:	60 f0       	brcs	.+24     	; 0x2154 <main+0x1d2>
	{
		gLog_interval = DEF_INTERVAL;  // bola min hodnota
    213c:	8f e0       	ldi	r24, 0x0F	; 15
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	90 93 f6 02 	sts	0x02F6, r25
    2144:	80 93 f5 02 	sts	0x02F5, r24
		eeprom_write_word( &nvLog_interval, gLog_interval);	// save the persistant value
    2148:	6f e0       	ldi	r22, 0x0F	; 15
    214a:	70 e0       	ldi	r23, 0x00	; 0
    214c:	8a e4       	ldi	r24, 0x4A	; 74
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	0e 94 82 1b 	call	0x3704	; 0x3704 <__eewr_word_m168>
	// don't worry about backlight since it's only 1 byte it WILL be between 0 and 255
		
		
	//					 setup for main loop*********************************************
	page = 0;
	lcd_clrscr();
    2154:	0e 94 ab 07 	call	0xf56	; 0xf56 <lcd_clrscr>
	mode = MODE_START;	// first choice 
	TIMSK1 = _BV( OCIE1A);	// enable Output Compare 1 overflow interrupt to start elapsed timer
    2158:	82 e0       	ldi	r24, 0x02	; 2
    215a:	80 93 6f 00 	sts	0x006F, r24
		
	// don't worry about backlight since it's only 1 byte it WILL be between 0 and 255
		
		
	//					 setup for main loop*********************************************
	page = 0;
    215e:	21 2c       	mov	r2, r1
			}
		case MODE_INTERVAL:	// displaying logging interval change******************
			{
				lcd_clrscr();
				lcd_puts_P( "Logging interval\n");
				sprintf( gBuffer, "%4i", gLog_interval);
    2160:	0d ee       	ldi	r16, 0xED	; 237
    2162:	11 e0       	ldi	r17, 0x01	; 1
    2164:	cc ea       	ldi	r28, 0xAC	; 172
    2166:	d2 e0       	ldi	r29, 0x02	; 2
					{
						// give a small delay to see if this is a simultaneous press
						delay_ms( CMD_DELAY);
						if( BTN_DOWN) break;	// exit display loop
						// cycle if needed
						if( page + 4 < num_sensors) page += 2; //boli 2 a 2
    2168:	c3 2c       	mov	r12, r3
    216a:	d1 2c       	mov	r13, r1
					lcd_puts( gBuffer);

					if( BTN_UP)	// display next
					{
						// cycle if needed
						if( i < num_sensors - 1) i++;
    216c:	26 01       	movw	r4, r12
    216e:	41 e0       	ldi	r20, 0x01	; 1
    2170:	44 1a       	sub	r4, r20
    2172:	51 08       	sbc	r5, r1
				while( BTN_UP || BTN_DOWN);	// wait until switches released
				break;	// next case
			}
		case MODE_START:	// displaying start logging message**********************
			{
				if( ! num_sensors > 0)
    2174:	33 20       	and	r3, r3
    2176:	09 f4       	brne	.+2      	; 0x217a <main+0x1f8>
    2178:	d2 c3       	rjmp	.+1956   	; 0x291e <main+0x99c>
					{
					// no sensors found so skip all sensor related modes
					mode = MODE_BACKLIGHT;
					break;
					}
				lcd_clrscr();
    217a:	0e 94 ab 07 	call	0xf56	; 0xf56 <lcd_clrscr>
				lcd_puts_P( "Start Logging?\n");
    217e:	80 e7       	ldi	r24, 0x70	; 112
    2180:	92 e0       	ldi	r25, 0x02	; 2
    2182:	0e 94 dd 07 	call	0xfba	; 0xfba <lcd_puts_p>
				lcd_putc( 0);	// down arrow
    2186:	80 e0       	ldi	r24, 0x00	; 0
    2188:	0e 94 b1 07 	call	0xf62	; 0xf62 <lcd_putc>
				lcd_puts_P( " or ");
    218c:	8b e6       	ldi	r24, 0x6B	; 107
    218e:	92 e0       	ldi	r25, 0x02	; 2
    2190:	0e 94 dd 07 	call	0xfba	; 0xfba <lcd_puts_p>
				lcd_putc( 1);	// up arrow
    2194:	81 e0       	ldi	r24, 0x01	; 1
    2196:	0e 94 b1 07 	call	0xf62	; 0xf62 <lcd_putc>
				lcd_puts_P( " to start\n\n");
    219a:	8f e5       	ldi	r24, 0x5F	; 95
    219c:	92 e0       	ldi	r25, 0x02	; 2
    219e:	0e 94 dd 07 	call	0xfba	; 0xfba <lcd_puts_p>
				lcd_puts_P( "press MODE to other");
    21a2:	8b e4       	ldi	r24, 0x4B	; 75
    21a4:	92 e0       	ldi	r25, 0x02	; 2
    21a6:	0e 94 dd 07 	call	0xfba	; 0xfba <lcd_puts_p>
				while( ! (BTN_MODE || BTN_UP || BTN_DOWN || BTN_SEL));	// wait for a button press
    21aa:	83 b1       	in	r24, 0x03	; 3
    21ac:	90 e0       	ldi	r25, 0x00	; 0
    21ae:	80 95       	com	r24
    21b0:	90 95       	com	r25
    21b2:	87 fd       	sbrc	r24, 7
    21b4:	12 c0       	rjmp	.+36     	; 0x21da <main+0x258>
    21b6:	89 b1       	in	r24, 0x09	; 9
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	80 95       	com	r24
    21bc:	90 95       	com	r25
    21be:	82 fd       	sbrc	r24, 2
    21c0:	0c c0       	rjmp	.+24     	; 0x21da <main+0x258>
    21c2:	89 b1       	in	r24, 0x09	; 9
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	80 95       	com	r24
    21c8:	90 95       	com	r25
    21ca:	83 fd       	sbrc	r24, 3
    21cc:	06 c0       	rjmp	.+12     	; 0x21da <main+0x258>
    21ce:	89 b1       	in	r24, 0x09	; 9
    21d0:	90 e0       	ldi	r25, 0x00	; 0
    21d2:	80 95       	com	r24
    21d4:	90 95       	com	r25
    21d6:	84 ff       	sbrs	r24, 4
    21d8:	e8 cf       	rjmp	.-48     	; 0x21aa <main+0x228>
				// if mode button pressed, change to next state
				if( BTN_MODE)
    21da:	83 b1       	in	r24, 0x03	; 3
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	80 95       	com	r24
    21e0:	90 95       	com	r25
    21e2:	87 ff       	sbrs	r24, 7
    21e4:	09 c0       	rjmp	.+18     	; 0x21f8 <main+0x276>
					{
					lcd_clrscr();	// provide feedback on button push
    21e6:	0e 94 ab 07 	call	0xf56	; 0xf56 <lcd_clrscr>
					mode = MODE_ORDER;
					while( BTN_MODE);	// wait for release
    21ea:	83 b1       	in	r24, 0x03	; 3
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	80 95       	com	r24
    21f0:	90 95       	com	r25
    21f2:	87 fd       	sbrc	r24, 7
    21f4:	fa cf       	rjmp	.-12     	; 0x21ea <main+0x268>
    21f6:	1f c1       	rjmp	.+574    	; 0x2436 <main+0x4b4>
					}
				else	// any other button, start logging
					{
						lcd_clrscr();	// provide feedback on button push
    21f8:	0e 94 ab 07 	call	0xf56	; 0xf56 <lcd_clrscr>
						mode = MODE_LOGGING;
						while( BTN_UP || BTN_DOWN || BTN_SEL);	// wait for release
    21fc:	89 b1       	in	r24, 0x09	; 9
    21fe:	90 e0       	ldi	r25, 0x00	; 0
    2200:	80 95       	com	r24
    2202:	90 95       	com	r25
    2204:	82 fd       	sbrc	r24, 2
    2206:	fa cf       	rjmp	.-12     	; 0x21fc <main+0x27a>
    2208:	89 b1       	in	r24, 0x09	; 9
    220a:	90 e0       	ldi	r25, 0x00	; 0
    220c:	80 95       	com	r24
    220e:	90 95       	com	r25
    2210:	83 fd       	sbrc	r24, 3
    2212:	f4 cf       	rjmp	.-24     	; 0x21fc <main+0x27a>
    2214:	89 b1       	in	r24, 0x09	; 9
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	80 95       	com	r24
    221a:	90 95       	com	r25
    221c:	84 fd       	sbrc	r24, 4
    221e:	ee cf       	rjmp	.-36     	; 0x21fc <main+0x27a>
								// send the extended sensor info out the comm port
						uart_puts_P( "\r\r");
    2220:	88 e4       	ldi	r24, 0x48	; 72
    2222:	92 e0       	ldi	r25, 0x02	; 2
    2224:	0e 94 08 0a 	call	0x1410	; 0x1410 <uart_puts_p>
    2228:	79 ee       	ldi	r23, 0xE9	; 233
    222a:	a7 2e       	mov	r10, r23
    222c:	72 e0       	ldi	r23, 0x02	; 2
    222e:	b7 2e       	mov	r11, r23
						for( i = 0; i < num_sensors; i++)
    2230:	e1 2c       	mov	r14, r1
    2232:	f1 2c       	mov	r15, r1
    2234:	e3 14       	cp	r14, r3
    2236:	d8 f5       	brcc	.+118    	; 0x22ae <main+0x32c>
    2238:	35 01       	movw	r6, r10
							{
							device = g1Wire_order[i];
    223a:	f5 01       	movw	r30, r10
    223c:	81 90       	ld	r8, Z+
    223e:	5f 01       	movw	r10, r30
							uart_puts_P( "Sensor Display");
    2240:	89 e3       	ldi	r24, 0x39	; 57
    2242:	92 e0       	ldi	r25, 0x02	; 2
    2244:	0e 94 08 0a 	call	0x1410	; 0x1410 <uart_puts_p>
							uart_puti( (int)i);
    2248:	c7 01       	movw	r24, r14
    224a:	0e 94 17 0a 	call	0x142e	; 0x142e <uart_puti>
							uart_puts_P( " / Bus");
    224e:	82 e3       	ldi	r24, 0x32	; 50
    2250:	92 e0       	ldi	r25, 0x02	; 2
    2252:	0e 94 08 0a 	call	0x1410	; 0x1410 <uart_puts_p>
							uart_puti( g1Wire_order[i]);
    2256:	f3 01       	movw	r30, r6
    2258:	80 81       	ld	r24, Z
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	0e 94 17 0a 	call	0x142e	; 0x142e <uart_puti>
							uart_puts_P( " is a ");
    2260:	8b e2       	ldi	r24, 0x2B	; 43
    2262:	92 e0       	ldi	r25, 0x02	; 2
    2264:	0e 94 08 0a 	call	0x1410	; 0x1410 <uart_puts_p>
							if( OWI_FAMILY( gSensorIDs[device][0]) == DS18S20_FAMILY_CODE)
    2268:	f8 e0       	ldi	r31, 0x08	; 8
    226a:	8f 9e       	mul	r8, r31
    226c:	40 01       	movw	r8, r0
    226e:	11 24       	eor	r1, r1
    2270:	f4 01       	movw	r30, r8
    2272:	e3 50       	subi	r30, 0x03	; 3
    2274:	fd 4f       	sbci	r31, 0xFD	; 253
    2276:	80 81       	ld	r24, Z
    2278:	8f 77       	andi	r24, 0x7F	; 127
    227a:	80 31       	cpi	r24, 0x10	; 16
    227c:	19 f4       	brne	.+6      	; 0x2284 <main+0x302>
									uart_puts_P( "DS18S20/DS1820");
    227e:	8c e1       	ldi	r24, 0x1C	; 28
    2280:	92 e0       	ldi	r25, 0x02	; 2
    2282:	02 c0       	rjmp	.+4      	; 0x2288 <main+0x306>
							else uart_puts_P( "DS18B20");
    2284:	84 e1       	ldi	r24, 0x14	; 20
    2286:	92 e0       	ldi	r25, 0x02	; 2
    2288:	0e 94 08 0a 	call	0x1410	; 0x1410 <uart_puts_p>
							uart_puts_P( " = ");
    228c:	80 e1       	ldi	r24, 0x10	; 16
    228e:	92 e0       	ldi	r25, 0x02	; 2
    2290:	0e 94 08 0a 	call	0x1410	; 0x1410 <uart_puts_p>
							show_id_uart( &gSensorIDs[device][0]);
    2294:	c4 01       	movw	r24, r8
    2296:	83 50       	subi	r24, 0x03	; 3
    2298:	9d 4f       	sbci	r25, 0xFD	; 253
    229a:	0e 94 70 05 	call	0xae0	; 0xae0 <show_id_uart>
							uart_puts_P("\r");
    229e:	8e e0       	ldi	r24, 0x0E	; 14
    22a0:	92 e0       	ldi	r25, 0x02	; 2
    22a2:	0e 94 08 0a 	call	0x1410	; 0x1410 <uart_puts_p>
    22a6:	2f ef       	ldi	r18, 0xFF	; 255
    22a8:	e2 1a       	sub	r14, r18
    22aa:	f2 0a       	sbc	r15, r18
    22ac:	c3 cf       	rjmp	.-122    	; 0x2234 <main+0x2b2>
							}
						uart_puts_P( "\r\r");
    22ae:	8b e0       	ldi	r24, 0x0B	; 11
    22b0:	92 e0       	ldi	r25, 0x02	; 2
    22b2:	0e 94 08 0a 	call	0x1410	; 0x1410 <uart_puts_p>
							// if no RTC clock present, reset the elapsed timer
						if( ! gRTC_status)
    22b6:	80 91 ff 01 	lds	r24, 0x01FF
    22ba:	81 11       	cpse	r24, r1
    22bc:	08 c0       	rjmp	.+16     	; 0x22ce <main+0x34c>
									gRTC_clk = 0;
    22be:	10 92 fb 01 	sts	0x01FB, r1
    22c2:	10 92 fc 01 	sts	0x01FC, r1
    22c6:	10 92 fd 01 	sts	0x01FD, r1
    22ca:	10 92 fe 01 	sts	0x01FE, r1
						lcd_clrscr();
    22ce:	0e 94 ab 07 	call	0xf56	; 0xf56 <lcd_clrscr>
						read_temperatures( num_sensors);
    22d2:	83 2d       	mov	r24, r3
    22d4:	0e 94 37 05 	call	0xa6e	; 0xa6e <read_temperatures>
						log_temperatures( num_sensors);
    22d8:	83 2d       	mov	r24, r3
    22da:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <log_temperatures>
						display_temperatures( num_sensors, page);
    22de:	62 2d       	mov	r22, r2
    22e0:	83 2d       	mov	r24, r3
    22e2:	0e 94 0d 03 	call	0x61a	; 0x61a <display_temperatures>
						gElapsed = 0;	// restart the interval timer
    22e6:	10 92 fa 01 	sts	0x01FA, r1
    22ea:	10 92 f9 01 	sts	0x01F9, r1
							gElapsed = 0;	// restart the interval timer
						}
						// update the countdown.
						// else use the pseudo elapsed time counter
						lcd_gotoxy( 15, 0);
						sprintf( gBuffer, "%4is", gLog_interval - gElapsed);
    22ee:	68 ee       	ldi	r22, 0xE8	; 232
    22f0:	e6 2e       	mov	r14, r22
    22f2:	61 e0       	ldi	r22, 0x01	; 1
    22f4:	f6 2e       	mov	r15, r22
						// give a small delay to see if this is a simultaneous press
						delay_ms( CMD_DELAY);
						if( BTN_UP) break;	// exit display loop
						// cycle if needed
						if( page >= 4) page -= 2;          // if( page >= 2) page -= 2;
						else page = ((num_sensors - 1) >> 1) << 1; // bitovy posun - nasobenie
    22f6:	bb 24       	eor	r11, r11
    22f8:	ba 94       	dec	r11
    22fa:	b3 0c       	add	r11, r3
    22fc:	4b 2d       	mov	r20, r11
    22fe:	4e 7f       	andi	r20, 0xFE	; 254
    2300:	b4 2e       	mov	r11, r20
		{
		case MODE_LOGGING:	// actively reading and logging temperatures***********
			{
				while( true)	// display loop
				{
					if( BTN_DOWN)	//vyhodnotenie stavu PINu - show previous 2 readings on LCD
    2302:	89 b1       	in	r24, 0x09	; 9
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	80 95       	com	r24
    2308:	90 95       	com	r25
    230a:	83 ff       	sbrs	r24, 3
    230c:	20 c0       	rjmp	.+64     	; 0x234e <main+0x3cc>
					{
						// give a small delay to see if this is a simultaneous press
						delay_ms( CMD_DELAY);
    230e:	68 e6       	ldi	r22, 0x68	; 104
    2310:	71 e1       	ldi	r23, 0x11	; 17
    2312:	84 e0       	ldi	r24, 0x04	; 4
    2314:	90 e0       	ldi	r25, 0x00	; 0
    2316:	0e 94 36 06 	call	0xc6c	; 0xc6c <delayloop32>
						if( BTN_UP) break;	// exit display loop
    231a:	89 b1       	in	r24, 0x09	; 9
    231c:	90 e0       	ldi	r25, 0x00	; 0
    231e:	80 95       	com	r24
    2320:	90 95       	com	r25
    2322:	82 fd       	sbrc	r24, 2
    2324:	79 c0       	rjmp	.+242    	; 0x2418 <main+0x496>
						// cycle if needed
						if( page >= 4) page -= 2;          // if( page >= 2) page -= 2;
    2326:	e3 e0       	ldi	r30, 0x03	; 3
    2328:	e2 15       	cp	r30, r2
    232a:	18 f4       	brcc	.+6      	; 0x2332 <main+0x3b0>
    232c:	2a 94       	dec	r2
    232e:	2a 94       	dec	r2
    2330:	01 c0       	rjmp	.+2      	; 0x2334 <main+0x3b2>
						else page = ((num_sensors - 1) >> 1) << 1; // bitovy posun - nasobenie
    2332:	2b 2c       	mov	r2, r11
						lcd_clrscr();
    2334:	0e 94 ab 07 	call	0xf56	; 0xf56 <lcd_clrscr>
						display_temperatures( num_sensors, page);
    2338:	62 2d       	mov	r22, r2
    233a:	83 2d       	mov	r24, r3
    233c:	0e 94 0d 03 	call	0x61a	; 0x61a <display_temperatures>
						while( BTN_DOWN);	// wait until switch released
    2340:	89 b1       	in	r24, 0x09	; 9
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	80 95       	com	r24
    2346:	90 95       	com	r25
    2348:	83 fd       	sbrc	r24, 3
    234a:	fa cf       	rjmp	.-12     	; 0x2340 <main+0x3be>
    234c:	da cf       	rjmp	.-76     	; 0x2302 <main+0x380>
					}
					else if( BTN_UP)	// show next 2-4 readings on LCD
    234e:	89 b1       	in	r24, 0x09	; 9
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	80 95       	com	r24
    2354:	90 95       	com	r25
    2356:	82 ff       	sbrs	r24, 2
    2358:	23 c0       	rjmp	.+70     	; 0x23a0 <main+0x41e>
					{
						// give a small delay to see if this is a simultaneous press
						delay_ms( CMD_DELAY);
    235a:	68 e6       	ldi	r22, 0x68	; 104
    235c:	71 e1       	ldi	r23, 0x11	; 17
    235e:	84 e0       	ldi	r24, 0x04	; 4
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	0e 94 36 06 	call	0xc6c	; 0xc6c <delayloop32>
						if( BTN_DOWN) break;	// exit display loop
    2366:	89 b1       	in	r24, 0x09	; 9
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	80 95       	com	r24
    236c:	90 95       	com	r25
    236e:	83 fd       	sbrc	r24, 3
    2370:	53 c0       	rjmp	.+166    	; 0x2418 <main+0x496>
						// cycle if needed
						if( page + 4 < num_sensors) page += 2; //boli 2 a 2
    2372:	82 2d       	mov	r24, r2
    2374:	90 e0       	ldi	r25, 0x00	; 0
    2376:	04 96       	adiw	r24, 0x04	; 4
    2378:	8c 15       	cp	r24, r12
    237a:	9d 05       	cpc	r25, r13
    237c:	1c f4       	brge	.+6      	; 0x2384 <main+0x402>
    237e:	23 94       	inc	r2
    2380:	23 94       	inc	r2
    2382:	01 c0       	rjmp	.+2      	; 0x2386 <main+0x404>
						else page = 0;
    2384:	21 2c       	mov	r2, r1
						lcd_clrscr();
    2386:	0e 94 ab 07 	call	0xf56	; 0xf56 <lcd_clrscr>
						display_temperatures( num_sensors, page);
    238a:	62 2d       	mov	r22, r2
    238c:	83 2d       	mov	r24, r3
    238e:	0e 94 0d 03 	call	0x61a	; 0x61a <display_temperatures>
						while( BTN_UP);	// wait until switch released
    2392:	89 b1       	in	r24, 0x09	; 9
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	80 95       	com	r24
    2398:	90 95       	com	r25
    239a:	82 fd       	sbrc	r24, 2
    239c:	fa cf       	rjmp	.-12     	; 0x2392 <main+0x410>
    239e:	b1 cf       	rjmp	.-158    	; 0x2302 <main+0x380>
					}
					else
					{
						// time for a new reading?
						if( gElapsed >= gLog_interval)
    23a0:	20 91 f9 01 	lds	r18, 0x01F9
    23a4:	30 91 fa 01 	lds	r19, 0x01FA
    23a8:	80 91 f5 02 	lds	r24, 0x02F5
    23ac:	90 91 f6 02 	lds	r25, 0x02F6
    23b0:	28 17       	cp	r18, r24
    23b2:	39 07       	cpc	r19, r25
    23b4:	80 f0       	brcs	.+32     	; 0x23d6 <main+0x454>
						{
							read_temperatures( num_sensors);
    23b6:	83 2d       	mov	r24, r3
    23b8:	0e 94 37 05 	call	0xa6e	; 0xa6e <read_temperatures>
							log_temperatures( num_sensors);
    23bc:	83 2d       	mov	r24, r3
    23be:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <log_temperatures>
							lcd_clrscr();
    23c2:	0e 94 ab 07 	call	0xf56	; 0xf56 <lcd_clrscr>
							display_temperatures( num_sensors, page);
    23c6:	62 2d       	mov	r22, r2
    23c8:	83 2d       	mov	r24, r3
    23ca:	0e 94 0d 03 	call	0x61a	; 0x61a <display_temperatures>
							gElapsed = 0;	// restart the interval timer
    23ce:	10 92 fa 01 	sts	0x01FA, r1
    23d2:	10 92 f9 01 	sts	0x01F9, r1
						}
						// update the countdown.
						// else use the pseudo elapsed time counter
						lcd_gotoxy( 15, 0);
    23d6:	60 e0       	ldi	r22, 0x00	; 0
    23d8:	8f e0       	ldi	r24, 0x0F	; 15
    23da:	0e 94 98 07 	call	0xf30	; 0xf30 <lcd_gotoxy>
						sprintf( gBuffer, "%4is", gLog_interval - gElapsed);
    23de:	20 91 f9 01 	lds	r18, 0x01F9
    23e2:	30 91 fa 01 	lds	r19, 0x01FA
    23e6:	80 91 f5 02 	lds	r24, 0x02F5
    23ea:	90 91 f6 02 	lds	r25, 0x02F6
    23ee:	82 1b       	sub	r24, r18
    23f0:	93 0b       	sbc	r25, r19
    23f2:	9f 93       	push	r25
    23f4:	8f 93       	push	r24
    23f6:	ff 92       	push	r15
    23f8:	ef 92       	push	r14
    23fa:	df 93       	push	r29
    23fc:	cf 93       	push	r28
    23fe:	0e 94 58 19 	call	0x32b0	; 0x32b0 <sprintf>
						lcd_puts( gBuffer);
    2402:	8c ea       	ldi	r24, 0xAC	; 172
    2404:	92 e0       	ldi	r25, 0x02	; 2
    2406:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <lcd_puts>
    240a:	0f 90       	pop	r0
    240c:	0f 90       	pop	r0
    240e:	0f 90       	pop	r0
    2410:	0f 90       	pop	r0
    2412:	0f 90       	pop	r0
    2414:	0f 90       	pop	r0
    2416:	75 cf       	rjmp	.-278    	; 0x2302 <main+0x380>
					}
				}
				mode = MODE_START;
				lcd_clrscr();	// provide feedback on button push
    2418:	0e 94 ab 07 	call	0xf56	; 0xf56 <lcd_clrscr>
				while( BTN_UP || BTN_DOWN);	// wait until switches released
    241c:	89 b1       	in	r24, 0x09	; 9
    241e:	90 e0       	ldi	r25, 0x00	; 0
    2420:	80 95       	com	r24
    2422:	90 95       	com	r25
    2424:	82 fd       	sbrc	r24, 2
    2426:	fa cf       	rjmp	.-12     	; 0x241c <main+0x49a>
    2428:	89 b1       	in	r24, 0x09	; 9
    242a:	90 e0       	ldi	r25, 0x00	; 0
    242c:	80 95       	com	r24
    242e:	90 95       	com	r25
    2430:	83 fd       	sbrc	r24, 3
    2432:	f4 cf       	rjmp	.-24     	; 0x241c <main+0x49a>
    2434:	9f ce       	rjmp	.-706    	; 0x2174 <main+0x1f2>
		case MODE_ORDER:	// displaying change view order**************************
			{
				// this alters the Dallas 1Wire search order which appears random,
				// but is deterministic, to a more meaningful user selected order
				pos = 0;	// start on the left
				lcd_gotoxy( 1, 3);
    2436:	63 e0       	ldi	r22, 0x03	; 3
    2438:	81 e0       	ldi	r24, 0x01	; 1
    243a:	0e 94 98 07 	call	0xf30	; 0xf30 <lcd_gotoxy>
				lcd_puts_P( "write to EEPROM");
    243e:	8b ef       	ldi	r24, 0xFB	; 251
    2440:	91 e0       	ldi	r25, 0x01	; 1
    2442:	0e 94 dd 07 	call	0xfba	; 0xfba <lcd_puts_p>
				lcd_gotoxy( 0, 0);
    2446:	60 e0       	ldi	r22, 0x00	; 0
    2448:	80 e0       	ldi	r24, 0x00	; 0
    244a:	0e 94 98 07 	call	0xf30	; 0xf30 <lcd_gotoxy>
				lcd_puts_P( "1Wire display order");
    244e:	87 ee       	ldi	r24, 0xE7	; 231
    2450:	91 e0       	ldi	r25, 0x01	; 1
    2452:	0e 94 dd 07 	call	0xfba	; 0xfba <lcd_puts_p>
				lcd_gotoxy( 0, 1);
    2456:	61 e0       	ldi	r22, 0x01	; 1
    2458:	80 e0       	ldi	r24, 0x00	; 0
    245a:	0e 94 98 07 	call	0xf30	; 0xf30 <lcd_gotoxy>
    245e:	59 ee       	ldi	r21, 0xE9	; 233
    2460:	e5 2e       	mov	r14, r21
    2462:	52 e0       	ldi	r21, 0x02	; 2
    2464:	f5 2e       	mov	r15, r21
				for( i = 0; i < num_sensors; i++)	// display the 1-wire order
    2466:	57 01       	movw	r10, r14
    2468:	9e 2c       	mov	r9, r14
    246a:	8a 2d       	mov	r24, r10
    246c:	8e 19       	sub	r24, r14
    246e:	83 15       	cp	r24, r3
    2470:	38 f4       	brcc	.+14     	; 0x2480 <main+0x4fe>
					lcd_putc( g1Wire_order[i] + '0');
    2472:	f5 01       	movw	r30, r10
    2474:	81 91       	ld	r24, Z+
    2476:	5f 01       	movw	r10, r30
    2478:	80 5d       	subi	r24, 0xD0	; 208
    247a:	0e 94 b1 07 	call	0xf62	; 0xf62 <lcd_putc>
    247e:	f5 cf       	rjmp	.-22     	; 0x246a <main+0x4e8>
				lcd_gotoxy( pos, 1);
    2480:	61 e0       	ldi	r22, 0x01	; 1
    2482:	80 e0       	ldi	r24, 0x00	; 0
    2484:	0e 94 98 07 	call	0xf30	; 0xf30 <lcd_gotoxy>
				lcd_command( LCD_DISP_ON_BLINK);	// turn on flashing block cursor
    2488:	8d e0       	ldi	r24, 0x0D	; 13
    248a:	0e 94 86 07 	call	0xf0c	; 0xf0c <lcd_command>
			}
		case MODE_ORDER:	// displaying change view order**************************
			{
				// this alters the Dallas 1Wire search order which appears random,
				// but is deterministic, to a more meaningful user selected order
				pos = 0;	// start on the left
    248e:	b1 2c       	mov	r11, r1
				for( i = 0; i < num_sensors; i++)	// display the 1-wire order
					lcd_putc( g1Wire_order[i] + '0');
				lcd_gotoxy( pos, 1);
				lcd_command( LCD_DISP_ON_BLINK);	// turn on flashing block cursor
				
				while( ! BTN_MODE)
    2490:	23 b1       	in	r18, 0x03	; 3
    2492:	30 e0       	ldi	r19, 0x00	; 0
    2494:	20 95       	com	r18
    2496:	30 95       	com	r19
    2498:	27 fd       	sbrc	r18, 7
    249a:	7e c0       	rjmp	.+252    	; 0x2598 <main+0x616>
				{
					if( BTN_SEL)	// next ID
    249c:	89 b1       	in	r24, 0x09	; 9
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	80 95       	com	r24
    24a2:	90 95       	com	r25
    24a4:	84 ff       	sbrs	r24, 4
    24a6:	12 c0       	rjmp	.+36     	; 0x24cc <main+0x54a>
					{
						// move the cursor position right one - recycle if at end
						pos++;
    24a8:	b3 94       	inc	r11
						if( pos > num_sensors - 1) pos = 0;
    24aa:	8b 2d       	mov	r24, r11
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	8c 15       	cp	r24, r12
    24b0:	9d 05       	cpc	r25, r13
    24b2:	0c f0       	brlt	.+2      	; 0x24b6 <main+0x534>
    24b4:	b1 2c       	mov	r11, r1
						lcd_gotoxy( pos, 1);
    24b6:	61 e0       	ldi	r22, 0x01	; 1
    24b8:	8b 2d       	mov	r24, r11
    24ba:	0e 94 98 07 	call	0xf30	; 0xf30 <lcd_gotoxy>

						while( BTN_SEL);	// wait for release
    24be:	89 b1       	in	r24, 0x09	; 9
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	80 95       	com	r24
    24c4:	90 95       	com	r25
    24c6:	84 fd       	sbrc	r24, 4
    24c8:	fa cf       	rjmp	.-12     	; 0x24be <main+0x53c>
    24ca:	e2 cf       	rjmp	.-60     	; 0x2490 <main+0x50e>
					}
					else if( BTN_UP)	// move selection to the left
    24cc:	89 b1       	in	r24, 0x09	; 9
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	80 95       	com	r24
    24d2:	90 95       	com	r25
    24d4:	82 ff       	sbrs	r24, 2
    24d6:	2c c0       	rjmp	.+88     	; 0x2530 <main+0x5ae>
					{
						if( pos > 0)
    24d8:	bb 20       	and	r11, r11
    24da:	19 f1       	breq	.+70     	; 0x2522 <main+0x5a0>
						{
							// swap marker positions
							tmp = g1Wire_order[pos];
    24dc:	eb 2d       	mov	r30, r11
    24de:	f0 e0       	ldi	r31, 0x00	; 0
    24e0:	df 01       	movw	r26, r30
    24e2:	a7 51       	subi	r26, 0x17	; 23
    24e4:	bd 4f       	sbci	r27, 0xFD	; 253
    24e6:	8c 91       	ld	r24, X
							g1Wire_order[pos] = g1Wire_order[pos - 1];
    24e8:	e8 51       	subi	r30, 0x18	; 24
    24ea:	fd 4f       	sbci	r31, 0xFD	; 253
    24ec:	90 81       	ld	r25, Z
    24ee:	9c 93       	st	X, r25
							g1Wire_order[pos - 1] = tmp;
    24f0:	80 83       	st	Z, r24
							pos--;
    24f2:	ba 94       	dec	r11
							// display the markers in the new order
							lcd_gotoxy( 0, 1);
    24f4:	61 e0       	ldi	r22, 0x01	; 1
    24f6:	80 e0       	ldi	r24, 0x00	; 0
    24f8:	0e 94 98 07 	call	0xf30	; 0xf30 <lcd_gotoxy>
							for( i = 0; i < num_sensors; i++)
    24fc:	49 ee       	ldi	r20, 0xE9	; 233
    24fe:	e4 2e       	mov	r14, r20
    2500:	42 e0       	ldi	r20, 0x02	; 2
    2502:	f4 2e       	mov	r15, r20
    2504:	8e 2d       	mov	r24, r14
    2506:	89 19       	sub	r24, r9
    2508:	83 15       	cp	r24, r3
    250a:	38 f4       	brcc	.+14     	; 0x251a <main+0x598>
								lcd_putc( g1Wire_order[i] + '0');
    250c:	f7 01       	movw	r30, r14
    250e:	81 91       	ld	r24, Z+
    2510:	7f 01       	movw	r14, r30
    2512:	80 5d       	subi	r24, 0xD0	; 208
    2514:	0e 94 b1 07 	call	0xf62	; 0xf62 <lcd_putc>
    2518:	f5 cf       	rjmp	.-22     	; 0x2504 <main+0x582>
							lcd_gotoxy( pos, 1);
    251a:	61 e0       	ldi	r22, 0x01	; 1
    251c:	8b 2d       	mov	r24, r11
    251e:	0e 94 98 07 	call	0xf30	; 0xf30 <lcd_gotoxy>
						}
						while( BTN_UP);	// wait until switch released
    2522:	89 b1       	in	r24, 0x09	; 9
    2524:	90 e0       	ldi	r25, 0x00	; 0
    2526:	80 95       	com	r24
    2528:	90 95       	com	r25
    252a:	82 fd       	sbrc	r24, 2
    252c:	fa cf       	rjmp	.-12     	; 0x2522 <main+0x5a0>
    252e:	b0 cf       	rjmp	.-160    	; 0x2490 <main+0x50e>
					}
					else if( BTN_DOWN)	// move selection to the right
    2530:	89 b1       	in	r24, 0x09	; 9
    2532:	90 e0       	ldi	r25, 0x00	; 0
    2534:	80 95       	com	r24
    2536:	90 95       	com	r25
    2538:	83 ff       	sbrs	r24, 3
    253a:	aa cf       	rjmp	.-172    	; 0x2490 <main+0x50e>
					{
						if( pos < num_sensors - 1)
    253c:	2b 2d       	mov	r18, r11
    253e:	30 e0       	ldi	r19, 0x00	; 0
    2540:	24 15       	cp	r18, r4
    2542:	35 05       	cpc	r19, r5
    2544:	14 f5       	brge	.+68     	; 0x258a <main+0x608>
						{
							// swap marker positions
							tmp = g1Wire_order[pos];
    2546:	d9 01       	movw	r26, r18
    2548:	a7 51       	subi	r26, 0x17	; 23
    254a:	bd 4f       	sbci	r27, 0xFD	; 253
    254c:	8c 91       	ld	r24, X
							g1Wire_order[pos] = g1Wire_order[pos + 1];
    254e:	f9 01       	movw	r30, r18
    2550:	e6 51       	subi	r30, 0x16	; 22
    2552:	fd 4f       	sbci	r31, 0xFD	; 253
    2554:	90 81       	ld	r25, Z
    2556:	9c 93       	st	X, r25
							g1Wire_order[pos + 1] = tmp;
    2558:	80 83       	st	Z, r24
							pos++;
    255a:	b3 94       	inc	r11
							// display the markers in the new order
							lcd_gotoxy( 0, 1);
    255c:	61 e0       	ldi	r22, 0x01	; 1
    255e:	80 e0       	ldi	r24, 0x00	; 0
    2560:	0e 94 98 07 	call	0xf30	; 0xf30 <lcd_gotoxy>
							for( i = 0; i < num_sensors; i++)
    2564:	39 ee       	ldi	r19, 0xE9	; 233
    2566:	e3 2e       	mov	r14, r19
    2568:	32 e0       	ldi	r19, 0x02	; 2
    256a:	f3 2e       	mov	r15, r19
    256c:	8e 2d       	mov	r24, r14
    256e:	89 19       	sub	r24, r9
    2570:	83 15       	cp	r24, r3
    2572:	38 f4       	brcc	.+14     	; 0x2582 <main+0x600>
								lcd_putc( g1Wire_order[i] + '0');
    2574:	f7 01       	movw	r30, r14
    2576:	81 91       	ld	r24, Z+
    2578:	7f 01       	movw	r14, r30
    257a:	80 5d       	subi	r24, 0xD0	; 208
    257c:	0e 94 b1 07 	call	0xf62	; 0xf62 <lcd_putc>
    2580:	f5 cf       	rjmp	.-22     	; 0x256c <main+0x5ea>
							lcd_gotoxy( pos, 1);
    2582:	61 e0       	ldi	r22, 0x01	; 1
    2584:	8b 2d       	mov	r24, r11
    2586:	0e 94 98 07 	call	0xf30	; 0xf30 <lcd_gotoxy>
						}
						while( BTN_DOWN);	// wait until switch released
    258a:	29 b1       	in	r18, 0x09	; 9
    258c:	30 e0       	ldi	r19, 0x00	; 0
    258e:	20 95       	com	r18
    2590:	30 95       	com	r19
    2592:	23 fd       	sbrc	r18, 3
    2594:	fa cf       	rjmp	.-12     	; 0x258a <main+0x608>
    2596:	7c cf       	rjmp	.-264    	; 0x2490 <main+0x50e>
					}
				}
				eeprom_write_block( g1Wire_order, nv1Wire_order, MAX_SENSORS);
    2598:	48 e0       	ldi	r20, 0x08	; 8
    259a:	50 e0       	ldi	r21, 0x00	; 0
    259c:	60 e4       	ldi	r22, 0x40	; 64
    259e:	70 e0       	ldi	r23, 0x00	; 0
    25a0:	89 ee       	ldi	r24, 0xE9	; 233
    25a2:	92 e0       	ldi	r25, 0x02	; 2
    25a4:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <__eewr_block_m168>
				
				if(num_sensors==1)
    25a8:	f1 e0       	ldi	r31, 0x01	; 1
    25aa:	3f 12       	cpse	r3, r31
    25ac:	09 c0       	rjmp	.+18     	; 0x25c0 <main+0x63e>
						{ nvgSensorIDs1[1] = gSensorIDs[1][0];
    25ae:	80 91 05 03 	lds	r24, 0x0305
    25b2:	80 93 39 00 	sts	0x0039, r24
							eeprom_write_block( gSensorIDs, nvgSensorIDs1, 8);
    25b6:	48 e0       	ldi	r20, 0x08	; 8
    25b8:	50 e0       	ldi	r21, 0x00	; 0
    25ba:	68 e3       	ldi	r22, 0x38	; 56
    25bc:	70 e0       	ldi	r23, 0x00	; 0
    25be:	6b c0       	rjmp	.+214    	; 0x2696 <main+0x714>
						}
				if(num_sensors==2)
    25c0:	22 e0       	ldi	r18, 0x02	; 2
    25c2:	32 12       	cpse	r3, r18
    25c4:	15 c0       	rjmp	.+42     	; 0x25f0 <main+0x66e>
						{nvgSensorIDs1[1] = gSensorIDs[1][0];
    25c6:	80 91 05 03 	lds	r24, 0x0305
    25ca:	80 93 39 00 	sts	0x0039, r24
						eeprom_write_block( gSensorIDs, nvgSensorIDs1, 8);
    25ce:	48 e0       	ldi	r20, 0x08	; 8
    25d0:	50 e0       	ldi	r21, 0x00	; 0
    25d2:	68 e3       	ldi	r22, 0x38	; 56
    25d4:	70 e0       	ldi	r23, 0x00	; 0
    25d6:	8d ef       	ldi	r24, 0xFD	; 253
    25d8:	92 e0       	ldi	r25, 0x02	; 2
    25da:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <__eewr_block_m168>
						nvgSensorIDs2[1] = gSensorIDs[2][0];
    25de:	80 91 0d 03 	lds	r24, 0x030D
    25e2:	80 93 31 00 	sts	0x0031, r24
						eeprom_write_block( gSensorIDs, nvgSensorIDs2, 8);
    25e6:	48 e0       	ldi	r20, 0x08	; 8
    25e8:	50 e0       	ldi	r21, 0x00	; 0
    25ea:	60 e3       	ldi	r22, 0x30	; 48
    25ec:	70 e0       	ldi	r23, 0x00	; 0
    25ee:	53 c0       	rjmp	.+166    	; 0x2696 <main+0x714>
						}
				if(num_sensors==3)
    25f0:	43 e0       	ldi	r20, 0x03	; 3
    25f2:	34 12       	cpse	r3, r20
    25f4:	21 c0       	rjmp	.+66     	; 0x2638 <main+0x6b6>
						{nvgSensorIDs1[1] = gSensorIDs[1][0];
    25f6:	80 91 05 03 	lds	r24, 0x0305
    25fa:	80 93 39 00 	sts	0x0039, r24
						eeprom_write_block( gSensorIDs, nvgSensorIDs1, 8);
    25fe:	48 e0       	ldi	r20, 0x08	; 8
    2600:	50 e0       	ldi	r21, 0x00	; 0
    2602:	68 e3       	ldi	r22, 0x38	; 56
    2604:	70 e0       	ldi	r23, 0x00	; 0
    2606:	8d ef       	ldi	r24, 0xFD	; 253
    2608:	92 e0       	ldi	r25, 0x02	; 2
    260a:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <__eewr_block_m168>
						nvgSensorIDs2[1] = gSensorIDs[2][0];
    260e:	80 91 0d 03 	lds	r24, 0x030D
    2612:	80 93 31 00 	sts	0x0031, r24
						eeprom_write_block( gSensorIDs, nvgSensorIDs2, 8);
    2616:	48 e0       	ldi	r20, 0x08	; 8
    2618:	50 e0       	ldi	r21, 0x00	; 0
    261a:	60 e3       	ldi	r22, 0x30	; 48
    261c:	70 e0       	ldi	r23, 0x00	; 0
    261e:	8d ef       	ldi	r24, 0xFD	; 253
    2620:	92 e0       	ldi	r25, 0x02	; 2
    2622:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <__eewr_block_m168>
						nvgSensorIDs3[1] = gSensorIDs[3][0];
    2626:	80 91 15 03 	lds	r24, 0x0315
    262a:	80 93 29 00 	sts	0x0029, r24
						eeprom_write_block( gSensorIDs, nvgSensorIDs3, 8);
    262e:	48 e0       	ldi	r20, 0x08	; 8
    2630:	50 e0       	ldi	r21, 0x00	; 0
    2632:	68 e2       	ldi	r22, 0x28	; 40
    2634:	70 e0       	ldi	r23, 0x00	; 0
    2636:	2f c0       	rjmp	.+94     	; 0x2696 <main+0x714>
						}
				if(num_sensors==4)
    2638:	84 e0       	ldi	r24, 0x04	; 4
    263a:	38 12       	cpse	r3, r24
    263c:	30 c0       	rjmp	.+96     	; 0x269e <main+0x71c>
						{nvgSensorIDs1[1] = gSensorIDs[1][0];
    263e:	80 91 05 03 	lds	r24, 0x0305
    2642:	80 93 39 00 	sts	0x0039, r24
						eeprom_write_block( gSensorIDs, nvgSensorIDs1, 8);
    2646:	48 e0       	ldi	r20, 0x08	; 8
    2648:	50 e0       	ldi	r21, 0x00	; 0
    264a:	68 e3       	ldi	r22, 0x38	; 56
    264c:	70 e0       	ldi	r23, 0x00	; 0
    264e:	8d ef       	ldi	r24, 0xFD	; 253
    2650:	92 e0       	ldi	r25, 0x02	; 2
    2652:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <__eewr_block_m168>
						nvgSensorIDs2[1] = gSensorIDs[2][0];
    2656:	80 91 0d 03 	lds	r24, 0x030D
    265a:	80 93 31 00 	sts	0x0031, r24
						eeprom_write_block( gSensorIDs, nvgSensorIDs2, 8);
    265e:	48 e0       	ldi	r20, 0x08	; 8
    2660:	50 e0       	ldi	r21, 0x00	; 0
    2662:	60 e3       	ldi	r22, 0x30	; 48
    2664:	70 e0       	ldi	r23, 0x00	; 0
    2666:	8d ef       	ldi	r24, 0xFD	; 253
    2668:	92 e0       	ldi	r25, 0x02	; 2
    266a:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <__eewr_block_m168>
						nvgSensorIDs3[1] = gSensorIDs[3][0];
    266e:	80 91 15 03 	lds	r24, 0x0315
    2672:	80 93 29 00 	sts	0x0029, r24
						eeprom_write_block( gSensorIDs, nvgSensorIDs3, 8);
    2676:	48 e0       	ldi	r20, 0x08	; 8
    2678:	50 e0       	ldi	r21, 0x00	; 0
    267a:	68 e2       	ldi	r22, 0x28	; 40
    267c:	70 e0       	ldi	r23, 0x00	; 0
    267e:	8d ef       	ldi	r24, 0xFD	; 253
    2680:	92 e0       	ldi	r25, 0x02	; 2
    2682:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <__eewr_block_m168>
						nvgSensorIDs4[1] = gSensorIDs[4][0];
    2686:	80 91 1d 03 	lds	r24, 0x031D
    268a:	80 93 21 00 	sts	0x0021, r24
						eeprom_write_block( gSensorIDs, nvgSensorIDs4, 8);
    268e:	48 e0       	ldi	r20, 0x08	; 8
    2690:	50 e0       	ldi	r21, 0x00	; 0
    2692:	60 e2       	ldi	r22, 0x20	; 32
    2694:	70 e0       	ldi	r23, 0x00	; 0
    2696:	8d ef       	ldi	r24, 0xFD	; 253
    2698:	92 e0       	ldi	r25, 0x02	; 2
    269a:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <__eewr_block_m168>
						eeprom_write_block( gSensorIDs, nvgSensorIDs7, 8);
						nvgSensorIDs8[1] = gSensorIDs[8][0];
						eeprom_write_block( gSensorIDs, nvgSensorIDs8, 8);
						}
			*/	
				lcd_command( LCD_DISP_ON);	// turn off flashing cursor
    269e:	8c e0       	ldi	r24, 0x0C	; 12
    26a0:	0e 94 86 07 	call	0xf0c	; 0xf0c <lcd_command>
				lcd_clrscr();	// acknowledge button press
    26a4:	0e 94 ab 07 	call	0xf56	; 0xf56 <lcd_clrscr>
				mode = MODE_INTERVAL;
				while( BTN_MODE);	// wait until switch released
    26a8:	83 b1       	in	r24, 0x03	; 3
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	80 95       	com	r24
    26ae:	90 95       	com	r25
    26b0:	87 fd       	sbrc	r24, 7
    26b2:	fa cf       	rjmp	.-12     	; 0x26a8 <main+0x726>
				break;	// next case
			}
		case MODE_INTERVAL:	// displaying logging interval change******************
			{
				lcd_clrscr();
    26b4:	0e 94 ab 07 	call	0xf56	; 0xf56 <lcd_clrscr>
				lcd_puts_P( "Logging interval\n");
    26b8:	85 ed       	ldi	r24, 0xD5	; 213
    26ba:	91 e0       	ldi	r25, 0x01	; 1
    26bc:	0e 94 dd 07 	call	0xfba	; 0xfba <lcd_puts_p>
				sprintf( gBuffer, "%4i", gLog_interval);
    26c0:	80 91 f6 02 	lds	r24, 0x02F6
    26c4:	8f 93       	push	r24
    26c6:	80 91 f5 02 	lds	r24, 0x02F5
    26ca:	8f 93       	push	r24
    26cc:	1f 93       	push	r17
    26ce:	0f 93       	push	r16
    26d0:	df 93       	push	r29
    26d2:	cf 93       	push	r28
    26d4:	0e 94 58 19 	call	0x32b0	; 0x32b0 <sprintf>
				lcd_puts( gBuffer);
    26d8:	8c ea       	ldi	r24, 0xAC	; 172
    26da:	92 e0       	ldi	r25, 0x02	; 2
    26dc:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <lcd_puts>
				//lcd_puts_P( "Logging interval\n");

				while( ! BTN_MODE)
    26e0:	0f 90       	pop	r0
    26e2:	0f 90       	pop	r0
    26e4:	0f 90       	pop	r0
    26e6:	0f 90       	pop	r0
    26e8:	0f 90       	pop	r0
    26ea:	0f 90       	pop	r0
								gLog_interval += up_held << 2;
							else
								gLog_interval++;
							
							// fixup on overflow
							if( gLog_interval > MAX_INTERVAL) gLog_interval = MAX_INTERVAL;
    26ec:	ff e0       	ldi	r31, 0x0F	; 15
    26ee:	ef 2e       	mov	r14, r31
    26f0:	f7 e2       	ldi	r31, 0x27	; 39
    26f2:	ff 2e       	mov	r15, r31
				lcd_puts_P( "Logging interval\n");
				sprintf( gBuffer, "%4i", gLog_interval);
				lcd_puts( gBuffer);
				//lcd_puts_P( "Logging interval\n");

				while( ! BTN_MODE)
    26f4:	83 b1       	in	r24, 0x03	; 3
    26f6:	90 e0       	ldi	r25, 0x00	; 0
    26f8:	80 95       	com	r24
    26fa:	90 95       	com	r25
    26fc:	87 fd       	sbrc	r24, 7
    26fe:	92 c0       	rjmp	.+292    	; 0x2824 <main+0x8a2>
    2700:	b1 2c       	mov	r11, r1
					 * if the button is still held, geometrically increase
					 * the step amount each loop through until the button
					 * is released
					 */
					up_held = dn_held = 0;
					while( BTN_UP)	// increase interval
    2702:	89 b1       	in	r24, 0x09	; 9
    2704:	90 e0       	ldi	r25, 0x00	; 0
    2706:	80 95       	com	r24
    2708:	90 95       	com	r25
    270a:	82 ff       	sbrs	r24, 2
    270c:	43 c0       	rjmp	.+134    	; 0x2794 <main+0x812>
					{
						if( gLog_interval < MAX_INTERVAL)
    270e:	80 91 f5 02 	lds	r24, 0x02F5
    2712:	90 91 f6 02 	lds	r25, 0x02F6
    2716:	8f 30       	cpi	r24, 0x0F	; 15
    2718:	e7 e2       	ldi	r30, 0x27	; 39
    271a:	9e 07       	cpc	r25, r30
    271c:	9c f5       	brge	.+102    	; 0x2784 <main+0x802>
						{
							// geometrically increase step size if button held
							if( up_held >= BUTTON_HELD)
    271e:	f2 e0       	ldi	r31, 0x02	; 2
    2720:	fb 15       	cp	r31, r11
    2722:	30 f4       	brcc	.+12     	; 0x2730 <main+0x7ae>
								gLog_interval += up_held << 2;
    2724:	24 e0       	ldi	r18, 0x04	; 4
    2726:	b2 9e       	mul	r11, r18
    2728:	80 0d       	add	r24, r0
    272a:	91 1d       	adc	r25, r1
    272c:	11 24       	eor	r1, r1
    272e:	01 c0       	rjmp	.+2      	; 0x2732 <main+0x7b0>
							else
								gLog_interval++;
    2730:	01 96       	adiw	r24, 0x01	; 1
    2732:	90 93 f6 02 	sts	0x02F6, r25
    2736:	80 93 f5 02 	sts	0x02F5, r24
							
							// fixup on overflow
							if( gLog_interval > MAX_INTERVAL) gLog_interval = MAX_INTERVAL;
    273a:	80 91 f5 02 	lds	r24, 0x02F5
    273e:	90 91 f6 02 	lds	r25, 0x02F6
    2742:	80 31       	cpi	r24, 0x10	; 16
    2744:	97 42       	sbci	r25, 0x27	; 39
    2746:	24 f0       	brlt	.+8      	; 0x2750 <main+0x7ce>
    2748:	f0 92 f6 02 	sts	0x02F6, r15
    274c:	e0 92 f5 02 	sts	0x02F5, r14

							lcd_gotoxy( 0, 1);
    2750:	61 e0       	ldi	r22, 0x01	; 1
    2752:	80 e0       	ldi	r24, 0x00	; 0
    2754:	0e 94 98 07 	call	0xf30	; 0xf30 <lcd_gotoxy>
							sprintf( gBuffer, "%4i", gLog_interval);
    2758:	80 91 f6 02 	lds	r24, 0x02F6
    275c:	8f 93       	push	r24
    275e:	80 91 f5 02 	lds	r24, 0x02F5
    2762:	8f 93       	push	r24
    2764:	1f 93       	push	r17
    2766:	0f 93       	push	r16
    2768:	df 93       	push	r29
    276a:	cf 93       	push	r28
    276c:	0e 94 58 19 	call	0x32b0	; 0x32b0 <sprintf>
							lcd_puts( gBuffer);
    2770:	8c ea       	ldi	r24, 0xAC	; 172
    2772:	92 e0       	ldi	r25, 0x02	; 2
    2774:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <lcd_puts>
    2778:	0f 90       	pop	r0
    277a:	0f 90       	pop	r0
    277c:	0f 90       	pop	r0
    277e:	0f 90       	pop	r0
    2780:	0f 90       	pop	r0
    2782:	0f 90       	pop	r0
						}
						delay_ms( CMD_DELAY);	// allow time to release button
    2784:	68 e6       	ldi	r22, 0x68	; 104
    2786:	71 e1       	ldi	r23, 0x11	; 17
    2788:	84 e0       	ldi	r24, 0x04	; 4
    278a:	90 e0       	ldi	r25, 0x00	; 0
    278c:	0e 94 36 06 	call	0xc6c	; 0xc6c <delayloop32>
						up_held++;
    2790:	b3 94       	inc	r11
    2792:	b7 cf       	rjmp	.-146    	; 0x2702 <main+0x780>
					 * if the button is still held, geometrically increase
					 * the step amount each loop through until the button
					 * is released
					 */
					up_held = dn_held = 0;
					while( BTN_UP)	// increase interval
    2794:	b1 2c       	mov	r11, r1
						}
						delay_ms( CMD_DELAY);	// allow time to release button
						up_held++;
					}

					while( BTN_DOWN)	// decrease interval
    2796:	89 b1       	in	r24, 0x09	; 9
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	80 95       	com	r24
    279c:	90 95       	com	r25
    279e:	83 ff       	sbrs	r24, 3
    27a0:	a9 cf       	rjmp	.-174    	; 0x26f4 <main+0x772>
					{
						if( gLog_interval > MIN_INTERVAL)
    27a2:	80 91 f5 02 	lds	r24, 0x02F5
    27a6:	90 91 f6 02 	lds	r25, 0x02F6
    27aa:	86 30       	cpi	r24, 0x06	; 6
    27ac:	91 05       	cpc	r25, r1
    27ae:	94 f1       	brlt	.+100    	; 0x2814 <main+0x892>
						{
							if( dn_held >= BUTTON_HELD)
    27b0:	e2 e0       	ldi	r30, 0x02	; 2
    27b2:	eb 15       	cp	r30, r11
    27b4:	80 f4       	brcc	.+32     	; 0x27d6 <main+0x854>
							{
								// geometrically increase step size if button held
								// need to worry about underflow since interval is unsigned
								if( (gLog_interval - MIN_INTERVAL) > dn_held << 2)
    27b6:	f4 e0       	ldi	r31, 0x04	; 4
    27b8:	bf 9e       	mul	r11, r31
    27ba:	90 01       	movw	r18, r0
    27bc:	11 24       	eor	r1, r1
    27be:	ac 01       	movw	r20, r24
    27c0:	45 50       	subi	r20, 0x05	; 5
    27c2:	51 09       	sbc	r21, r1
    27c4:	24 17       	cp	r18, r20
    27c6:	35 07       	cpc	r19, r21
    27c8:	1c f4       	brge	.+6      	; 0x27d0 <main+0x84e>
									gLog_interval -= dn_held << 2;
    27ca:	82 1b       	sub	r24, r18
    27cc:	93 0b       	sbc	r25, r19
    27ce:	04 c0       	rjmp	.+8      	; 0x27d8 <main+0x856>
								else
									gLog_interval = MIN_INTERVAL;
    27d0:	85 e0       	ldi	r24, 0x05	; 5
    27d2:	90 e0       	ldi	r25, 0x00	; 0
    27d4:	01 c0       	rjmp	.+2      	; 0x27d8 <main+0x856>
							}
							else
								gLog_interval--;
    27d6:	01 97       	sbiw	r24, 0x01	; 1
    27d8:	90 93 f6 02 	sts	0x02F6, r25
    27dc:	80 93 f5 02 	sts	0x02F5, r24
							lcd_gotoxy( 0,1);
    27e0:	61 e0       	ldi	r22, 0x01	; 1
    27e2:	80 e0       	ldi	r24, 0x00	; 0
    27e4:	0e 94 98 07 	call	0xf30	; 0xf30 <lcd_gotoxy>
							sprintf( gBuffer, "%4i", gLog_interval);
    27e8:	80 91 f6 02 	lds	r24, 0x02F6
    27ec:	8f 93       	push	r24
    27ee:	80 91 f5 02 	lds	r24, 0x02F5
    27f2:	8f 93       	push	r24
    27f4:	1f 93       	push	r17
    27f6:	0f 93       	push	r16
    27f8:	df 93       	push	r29
    27fa:	cf 93       	push	r28
    27fc:	0e 94 58 19 	call	0x32b0	; 0x32b0 <sprintf>
							lcd_puts( gBuffer);
    2800:	8c ea       	ldi	r24, 0xAC	; 172
    2802:	92 e0       	ldi	r25, 0x02	; 2
    2804:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <lcd_puts>
    2808:	0f 90       	pop	r0
    280a:	0f 90       	pop	r0
    280c:	0f 90       	pop	r0
    280e:	0f 90       	pop	r0
    2810:	0f 90       	pop	r0
    2812:	0f 90       	pop	r0
						}
						delay_ms( CMD_DELAY);
    2814:	68 e6       	ldi	r22, 0x68	; 104
    2816:	71 e1       	ldi	r23, 0x11	; 17
    2818:	84 e0       	ldi	r24, 0x04	; 4
    281a:	90 e0       	ldi	r25, 0x00	; 0
    281c:	0e 94 36 06 	call	0xc6c	; 0xc6c <delayloop32>
						dn_held++;
    2820:	b3 94       	inc	r11
    2822:	b9 cf       	rjmp	.-142    	; 0x2796 <main+0x814>
					}
				}
				mode = MODE_SENSOR;
				eeprom_write_word( &nvLog_interval, gLog_interval);	// save the persistant value
    2824:	60 91 f5 02 	lds	r22, 0x02F5
    2828:	70 91 f6 02 	lds	r23, 0x02F6
    282c:	8a e4       	ldi	r24, 0x4A	; 74
    282e:	90 e0       	ldi	r25, 0x00	; 0
    2830:	0e 94 82 1b 	call	0x3704	; 0x3704 <__eewr_word_m168>
				lcd_clrscr();	// ack button press
    2834:	0e 94 ab 07 	call	0xf56	; 0xf56 <lcd_clrscr>
				while( BTN_MODE);	// wait until switch released
    2838:	83 b1       	in	r24, 0x03	; 3
    283a:	90 e0       	ldi	r25, 0x00	; 0
    283c:	80 95       	com	r24
    283e:	90 95       	com	r25
    2840:	87 fd       	sbrc	r24, 7
    2842:	fa cf       	rjmp	.-12     	; 0x2838 <main+0x8b6>
				break;	// next case
			}
		case MODE_SENSOR:	// displaying extended sensor info***********************
			{
				i = 0;	// display order
				show_exinfo_lcd( i);
    2844:	80 e0       	ldi	r24, 0x00	; 0
    2846:	0e 94 af 05 	call	0xb5e	; 0xb5e <show_exinfo_lcd>
				while( BTN_MODE);	// wait until switch released
				break;	// next case
			}
		case MODE_SENSOR:	// displaying extended sensor info***********************
			{
				i = 0;	// display order
    284a:	61 2c       	mov	r6, r1
					 * complexity I don't want
					 */
					device = g1Wire_order[i];
					lcd_gotoxy( 10, 0);
					DS18X20_start_meas( &gSensorIDs[device][0]);
					sprintf( gBuffer, "0x%04x", DS18X20_get_meas( &gSensorIDs[device][0]));
    284c:	e1 ef       	ldi	r30, 0xF1	; 241
    284e:	ee 2e       	mov	r14, r30
    2850:	e1 e0       	ldi	r30, 0x01	; 1
    2852:	fe 2e       	mov	r15, r30
					}
					else if( BTN_DOWN)	// display previous
					{
						// cycle if needed
						if( i > 0) i--;
						else i = num_sensors - 1;
    2854:	77 24       	eor	r7, r7
    2856:	7a 94       	dec	r7
    2858:	73 0c       	add	r7, r3
		case MODE_SENSOR:	// displaying extended sensor info***********************
			{
				i = 0;	// display order
				show_exinfo_lcd( i);

				while( ! BTN_MODE)	// loop until mode button pressed
    285a:	23 b1       	in	r18, 0x03	; 3
    285c:	30 e0       	ldi	r19, 0x00	; 0
    285e:	20 95       	com	r18
    2860:	30 95       	com	r19
    2862:	27 fd       	sbrc	r18, 7
    2864:	54 c0       	rjmp	.+168    	; 0x290e <main+0x98c>
					 * makes the buttons appear unresponsive.  the only
					 * way I can think of to fix this is to handle the
					 * buttons with an ISR, but this adds a level of
					 * complexity I don't want
					 */
					device = g1Wire_order[i];
    2866:	a6 2c       	mov	r10, r6
    2868:	b1 2c       	mov	r11, r1
    286a:	f5 01       	movw	r30, r10
    286c:	e7 51       	subi	r30, 0x17	; 23
    286e:	fd 4f       	sbci	r31, 0xFD	; 253
    2870:	80 80       	ld	r8, Z
					lcd_gotoxy( 10, 0);
    2872:	60 e0       	ldi	r22, 0x00	; 0
    2874:	8a e0       	ldi	r24, 0x0A	; 10
    2876:	0e 94 98 07 	call	0xf30	; 0xf30 <lcd_gotoxy>
					DS18X20_start_meas( &gSensorIDs[device][0]);
    287a:	f8 e0       	ldi	r31, 0x08	; 8
    287c:	8f 9e       	mul	r8, r31
    287e:	40 01       	movw	r8, r0
    2880:	11 24       	eor	r1, r1
    2882:	c4 01       	movw	r24, r8
    2884:	83 50       	subi	r24, 0x03	; 3
    2886:	9d 4f       	sbci	r25, 0xFD	; 253
    2888:	4c 01       	movw	r8, r24
    288a:	0e 94 43 06 	call	0xc86	; 0xc86 <DS18X20_start_meas>
					sprintf( gBuffer, "0x%04x", DS18X20_get_meas( &gSensorIDs[device][0]));
    288e:	c4 01       	movw	r24, r8
    2890:	0e 94 53 06 	call	0xca6	; 0xca6 <DS18X20_get_meas>
    2894:	9f 93       	push	r25
    2896:	8f 93       	push	r24
    2898:	ff 92       	push	r15
    289a:	ef 92       	push	r14
    289c:	df 93       	push	r29
    289e:	cf 93       	push	r28
    28a0:	0e 94 58 19 	call	0x32b0	; 0x32b0 <sprintf>
					lcd_puts( gBuffer);
    28a4:	8c ea       	ldi	r24, 0xAC	; 172
    28a6:	92 e0       	ldi	r25, 0x02	; 2
    28a8:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <lcd_puts>

					if( BTN_UP)	// display next
    28ac:	89 b1       	in	r24, 0x09	; 9
    28ae:	90 e0       	ldi	r25, 0x00	; 0
    28b0:	80 95       	com	r24
    28b2:	90 95       	com	r25
    28b4:	0f 90       	pop	r0
    28b6:	0f 90       	pop	r0
    28b8:	0f 90       	pop	r0
    28ba:	0f 90       	pop	r0
    28bc:	0f 90       	pop	r0
    28be:	0f 90       	pop	r0
    28c0:	82 ff       	sbrs	r24, 2
    28c2:	10 c0       	rjmp	.+32     	; 0x28e4 <main+0x962>
					{
						// cycle if needed
						if( i < num_sensors - 1) i++;
    28c4:	a4 14       	cp	r10, r4
    28c6:	b5 04       	cpc	r11, r5
    28c8:	14 f4       	brge	.+4      	; 0x28ce <main+0x94c>
    28ca:	63 94       	inc	r6
    28cc:	01 c0       	rjmp	.+2      	; 0x28d0 <main+0x94e>
						else i = 0;
    28ce:	61 2c       	mov	r6, r1

						show_exinfo_lcd( i);
    28d0:	86 2d       	mov	r24, r6
    28d2:	0e 94 af 05 	call	0xb5e	; 0xb5e <show_exinfo_lcd>
						while( BTN_UP);	// wait until switch released
    28d6:	89 b1       	in	r24, 0x09	; 9
    28d8:	90 e0       	ldi	r25, 0x00	; 0
    28da:	80 95       	com	r24
    28dc:	90 95       	com	r25
    28de:	82 fd       	sbrc	r24, 2
    28e0:	fa cf       	rjmp	.-12     	; 0x28d6 <main+0x954>
    28e2:	bb cf       	rjmp	.-138    	; 0x285a <main+0x8d8>
					}
					else if( BTN_DOWN)	// display previous
    28e4:	89 b1       	in	r24, 0x09	; 9
    28e6:	90 e0       	ldi	r25, 0x00	; 0
    28e8:	80 95       	com	r24
    28ea:	90 95       	com	r25
    28ec:	83 ff       	sbrs	r24, 3
    28ee:	b5 cf       	rjmp	.-150    	; 0x285a <main+0x8d8>
					{
						// cycle if needed
						if( i > 0) i--;
    28f0:	66 20       	and	r6, r6
    28f2:	11 f0       	breq	.+4      	; 0x28f8 <main+0x976>
    28f4:	6a 94       	dec	r6
    28f6:	01 c0       	rjmp	.+2      	; 0x28fa <main+0x978>
						else i = num_sensors - 1;
    28f8:	67 2c       	mov	r6, r7
						show_exinfo_lcd( i);
    28fa:	86 2d       	mov	r24, r6
    28fc:	0e 94 af 05 	call	0xb5e	; 0xb5e <show_exinfo_lcd>
						while( BTN_DOWN);	// wait until switch released
    2900:	89 b1       	in	r24, 0x09	; 9
    2902:	90 e0       	ldi	r25, 0x00	; 0
    2904:	80 95       	com	r24
    2906:	90 95       	com	r25
    2908:	83 fd       	sbrc	r24, 3
    290a:	fa cf       	rjmp	.-12     	; 0x2900 <main+0x97e>
    290c:	a6 cf       	rjmp	.-180    	; 0x285a <main+0x8d8>
					}
				}
				lcd_clrscr();	// acknowledge the mode button press
    290e:	0e 94 ab 07 	call	0xf56	; 0xf56 <lcd_clrscr>
				while( BTN_MODE);	// wait until switch released
    2912:	83 b1       	in	r24, 0x03	; 3
    2914:	90 e0       	ldi	r25, 0x00	; 0
    2916:	80 95       	com	r24
    2918:	90 95       	com	r25
    291a:	87 fd       	sbrc	r24, 7
    291c:	fa cf       	rjmp	.-12     	; 0x2912 <main+0x990>
				mode = MODE_BACKLIGHT;
				break;	// next case
			}
		case MODE_BACKLIGHT:	// displaying interval change   *********************
			{
				lcd_clrscr();
    291e:	0e 94 ab 07 	call	0xf56	; 0xf56 <lcd_clrscr>
				lcd_puts_P( "LCD brightness\n");
    2922:	85 ec       	ldi	r24, 0xC5	; 197
    2924:	91 e0       	ldi	r25, 0x01	; 1
    2926:	0e 94 dd 07 	call	0xfba	; 0xfba <lcd_puts_p>
				sprintf( gBuffer, "%4i", gBacklight);
    292a:	80 91 ab 02 	lds	r24, 0x02AB
    292e:	1f 92       	push	r1
    2930:	8f 93       	push	r24
    2932:	1f 93       	push	r17
    2934:	0f 93       	push	r16
    2936:	df 93       	push	r29
    2938:	cf 93       	push	r28
    293a:	0e 94 58 19 	call	0x32b0	; 0x32b0 <sprintf>
				lcd_puts( gBuffer);
    293e:	8c ea       	ldi	r24, 0xAC	; 172
    2940:	92 e0       	ldi	r25, 0x02	; 2
    2942:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <lcd_puts>

				// change PWM value to modify on-time of LED backlight
				while( ! BTN_MODE)
    2946:	0f 90       	pop	r0
    2948:	0f 90       	pop	r0
    294a:	0f 90       	pop	r0
    294c:	0f 90       	pop	r0
    294e:	0f 90       	pop	r0
    2950:	0f 90       	pop	r0
    2952:	83 b1       	in	r24, 0x03	; 3
    2954:	90 e0       	ldi	r25, 0x00	; 0
    2956:	80 95       	com	r24
    2958:	90 95       	com	r25
    295a:	87 fd       	sbrc	r24, 7
    295c:	5a c0       	rjmp	.+180    	; 0x2a12 <main+0xa90>
				{
					while( BTN_UP)	// increase interval
    295e:	89 b1       	in	r24, 0x09	; 9
    2960:	90 e0       	ldi	r25, 0x00	; 0
    2962:	80 95       	com	r24
    2964:	90 95       	com	r25
    2966:	82 ff       	sbrs	r24, 2
    2968:	4d c0       	rjmp	.+154    	; 0x2a04 <main+0xa82>
					{
						if( gBacklight < 255)
    296a:	80 91 ab 02 	lds	r24, 0x02AB
    296e:	8f 3f       	cpi	r24, 0xFF	; 255
    2970:	e1 f0       	breq	.+56     	; 0x29aa <main+0xa28>
						{
							PWM_OUT = ++gBacklight;
    2972:	8f 5f       	subi	r24, 0xFF	; 255
    2974:	80 93 ab 02 	sts	0x02AB, r24
    2978:	88 bd       	out	0x28, r24	; 40
							lcd_gotoxy( 0,1);
    297a:	61 e0       	ldi	r22, 0x01	; 1
    297c:	80 e0       	ldi	r24, 0x00	; 0
    297e:	0e 94 98 07 	call	0xf30	; 0xf30 <lcd_gotoxy>
							sprintf( gBuffer, "%4i", gBacklight);
    2982:	80 91 ab 02 	lds	r24, 0x02AB
    2986:	1f 92       	push	r1
    2988:	8f 93       	push	r24
    298a:	1f 93       	push	r17
    298c:	0f 93       	push	r16
    298e:	df 93       	push	r29
    2990:	cf 93       	push	r28
    2992:	0e 94 58 19 	call	0x32b0	; 0x32b0 <sprintf>
							lcd_puts( gBuffer);
    2996:	8c ea       	ldi	r24, 0xAC	; 172
    2998:	92 e0       	ldi	r25, 0x02	; 2
    299a:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <lcd_puts>
    299e:	0f 90       	pop	r0
    29a0:	0f 90       	pop	r0
    29a2:	0f 90       	pop	r0
    29a4:	0f 90       	pop	r0
    29a6:	0f 90       	pop	r0
    29a8:	0f 90       	pop	r0
						}
						// allow time to release button but still have fast cycle rate
						delay_ms( 25);
    29aa:	6d e2       	ldi	r22, 0x2D	; 45
    29ac:	72 e8       	ldi	r23, 0x82	; 130
    29ae:	80 e0       	ldi	r24, 0x00	; 0
    29b0:	90 e0       	ldi	r25, 0x00	; 0
    29b2:	0e 94 36 06 	call	0xc6c	; 0xc6c <delayloop32>
    29b6:	d3 cf       	rjmp	.-90     	; 0x295e <main+0x9dc>
					}
					while( BTN_DOWN)	// decrease interval
					{
						if( gBacklight > 0)
    29b8:	80 91 ab 02 	lds	r24, 0x02AB
    29bc:	88 23       	and	r24, r24
    29be:	e1 f0       	breq	.+56     	; 0x29f8 <main+0xa76>
						{
							PWM_OUT = --gBacklight;
    29c0:	81 50       	subi	r24, 0x01	; 1
    29c2:	80 93 ab 02 	sts	0x02AB, r24
    29c6:	88 bd       	out	0x28, r24	; 40
							lcd_gotoxy( 0,1);
    29c8:	61 e0       	ldi	r22, 0x01	; 1
    29ca:	80 e0       	ldi	r24, 0x00	; 0
    29cc:	0e 94 98 07 	call	0xf30	; 0xf30 <lcd_gotoxy>
							sprintf( gBuffer, "%4i", gBacklight);
    29d0:	80 91 ab 02 	lds	r24, 0x02AB
    29d4:	1f 92       	push	r1
    29d6:	8f 93       	push	r24
    29d8:	1f 93       	push	r17
    29da:	0f 93       	push	r16
    29dc:	df 93       	push	r29
    29de:	cf 93       	push	r28
    29e0:	0e 94 58 19 	call	0x32b0	; 0x32b0 <sprintf>
							lcd_puts( gBuffer);
    29e4:	8c ea       	ldi	r24, 0xAC	; 172
    29e6:	92 e0       	ldi	r25, 0x02	; 2
    29e8:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <lcd_puts>
    29ec:	0f 90       	pop	r0
    29ee:	0f 90       	pop	r0
    29f0:	0f 90       	pop	r0
    29f2:	0f 90       	pop	r0
    29f4:	0f 90       	pop	r0
    29f6:	0f 90       	pop	r0
						}
						// allow time to release button but still have fast cycle rate
						delay_ms( 25);
    29f8:	6d e2       	ldi	r22, 0x2D	; 45
    29fa:	72 e8       	ldi	r23, 0x82	; 130
    29fc:	80 e0       	ldi	r24, 0x00	; 0
    29fe:	90 e0       	ldi	r25, 0x00	; 0
    2a00:	0e 94 36 06 	call	0xc6c	; 0xc6c <delayloop32>
							lcd_puts( gBuffer);
						}
						// allow time to release button but still have fast cycle rate
						delay_ms( 25);
					}
					while( BTN_DOWN)	// decrease interval
    2a04:	89 b1       	in	r24, 0x09	; 9
    2a06:	90 e0       	ldi	r25, 0x00	; 0
    2a08:	80 95       	com	r24
    2a0a:	90 95       	com	r25
    2a0c:	83 fd       	sbrc	r24, 3
    2a0e:	d4 cf       	rjmp	.-88     	; 0x29b8 <main+0xa36>
    2a10:	a0 cf       	rjmp	.-192    	; 0x2952 <main+0x9d0>
						// allow time to release button but still have fast cycle rate
						delay_ms( 25);
					}
				}
				//mode = MODE_SHOW_DATE;
				eeprom_write_byte( &nvBacklight, gBacklight);	// save the persistant value
    2a12:	60 91 ab 02 	lds	r22, 0x02AB
    2a16:	89 e4       	ldi	r24, 0x49	; 73
    2a18:	90 e0       	ldi	r25, 0x00	; 0
    2a1a:	0e 94 74 1b 	call	0x36e8	; 0x36e8 <__eewr_byte_m168>
				lcd_clrscr();	// ack button press
    2a1e:	0e 94 ab 07 	call	0xf56	; 0xf56 <lcd_clrscr>
				while( BTN_MODE);	// wait until switch released
    2a22:	83 b1       	in	r24, 0x03	; 3
    2a24:	90 e0       	ldi	r25, 0x00	; 0
    2a26:	80 95       	com	r24
    2a28:	90 95       	com	r25
    2a2a:	87 fd       	sbrc	r24, 7
    2a2c:	fa cf       	rjmp	.-12     	; 0x2a22 <main+0xaa0>
    2a2e:	a2 cb       	rjmp	.-2236   	; 0x2174 <main+0x1f2>

00002a30 <__mulsi3>:
    2a30:	db 01       	movw	r26, r22
    2a32:	8f 93       	push	r24
    2a34:	9f 93       	push	r25
    2a36:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <__muluhisi3>
    2a3a:	bf 91       	pop	r27
    2a3c:	af 91       	pop	r26
    2a3e:	a2 9f       	mul	r26, r18
    2a40:	80 0d       	add	r24, r0
    2a42:	91 1d       	adc	r25, r1
    2a44:	a3 9f       	mul	r26, r19
    2a46:	90 0d       	add	r25, r0
    2a48:	b2 9f       	mul	r27, r18
    2a4a:	90 0d       	add	r25, r0
    2a4c:	11 24       	eor	r1, r1
    2a4e:	08 95       	ret

00002a50 <__divmodhi4>:
    2a50:	97 fb       	bst	r25, 7
    2a52:	07 2e       	mov	r0, r23
    2a54:	16 f4       	brtc	.+4      	; 0x2a5a <__divmodhi4+0xa>
    2a56:	00 94       	com	r0
    2a58:	07 d0       	rcall	.+14     	; 0x2a68 <__divmodhi4_neg1>
    2a5a:	77 fd       	sbrc	r23, 7
    2a5c:	09 d0       	rcall	.+18     	; 0x2a70 <__divmodhi4_neg2>
    2a5e:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <__udivmodhi4>
    2a62:	07 fc       	sbrc	r0, 7
    2a64:	05 d0       	rcall	.+10     	; 0x2a70 <__divmodhi4_neg2>
    2a66:	3e f4       	brtc	.+14     	; 0x2a76 <__divmodhi4_exit>

00002a68 <__divmodhi4_neg1>:
    2a68:	90 95       	com	r25
    2a6a:	81 95       	neg	r24
    2a6c:	9f 4f       	sbci	r25, 0xFF	; 255
    2a6e:	08 95       	ret

00002a70 <__divmodhi4_neg2>:
    2a70:	70 95       	com	r23
    2a72:	61 95       	neg	r22
    2a74:	7f 4f       	sbci	r23, 0xFF	; 255

00002a76 <__divmodhi4_exit>:
    2a76:	08 95       	ret

00002a78 <__udivmodsi4>:
    2a78:	a1 e2       	ldi	r26, 0x21	; 33
    2a7a:	1a 2e       	mov	r1, r26
    2a7c:	aa 1b       	sub	r26, r26
    2a7e:	bb 1b       	sub	r27, r27
    2a80:	fd 01       	movw	r30, r26
    2a82:	0d c0       	rjmp	.+26     	; 0x2a9e <__udivmodsi4_ep>

00002a84 <__udivmodsi4_loop>:
    2a84:	aa 1f       	adc	r26, r26
    2a86:	bb 1f       	adc	r27, r27
    2a88:	ee 1f       	adc	r30, r30
    2a8a:	ff 1f       	adc	r31, r31
    2a8c:	a2 17       	cp	r26, r18
    2a8e:	b3 07       	cpc	r27, r19
    2a90:	e4 07       	cpc	r30, r20
    2a92:	f5 07       	cpc	r31, r21
    2a94:	20 f0       	brcs	.+8      	; 0x2a9e <__udivmodsi4_ep>
    2a96:	a2 1b       	sub	r26, r18
    2a98:	b3 0b       	sbc	r27, r19
    2a9a:	e4 0b       	sbc	r30, r20
    2a9c:	f5 0b       	sbc	r31, r21

00002a9e <__udivmodsi4_ep>:
    2a9e:	66 1f       	adc	r22, r22
    2aa0:	77 1f       	adc	r23, r23
    2aa2:	88 1f       	adc	r24, r24
    2aa4:	99 1f       	adc	r25, r25
    2aa6:	1a 94       	dec	r1
    2aa8:	69 f7       	brne	.-38     	; 0x2a84 <__udivmodsi4_loop>
    2aaa:	60 95       	com	r22
    2aac:	70 95       	com	r23
    2aae:	80 95       	com	r24
    2ab0:	90 95       	com	r25
    2ab2:	9b 01       	movw	r18, r22
    2ab4:	ac 01       	movw	r20, r24
    2ab6:	bd 01       	movw	r22, r26
    2ab8:	cf 01       	movw	r24, r30
    2aba:	08 95       	ret

00002abc <__divmodsi4>:
    2abc:	05 2e       	mov	r0, r21
    2abe:	97 fb       	bst	r25, 7
    2ac0:	1e f4       	brtc	.+6      	; 0x2ac8 <__divmodsi4+0xc>
    2ac2:	00 94       	com	r0
    2ac4:	0e 94 75 15 	call	0x2aea	; 0x2aea <__negsi2>
    2ac8:	57 fd       	sbrc	r21, 7
    2aca:	07 d0       	rcall	.+14     	; 0x2ada <__divmodsi4_neg2>
    2acc:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <__udivmodsi4>
    2ad0:	07 fc       	sbrc	r0, 7
    2ad2:	03 d0       	rcall	.+6      	; 0x2ada <__divmodsi4_neg2>
    2ad4:	4e f4       	brtc	.+18     	; 0x2ae8 <__divmodsi4_exit>
    2ad6:	0c 94 75 15 	jmp	0x2aea	; 0x2aea <__negsi2>

00002ada <__divmodsi4_neg2>:
    2ada:	50 95       	com	r21
    2adc:	40 95       	com	r20
    2ade:	30 95       	com	r19
    2ae0:	21 95       	neg	r18
    2ae2:	3f 4f       	sbci	r19, 0xFF	; 255
    2ae4:	4f 4f       	sbci	r20, 0xFF	; 255
    2ae6:	5f 4f       	sbci	r21, 0xFF	; 255

00002ae8 <__divmodsi4_exit>:
    2ae8:	08 95       	ret

00002aea <__negsi2>:
    2aea:	90 95       	com	r25
    2aec:	80 95       	com	r24
    2aee:	70 95       	com	r23
    2af0:	61 95       	neg	r22
    2af2:	7f 4f       	sbci	r23, 0xFF	; 255
    2af4:	8f 4f       	sbci	r24, 0xFF	; 255
    2af6:	9f 4f       	sbci	r25, 0xFF	; 255
    2af8:	08 95       	ret

00002afa <__umulhisi3>:
    2afa:	a2 9f       	mul	r26, r18
    2afc:	b0 01       	movw	r22, r0
    2afe:	b3 9f       	mul	r27, r19
    2b00:	c0 01       	movw	r24, r0
    2b02:	a3 9f       	mul	r26, r19
    2b04:	70 0d       	add	r23, r0
    2b06:	81 1d       	adc	r24, r1
    2b08:	11 24       	eor	r1, r1
    2b0a:	91 1d       	adc	r25, r1
    2b0c:	b2 9f       	mul	r27, r18
    2b0e:	70 0d       	add	r23, r0
    2b10:	81 1d       	adc	r24, r1
    2b12:	11 24       	eor	r1, r1
    2b14:	91 1d       	adc	r25, r1
    2b16:	08 95       	ret

00002b18 <__muluhisi3>:
    2b18:	0e 94 7d 15 	call	0x2afa	; 0x2afa <__umulhisi3>
    2b1c:	a5 9f       	mul	r26, r21
    2b1e:	90 0d       	add	r25, r0
    2b20:	b4 9f       	mul	r27, r20
    2b22:	90 0d       	add	r25, r0
    2b24:	a4 9f       	mul	r26, r20
    2b26:	80 0d       	add	r24, r0
    2b28:	91 1d       	adc	r25, r1
    2b2a:	11 24       	eor	r1, r1
    2b2c:	08 95       	ret

00002b2e <__mulshisi3>:
    2b2e:	b7 ff       	sbrs	r27, 7
    2b30:	0c 94 8c 15 	jmp	0x2b18	; 0x2b18 <__muluhisi3>

00002b34 <__mulohisi3>:
    2b34:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <__muluhisi3>
    2b38:	82 1b       	sub	r24, r18
    2b3a:	93 0b       	sbc	r25, r19
    2b3c:	08 95       	ret

00002b3e <__udivmodhi4>:
    2b3e:	aa 1b       	sub	r26, r26
    2b40:	bb 1b       	sub	r27, r27
    2b42:	51 e1       	ldi	r21, 0x11	; 17
    2b44:	07 c0       	rjmp	.+14     	; 0x2b54 <__udivmodhi4_ep>

00002b46 <__udivmodhi4_loop>:
    2b46:	aa 1f       	adc	r26, r26
    2b48:	bb 1f       	adc	r27, r27
    2b4a:	a6 17       	cp	r26, r22
    2b4c:	b7 07       	cpc	r27, r23
    2b4e:	10 f0       	brcs	.+4      	; 0x2b54 <__udivmodhi4_ep>
    2b50:	a6 1b       	sub	r26, r22
    2b52:	b7 0b       	sbc	r27, r23

00002b54 <__udivmodhi4_ep>:
    2b54:	88 1f       	adc	r24, r24
    2b56:	99 1f       	adc	r25, r25
    2b58:	5a 95       	dec	r21
    2b5a:	a9 f7       	brne	.-22     	; 0x2b46 <__udivmodhi4_loop>
    2b5c:	80 95       	com	r24
    2b5e:	90 95       	com	r25
    2b60:	bc 01       	movw	r22, r24
    2b62:	cd 01       	movw	r24, r26
    2b64:	08 95       	ret

00002b66 <__subsf3>:
    2b66:	50 58       	subi	r21, 0x80	; 128

00002b68 <__addsf3>:
    2b68:	bb 27       	eor	r27, r27
    2b6a:	aa 27       	eor	r26, r26
    2b6c:	0e d0       	rcall	.+28     	; 0x2b8a <__addsf3x>
    2b6e:	1c c1       	rjmp	.+568    	; 0x2da8 <__fp_round>
    2b70:	0d d1       	rcall	.+538    	; 0x2d8c <__fp_pscA>
    2b72:	30 f0       	brcs	.+12     	; 0x2b80 <__addsf3+0x18>
    2b74:	12 d1       	rcall	.+548    	; 0x2d9a <__fp_pscB>
    2b76:	20 f0       	brcs	.+8      	; 0x2b80 <__addsf3+0x18>
    2b78:	31 f4       	brne	.+12     	; 0x2b86 <__addsf3+0x1e>
    2b7a:	9f 3f       	cpi	r25, 0xFF	; 255
    2b7c:	11 f4       	brne	.+4      	; 0x2b82 <__addsf3+0x1a>
    2b7e:	1e f4       	brtc	.+6      	; 0x2b86 <__addsf3+0x1e>
    2b80:	02 c1       	rjmp	.+516    	; 0x2d86 <__fp_nan>
    2b82:	0e f4       	brtc	.+2      	; 0x2b86 <__addsf3+0x1e>
    2b84:	e0 95       	com	r30
    2b86:	e7 fb       	bst	r30, 7
    2b88:	f8 c0       	rjmp	.+496    	; 0x2d7a <__fp_inf>

00002b8a <__addsf3x>:
    2b8a:	e9 2f       	mov	r30, r25
    2b8c:	1e d1       	rcall	.+572    	; 0x2dca <__fp_split3>
    2b8e:	80 f3       	brcs	.-32     	; 0x2b70 <__addsf3+0x8>
    2b90:	ba 17       	cp	r27, r26
    2b92:	62 07       	cpc	r22, r18
    2b94:	73 07       	cpc	r23, r19
    2b96:	84 07       	cpc	r24, r20
    2b98:	95 07       	cpc	r25, r21
    2b9a:	18 f0       	brcs	.+6      	; 0x2ba2 <__addsf3x+0x18>
    2b9c:	71 f4       	brne	.+28     	; 0x2bba <__addsf3x+0x30>
    2b9e:	9e f5       	brtc	.+102    	; 0x2c06 <__addsf3x+0x7c>
    2ba0:	36 c1       	rjmp	.+620    	; 0x2e0e <__fp_zero>
    2ba2:	0e f4       	brtc	.+2      	; 0x2ba6 <__addsf3x+0x1c>
    2ba4:	e0 95       	com	r30
    2ba6:	0b 2e       	mov	r0, r27
    2ba8:	ba 2f       	mov	r27, r26
    2baa:	a0 2d       	mov	r26, r0
    2bac:	0b 01       	movw	r0, r22
    2bae:	b9 01       	movw	r22, r18
    2bb0:	90 01       	movw	r18, r0
    2bb2:	0c 01       	movw	r0, r24
    2bb4:	ca 01       	movw	r24, r20
    2bb6:	a0 01       	movw	r20, r0
    2bb8:	11 24       	eor	r1, r1
    2bba:	ff 27       	eor	r31, r31
    2bbc:	59 1b       	sub	r21, r25
    2bbe:	99 f0       	breq	.+38     	; 0x2be6 <__addsf3x+0x5c>
    2bc0:	59 3f       	cpi	r21, 0xF9	; 249
    2bc2:	50 f4       	brcc	.+20     	; 0x2bd8 <__addsf3x+0x4e>
    2bc4:	50 3e       	cpi	r21, 0xE0	; 224
    2bc6:	68 f1       	brcs	.+90     	; 0x2c22 <__addsf3x+0x98>
    2bc8:	1a 16       	cp	r1, r26
    2bca:	f0 40       	sbci	r31, 0x00	; 0
    2bcc:	a2 2f       	mov	r26, r18
    2bce:	23 2f       	mov	r18, r19
    2bd0:	34 2f       	mov	r19, r20
    2bd2:	44 27       	eor	r20, r20
    2bd4:	58 5f       	subi	r21, 0xF8	; 248
    2bd6:	f3 cf       	rjmp	.-26     	; 0x2bbe <__addsf3x+0x34>
    2bd8:	46 95       	lsr	r20
    2bda:	37 95       	ror	r19
    2bdc:	27 95       	ror	r18
    2bde:	a7 95       	ror	r26
    2be0:	f0 40       	sbci	r31, 0x00	; 0
    2be2:	53 95       	inc	r21
    2be4:	c9 f7       	brne	.-14     	; 0x2bd8 <__addsf3x+0x4e>
    2be6:	7e f4       	brtc	.+30     	; 0x2c06 <__addsf3x+0x7c>
    2be8:	1f 16       	cp	r1, r31
    2bea:	ba 0b       	sbc	r27, r26
    2bec:	62 0b       	sbc	r22, r18
    2bee:	73 0b       	sbc	r23, r19
    2bf0:	84 0b       	sbc	r24, r20
    2bf2:	ba f0       	brmi	.+46     	; 0x2c22 <__addsf3x+0x98>
    2bf4:	91 50       	subi	r25, 0x01	; 1
    2bf6:	a1 f0       	breq	.+40     	; 0x2c20 <__addsf3x+0x96>
    2bf8:	ff 0f       	add	r31, r31
    2bfa:	bb 1f       	adc	r27, r27
    2bfc:	66 1f       	adc	r22, r22
    2bfe:	77 1f       	adc	r23, r23
    2c00:	88 1f       	adc	r24, r24
    2c02:	c2 f7       	brpl	.-16     	; 0x2bf4 <__addsf3x+0x6a>
    2c04:	0e c0       	rjmp	.+28     	; 0x2c22 <__addsf3x+0x98>
    2c06:	ba 0f       	add	r27, r26
    2c08:	62 1f       	adc	r22, r18
    2c0a:	73 1f       	adc	r23, r19
    2c0c:	84 1f       	adc	r24, r20
    2c0e:	48 f4       	brcc	.+18     	; 0x2c22 <__addsf3x+0x98>
    2c10:	87 95       	ror	r24
    2c12:	77 95       	ror	r23
    2c14:	67 95       	ror	r22
    2c16:	b7 95       	ror	r27
    2c18:	f7 95       	ror	r31
    2c1a:	9e 3f       	cpi	r25, 0xFE	; 254
    2c1c:	08 f0       	brcs	.+2      	; 0x2c20 <__addsf3x+0x96>
    2c1e:	b3 cf       	rjmp	.-154    	; 0x2b86 <__addsf3+0x1e>
    2c20:	93 95       	inc	r25
    2c22:	88 0f       	add	r24, r24
    2c24:	08 f0       	brcs	.+2      	; 0x2c28 <__addsf3x+0x9e>
    2c26:	99 27       	eor	r25, r25
    2c28:	ee 0f       	add	r30, r30
    2c2a:	97 95       	ror	r25
    2c2c:	87 95       	ror	r24
    2c2e:	08 95       	ret

00002c30 <__divsf3>:
    2c30:	0c d0       	rcall	.+24     	; 0x2c4a <__divsf3x>
    2c32:	ba c0       	rjmp	.+372    	; 0x2da8 <__fp_round>
    2c34:	b2 d0       	rcall	.+356    	; 0x2d9a <__fp_pscB>
    2c36:	40 f0       	brcs	.+16     	; 0x2c48 <__divsf3+0x18>
    2c38:	a9 d0       	rcall	.+338    	; 0x2d8c <__fp_pscA>
    2c3a:	30 f0       	brcs	.+12     	; 0x2c48 <__divsf3+0x18>
    2c3c:	21 f4       	brne	.+8      	; 0x2c46 <__divsf3+0x16>
    2c3e:	5f 3f       	cpi	r21, 0xFF	; 255
    2c40:	19 f0       	breq	.+6      	; 0x2c48 <__divsf3+0x18>
    2c42:	9b c0       	rjmp	.+310    	; 0x2d7a <__fp_inf>
    2c44:	51 11       	cpse	r21, r1
    2c46:	e4 c0       	rjmp	.+456    	; 0x2e10 <__fp_szero>
    2c48:	9e c0       	rjmp	.+316    	; 0x2d86 <__fp_nan>

00002c4a <__divsf3x>:
    2c4a:	bf d0       	rcall	.+382    	; 0x2dca <__fp_split3>
    2c4c:	98 f3       	brcs	.-26     	; 0x2c34 <__divsf3+0x4>

00002c4e <__divsf3_pse>:
    2c4e:	99 23       	and	r25, r25
    2c50:	c9 f3       	breq	.-14     	; 0x2c44 <__divsf3+0x14>
    2c52:	55 23       	and	r21, r21
    2c54:	b1 f3       	breq	.-20     	; 0x2c42 <__divsf3+0x12>
    2c56:	95 1b       	sub	r25, r21
    2c58:	55 0b       	sbc	r21, r21
    2c5a:	bb 27       	eor	r27, r27
    2c5c:	aa 27       	eor	r26, r26
    2c5e:	62 17       	cp	r22, r18
    2c60:	73 07       	cpc	r23, r19
    2c62:	84 07       	cpc	r24, r20
    2c64:	38 f0       	brcs	.+14     	; 0x2c74 <__divsf3_pse+0x26>
    2c66:	9f 5f       	subi	r25, 0xFF	; 255
    2c68:	5f 4f       	sbci	r21, 0xFF	; 255
    2c6a:	22 0f       	add	r18, r18
    2c6c:	33 1f       	adc	r19, r19
    2c6e:	44 1f       	adc	r20, r20
    2c70:	aa 1f       	adc	r26, r26
    2c72:	a9 f3       	breq	.-22     	; 0x2c5e <__divsf3_pse+0x10>
    2c74:	33 d0       	rcall	.+102    	; 0x2cdc <__divsf3_pse+0x8e>
    2c76:	0e 2e       	mov	r0, r30
    2c78:	3a f0       	brmi	.+14     	; 0x2c88 <__divsf3_pse+0x3a>
    2c7a:	e0 e8       	ldi	r30, 0x80	; 128
    2c7c:	30 d0       	rcall	.+96     	; 0x2cde <__divsf3_pse+0x90>
    2c7e:	91 50       	subi	r25, 0x01	; 1
    2c80:	50 40       	sbci	r21, 0x00	; 0
    2c82:	e6 95       	lsr	r30
    2c84:	00 1c       	adc	r0, r0
    2c86:	ca f7       	brpl	.-14     	; 0x2c7a <__divsf3_pse+0x2c>
    2c88:	29 d0       	rcall	.+82     	; 0x2cdc <__divsf3_pse+0x8e>
    2c8a:	fe 2f       	mov	r31, r30
    2c8c:	27 d0       	rcall	.+78     	; 0x2cdc <__divsf3_pse+0x8e>
    2c8e:	66 0f       	add	r22, r22
    2c90:	77 1f       	adc	r23, r23
    2c92:	88 1f       	adc	r24, r24
    2c94:	bb 1f       	adc	r27, r27
    2c96:	26 17       	cp	r18, r22
    2c98:	37 07       	cpc	r19, r23
    2c9a:	48 07       	cpc	r20, r24
    2c9c:	ab 07       	cpc	r26, r27
    2c9e:	b0 e8       	ldi	r27, 0x80	; 128
    2ca0:	09 f0       	breq	.+2      	; 0x2ca4 <__divsf3_pse+0x56>
    2ca2:	bb 0b       	sbc	r27, r27
    2ca4:	80 2d       	mov	r24, r0
    2ca6:	bf 01       	movw	r22, r30
    2ca8:	ff 27       	eor	r31, r31
    2caa:	93 58       	subi	r25, 0x83	; 131
    2cac:	5f 4f       	sbci	r21, 0xFF	; 255
    2cae:	2a f0       	brmi	.+10     	; 0x2cba <__divsf3_pse+0x6c>
    2cb0:	9e 3f       	cpi	r25, 0xFE	; 254
    2cb2:	51 05       	cpc	r21, r1
    2cb4:	68 f0       	brcs	.+26     	; 0x2cd0 <__divsf3_pse+0x82>
    2cb6:	61 c0       	rjmp	.+194    	; 0x2d7a <__fp_inf>
    2cb8:	ab c0       	rjmp	.+342    	; 0x2e10 <__fp_szero>
    2cba:	5f 3f       	cpi	r21, 0xFF	; 255
    2cbc:	ec f3       	brlt	.-6      	; 0x2cb8 <__divsf3_pse+0x6a>
    2cbe:	98 3e       	cpi	r25, 0xE8	; 232
    2cc0:	dc f3       	brlt	.-10     	; 0x2cb8 <__divsf3_pse+0x6a>
    2cc2:	86 95       	lsr	r24
    2cc4:	77 95       	ror	r23
    2cc6:	67 95       	ror	r22
    2cc8:	b7 95       	ror	r27
    2cca:	f7 95       	ror	r31
    2ccc:	9f 5f       	subi	r25, 0xFF	; 255
    2cce:	c9 f7       	brne	.-14     	; 0x2cc2 <__divsf3_pse+0x74>
    2cd0:	88 0f       	add	r24, r24
    2cd2:	91 1d       	adc	r25, r1
    2cd4:	96 95       	lsr	r25
    2cd6:	87 95       	ror	r24
    2cd8:	97 f9       	bld	r25, 7
    2cda:	08 95       	ret
    2cdc:	e1 e0       	ldi	r30, 0x01	; 1
    2cde:	66 0f       	add	r22, r22
    2ce0:	77 1f       	adc	r23, r23
    2ce2:	88 1f       	adc	r24, r24
    2ce4:	bb 1f       	adc	r27, r27
    2ce6:	62 17       	cp	r22, r18
    2ce8:	73 07       	cpc	r23, r19
    2cea:	84 07       	cpc	r24, r20
    2cec:	ba 07       	cpc	r27, r26
    2cee:	20 f0       	brcs	.+8      	; 0x2cf8 <__divsf3_pse+0xaa>
    2cf0:	62 1b       	sub	r22, r18
    2cf2:	73 0b       	sbc	r23, r19
    2cf4:	84 0b       	sbc	r24, r20
    2cf6:	ba 0b       	sbc	r27, r26
    2cf8:	ee 1f       	adc	r30, r30
    2cfa:	88 f7       	brcc	.-30     	; 0x2cde <__divsf3_pse+0x90>
    2cfc:	e0 95       	com	r30
    2cfe:	08 95       	ret

00002d00 <__floatunsisf>:
    2d00:	e8 94       	clt
    2d02:	09 c0       	rjmp	.+18     	; 0x2d16 <__floatsisf+0x12>

00002d04 <__floatsisf>:
    2d04:	97 fb       	bst	r25, 7
    2d06:	3e f4       	brtc	.+14     	; 0x2d16 <__floatsisf+0x12>
    2d08:	90 95       	com	r25
    2d0a:	80 95       	com	r24
    2d0c:	70 95       	com	r23
    2d0e:	61 95       	neg	r22
    2d10:	7f 4f       	sbci	r23, 0xFF	; 255
    2d12:	8f 4f       	sbci	r24, 0xFF	; 255
    2d14:	9f 4f       	sbci	r25, 0xFF	; 255
    2d16:	99 23       	and	r25, r25
    2d18:	a9 f0       	breq	.+42     	; 0x2d44 <__floatsisf+0x40>
    2d1a:	f9 2f       	mov	r31, r25
    2d1c:	96 e9       	ldi	r25, 0x96	; 150
    2d1e:	bb 27       	eor	r27, r27
    2d20:	93 95       	inc	r25
    2d22:	f6 95       	lsr	r31
    2d24:	87 95       	ror	r24
    2d26:	77 95       	ror	r23
    2d28:	67 95       	ror	r22
    2d2a:	b7 95       	ror	r27
    2d2c:	f1 11       	cpse	r31, r1
    2d2e:	f8 cf       	rjmp	.-16     	; 0x2d20 <__floatsisf+0x1c>
    2d30:	fa f4       	brpl	.+62     	; 0x2d70 <__floatsisf+0x6c>
    2d32:	bb 0f       	add	r27, r27
    2d34:	11 f4       	brne	.+4      	; 0x2d3a <__floatsisf+0x36>
    2d36:	60 ff       	sbrs	r22, 0
    2d38:	1b c0       	rjmp	.+54     	; 0x2d70 <__floatsisf+0x6c>
    2d3a:	6f 5f       	subi	r22, 0xFF	; 255
    2d3c:	7f 4f       	sbci	r23, 0xFF	; 255
    2d3e:	8f 4f       	sbci	r24, 0xFF	; 255
    2d40:	9f 4f       	sbci	r25, 0xFF	; 255
    2d42:	16 c0       	rjmp	.+44     	; 0x2d70 <__floatsisf+0x6c>
    2d44:	88 23       	and	r24, r24
    2d46:	11 f0       	breq	.+4      	; 0x2d4c <__floatsisf+0x48>
    2d48:	96 e9       	ldi	r25, 0x96	; 150
    2d4a:	11 c0       	rjmp	.+34     	; 0x2d6e <__floatsisf+0x6a>
    2d4c:	77 23       	and	r23, r23
    2d4e:	21 f0       	breq	.+8      	; 0x2d58 <__floatsisf+0x54>
    2d50:	9e e8       	ldi	r25, 0x8E	; 142
    2d52:	87 2f       	mov	r24, r23
    2d54:	76 2f       	mov	r23, r22
    2d56:	05 c0       	rjmp	.+10     	; 0x2d62 <__floatsisf+0x5e>
    2d58:	66 23       	and	r22, r22
    2d5a:	71 f0       	breq	.+28     	; 0x2d78 <__floatsisf+0x74>
    2d5c:	96 e8       	ldi	r25, 0x86	; 134
    2d5e:	86 2f       	mov	r24, r22
    2d60:	70 e0       	ldi	r23, 0x00	; 0
    2d62:	60 e0       	ldi	r22, 0x00	; 0
    2d64:	2a f0       	brmi	.+10     	; 0x2d70 <__floatsisf+0x6c>
    2d66:	9a 95       	dec	r25
    2d68:	66 0f       	add	r22, r22
    2d6a:	77 1f       	adc	r23, r23
    2d6c:	88 1f       	adc	r24, r24
    2d6e:	da f7       	brpl	.-10     	; 0x2d66 <__floatsisf+0x62>
    2d70:	88 0f       	add	r24, r24
    2d72:	96 95       	lsr	r25
    2d74:	87 95       	ror	r24
    2d76:	97 f9       	bld	r25, 7
    2d78:	08 95       	ret

00002d7a <__fp_inf>:
    2d7a:	97 f9       	bld	r25, 7
    2d7c:	9f 67       	ori	r25, 0x7F	; 127
    2d7e:	80 e8       	ldi	r24, 0x80	; 128
    2d80:	70 e0       	ldi	r23, 0x00	; 0
    2d82:	60 e0       	ldi	r22, 0x00	; 0
    2d84:	08 95       	ret

00002d86 <__fp_nan>:
    2d86:	9f ef       	ldi	r25, 0xFF	; 255
    2d88:	80 ec       	ldi	r24, 0xC0	; 192
    2d8a:	08 95       	ret

00002d8c <__fp_pscA>:
    2d8c:	00 24       	eor	r0, r0
    2d8e:	0a 94       	dec	r0
    2d90:	16 16       	cp	r1, r22
    2d92:	17 06       	cpc	r1, r23
    2d94:	18 06       	cpc	r1, r24
    2d96:	09 06       	cpc	r0, r25
    2d98:	08 95       	ret

00002d9a <__fp_pscB>:
    2d9a:	00 24       	eor	r0, r0
    2d9c:	0a 94       	dec	r0
    2d9e:	12 16       	cp	r1, r18
    2da0:	13 06       	cpc	r1, r19
    2da2:	14 06       	cpc	r1, r20
    2da4:	05 06       	cpc	r0, r21
    2da6:	08 95       	ret

00002da8 <__fp_round>:
    2da8:	09 2e       	mov	r0, r25
    2daa:	03 94       	inc	r0
    2dac:	00 0c       	add	r0, r0
    2dae:	11 f4       	brne	.+4      	; 0x2db4 <__fp_round+0xc>
    2db0:	88 23       	and	r24, r24
    2db2:	52 f0       	brmi	.+20     	; 0x2dc8 <__fp_round+0x20>
    2db4:	bb 0f       	add	r27, r27
    2db6:	40 f4       	brcc	.+16     	; 0x2dc8 <__fp_round+0x20>
    2db8:	bf 2b       	or	r27, r31
    2dba:	11 f4       	brne	.+4      	; 0x2dc0 <__fp_round+0x18>
    2dbc:	60 ff       	sbrs	r22, 0
    2dbe:	04 c0       	rjmp	.+8      	; 0x2dc8 <__fp_round+0x20>
    2dc0:	6f 5f       	subi	r22, 0xFF	; 255
    2dc2:	7f 4f       	sbci	r23, 0xFF	; 255
    2dc4:	8f 4f       	sbci	r24, 0xFF	; 255
    2dc6:	9f 4f       	sbci	r25, 0xFF	; 255
    2dc8:	08 95       	ret

00002dca <__fp_split3>:
    2dca:	57 fd       	sbrc	r21, 7
    2dcc:	90 58       	subi	r25, 0x80	; 128
    2dce:	44 0f       	add	r20, r20
    2dd0:	55 1f       	adc	r21, r21
    2dd2:	59 f0       	breq	.+22     	; 0x2dea <__fp_splitA+0x10>
    2dd4:	5f 3f       	cpi	r21, 0xFF	; 255
    2dd6:	71 f0       	breq	.+28     	; 0x2df4 <__fp_splitA+0x1a>
    2dd8:	47 95       	ror	r20

00002dda <__fp_splitA>:
    2dda:	88 0f       	add	r24, r24
    2ddc:	97 fb       	bst	r25, 7
    2dde:	99 1f       	adc	r25, r25
    2de0:	61 f0       	breq	.+24     	; 0x2dfa <__fp_splitA+0x20>
    2de2:	9f 3f       	cpi	r25, 0xFF	; 255
    2de4:	79 f0       	breq	.+30     	; 0x2e04 <__fp_splitA+0x2a>
    2de6:	87 95       	ror	r24
    2de8:	08 95       	ret
    2dea:	12 16       	cp	r1, r18
    2dec:	13 06       	cpc	r1, r19
    2dee:	14 06       	cpc	r1, r20
    2df0:	55 1f       	adc	r21, r21
    2df2:	f2 cf       	rjmp	.-28     	; 0x2dd8 <__fp_split3+0xe>
    2df4:	46 95       	lsr	r20
    2df6:	f1 df       	rcall	.-30     	; 0x2dda <__fp_splitA>
    2df8:	08 c0       	rjmp	.+16     	; 0x2e0a <__fp_splitA+0x30>
    2dfa:	16 16       	cp	r1, r22
    2dfc:	17 06       	cpc	r1, r23
    2dfe:	18 06       	cpc	r1, r24
    2e00:	99 1f       	adc	r25, r25
    2e02:	f1 cf       	rjmp	.-30     	; 0x2de6 <__fp_splitA+0xc>
    2e04:	86 95       	lsr	r24
    2e06:	71 05       	cpc	r23, r1
    2e08:	61 05       	cpc	r22, r1
    2e0a:	08 94       	sec
    2e0c:	08 95       	ret

00002e0e <__fp_zero>:
    2e0e:	e8 94       	clt

00002e10 <__fp_szero>:
    2e10:	bb 27       	eor	r27, r27
    2e12:	66 27       	eor	r22, r22
    2e14:	77 27       	eor	r23, r23
    2e16:	cb 01       	movw	r24, r22
    2e18:	97 f9       	bld	r25, 7
    2e1a:	08 95       	ret

00002e1c <pow>:
    2e1c:	fa 01       	movw	r30, r20
    2e1e:	ee 0f       	add	r30, r30
    2e20:	ff 1f       	adc	r31, r31
    2e22:	30 96       	adiw	r30, 0x00	; 0
    2e24:	21 05       	cpc	r18, r1
    2e26:	31 05       	cpc	r19, r1
    2e28:	99 f1       	breq	.+102    	; 0x2e90 <pow+0x74>
    2e2a:	61 15       	cp	r22, r1
    2e2c:	71 05       	cpc	r23, r1
    2e2e:	61 f4       	brne	.+24     	; 0x2e48 <pow+0x2c>
    2e30:	80 38       	cpi	r24, 0x80	; 128
    2e32:	bf e3       	ldi	r27, 0x3F	; 63
    2e34:	9b 07       	cpc	r25, r27
    2e36:	49 f1       	breq	.+82     	; 0x2e8a <pow+0x6e>
    2e38:	68 94       	set
    2e3a:	90 38       	cpi	r25, 0x80	; 128
    2e3c:	81 05       	cpc	r24, r1
    2e3e:	61 f0       	breq	.+24     	; 0x2e58 <pow+0x3c>
    2e40:	80 38       	cpi	r24, 0x80	; 128
    2e42:	bf ef       	ldi	r27, 0xFF	; 255
    2e44:	9b 07       	cpc	r25, r27
    2e46:	41 f0       	breq	.+16     	; 0x2e58 <pow+0x3c>
    2e48:	99 23       	and	r25, r25
    2e4a:	42 f5       	brpl	.+80     	; 0x2e9c <pow+0x80>
    2e4c:	ff 3f       	cpi	r31, 0xFF	; 255
    2e4e:	e1 05       	cpc	r30, r1
    2e50:	31 05       	cpc	r19, r1
    2e52:	21 05       	cpc	r18, r1
    2e54:	11 f1       	breq	.+68     	; 0x2e9a <pow+0x7e>
    2e56:	e8 94       	clt
    2e58:	08 94       	sec
    2e5a:	e7 95       	ror	r30
    2e5c:	d9 01       	movw	r26, r18
    2e5e:	aa 23       	and	r26, r26
    2e60:	29 f4       	brne	.+10     	; 0x2e6c <pow+0x50>
    2e62:	ab 2f       	mov	r26, r27
    2e64:	be 2f       	mov	r27, r30
    2e66:	f8 5f       	subi	r31, 0xF8	; 248
    2e68:	d0 f3       	brcs	.-12     	; 0x2e5e <pow+0x42>
    2e6a:	10 c0       	rjmp	.+32     	; 0x2e8c <pow+0x70>
    2e6c:	ff 5f       	subi	r31, 0xFF	; 255
    2e6e:	70 f4       	brcc	.+28     	; 0x2e8c <pow+0x70>
    2e70:	a6 95       	lsr	r26
    2e72:	e0 f7       	brcc	.-8      	; 0x2e6c <pow+0x50>
    2e74:	f7 39       	cpi	r31, 0x97	; 151
    2e76:	50 f0       	brcs	.+20     	; 0x2e8c <pow+0x70>
    2e78:	19 f0       	breq	.+6      	; 0x2e80 <pow+0x64>
    2e7a:	ff 3a       	cpi	r31, 0xAF	; 175
    2e7c:	38 f4       	brcc	.+14     	; 0x2e8c <pow+0x70>
    2e7e:	9f 77       	andi	r25, 0x7F	; 127
    2e80:	9f 93       	push	r25
    2e82:	0c d0       	rcall	.+24     	; 0x2e9c <pow+0x80>
    2e84:	0f 90       	pop	r0
    2e86:	07 fc       	sbrc	r0, 7
    2e88:	90 58       	subi	r25, 0x80	; 128
    2e8a:	08 95       	ret
    2e8c:	3e f0       	brts	.+14     	; 0x2e9c <pow+0x80>
    2e8e:	7b cf       	rjmp	.-266    	; 0x2d86 <__fp_nan>
    2e90:	60 e0       	ldi	r22, 0x00	; 0
    2e92:	70 e0       	ldi	r23, 0x00	; 0
    2e94:	80 e8       	ldi	r24, 0x80	; 128
    2e96:	9f e3       	ldi	r25, 0x3F	; 63
    2e98:	08 95       	ret
    2e9a:	4f e7       	ldi	r20, 0x7F	; 127
    2e9c:	9f 77       	andi	r25, 0x7F	; 127
    2e9e:	5f 93       	push	r21
    2ea0:	4f 93       	push	r20
    2ea2:	3f 93       	push	r19
    2ea4:	2f 93       	push	r18
    2ea6:	9e d0       	rcall	.+316    	; 0x2fe4 <log>
    2ea8:	2f 91       	pop	r18
    2eaa:	3f 91       	pop	r19
    2eac:	4f 91       	pop	r20
    2eae:	5f 91       	pop	r21
    2eb0:	0c d1       	rcall	.+536    	; 0x30ca <__mulsf3>
    2eb2:	05 c0       	rjmp	.+10     	; 0x2ebe <exp>
    2eb4:	19 f4       	brne	.+6      	; 0x2ebc <pow+0xa0>
    2eb6:	0e f0       	brts	.+2      	; 0x2eba <pow+0x9e>
    2eb8:	60 cf       	rjmp	.-320    	; 0x2d7a <__fp_inf>
    2eba:	a9 cf       	rjmp	.-174    	; 0x2e0e <__fp_zero>
    2ebc:	64 cf       	rjmp	.-312    	; 0x2d86 <__fp_nan>

00002ebe <exp>:
    2ebe:	8d df       	rcall	.-230    	; 0x2dda <__fp_splitA>
    2ec0:	c8 f3       	brcs	.-14     	; 0x2eb4 <pow+0x98>
    2ec2:	96 38       	cpi	r25, 0x86	; 134
    2ec4:	c0 f7       	brcc	.-16     	; 0x2eb6 <pow+0x9a>
    2ec6:	07 f8       	bld	r0, 7
    2ec8:	0f 92       	push	r0
    2eca:	e8 94       	clt
    2ecc:	2b e3       	ldi	r18, 0x3B	; 59
    2ece:	3a ea       	ldi	r19, 0xAA	; 170
    2ed0:	48 eb       	ldi	r20, 0xB8	; 184
    2ed2:	5f e7       	ldi	r21, 0x7F	; 127
    2ed4:	08 d1       	rcall	.+528    	; 0x30e6 <__mulsf3_pse>
    2ed6:	0f 92       	push	r0
    2ed8:	0f 92       	push	r0
    2eda:	0f 92       	push	r0
    2edc:	4d b7       	in	r20, 0x3d	; 61
    2ede:	5e b7       	in	r21, 0x3e	; 62
    2ee0:	0f 92       	push	r0
    2ee2:	c0 d0       	rcall	.+384    	; 0x3064 <modf>
    2ee4:	e8 e6       	ldi	r30, 0x68	; 104
    2ee6:	f0 e0       	ldi	r31, 0x00	; 0
    2ee8:	16 d0       	rcall	.+44     	; 0x2f16 <__fp_powser>
    2eea:	4f 91       	pop	r20
    2eec:	5f 91       	pop	r21
    2eee:	ef 91       	pop	r30
    2ef0:	ff 91       	pop	r31
    2ef2:	e5 95       	asr	r30
    2ef4:	ee 1f       	adc	r30, r30
    2ef6:	ff 1f       	adc	r31, r31
    2ef8:	49 f0       	breq	.+18     	; 0x2f0c <exp+0x4e>
    2efa:	fe 57       	subi	r31, 0x7E	; 126
    2efc:	e0 68       	ori	r30, 0x80	; 128
    2efe:	44 27       	eor	r20, r20
    2f00:	ee 0f       	add	r30, r30
    2f02:	44 1f       	adc	r20, r20
    2f04:	fa 95       	dec	r31
    2f06:	e1 f7       	brne	.-8      	; 0x2f00 <exp+0x42>
    2f08:	41 95       	neg	r20
    2f0a:	55 0b       	sbc	r21, r21
    2f0c:	32 d0       	rcall	.+100    	; 0x2f72 <ldexp>
    2f0e:	0f 90       	pop	r0
    2f10:	07 fe       	sbrs	r0, 7
    2f12:	26 c0       	rjmp	.+76     	; 0x2f60 <inverse>
    2f14:	08 95       	ret

00002f16 <__fp_powser>:
    2f16:	df 93       	push	r29
    2f18:	cf 93       	push	r28
    2f1a:	1f 93       	push	r17
    2f1c:	0f 93       	push	r16
    2f1e:	ff 92       	push	r15
    2f20:	ef 92       	push	r14
    2f22:	df 92       	push	r13
    2f24:	7b 01       	movw	r14, r22
    2f26:	8c 01       	movw	r16, r24
    2f28:	68 94       	set
    2f2a:	05 c0       	rjmp	.+10     	; 0x2f36 <__fp_powser+0x20>
    2f2c:	da 2e       	mov	r13, r26
    2f2e:	ef 01       	movw	r28, r30
    2f30:	d8 d0       	rcall	.+432    	; 0x30e2 <__mulsf3x>
    2f32:	fe 01       	movw	r30, r28
    2f34:	e8 94       	clt
    2f36:	a5 91       	lpm	r26, Z+
    2f38:	25 91       	lpm	r18, Z+
    2f3a:	35 91       	lpm	r19, Z+
    2f3c:	45 91       	lpm	r20, Z+
    2f3e:	55 91       	lpm	r21, Z+
    2f40:	ae f3       	brts	.-22     	; 0x2f2c <__fp_powser+0x16>
    2f42:	ef 01       	movw	r28, r30
    2f44:	22 de       	rcall	.-956    	; 0x2b8a <__addsf3x>
    2f46:	fe 01       	movw	r30, r28
    2f48:	97 01       	movw	r18, r14
    2f4a:	a8 01       	movw	r20, r16
    2f4c:	da 94       	dec	r13
    2f4e:	79 f7       	brne	.-34     	; 0x2f2e <__fp_powser+0x18>
    2f50:	df 90       	pop	r13
    2f52:	ef 90       	pop	r14
    2f54:	ff 90       	pop	r15
    2f56:	0f 91       	pop	r16
    2f58:	1f 91       	pop	r17
    2f5a:	cf 91       	pop	r28
    2f5c:	df 91       	pop	r29
    2f5e:	08 95       	ret

00002f60 <inverse>:
    2f60:	9b 01       	movw	r18, r22
    2f62:	ac 01       	movw	r20, r24
    2f64:	60 e0       	ldi	r22, 0x00	; 0
    2f66:	70 e0       	ldi	r23, 0x00	; 0
    2f68:	80 e8       	ldi	r24, 0x80	; 128
    2f6a:	9f e3       	ldi	r25, 0x3F	; 63
    2f6c:	61 ce       	rjmp	.-830    	; 0x2c30 <__divsf3>
    2f6e:	05 cf       	rjmp	.-502    	; 0x2d7a <__fp_inf>
    2f70:	0f c1       	rjmp	.+542    	; 0x3190 <__fp_mpack>

00002f72 <ldexp>:
    2f72:	33 df       	rcall	.-410    	; 0x2dda <__fp_splitA>
    2f74:	e8 f3       	brcs	.-6      	; 0x2f70 <inverse+0x10>
    2f76:	99 23       	and	r25, r25
    2f78:	d9 f3       	breq	.-10     	; 0x2f70 <inverse+0x10>
    2f7a:	94 0f       	add	r25, r20
    2f7c:	51 1d       	adc	r21, r1
    2f7e:	bb f3       	brvs	.-18     	; 0x2f6e <inverse+0xe>
    2f80:	91 50       	subi	r25, 0x01	; 1
    2f82:	50 40       	sbci	r21, 0x00	; 0
    2f84:	94 f0       	brlt	.+36     	; 0x2faa <ldexp+0x38>
    2f86:	59 f0       	breq	.+22     	; 0x2f9e <ldexp+0x2c>
    2f88:	88 23       	and	r24, r24
    2f8a:	32 f0       	brmi	.+12     	; 0x2f98 <ldexp+0x26>
    2f8c:	66 0f       	add	r22, r22
    2f8e:	77 1f       	adc	r23, r23
    2f90:	88 1f       	adc	r24, r24
    2f92:	91 50       	subi	r25, 0x01	; 1
    2f94:	50 40       	sbci	r21, 0x00	; 0
    2f96:	c1 f7       	brne	.-16     	; 0x2f88 <ldexp+0x16>
    2f98:	9e 3f       	cpi	r25, 0xFE	; 254
    2f9a:	51 05       	cpc	r21, r1
    2f9c:	44 f7       	brge	.-48     	; 0x2f6e <inverse+0xe>
    2f9e:	88 0f       	add	r24, r24
    2fa0:	91 1d       	adc	r25, r1
    2fa2:	96 95       	lsr	r25
    2fa4:	87 95       	ror	r24
    2fa6:	97 f9       	bld	r25, 7
    2fa8:	08 95       	ret
    2faa:	5f 3f       	cpi	r21, 0xFF	; 255
    2fac:	ac f0       	brlt	.+42     	; 0x2fd8 <ldexp+0x66>
    2fae:	98 3e       	cpi	r25, 0xE8	; 232
    2fb0:	9c f0       	brlt	.+38     	; 0x2fd8 <ldexp+0x66>
    2fb2:	bb 27       	eor	r27, r27
    2fb4:	86 95       	lsr	r24
    2fb6:	77 95       	ror	r23
    2fb8:	67 95       	ror	r22
    2fba:	b7 95       	ror	r27
    2fbc:	08 f4       	brcc	.+2      	; 0x2fc0 <ldexp+0x4e>
    2fbe:	b1 60       	ori	r27, 0x01	; 1
    2fc0:	93 95       	inc	r25
    2fc2:	c1 f7       	brne	.-16     	; 0x2fb4 <ldexp+0x42>
    2fc4:	bb 0f       	add	r27, r27
    2fc6:	58 f7       	brcc	.-42     	; 0x2f9e <ldexp+0x2c>
    2fc8:	11 f4       	brne	.+4      	; 0x2fce <ldexp+0x5c>
    2fca:	60 ff       	sbrs	r22, 0
    2fcc:	e8 cf       	rjmp	.-48     	; 0x2f9e <ldexp+0x2c>
    2fce:	6f 5f       	subi	r22, 0xFF	; 255
    2fd0:	7f 4f       	sbci	r23, 0xFF	; 255
    2fd2:	8f 4f       	sbci	r24, 0xFF	; 255
    2fd4:	9f 4f       	sbci	r25, 0xFF	; 255
    2fd6:	e3 cf       	rjmp	.-58     	; 0x2f9e <ldexp+0x2c>
    2fd8:	1b cf       	rjmp	.-458    	; 0x2e10 <__fp_szero>
    2fda:	0e f0       	brts	.+2      	; 0x2fde <ldexp+0x6c>
    2fdc:	d9 c0       	rjmp	.+434    	; 0x3190 <__fp_mpack>
    2fde:	d3 ce       	rjmp	.-602    	; 0x2d86 <__fp_nan>
    2fe0:	68 94       	set
    2fe2:	cb ce       	rjmp	.-618    	; 0x2d7a <__fp_inf>

00002fe4 <log>:
    2fe4:	fa de       	rcall	.-524    	; 0x2dda <__fp_splitA>
    2fe6:	c8 f3       	brcs	.-14     	; 0x2fda <ldexp+0x68>
    2fe8:	99 23       	and	r25, r25
    2fea:	d1 f3       	breq	.-12     	; 0x2fe0 <ldexp+0x6e>
    2fec:	c6 f3       	brts	.-16     	; 0x2fde <ldexp+0x6c>
    2fee:	df 93       	push	r29
    2ff0:	cf 93       	push	r28
    2ff2:	1f 93       	push	r17
    2ff4:	0f 93       	push	r16
    2ff6:	ff 92       	push	r15
    2ff8:	c9 2f       	mov	r28, r25
    2ffa:	dd 27       	eor	r29, r29
    2ffc:	88 23       	and	r24, r24
    2ffe:	2a f0       	brmi	.+10     	; 0x300a <log+0x26>
    3000:	21 97       	sbiw	r28, 0x01	; 1
    3002:	66 0f       	add	r22, r22
    3004:	77 1f       	adc	r23, r23
    3006:	88 1f       	adc	r24, r24
    3008:	da f7       	brpl	.-10     	; 0x3000 <log+0x1c>
    300a:	20 e0       	ldi	r18, 0x00	; 0
    300c:	30 e0       	ldi	r19, 0x00	; 0
    300e:	40 e8       	ldi	r20, 0x80	; 128
    3010:	5f eb       	ldi	r21, 0xBF	; 191
    3012:	9f e3       	ldi	r25, 0x3F	; 63
    3014:	88 39       	cpi	r24, 0x98	; 152
    3016:	20 f0       	brcs	.+8      	; 0x3020 <log+0x3c>
    3018:	80 3e       	cpi	r24, 0xE0	; 224
    301a:	30 f0       	brcs	.+12     	; 0x3028 <log+0x44>
    301c:	21 96       	adiw	r28, 0x01	; 1
    301e:	8f 77       	andi	r24, 0x7F	; 127
    3020:	a3 dd       	rcall	.-1210   	; 0x2b68 <__addsf3>
    3022:	e0 e9       	ldi	r30, 0x90	; 144
    3024:	f0 e0       	ldi	r31, 0x00	; 0
    3026:	03 c0       	rjmp	.+6      	; 0x302e <log+0x4a>
    3028:	9f dd       	rcall	.-1218   	; 0x2b68 <__addsf3>
    302a:	ed eb       	ldi	r30, 0xBD	; 189
    302c:	f0 e0       	ldi	r31, 0x00	; 0
    302e:	73 df       	rcall	.-282    	; 0x2f16 <__fp_powser>
    3030:	8b 01       	movw	r16, r22
    3032:	be 01       	movw	r22, r28
    3034:	ec 01       	movw	r28, r24
    3036:	fb 2e       	mov	r15, r27
    3038:	6f 57       	subi	r22, 0x7F	; 127
    303a:	71 09       	sbc	r23, r1
    303c:	75 95       	asr	r23
    303e:	77 1f       	adc	r23, r23
    3040:	88 0b       	sbc	r24, r24
    3042:	99 0b       	sbc	r25, r25
    3044:	5f de       	rcall	.-834    	; 0x2d04 <__floatsisf>
    3046:	28 e1       	ldi	r18, 0x18	; 24
    3048:	32 e7       	ldi	r19, 0x72	; 114
    304a:	41 e3       	ldi	r20, 0x31	; 49
    304c:	5f e3       	ldi	r21, 0x3F	; 63
    304e:	49 d0       	rcall	.+146    	; 0x30e2 <__mulsf3x>
    3050:	af 2d       	mov	r26, r15
    3052:	98 01       	movw	r18, r16
    3054:	ae 01       	movw	r20, r28
    3056:	ff 90       	pop	r15
    3058:	0f 91       	pop	r16
    305a:	1f 91       	pop	r17
    305c:	cf 91       	pop	r28
    305e:	df 91       	pop	r29
    3060:	94 dd       	rcall	.-1240   	; 0x2b8a <__addsf3x>
    3062:	a2 ce       	rjmp	.-700    	; 0x2da8 <__fp_round>

00003064 <modf>:
    3064:	fa 01       	movw	r30, r20
    3066:	dc 01       	movw	r26, r24
    3068:	aa 0f       	add	r26, r26
    306a:	bb 1f       	adc	r27, r27
    306c:	9b 01       	movw	r18, r22
    306e:	ac 01       	movw	r20, r24
    3070:	bf 57       	subi	r27, 0x7F	; 127
    3072:	28 f4       	brcc	.+10     	; 0x307e <modf+0x1a>
    3074:	22 27       	eor	r18, r18
    3076:	33 27       	eor	r19, r19
    3078:	44 27       	eor	r20, r20
    307a:	50 78       	andi	r21, 0x80	; 128
    307c:	1f c0       	rjmp	.+62     	; 0x30bc <modf+0x58>
    307e:	b7 51       	subi	r27, 0x17	; 23
    3080:	88 f4       	brcc	.+34     	; 0x30a4 <modf+0x40>
    3082:	ab 2f       	mov	r26, r27
    3084:	00 24       	eor	r0, r0
    3086:	46 95       	lsr	r20
    3088:	37 95       	ror	r19
    308a:	27 95       	ror	r18
    308c:	01 1c       	adc	r0, r1
    308e:	a3 95       	inc	r26
    3090:	d2 f3       	brmi	.-12     	; 0x3086 <modf+0x22>
    3092:	00 20       	and	r0, r0
    3094:	69 f0       	breq	.+26     	; 0x30b0 <modf+0x4c>
    3096:	22 0f       	add	r18, r18
    3098:	33 1f       	adc	r19, r19
    309a:	44 1f       	adc	r20, r20
    309c:	b3 95       	inc	r27
    309e:	da f3       	brmi	.-10     	; 0x3096 <modf+0x32>
    30a0:	0d d0       	rcall	.+26     	; 0x30bc <modf+0x58>
    30a2:	61 cd       	rjmp	.-1342   	; 0x2b66 <__subsf3>
    30a4:	61 30       	cpi	r22, 0x01	; 1
    30a6:	71 05       	cpc	r23, r1
    30a8:	a0 e8       	ldi	r26, 0x80	; 128
    30aa:	8a 07       	cpc	r24, r26
    30ac:	b9 46       	sbci	r27, 0x69	; 105
    30ae:	30 f4       	brcc	.+12     	; 0x30bc <modf+0x58>
    30b0:	9b 01       	movw	r18, r22
    30b2:	ac 01       	movw	r20, r24
    30b4:	66 27       	eor	r22, r22
    30b6:	77 27       	eor	r23, r23
    30b8:	88 27       	eor	r24, r24
    30ba:	90 78       	andi	r25, 0x80	; 128
    30bc:	30 96       	adiw	r30, 0x00	; 0
    30be:	21 f0       	breq	.+8      	; 0x30c8 <modf+0x64>
    30c0:	20 83       	st	Z, r18
    30c2:	31 83       	std	Z+1, r19	; 0x01
    30c4:	42 83       	std	Z+2, r20	; 0x02
    30c6:	53 83       	std	Z+3, r21	; 0x03
    30c8:	08 95       	ret

000030ca <__mulsf3>:
    30ca:	0b d0       	rcall	.+22     	; 0x30e2 <__mulsf3x>
    30cc:	6d ce       	rjmp	.-806    	; 0x2da8 <__fp_round>
    30ce:	5e de       	rcall	.-836    	; 0x2d8c <__fp_pscA>
    30d0:	28 f0       	brcs	.+10     	; 0x30dc <__mulsf3+0x12>
    30d2:	63 de       	rcall	.-826    	; 0x2d9a <__fp_pscB>
    30d4:	18 f0       	brcs	.+6      	; 0x30dc <__mulsf3+0x12>
    30d6:	95 23       	and	r25, r21
    30d8:	09 f0       	breq	.+2      	; 0x30dc <__mulsf3+0x12>
    30da:	4f ce       	rjmp	.-866    	; 0x2d7a <__fp_inf>
    30dc:	54 ce       	rjmp	.-856    	; 0x2d86 <__fp_nan>
    30de:	11 24       	eor	r1, r1
    30e0:	97 ce       	rjmp	.-722    	; 0x2e10 <__fp_szero>

000030e2 <__mulsf3x>:
    30e2:	73 de       	rcall	.-794    	; 0x2dca <__fp_split3>
    30e4:	a0 f3       	brcs	.-24     	; 0x30ce <__mulsf3+0x4>

000030e6 <__mulsf3_pse>:
    30e6:	95 9f       	mul	r25, r21
    30e8:	d1 f3       	breq	.-12     	; 0x30de <__mulsf3+0x14>
    30ea:	95 0f       	add	r25, r21
    30ec:	50 e0       	ldi	r21, 0x00	; 0
    30ee:	55 1f       	adc	r21, r21
    30f0:	62 9f       	mul	r22, r18
    30f2:	f0 01       	movw	r30, r0
    30f4:	72 9f       	mul	r23, r18
    30f6:	bb 27       	eor	r27, r27
    30f8:	f0 0d       	add	r31, r0
    30fa:	b1 1d       	adc	r27, r1
    30fc:	63 9f       	mul	r22, r19
    30fe:	aa 27       	eor	r26, r26
    3100:	f0 0d       	add	r31, r0
    3102:	b1 1d       	adc	r27, r1
    3104:	aa 1f       	adc	r26, r26
    3106:	64 9f       	mul	r22, r20
    3108:	66 27       	eor	r22, r22
    310a:	b0 0d       	add	r27, r0
    310c:	a1 1d       	adc	r26, r1
    310e:	66 1f       	adc	r22, r22
    3110:	82 9f       	mul	r24, r18
    3112:	22 27       	eor	r18, r18
    3114:	b0 0d       	add	r27, r0
    3116:	a1 1d       	adc	r26, r1
    3118:	62 1f       	adc	r22, r18
    311a:	73 9f       	mul	r23, r19
    311c:	b0 0d       	add	r27, r0
    311e:	a1 1d       	adc	r26, r1
    3120:	62 1f       	adc	r22, r18
    3122:	83 9f       	mul	r24, r19
    3124:	a0 0d       	add	r26, r0
    3126:	61 1d       	adc	r22, r1
    3128:	22 1f       	adc	r18, r18
    312a:	74 9f       	mul	r23, r20
    312c:	33 27       	eor	r19, r19
    312e:	a0 0d       	add	r26, r0
    3130:	61 1d       	adc	r22, r1
    3132:	23 1f       	adc	r18, r19
    3134:	84 9f       	mul	r24, r20
    3136:	60 0d       	add	r22, r0
    3138:	21 1d       	adc	r18, r1
    313a:	82 2f       	mov	r24, r18
    313c:	76 2f       	mov	r23, r22
    313e:	6a 2f       	mov	r22, r26
    3140:	11 24       	eor	r1, r1
    3142:	9f 57       	subi	r25, 0x7F	; 127
    3144:	50 40       	sbci	r21, 0x00	; 0
    3146:	8a f0       	brmi	.+34     	; 0x316a <__mulsf3_pse+0x84>
    3148:	e1 f0       	breq	.+56     	; 0x3182 <__mulsf3_pse+0x9c>
    314a:	88 23       	and	r24, r24
    314c:	4a f0       	brmi	.+18     	; 0x3160 <__mulsf3_pse+0x7a>
    314e:	ee 0f       	add	r30, r30
    3150:	ff 1f       	adc	r31, r31
    3152:	bb 1f       	adc	r27, r27
    3154:	66 1f       	adc	r22, r22
    3156:	77 1f       	adc	r23, r23
    3158:	88 1f       	adc	r24, r24
    315a:	91 50       	subi	r25, 0x01	; 1
    315c:	50 40       	sbci	r21, 0x00	; 0
    315e:	a9 f7       	brne	.-22     	; 0x314a <__mulsf3_pse+0x64>
    3160:	9e 3f       	cpi	r25, 0xFE	; 254
    3162:	51 05       	cpc	r21, r1
    3164:	70 f0       	brcs	.+28     	; 0x3182 <__mulsf3_pse+0x9c>
    3166:	09 ce       	rjmp	.-1006   	; 0x2d7a <__fp_inf>
    3168:	53 ce       	rjmp	.-858    	; 0x2e10 <__fp_szero>
    316a:	5f 3f       	cpi	r21, 0xFF	; 255
    316c:	ec f3       	brlt	.-6      	; 0x3168 <__mulsf3_pse+0x82>
    316e:	98 3e       	cpi	r25, 0xE8	; 232
    3170:	dc f3       	brlt	.-10     	; 0x3168 <__mulsf3_pse+0x82>
    3172:	86 95       	lsr	r24
    3174:	77 95       	ror	r23
    3176:	67 95       	ror	r22
    3178:	b7 95       	ror	r27
    317a:	f7 95       	ror	r31
    317c:	e7 95       	ror	r30
    317e:	9f 5f       	subi	r25, 0xFF	; 255
    3180:	c1 f7       	brne	.-16     	; 0x3172 <__mulsf3_pse+0x8c>
    3182:	fe 2b       	or	r31, r30
    3184:	88 0f       	add	r24, r24
    3186:	91 1d       	adc	r25, r1
    3188:	96 95       	lsr	r25
    318a:	87 95       	ror	r24
    318c:	97 f9       	bld	r25, 7
    318e:	08 95       	ret

00003190 <__fp_mpack>:
    3190:	9f 3f       	cpi	r25, 0xFF	; 255
    3192:	31 f0       	breq	.+12     	; 0x31a0 <__fp_mpack_finite+0xc>

00003194 <__fp_mpack_finite>:
    3194:	91 50       	subi	r25, 0x01	; 1
    3196:	20 f4       	brcc	.+8      	; 0x31a0 <__fp_mpack_finite+0xc>
    3198:	87 95       	ror	r24
    319a:	77 95       	ror	r23
    319c:	67 95       	ror	r22
    319e:	b7 95       	ror	r27
    31a0:	88 0f       	add	r24, r24
    31a2:	91 1d       	adc	r25, r1
    31a4:	96 95       	lsr	r25
    31a6:	87 95       	ror	r24
    31a8:	97 f9       	bld	r25, 7
    31aa:	08 95       	ret

000031ac <dtostrf>:
    31ac:	ef 92       	push	r14
    31ae:	0f 93       	push	r16
    31b0:	1f 93       	push	r17
    31b2:	cf 93       	push	r28
    31b4:	df 93       	push	r29
    31b6:	e8 01       	movw	r28, r16
    31b8:	47 ff       	sbrs	r20, 7
    31ba:	02 c0       	rjmp	.+4      	; 0x31c0 <dtostrf+0x14>
    31bc:	34 e1       	ldi	r19, 0x14	; 20
    31be:	01 c0       	rjmp	.+2      	; 0x31c2 <dtostrf+0x16>
    31c0:	34 e0       	ldi	r19, 0x04	; 4
    31c2:	e4 2f       	mov	r30, r20
    31c4:	ff 27       	eor	r31, r31
    31c6:	e7 fd       	sbrc	r30, 7
    31c8:	f0 95       	com	r31
    31ca:	f7 ff       	sbrs	r31, 7
    31cc:	03 c0       	rjmp	.+6      	; 0x31d4 <dtostrf+0x28>
    31ce:	f1 95       	neg	r31
    31d0:	e1 95       	neg	r30
    31d2:	f1 09       	sbc	r31, r1
    31d4:	e3 2e       	mov	r14, r19
    31d6:	02 2f       	mov	r16, r18
    31d8:	2e 2f       	mov	r18, r30
    31da:	ae 01       	movw	r20, r28
    31dc:	0e 94 87 1b 	call	0x370e	; 0x370e <dtoa_prf>
    31e0:	ce 01       	movw	r24, r28
    31e2:	df 91       	pop	r29
    31e4:	cf 91       	pop	r28
    31e6:	1f 91       	pop	r17
    31e8:	0f 91       	pop	r16
    31ea:	ef 90       	pop	r14
    31ec:	08 95       	ret

000031ee <itoa>:
    31ee:	45 32       	cpi	r20, 0x25	; 37
    31f0:	51 05       	cpc	r21, r1
    31f2:	20 f4       	brcc	.+8      	; 0x31fc <itoa+0xe>
    31f4:	42 30       	cpi	r20, 0x02	; 2
    31f6:	10 f0       	brcs	.+4      	; 0x31fc <itoa+0xe>
    31f8:	0c 94 02 19 	jmp	0x3204	; 0x3204 <__itoa_ncheck>
    31fc:	fb 01       	movw	r30, r22
    31fe:	10 82       	st	Z, r1
    3200:	cb 01       	movw	r24, r22
    3202:	08 95       	ret

00003204 <__itoa_ncheck>:
    3204:	bb 27       	eor	r27, r27
    3206:	4a 30       	cpi	r20, 0x0A	; 10
    3208:	31 f4       	brne	.+12     	; 0x3216 <__itoa_ncheck+0x12>
    320a:	99 23       	and	r25, r25
    320c:	22 f4       	brpl	.+8      	; 0x3216 <__itoa_ncheck+0x12>
    320e:	bd e2       	ldi	r27, 0x2D	; 45
    3210:	90 95       	com	r25
    3212:	81 95       	neg	r24
    3214:	9f 4f       	sbci	r25, 0xFF	; 255
    3216:	0c 94 3f 19 	jmp	0x327e	; 0x327e <__utoa_common>

0000321a <__ltoa_ncheck>:
    321a:	bb 27       	eor	r27, r27
    321c:	2a 30       	cpi	r18, 0x0A	; 10
    321e:	51 f4       	brne	.+20     	; 0x3234 <__ltoa_ncheck+0x1a>
    3220:	99 23       	and	r25, r25
    3222:	42 f4       	brpl	.+16     	; 0x3234 <__ltoa_ncheck+0x1a>
    3224:	bd e2       	ldi	r27, 0x2D	; 45
    3226:	90 95       	com	r25
    3228:	80 95       	com	r24
    322a:	70 95       	com	r23
    322c:	61 95       	neg	r22
    322e:	7f 4f       	sbci	r23, 0xFF	; 255
    3230:	8f 4f       	sbci	r24, 0xFF	; 255
    3232:	9f 4f       	sbci	r25, 0xFF	; 255
    3234:	0c 94 1d 19 	jmp	0x323a	; 0x323a <__ultoa_common>

00003238 <__ultoa_ncheck>:
    3238:	bb 27       	eor	r27, r27

0000323a <__ultoa_common>:
    323a:	fa 01       	movw	r30, r20
    323c:	a6 2f       	mov	r26, r22
    323e:	62 17       	cp	r22, r18
    3240:	71 05       	cpc	r23, r1
    3242:	81 05       	cpc	r24, r1
    3244:	91 05       	cpc	r25, r1
    3246:	33 0b       	sbc	r19, r19
    3248:	30 fb       	bst	r19, 0
    324a:	66 f0       	brts	.+24     	; 0x3264 <__ultoa_common+0x2a>
    324c:	aa 27       	eor	r26, r26
    324e:	66 0f       	add	r22, r22
    3250:	77 1f       	adc	r23, r23
    3252:	88 1f       	adc	r24, r24
    3254:	99 1f       	adc	r25, r25
    3256:	aa 1f       	adc	r26, r26
    3258:	a2 17       	cp	r26, r18
    325a:	10 f0       	brcs	.+4      	; 0x3260 <__ultoa_common+0x26>
    325c:	a2 1b       	sub	r26, r18
    325e:	63 95       	inc	r22
    3260:	38 50       	subi	r19, 0x08	; 8
    3262:	a9 f7       	brne	.-22     	; 0x324e <__ultoa_common+0x14>
    3264:	a0 5d       	subi	r26, 0xD0	; 208
    3266:	aa 33       	cpi	r26, 0x3A	; 58
    3268:	08 f0       	brcs	.+2      	; 0x326c <__ultoa_common+0x32>
    326a:	a9 5d       	subi	r26, 0xD9	; 217
    326c:	a1 93       	st	Z+, r26
    326e:	36 f7       	brtc	.-52     	; 0x323c <__ultoa_common+0x2>
    3270:	b1 11       	cpse	r27, r1
    3272:	b1 93       	st	Z+, r27
    3274:	10 82       	st	Z, r1
    3276:	ca 01       	movw	r24, r20
    3278:	0c 94 f3 1d 	jmp	0x3be6	; 0x3be6 <strrev>

0000327c <__utoa_ncheck>:
    327c:	bb 27       	eor	r27, r27

0000327e <__utoa_common>:
    327e:	fb 01       	movw	r30, r22
    3280:	55 27       	eor	r21, r21
    3282:	aa 27       	eor	r26, r26
    3284:	88 0f       	add	r24, r24
    3286:	99 1f       	adc	r25, r25
    3288:	aa 1f       	adc	r26, r26
    328a:	a4 17       	cp	r26, r20
    328c:	10 f0       	brcs	.+4      	; 0x3292 <__utoa_common+0x14>
    328e:	a4 1b       	sub	r26, r20
    3290:	83 95       	inc	r24
    3292:	50 51       	subi	r21, 0x10	; 16
    3294:	b9 f7       	brne	.-18     	; 0x3284 <__utoa_common+0x6>
    3296:	a0 5d       	subi	r26, 0xD0	; 208
    3298:	aa 33       	cpi	r26, 0x3A	; 58
    329a:	08 f0       	brcs	.+2      	; 0x329e <__utoa_common+0x20>
    329c:	a9 5d       	subi	r26, 0xD9	; 217
    329e:	a1 93       	st	Z+, r26
    32a0:	00 97       	sbiw	r24, 0x00	; 0
    32a2:	79 f7       	brne	.-34     	; 0x3282 <__utoa_common+0x4>
    32a4:	b1 11       	cpse	r27, r1
    32a6:	b1 93       	st	Z+, r27
    32a8:	11 92       	st	Z+, r1
    32aa:	cb 01       	movw	r24, r22
    32ac:	0c 94 f3 1d 	jmp	0x3be6	; 0x3be6 <strrev>

000032b0 <sprintf>:
    32b0:	ae e0       	ldi	r26, 0x0E	; 14
    32b2:	b0 e0       	ldi	r27, 0x00	; 0
    32b4:	ee e5       	ldi	r30, 0x5E	; 94
    32b6:	f9 e1       	ldi	r31, 0x19	; 25
    32b8:	0c 94 a1 1e 	jmp	0x3d42	; 0x3d42 <__prologue_saves__+0x1c>
    32bc:	0d 89       	ldd	r16, Y+21	; 0x15
    32be:	1e 89       	ldd	r17, Y+22	; 0x16
    32c0:	86 e0       	ldi	r24, 0x06	; 6
    32c2:	8c 83       	std	Y+4, r24	; 0x04
    32c4:	1a 83       	std	Y+2, r17	; 0x02
    32c6:	09 83       	std	Y+1, r16	; 0x01
    32c8:	8f ef       	ldi	r24, 0xFF	; 255
    32ca:	9f e7       	ldi	r25, 0x7F	; 127
    32cc:	9e 83       	std	Y+6, r25	; 0x06
    32ce:	8d 83       	std	Y+5, r24	; 0x05
    32d0:	ae 01       	movw	r20, r28
    32d2:	47 5e       	subi	r20, 0xE7	; 231
    32d4:	5f 4f       	sbci	r21, 0xFF	; 255
    32d6:	6f 89       	ldd	r22, Y+23	; 0x17
    32d8:	78 8d       	ldd	r23, Y+24	; 0x18
    32da:	ce 01       	movw	r24, r28
    32dc:	01 96       	adiw	r24, 0x01	; 1
    32de:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <vfprintf>
    32e2:	ef 81       	ldd	r30, Y+7	; 0x07
    32e4:	f8 85       	ldd	r31, Y+8	; 0x08
    32e6:	e0 0f       	add	r30, r16
    32e8:	f1 1f       	adc	r31, r17
    32ea:	10 82       	st	Z, r1
    32ec:	2e 96       	adiw	r28, 0x0e	; 14
    32ee:	e4 e0       	ldi	r30, 0x04	; 4
    32f0:	0c 94 bd 1e 	jmp	0x3d7a	; 0x3d7a <__epilogue_restores__+0x1c>

000032f4 <vfprintf>:
    32f4:	ac e0       	ldi	r26, 0x0C	; 12
    32f6:	b0 e0       	ldi	r27, 0x00	; 0
    32f8:	e0 e8       	ldi	r30, 0x80	; 128
    32fa:	f9 e1       	ldi	r31, 0x19	; 25
    32fc:	0c 94 93 1e 	jmp	0x3d26	; 0x3d26 <__prologue_saves__>
    3300:	7c 01       	movw	r14, r24
    3302:	6b 01       	movw	r12, r22
    3304:	8a 01       	movw	r16, r20
    3306:	fc 01       	movw	r30, r24
    3308:	17 82       	std	Z+7, r1	; 0x07
    330a:	16 82       	std	Z+6, r1	; 0x06
    330c:	83 81       	ldd	r24, Z+3	; 0x03
    330e:	81 ff       	sbrs	r24, 1
    3310:	bd c1       	rjmp	.+890    	; 0x368c <vfprintf+0x398>
    3312:	ce 01       	movw	r24, r28
    3314:	01 96       	adiw	r24, 0x01	; 1
    3316:	4c 01       	movw	r8, r24
    3318:	f7 01       	movw	r30, r14
    331a:	93 81       	ldd	r25, Z+3	; 0x03
    331c:	f6 01       	movw	r30, r12
    331e:	93 fd       	sbrc	r25, 3
    3320:	85 91       	lpm	r24, Z+
    3322:	93 ff       	sbrs	r25, 3
    3324:	81 91       	ld	r24, Z+
    3326:	6f 01       	movw	r12, r30
    3328:	88 23       	and	r24, r24
    332a:	09 f4       	brne	.+2      	; 0x332e <vfprintf+0x3a>
    332c:	ab c1       	rjmp	.+854    	; 0x3684 <vfprintf+0x390>
    332e:	85 32       	cpi	r24, 0x25	; 37
    3330:	39 f4       	brne	.+14     	; 0x3340 <vfprintf+0x4c>
    3332:	93 fd       	sbrc	r25, 3
    3334:	85 91       	lpm	r24, Z+
    3336:	93 ff       	sbrs	r25, 3
    3338:	81 91       	ld	r24, Z+
    333a:	6f 01       	movw	r12, r30
    333c:	85 32       	cpi	r24, 0x25	; 37
    333e:	29 f4       	brne	.+10     	; 0x334a <vfprintf+0x56>
    3340:	b7 01       	movw	r22, r14
    3342:	90 e0       	ldi	r25, 0x00	; 0
    3344:	0e 94 03 1e 	call	0x3c06	; 0x3c06 <fputc>
    3348:	e7 cf       	rjmp	.-50     	; 0x3318 <vfprintf+0x24>
    334a:	51 2c       	mov	r5, r1
    334c:	31 2c       	mov	r3, r1
    334e:	20 e0       	ldi	r18, 0x00	; 0
    3350:	20 32       	cpi	r18, 0x20	; 32
    3352:	a0 f4       	brcc	.+40     	; 0x337c <vfprintf+0x88>
    3354:	8b 32       	cpi	r24, 0x2B	; 43
    3356:	69 f0       	breq	.+26     	; 0x3372 <vfprintf+0x7e>
    3358:	30 f4       	brcc	.+12     	; 0x3366 <vfprintf+0x72>
    335a:	80 32       	cpi	r24, 0x20	; 32
    335c:	59 f0       	breq	.+22     	; 0x3374 <vfprintf+0x80>
    335e:	83 32       	cpi	r24, 0x23	; 35
    3360:	69 f4       	brne	.+26     	; 0x337c <vfprintf+0x88>
    3362:	20 61       	ori	r18, 0x10	; 16
    3364:	2c c0       	rjmp	.+88     	; 0x33be <vfprintf+0xca>
    3366:	8d 32       	cpi	r24, 0x2D	; 45
    3368:	39 f0       	breq	.+14     	; 0x3378 <vfprintf+0x84>
    336a:	80 33       	cpi	r24, 0x30	; 48
    336c:	39 f4       	brne	.+14     	; 0x337c <vfprintf+0x88>
    336e:	21 60       	ori	r18, 0x01	; 1
    3370:	26 c0       	rjmp	.+76     	; 0x33be <vfprintf+0xca>
    3372:	22 60       	ori	r18, 0x02	; 2
    3374:	24 60       	ori	r18, 0x04	; 4
    3376:	23 c0       	rjmp	.+70     	; 0x33be <vfprintf+0xca>
    3378:	28 60       	ori	r18, 0x08	; 8
    337a:	21 c0       	rjmp	.+66     	; 0x33be <vfprintf+0xca>
    337c:	27 fd       	sbrc	r18, 7
    337e:	27 c0       	rjmp	.+78     	; 0x33ce <vfprintf+0xda>
    3380:	30 ed       	ldi	r19, 0xD0	; 208
    3382:	38 0f       	add	r19, r24
    3384:	3a 30       	cpi	r19, 0x0A	; 10
    3386:	78 f4       	brcc	.+30     	; 0x33a6 <vfprintf+0xb2>
    3388:	26 ff       	sbrs	r18, 6
    338a:	06 c0       	rjmp	.+12     	; 0x3398 <vfprintf+0xa4>
    338c:	fa e0       	ldi	r31, 0x0A	; 10
    338e:	5f 9e       	mul	r5, r31
    3390:	30 0d       	add	r19, r0
    3392:	11 24       	eor	r1, r1
    3394:	53 2e       	mov	r5, r19
    3396:	13 c0       	rjmp	.+38     	; 0x33be <vfprintf+0xca>
    3398:	8a e0       	ldi	r24, 0x0A	; 10
    339a:	38 9e       	mul	r3, r24
    339c:	30 0d       	add	r19, r0
    339e:	11 24       	eor	r1, r1
    33a0:	33 2e       	mov	r3, r19
    33a2:	20 62       	ori	r18, 0x20	; 32
    33a4:	0c c0       	rjmp	.+24     	; 0x33be <vfprintf+0xca>
    33a6:	8e 32       	cpi	r24, 0x2E	; 46
    33a8:	21 f4       	brne	.+8      	; 0x33b2 <vfprintf+0xbe>
    33aa:	26 fd       	sbrc	r18, 6
    33ac:	6b c1       	rjmp	.+726    	; 0x3684 <vfprintf+0x390>
    33ae:	20 64       	ori	r18, 0x40	; 64
    33b0:	06 c0       	rjmp	.+12     	; 0x33be <vfprintf+0xca>
    33b2:	8c 36       	cpi	r24, 0x6C	; 108
    33b4:	11 f4       	brne	.+4      	; 0x33ba <vfprintf+0xc6>
    33b6:	20 68       	ori	r18, 0x80	; 128
    33b8:	02 c0       	rjmp	.+4      	; 0x33be <vfprintf+0xca>
    33ba:	88 36       	cpi	r24, 0x68	; 104
    33bc:	41 f4       	brne	.+16     	; 0x33ce <vfprintf+0xda>
    33be:	f6 01       	movw	r30, r12
    33c0:	93 fd       	sbrc	r25, 3
    33c2:	85 91       	lpm	r24, Z+
    33c4:	93 ff       	sbrs	r25, 3
    33c6:	81 91       	ld	r24, Z+
    33c8:	6f 01       	movw	r12, r30
    33ca:	81 11       	cpse	r24, r1
    33cc:	c1 cf       	rjmp	.-126    	; 0x3350 <vfprintf+0x5c>
    33ce:	98 2f       	mov	r25, r24
    33d0:	9f 7d       	andi	r25, 0xDF	; 223
    33d2:	95 54       	subi	r25, 0x45	; 69
    33d4:	93 30       	cpi	r25, 0x03	; 3
    33d6:	28 f4       	brcc	.+10     	; 0x33e2 <vfprintf+0xee>
    33d8:	0c 5f       	subi	r16, 0xFC	; 252
    33da:	1f 4f       	sbci	r17, 0xFF	; 255
    33dc:	ff e3       	ldi	r31, 0x3F	; 63
    33de:	f9 83       	std	Y+1, r31	; 0x01
    33e0:	0d c0       	rjmp	.+26     	; 0x33fc <vfprintf+0x108>
    33e2:	83 36       	cpi	r24, 0x63	; 99
    33e4:	31 f0       	breq	.+12     	; 0x33f2 <vfprintf+0xfe>
    33e6:	83 37       	cpi	r24, 0x73	; 115
    33e8:	71 f0       	breq	.+28     	; 0x3406 <vfprintf+0x112>
    33ea:	83 35       	cpi	r24, 0x53	; 83
    33ec:	09 f0       	breq	.+2      	; 0x33f0 <vfprintf+0xfc>
    33ee:	5b c0       	rjmp	.+182    	; 0x34a6 <vfprintf+0x1b2>
    33f0:	22 c0       	rjmp	.+68     	; 0x3436 <vfprintf+0x142>
    33f2:	f8 01       	movw	r30, r16
    33f4:	80 81       	ld	r24, Z
    33f6:	89 83       	std	Y+1, r24	; 0x01
    33f8:	0e 5f       	subi	r16, 0xFE	; 254
    33fa:	1f 4f       	sbci	r17, 0xFF	; 255
    33fc:	44 24       	eor	r4, r4
    33fe:	43 94       	inc	r4
    3400:	51 2c       	mov	r5, r1
    3402:	54 01       	movw	r10, r8
    3404:	15 c0       	rjmp	.+42     	; 0x3430 <vfprintf+0x13c>
    3406:	38 01       	movw	r6, r16
    3408:	f2 e0       	ldi	r31, 0x02	; 2
    340a:	6f 0e       	add	r6, r31
    340c:	71 1c       	adc	r7, r1
    340e:	f8 01       	movw	r30, r16
    3410:	a0 80       	ld	r10, Z
    3412:	b1 80       	ldd	r11, Z+1	; 0x01
    3414:	26 ff       	sbrs	r18, 6
    3416:	03 c0       	rjmp	.+6      	; 0x341e <vfprintf+0x12a>
    3418:	65 2d       	mov	r22, r5
    341a:	70 e0       	ldi	r23, 0x00	; 0
    341c:	02 c0       	rjmp	.+4      	; 0x3422 <vfprintf+0x12e>
    341e:	6f ef       	ldi	r22, 0xFF	; 255
    3420:	7f ef       	ldi	r23, 0xFF	; 255
    3422:	c5 01       	movw	r24, r10
    3424:	2c 87       	std	Y+12, r18	; 0x0c
    3426:	0e 94 e8 1d 	call	0x3bd0	; 0x3bd0 <strnlen>
    342a:	2c 01       	movw	r4, r24
    342c:	83 01       	movw	r16, r6
    342e:	2c 85       	ldd	r18, Y+12	; 0x0c
    3430:	2f 77       	andi	r18, 0x7F	; 127
    3432:	22 2e       	mov	r2, r18
    3434:	17 c0       	rjmp	.+46     	; 0x3464 <vfprintf+0x170>
    3436:	38 01       	movw	r6, r16
    3438:	f2 e0       	ldi	r31, 0x02	; 2
    343a:	6f 0e       	add	r6, r31
    343c:	71 1c       	adc	r7, r1
    343e:	f8 01       	movw	r30, r16
    3440:	a0 80       	ld	r10, Z
    3442:	b1 80       	ldd	r11, Z+1	; 0x01
    3444:	26 ff       	sbrs	r18, 6
    3446:	03 c0       	rjmp	.+6      	; 0x344e <vfprintf+0x15a>
    3448:	65 2d       	mov	r22, r5
    344a:	70 e0       	ldi	r23, 0x00	; 0
    344c:	02 c0       	rjmp	.+4      	; 0x3452 <vfprintf+0x15e>
    344e:	6f ef       	ldi	r22, 0xFF	; 255
    3450:	7f ef       	ldi	r23, 0xFF	; 255
    3452:	c5 01       	movw	r24, r10
    3454:	2c 87       	std	Y+12, r18	; 0x0c
    3456:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <strnlen_P>
    345a:	2c 01       	movw	r4, r24
    345c:	2c 85       	ldd	r18, Y+12	; 0x0c
    345e:	20 68       	ori	r18, 0x80	; 128
    3460:	22 2e       	mov	r2, r18
    3462:	83 01       	movw	r16, r6
    3464:	23 fc       	sbrc	r2, 3
    3466:	1b c0       	rjmp	.+54     	; 0x349e <vfprintf+0x1aa>
    3468:	83 2d       	mov	r24, r3
    346a:	90 e0       	ldi	r25, 0x00	; 0
    346c:	48 16       	cp	r4, r24
    346e:	59 06       	cpc	r5, r25
    3470:	b0 f4       	brcc	.+44     	; 0x349e <vfprintf+0x1aa>
    3472:	b7 01       	movw	r22, r14
    3474:	80 e2       	ldi	r24, 0x20	; 32
    3476:	90 e0       	ldi	r25, 0x00	; 0
    3478:	0e 94 03 1e 	call	0x3c06	; 0x3c06 <fputc>
    347c:	3a 94       	dec	r3
    347e:	f4 cf       	rjmp	.-24     	; 0x3468 <vfprintf+0x174>
    3480:	f5 01       	movw	r30, r10
    3482:	27 fc       	sbrc	r2, 7
    3484:	85 91       	lpm	r24, Z+
    3486:	27 fe       	sbrs	r2, 7
    3488:	81 91       	ld	r24, Z+
    348a:	5f 01       	movw	r10, r30
    348c:	b7 01       	movw	r22, r14
    348e:	90 e0       	ldi	r25, 0x00	; 0
    3490:	0e 94 03 1e 	call	0x3c06	; 0x3c06 <fputc>
    3494:	31 10       	cpse	r3, r1
    3496:	3a 94       	dec	r3
    3498:	f1 e0       	ldi	r31, 0x01	; 1
    349a:	4f 1a       	sub	r4, r31
    349c:	51 08       	sbc	r5, r1
    349e:	41 14       	cp	r4, r1
    34a0:	51 04       	cpc	r5, r1
    34a2:	71 f7       	brne	.-36     	; 0x3480 <vfprintf+0x18c>
    34a4:	e5 c0       	rjmp	.+458    	; 0x3670 <vfprintf+0x37c>
    34a6:	84 36       	cpi	r24, 0x64	; 100
    34a8:	11 f0       	breq	.+4      	; 0x34ae <vfprintf+0x1ba>
    34aa:	89 36       	cpi	r24, 0x69	; 105
    34ac:	39 f5       	brne	.+78     	; 0x34fc <vfprintf+0x208>
    34ae:	f8 01       	movw	r30, r16
    34b0:	27 ff       	sbrs	r18, 7
    34b2:	07 c0       	rjmp	.+14     	; 0x34c2 <vfprintf+0x1ce>
    34b4:	60 81       	ld	r22, Z
    34b6:	71 81       	ldd	r23, Z+1	; 0x01
    34b8:	82 81       	ldd	r24, Z+2	; 0x02
    34ba:	93 81       	ldd	r25, Z+3	; 0x03
    34bc:	0c 5f       	subi	r16, 0xFC	; 252
    34be:	1f 4f       	sbci	r17, 0xFF	; 255
    34c0:	08 c0       	rjmp	.+16     	; 0x34d2 <vfprintf+0x1de>
    34c2:	60 81       	ld	r22, Z
    34c4:	71 81       	ldd	r23, Z+1	; 0x01
    34c6:	88 27       	eor	r24, r24
    34c8:	77 fd       	sbrc	r23, 7
    34ca:	80 95       	com	r24
    34cc:	98 2f       	mov	r25, r24
    34ce:	0e 5f       	subi	r16, 0xFE	; 254
    34d0:	1f 4f       	sbci	r17, 0xFF	; 255
    34d2:	2f 76       	andi	r18, 0x6F	; 111
    34d4:	b2 2e       	mov	r11, r18
    34d6:	97 ff       	sbrs	r25, 7
    34d8:	09 c0       	rjmp	.+18     	; 0x34ec <vfprintf+0x1f8>
    34da:	90 95       	com	r25
    34dc:	80 95       	com	r24
    34de:	70 95       	com	r23
    34e0:	61 95       	neg	r22
    34e2:	7f 4f       	sbci	r23, 0xFF	; 255
    34e4:	8f 4f       	sbci	r24, 0xFF	; 255
    34e6:	9f 4f       	sbci	r25, 0xFF	; 255
    34e8:	20 68       	ori	r18, 0x80	; 128
    34ea:	b2 2e       	mov	r11, r18
    34ec:	2a e0       	ldi	r18, 0x0A	; 10
    34ee:	30 e0       	ldi	r19, 0x00	; 0
    34f0:	a4 01       	movw	r20, r8
    34f2:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <__ultoa_invert>
    34f6:	a8 2e       	mov	r10, r24
    34f8:	a8 18       	sub	r10, r8
    34fa:	44 c0       	rjmp	.+136    	; 0x3584 <vfprintf+0x290>
    34fc:	85 37       	cpi	r24, 0x75	; 117
    34fe:	29 f4       	brne	.+10     	; 0x350a <vfprintf+0x216>
    3500:	2f 7e       	andi	r18, 0xEF	; 239
    3502:	b2 2e       	mov	r11, r18
    3504:	2a e0       	ldi	r18, 0x0A	; 10
    3506:	30 e0       	ldi	r19, 0x00	; 0
    3508:	25 c0       	rjmp	.+74     	; 0x3554 <vfprintf+0x260>
    350a:	f2 2f       	mov	r31, r18
    350c:	f9 7f       	andi	r31, 0xF9	; 249
    350e:	bf 2e       	mov	r11, r31
    3510:	8f 36       	cpi	r24, 0x6F	; 111
    3512:	c1 f0       	breq	.+48     	; 0x3544 <vfprintf+0x250>
    3514:	18 f4       	brcc	.+6      	; 0x351c <vfprintf+0x228>
    3516:	88 35       	cpi	r24, 0x58	; 88
    3518:	79 f0       	breq	.+30     	; 0x3538 <vfprintf+0x244>
    351a:	b4 c0       	rjmp	.+360    	; 0x3684 <vfprintf+0x390>
    351c:	80 37       	cpi	r24, 0x70	; 112
    351e:	19 f0       	breq	.+6      	; 0x3526 <vfprintf+0x232>
    3520:	88 37       	cpi	r24, 0x78	; 120
    3522:	21 f0       	breq	.+8      	; 0x352c <vfprintf+0x238>
    3524:	af c0       	rjmp	.+350    	; 0x3684 <vfprintf+0x390>
    3526:	2f 2f       	mov	r18, r31
    3528:	20 61       	ori	r18, 0x10	; 16
    352a:	b2 2e       	mov	r11, r18
    352c:	b4 fe       	sbrs	r11, 4
    352e:	0d c0       	rjmp	.+26     	; 0x354a <vfprintf+0x256>
    3530:	8b 2d       	mov	r24, r11
    3532:	84 60       	ori	r24, 0x04	; 4
    3534:	b8 2e       	mov	r11, r24
    3536:	09 c0       	rjmp	.+18     	; 0x354a <vfprintf+0x256>
    3538:	24 ff       	sbrs	r18, 4
    353a:	0a c0       	rjmp	.+20     	; 0x3550 <vfprintf+0x25c>
    353c:	9f 2f       	mov	r25, r31
    353e:	96 60       	ori	r25, 0x06	; 6
    3540:	b9 2e       	mov	r11, r25
    3542:	06 c0       	rjmp	.+12     	; 0x3550 <vfprintf+0x25c>
    3544:	28 e0       	ldi	r18, 0x08	; 8
    3546:	30 e0       	ldi	r19, 0x00	; 0
    3548:	05 c0       	rjmp	.+10     	; 0x3554 <vfprintf+0x260>
    354a:	20 e1       	ldi	r18, 0x10	; 16
    354c:	30 e0       	ldi	r19, 0x00	; 0
    354e:	02 c0       	rjmp	.+4      	; 0x3554 <vfprintf+0x260>
    3550:	20 e1       	ldi	r18, 0x10	; 16
    3552:	32 e0       	ldi	r19, 0x02	; 2
    3554:	f8 01       	movw	r30, r16
    3556:	b7 fe       	sbrs	r11, 7
    3558:	07 c0       	rjmp	.+14     	; 0x3568 <vfprintf+0x274>
    355a:	60 81       	ld	r22, Z
    355c:	71 81       	ldd	r23, Z+1	; 0x01
    355e:	82 81       	ldd	r24, Z+2	; 0x02
    3560:	93 81       	ldd	r25, Z+3	; 0x03
    3562:	0c 5f       	subi	r16, 0xFC	; 252
    3564:	1f 4f       	sbci	r17, 0xFF	; 255
    3566:	06 c0       	rjmp	.+12     	; 0x3574 <vfprintf+0x280>
    3568:	60 81       	ld	r22, Z
    356a:	71 81       	ldd	r23, Z+1	; 0x01
    356c:	80 e0       	ldi	r24, 0x00	; 0
    356e:	90 e0       	ldi	r25, 0x00	; 0
    3570:	0e 5f       	subi	r16, 0xFE	; 254
    3572:	1f 4f       	sbci	r17, 0xFF	; 255
    3574:	a4 01       	movw	r20, r8
    3576:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <__ultoa_invert>
    357a:	a8 2e       	mov	r10, r24
    357c:	a8 18       	sub	r10, r8
    357e:	fb 2d       	mov	r31, r11
    3580:	ff 77       	andi	r31, 0x7F	; 127
    3582:	bf 2e       	mov	r11, r31
    3584:	b6 fe       	sbrs	r11, 6
    3586:	0b c0       	rjmp	.+22     	; 0x359e <vfprintf+0x2aa>
    3588:	2b 2d       	mov	r18, r11
    358a:	2e 7f       	andi	r18, 0xFE	; 254
    358c:	a5 14       	cp	r10, r5
    358e:	50 f4       	brcc	.+20     	; 0x35a4 <vfprintf+0x2b0>
    3590:	b4 fe       	sbrs	r11, 4
    3592:	0a c0       	rjmp	.+20     	; 0x35a8 <vfprintf+0x2b4>
    3594:	b2 fc       	sbrc	r11, 2
    3596:	08 c0       	rjmp	.+16     	; 0x35a8 <vfprintf+0x2b4>
    3598:	2b 2d       	mov	r18, r11
    359a:	2e 7e       	andi	r18, 0xEE	; 238
    359c:	05 c0       	rjmp	.+10     	; 0x35a8 <vfprintf+0x2b4>
    359e:	7a 2c       	mov	r7, r10
    35a0:	2b 2d       	mov	r18, r11
    35a2:	03 c0       	rjmp	.+6      	; 0x35aa <vfprintf+0x2b6>
    35a4:	7a 2c       	mov	r7, r10
    35a6:	01 c0       	rjmp	.+2      	; 0x35aa <vfprintf+0x2b6>
    35a8:	75 2c       	mov	r7, r5
    35aa:	24 ff       	sbrs	r18, 4
    35ac:	0d c0       	rjmp	.+26     	; 0x35c8 <vfprintf+0x2d4>
    35ae:	fe 01       	movw	r30, r28
    35b0:	ea 0d       	add	r30, r10
    35b2:	f1 1d       	adc	r31, r1
    35b4:	80 81       	ld	r24, Z
    35b6:	80 33       	cpi	r24, 0x30	; 48
    35b8:	11 f4       	brne	.+4      	; 0x35be <vfprintf+0x2ca>
    35ba:	29 7e       	andi	r18, 0xE9	; 233
    35bc:	09 c0       	rjmp	.+18     	; 0x35d0 <vfprintf+0x2dc>
    35be:	22 ff       	sbrs	r18, 2
    35c0:	06 c0       	rjmp	.+12     	; 0x35ce <vfprintf+0x2da>
    35c2:	73 94       	inc	r7
    35c4:	73 94       	inc	r7
    35c6:	04 c0       	rjmp	.+8      	; 0x35d0 <vfprintf+0x2dc>
    35c8:	82 2f       	mov	r24, r18
    35ca:	86 78       	andi	r24, 0x86	; 134
    35cc:	09 f0       	breq	.+2      	; 0x35d0 <vfprintf+0x2dc>
    35ce:	73 94       	inc	r7
    35d0:	23 fd       	sbrc	r18, 3
    35d2:	13 c0       	rjmp	.+38     	; 0x35fa <vfprintf+0x306>
    35d4:	20 ff       	sbrs	r18, 0
    35d6:	06 c0       	rjmp	.+12     	; 0x35e4 <vfprintf+0x2f0>
    35d8:	5a 2c       	mov	r5, r10
    35da:	73 14       	cp	r7, r3
    35dc:	18 f4       	brcc	.+6      	; 0x35e4 <vfprintf+0x2f0>
    35de:	53 0c       	add	r5, r3
    35e0:	57 18       	sub	r5, r7
    35e2:	73 2c       	mov	r7, r3
    35e4:	73 14       	cp	r7, r3
    35e6:	68 f4       	brcc	.+26     	; 0x3602 <vfprintf+0x30e>
    35e8:	b7 01       	movw	r22, r14
    35ea:	80 e2       	ldi	r24, 0x20	; 32
    35ec:	90 e0       	ldi	r25, 0x00	; 0
    35ee:	2c 87       	std	Y+12, r18	; 0x0c
    35f0:	0e 94 03 1e 	call	0x3c06	; 0x3c06 <fputc>
    35f4:	73 94       	inc	r7
    35f6:	2c 85       	ldd	r18, Y+12	; 0x0c
    35f8:	f5 cf       	rjmp	.-22     	; 0x35e4 <vfprintf+0x2f0>
    35fa:	73 14       	cp	r7, r3
    35fc:	10 f4       	brcc	.+4      	; 0x3602 <vfprintf+0x30e>
    35fe:	37 18       	sub	r3, r7
    3600:	01 c0       	rjmp	.+2      	; 0x3604 <vfprintf+0x310>
    3602:	31 2c       	mov	r3, r1
    3604:	24 ff       	sbrs	r18, 4
    3606:	12 c0       	rjmp	.+36     	; 0x362c <vfprintf+0x338>
    3608:	b7 01       	movw	r22, r14
    360a:	80 e3       	ldi	r24, 0x30	; 48
    360c:	90 e0       	ldi	r25, 0x00	; 0
    360e:	2c 87       	std	Y+12, r18	; 0x0c
    3610:	0e 94 03 1e 	call	0x3c06	; 0x3c06 <fputc>
    3614:	2c 85       	ldd	r18, Y+12	; 0x0c
    3616:	22 ff       	sbrs	r18, 2
    3618:	17 c0       	rjmp	.+46     	; 0x3648 <vfprintf+0x354>
    361a:	21 ff       	sbrs	r18, 1
    361c:	03 c0       	rjmp	.+6      	; 0x3624 <vfprintf+0x330>
    361e:	88 e5       	ldi	r24, 0x58	; 88
    3620:	90 e0       	ldi	r25, 0x00	; 0
    3622:	02 c0       	rjmp	.+4      	; 0x3628 <vfprintf+0x334>
    3624:	88 e7       	ldi	r24, 0x78	; 120
    3626:	90 e0       	ldi	r25, 0x00	; 0
    3628:	b7 01       	movw	r22, r14
    362a:	0c c0       	rjmp	.+24     	; 0x3644 <vfprintf+0x350>
    362c:	82 2f       	mov	r24, r18
    362e:	86 78       	andi	r24, 0x86	; 134
    3630:	59 f0       	breq	.+22     	; 0x3648 <vfprintf+0x354>
    3632:	21 fd       	sbrc	r18, 1
    3634:	02 c0       	rjmp	.+4      	; 0x363a <vfprintf+0x346>
    3636:	80 e2       	ldi	r24, 0x20	; 32
    3638:	01 c0       	rjmp	.+2      	; 0x363c <vfprintf+0x348>
    363a:	8b e2       	ldi	r24, 0x2B	; 43
    363c:	27 fd       	sbrc	r18, 7
    363e:	8d e2       	ldi	r24, 0x2D	; 45
    3640:	b7 01       	movw	r22, r14
    3642:	90 e0       	ldi	r25, 0x00	; 0
    3644:	0e 94 03 1e 	call	0x3c06	; 0x3c06 <fputc>
    3648:	a5 14       	cp	r10, r5
    364a:	38 f4       	brcc	.+14     	; 0x365a <vfprintf+0x366>
    364c:	b7 01       	movw	r22, r14
    364e:	80 e3       	ldi	r24, 0x30	; 48
    3650:	90 e0       	ldi	r25, 0x00	; 0
    3652:	0e 94 03 1e 	call	0x3c06	; 0x3c06 <fputc>
    3656:	5a 94       	dec	r5
    3658:	f7 cf       	rjmp	.-18     	; 0x3648 <vfprintf+0x354>
    365a:	aa 94       	dec	r10
    365c:	f4 01       	movw	r30, r8
    365e:	ea 0d       	add	r30, r10
    3660:	f1 1d       	adc	r31, r1
    3662:	80 81       	ld	r24, Z
    3664:	b7 01       	movw	r22, r14
    3666:	90 e0       	ldi	r25, 0x00	; 0
    3668:	0e 94 03 1e 	call	0x3c06	; 0x3c06 <fputc>
    366c:	a1 10       	cpse	r10, r1
    366e:	f5 cf       	rjmp	.-22     	; 0x365a <vfprintf+0x366>
    3670:	33 20       	and	r3, r3
    3672:	09 f4       	brne	.+2      	; 0x3676 <vfprintf+0x382>
    3674:	51 ce       	rjmp	.-862    	; 0x3318 <vfprintf+0x24>
    3676:	b7 01       	movw	r22, r14
    3678:	80 e2       	ldi	r24, 0x20	; 32
    367a:	90 e0       	ldi	r25, 0x00	; 0
    367c:	0e 94 03 1e 	call	0x3c06	; 0x3c06 <fputc>
    3680:	3a 94       	dec	r3
    3682:	f6 cf       	rjmp	.-20     	; 0x3670 <vfprintf+0x37c>
    3684:	f7 01       	movw	r30, r14
    3686:	86 81       	ldd	r24, Z+6	; 0x06
    3688:	97 81       	ldd	r25, Z+7	; 0x07
    368a:	02 c0       	rjmp	.+4      	; 0x3690 <vfprintf+0x39c>
    368c:	8f ef       	ldi	r24, 0xFF	; 255
    368e:	9f ef       	ldi	r25, 0xFF	; 255
    3690:	2c 96       	adiw	r28, 0x0c	; 12
    3692:	e2 e1       	ldi	r30, 0x12	; 18
    3694:	0c 94 af 1e 	jmp	0x3d5e	; 0x3d5e <__epilogue_restores__>

00003698 <__eerd_block_m168>:
    3698:	dc 01       	movw	r26, r24
    369a:	cb 01       	movw	r24, r22

0000369c <__eerd_blraw_m168>:
    369c:	fc 01       	movw	r30, r24
    369e:	f9 99       	sbic	0x1f, 1	; 31
    36a0:	fe cf       	rjmp	.-4      	; 0x369e <__eerd_blraw_m168+0x2>
    36a2:	06 c0       	rjmp	.+12     	; 0x36b0 <__eerd_blraw_m168+0x14>
    36a4:	f2 bd       	out	0x22, r31	; 34
    36a6:	e1 bd       	out	0x21, r30	; 33
    36a8:	f8 9a       	sbi	0x1f, 0	; 31
    36aa:	31 96       	adiw	r30, 0x01	; 1
    36ac:	00 b4       	in	r0, 0x20	; 32
    36ae:	0d 92       	st	X+, r0
    36b0:	41 50       	subi	r20, 0x01	; 1
    36b2:	50 40       	sbci	r21, 0x00	; 0
    36b4:	b8 f7       	brcc	.-18     	; 0x36a4 <__eerd_blraw_m168+0x8>
    36b6:	08 95       	ret

000036b8 <__eerd_byte_m168>:
    36b8:	f9 99       	sbic	0x1f, 1	; 31
    36ba:	fe cf       	rjmp	.-4      	; 0x36b8 <__eerd_byte_m168>
    36bc:	92 bd       	out	0x22, r25	; 34
    36be:	81 bd       	out	0x21, r24	; 33
    36c0:	f8 9a       	sbi	0x1f, 0	; 31
    36c2:	99 27       	eor	r25, r25
    36c4:	80 b5       	in	r24, 0x20	; 32
    36c6:	08 95       	ret

000036c8 <__eerd_word_m168>:
    36c8:	a8 e1       	ldi	r26, 0x18	; 24
    36ca:	b0 e0       	ldi	r27, 0x00	; 0
    36cc:	42 e0       	ldi	r20, 0x02	; 2
    36ce:	50 e0       	ldi	r21, 0x00	; 0
    36d0:	0c 94 4e 1b 	jmp	0x369c	; 0x369c <__eerd_blraw_m168>

000036d4 <__eewr_block_m168>:
    36d4:	dc 01       	movw	r26, r24
    36d6:	cb 01       	movw	r24, r22
    36d8:	03 c0       	rjmp	.+6      	; 0x36e0 <__eewr_block_m168+0xc>
    36da:	2d 91       	ld	r18, X+
    36dc:	0e 94 75 1b 	call	0x36ea	; 0x36ea <__eewr_r18_m168>
    36e0:	41 50       	subi	r20, 0x01	; 1
    36e2:	50 40       	sbci	r21, 0x00	; 0
    36e4:	d0 f7       	brcc	.-12     	; 0x36da <__eewr_block_m168+0x6>
    36e6:	08 95       	ret

000036e8 <__eewr_byte_m168>:
    36e8:	26 2f       	mov	r18, r22

000036ea <__eewr_r18_m168>:
    36ea:	f9 99       	sbic	0x1f, 1	; 31
    36ec:	fe cf       	rjmp	.-4      	; 0x36ea <__eewr_r18_m168>
    36ee:	1f ba       	out	0x1f, r1	; 31
    36f0:	92 bd       	out	0x22, r25	; 34
    36f2:	81 bd       	out	0x21, r24	; 33
    36f4:	20 bd       	out	0x20, r18	; 32
    36f6:	0f b6       	in	r0, 0x3f	; 63
    36f8:	f8 94       	cli
    36fa:	fa 9a       	sbi	0x1f, 2	; 31
    36fc:	f9 9a       	sbi	0x1f, 1	; 31
    36fe:	0f be       	out	0x3f, r0	; 63
    3700:	01 96       	adiw	r24, 0x01	; 1
    3702:	08 95       	ret

00003704 <__eewr_word_m168>:
    3704:	0e 94 74 1b 	call	0x36e8	; 0x36e8 <__eewr_byte_m168>
    3708:	27 2f       	mov	r18, r23
    370a:	0c 94 75 1b 	jmp	0x36ea	; 0x36ea <__eewr_r18_m168>

0000370e <dtoa_prf>:
    370e:	6f 92       	push	r6
    3710:	7f 92       	push	r7
    3712:	9f 92       	push	r9
    3714:	af 92       	push	r10
    3716:	bf 92       	push	r11
    3718:	cf 92       	push	r12
    371a:	df 92       	push	r13
    371c:	ef 92       	push	r14
    371e:	ff 92       	push	r15
    3720:	0f 93       	push	r16
    3722:	1f 93       	push	r17
    3724:	cf 93       	push	r28
    3726:	df 93       	push	r29
    3728:	cd b7       	in	r28, 0x3d	; 61
    372a:	de b7       	in	r29, 0x3e	; 62
    372c:	29 97       	sbiw	r28, 0x09	; 9
    372e:	0f b6       	in	r0, 0x3f	; 63
    3730:	f8 94       	cli
    3732:	de bf       	out	0x3e, r29	; 62
    3734:	0f be       	out	0x3f, r0	; 63
    3736:	cd bf       	out	0x3d, r28	; 61
    3738:	6a 01       	movw	r12, r20
    373a:	b2 2e       	mov	r11, r18
    373c:	10 2f       	mov	r17, r16
    373e:	0c 33       	cpi	r16, 0x3C	; 60
    3740:	20 f4       	brcc	.+8      	; 0x374a <dtoa_prf+0x3c>
    3742:	ff 24       	eor	r15, r15
    3744:	f3 94       	inc	r15
    3746:	f0 0e       	add	r15, r16
    3748:	02 c0       	rjmp	.+4      	; 0x374e <dtoa_prf+0x40>
    374a:	4c e3       	ldi	r20, 0x3C	; 60
    374c:	f4 2e       	mov	r15, r20
    374e:	0f 2d       	mov	r16, r15
    3750:	27 e0       	ldi	r18, 0x07	; 7
    3752:	ae 01       	movw	r20, r28
    3754:	4f 5f       	subi	r20, 0xFF	; 255
    3756:	5f 4f       	sbci	r21, 0xFF	; 255
    3758:	0e 94 05 1d 	call	0x3a0a	; 0x3a0a <__ftoa_engine>
    375c:	79 81       	ldd	r23, Y+1	; 0x01
    375e:	27 2f       	mov	r18, r23
    3760:	29 70       	andi	r18, 0x09	; 9
    3762:	21 30       	cpi	r18, 0x01	; 1
    3764:	31 f0       	breq	.+12     	; 0x3772 <dtoa_prf+0x64>
    3766:	e1 fc       	sbrc	r14, 1
    3768:	06 c0       	rjmp	.+12     	; 0x3776 <dtoa_prf+0x68>
    376a:	e0 fc       	sbrc	r14, 0
    376c:	06 c0       	rjmp	.+12     	; 0x377a <dtoa_prf+0x6c>
    376e:	60 e0       	ldi	r22, 0x00	; 0
    3770:	05 c0       	rjmp	.+10     	; 0x377c <dtoa_prf+0x6e>
    3772:	6d e2       	ldi	r22, 0x2D	; 45
    3774:	03 c0       	rjmp	.+6      	; 0x377c <dtoa_prf+0x6e>
    3776:	6b e2       	ldi	r22, 0x2B	; 43
    3778:	01 c0       	rjmp	.+2      	; 0x377c <dtoa_prf+0x6e>
    377a:	60 e2       	ldi	r22, 0x20	; 32
    377c:	ae 2d       	mov	r26, r14
    377e:	a0 71       	andi	r26, 0x10	; 16
    3780:	73 ff       	sbrs	r23, 3
    3782:	36 c0       	rjmp	.+108    	; 0x37f0 <dtoa_prf+0xe2>
    3784:	66 23       	and	r22, r22
    3786:	11 f0       	breq	.+4      	; 0x378c <dtoa_prf+0x7e>
    3788:	84 e0       	ldi	r24, 0x04	; 4
    378a:	01 c0       	rjmp	.+2      	; 0x378e <dtoa_prf+0x80>
    378c:	83 e0       	ldi	r24, 0x03	; 3
    378e:	8b 15       	cp	r24, r11
    3790:	10 f4       	brcc	.+4      	; 0x3796 <dtoa_prf+0x88>
    3792:	b8 1a       	sub	r11, r24
    3794:	01 c0       	rjmp	.+2      	; 0x3798 <dtoa_prf+0x8a>
    3796:	b1 2c       	mov	r11, r1
    3798:	a1 11       	cpse	r26, r1
    379a:	0b c0       	rjmp	.+22     	; 0x37b2 <dtoa_prf+0xa4>
    379c:	f6 01       	movw	r30, r12
    379e:	8b 2d       	mov	r24, r11
    37a0:	90 e2       	ldi	r25, 0x20	; 32
    37a2:	88 23       	and	r24, r24
    37a4:	19 f0       	breq	.+6      	; 0x37ac <dtoa_prf+0x9e>
    37a6:	91 93       	st	Z+, r25
    37a8:	81 50       	subi	r24, 0x01	; 1
    37aa:	fb cf       	rjmp	.-10     	; 0x37a2 <dtoa_prf+0x94>
    37ac:	cb 0c       	add	r12, r11
    37ae:	d1 1c       	adc	r13, r1
    37b0:	b1 2c       	mov	r11, r1
    37b2:	66 23       	and	r22, r22
    37b4:	31 f0       	breq	.+12     	; 0x37c2 <dtoa_prf+0xb4>
    37b6:	f6 01       	movw	r30, r12
    37b8:	60 83       	st	Z, r22
    37ba:	96 01       	movw	r18, r12
    37bc:	2f 5f       	subi	r18, 0xFF	; 255
    37be:	3f 4f       	sbci	r19, 0xFF	; 255
    37c0:	69 01       	movw	r12, r18
    37c2:	c6 01       	movw	r24, r12
    37c4:	03 96       	adiw	r24, 0x03	; 3
    37c6:	e2 fe       	sbrs	r14, 2
    37c8:	05 c0       	rjmp	.+10     	; 0x37d4 <dtoa_prf+0xc6>
    37ca:	2e e4       	ldi	r18, 0x4E	; 78
    37cc:	f6 01       	movw	r30, r12
    37ce:	20 83       	st	Z, r18
    37d0:	31 e4       	ldi	r19, 0x41	; 65
    37d2:	04 c0       	rjmp	.+8      	; 0x37dc <dtoa_prf+0xce>
    37d4:	2e e6       	ldi	r18, 0x6E	; 110
    37d6:	f6 01       	movw	r30, r12
    37d8:	20 83       	st	Z, r18
    37da:	31 e6       	ldi	r19, 0x61	; 97
    37dc:	31 83       	std	Z+1, r19	; 0x01
    37de:	22 83       	std	Z+2, r18	; 0x02
    37e0:	fc 01       	movw	r30, r24
    37e2:	2b 2d       	mov	r18, r11
    37e4:	30 e2       	ldi	r19, 0x20	; 32
    37e6:	22 23       	and	r18, r18
    37e8:	f1 f1       	breq	.+124    	; 0x3866 <dtoa_prf+0x158>
    37ea:	31 93       	st	Z+, r19
    37ec:	21 50       	subi	r18, 0x01	; 1
    37ee:	fb cf       	rjmp	.-10     	; 0x37e6 <dtoa_prf+0xd8>
    37f0:	72 ff       	sbrs	r23, 2
    37f2:	40 c0       	rjmp	.+128    	; 0x3874 <dtoa_prf+0x166>
    37f4:	66 23       	and	r22, r22
    37f6:	11 f0       	breq	.+4      	; 0x37fc <dtoa_prf+0xee>
    37f8:	84 e0       	ldi	r24, 0x04	; 4
    37fa:	01 c0       	rjmp	.+2      	; 0x37fe <dtoa_prf+0xf0>
    37fc:	83 e0       	ldi	r24, 0x03	; 3
    37fe:	8b 15       	cp	r24, r11
    3800:	10 f4       	brcc	.+4      	; 0x3806 <dtoa_prf+0xf8>
    3802:	b8 1a       	sub	r11, r24
    3804:	01 c0       	rjmp	.+2      	; 0x3808 <dtoa_prf+0xfa>
    3806:	b1 2c       	mov	r11, r1
    3808:	a1 11       	cpse	r26, r1
    380a:	0b c0       	rjmp	.+22     	; 0x3822 <dtoa_prf+0x114>
    380c:	f6 01       	movw	r30, r12
    380e:	8b 2d       	mov	r24, r11
    3810:	90 e2       	ldi	r25, 0x20	; 32
    3812:	88 23       	and	r24, r24
    3814:	19 f0       	breq	.+6      	; 0x381c <dtoa_prf+0x10e>
    3816:	91 93       	st	Z+, r25
    3818:	81 50       	subi	r24, 0x01	; 1
    381a:	fb cf       	rjmp	.-10     	; 0x3812 <dtoa_prf+0x104>
    381c:	cb 0c       	add	r12, r11
    381e:	d1 1c       	adc	r13, r1
    3820:	b1 2c       	mov	r11, r1
    3822:	66 23       	and	r22, r22
    3824:	31 f0       	breq	.+12     	; 0x3832 <dtoa_prf+0x124>
    3826:	f6 01       	movw	r30, r12
    3828:	60 83       	st	Z, r22
    382a:	96 01       	movw	r18, r12
    382c:	2f 5f       	subi	r18, 0xFF	; 255
    382e:	3f 4f       	sbci	r19, 0xFF	; 255
    3830:	69 01       	movw	r12, r18
    3832:	c6 01       	movw	r24, r12
    3834:	03 96       	adiw	r24, 0x03	; 3
    3836:	e2 fe       	sbrs	r14, 2
    3838:	07 c0       	rjmp	.+14     	; 0x3848 <dtoa_prf+0x13a>
    383a:	29 e4       	ldi	r18, 0x49	; 73
    383c:	f6 01       	movw	r30, r12
    383e:	20 83       	st	Z, r18
    3840:	2e e4       	ldi	r18, 0x4E	; 78
    3842:	21 83       	std	Z+1, r18	; 0x01
    3844:	26 e4       	ldi	r18, 0x46	; 70
    3846:	06 c0       	rjmp	.+12     	; 0x3854 <dtoa_prf+0x146>
    3848:	29 e6       	ldi	r18, 0x69	; 105
    384a:	f6 01       	movw	r30, r12
    384c:	20 83       	st	Z, r18
    384e:	2e e6       	ldi	r18, 0x6E	; 110
    3850:	21 83       	std	Z+1, r18	; 0x01
    3852:	26 e6       	ldi	r18, 0x66	; 102
    3854:	22 83       	std	Z+2, r18	; 0x02
    3856:	fc 01       	movw	r30, r24
    3858:	2b 2d       	mov	r18, r11
    385a:	30 e2       	ldi	r19, 0x20	; 32
    385c:	22 23       	and	r18, r18
    385e:	19 f0       	breq	.+6      	; 0x3866 <dtoa_prf+0x158>
    3860:	31 93       	st	Z+, r19
    3862:	21 50       	subi	r18, 0x01	; 1
    3864:	fb cf       	rjmp	.-10     	; 0x385c <dtoa_prf+0x14e>
    3866:	fc 01       	movw	r30, r24
    3868:	eb 0d       	add	r30, r11
    386a:	f1 1d       	adc	r31, r1
    386c:	10 82       	st	Z, r1
    386e:	8e ef       	ldi	r24, 0xFE	; 254
    3870:	9f ef       	ldi	r25, 0xFF	; 255
    3872:	b7 c0       	rjmp	.+366    	; 0x39e2 <dtoa_prf+0x2d4>
    3874:	b1 e0       	ldi	r27, 0x01	; 1
    3876:	61 11       	cpse	r22, r1
    3878:	01 c0       	rjmp	.+2      	; 0x387c <dtoa_prf+0x16e>
    387a:	b0 e0       	ldi	r27, 0x00	; 0
    387c:	4b 2f       	mov	r20, r27
    387e:	50 e0       	ldi	r21, 0x00	; 0
    3880:	18 16       	cp	r1, r24
    3882:	19 06       	cpc	r1, r25
    3884:	24 f4       	brge	.+8      	; 0x388e <dtoa_prf+0x180>
    3886:	9c 01       	movw	r18, r24
    3888:	2f 5f       	subi	r18, 0xFF	; 255
    388a:	3f 4f       	sbci	r19, 0xFF	; 255
    388c:	02 c0       	rjmp	.+4      	; 0x3892 <dtoa_prf+0x184>
    388e:	21 e0       	ldi	r18, 0x01	; 1
    3890:	30 e0       	ldi	r19, 0x00	; 0
    3892:	24 0f       	add	r18, r20
    3894:	35 1f       	adc	r19, r21
    3896:	11 23       	and	r17, r17
    3898:	29 f0       	breq	.+10     	; 0x38a4 <dtoa_prf+0x196>
    389a:	41 2f       	mov	r20, r17
    389c:	50 e0       	ldi	r21, 0x00	; 0
    389e:	4f 5f       	subi	r20, 0xFF	; 255
    38a0:	5f 4f       	sbci	r21, 0xFF	; 255
    38a2:	02 c0       	rjmp	.+4      	; 0x38a8 <dtoa_prf+0x19a>
    38a4:	40 e0       	ldi	r20, 0x00	; 0
    38a6:	50 e0       	ldi	r21, 0x00	; 0
    38a8:	42 0f       	add	r20, r18
    38aa:	53 1f       	adc	r21, r19
    38ac:	2b 2d       	mov	r18, r11
    38ae:	30 e0       	ldi	r19, 0x00	; 0
    38b0:	42 17       	cp	r20, r18
    38b2:	53 07       	cpc	r21, r19
    38b4:	14 f4       	brge	.+4      	; 0x38ba <dtoa_prf+0x1ac>
    38b6:	b4 1a       	sub	r11, r20
    38b8:	01 c0       	rjmp	.+2      	; 0x38bc <dtoa_prf+0x1ae>
    38ba:	b1 2c       	mov	r11, r1
    38bc:	2e 2d       	mov	r18, r14
    38be:	28 71       	andi	r18, 0x18	; 24
    38c0:	59 f4       	brne	.+22     	; 0x38d8 <dtoa_prf+0x1ca>
    38c2:	f6 01       	movw	r30, r12
    38c4:	2b 2d       	mov	r18, r11
    38c6:	30 e2       	ldi	r19, 0x20	; 32
    38c8:	22 23       	and	r18, r18
    38ca:	19 f0       	breq	.+6      	; 0x38d2 <dtoa_prf+0x1c4>
    38cc:	31 93       	st	Z+, r19
    38ce:	21 50       	subi	r18, 0x01	; 1
    38d0:	fb cf       	rjmp	.-10     	; 0x38c8 <dtoa_prf+0x1ba>
    38d2:	cb 0c       	add	r12, r11
    38d4:	d1 1c       	adc	r13, r1
    38d6:	b1 2c       	mov	r11, r1
    38d8:	bb 23       	and	r27, r27
    38da:	31 f0       	breq	.+12     	; 0x38e8 <dtoa_prf+0x1da>
    38dc:	f6 01       	movw	r30, r12
    38de:	60 83       	st	Z, r22
    38e0:	96 01       	movw	r18, r12
    38e2:	2f 5f       	subi	r18, 0xFF	; 255
    38e4:	3f 4f       	sbci	r19, 0xFF	; 255
    38e6:	69 01       	movw	r12, r18
    38e8:	a1 11       	cpse	r26, r1
    38ea:	0b c0       	rjmp	.+22     	; 0x3902 <dtoa_prf+0x1f4>
    38ec:	f6 01       	movw	r30, r12
    38ee:	2b 2d       	mov	r18, r11
    38f0:	30 e3       	ldi	r19, 0x30	; 48
    38f2:	22 23       	and	r18, r18
    38f4:	19 f0       	breq	.+6      	; 0x38fc <dtoa_prf+0x1ee>
    38f6:	31 93       	st	Z+, r19
    38f8:	21 50       	subi	r18, 0x01	; 1
    38fa:	fb cf       	rjmp	.-10     	; 0x38f2 <dtoa_prf+0x1e4>
    38fc:	cb 0c       	add	r12, r11
    38fe:	d1 1c       	adc	r13, r1
    3900:	b1 2c       	mov	r11, r1
    3902:	f8 0e       	add	r15, r24
    3904:	0a 81       	ldd	r16, Y+2	; 0x02
    3906:	37 2f       	mov	r19, r23
    3908:	30 71       	andi	r19, 0x10	; 16
    390a:	a3 2e       	mov	r10, r19
    390c:	74 ff       	sbrs	r23, 4
    390e:	03 c0       	rjmp	.+6      	; 0x3916 <dtoa_prf+0x208>
    3910:	01 33       	cpi	r16, 0x31	; 49
    3912:	09 f4       	brne	.+2      	; 0x3916 <dtoa_prf+0x208>
    3914:	fa 94       	dec	r15
    3916:	1f 14       	cp	r1, r15
    3918:	2c f4       	brge	.+10     	; 0x3924 <dtoa_prf+0x216>
    391a:	2f 2d       	mov	r18, r15
    391c:	29 30       	cpi	r18, 0x09	; 9
    391e:	18 f0       	brcs	.+6      	; 0x3926 <dtoa_prf+0x218>
    3920:	28 e0       	ldi	r18, 0x08	; 8
    3922:	01 c0       	rjmp	.+2      	; 0x3926 <dtoa_prf+0x218>
    3924:	21 e0       	ldi	r18, 0x01	; 1
    3926:	68 2f       	mov	r22, r24
    3928:	39 2f       	mov	r19, r25
    392a:	97 ff       	sbrs	r25, 7
    392c:	02 c0       	rjmp	.+4      	; 0x3932 <dtoa_prf+0x224>
    392e:	60 e0       	ldi	r22, 0x00	; 0
    3930:	30 e0       	ldi	r19, 0x00	; 0
    3932:	46 2f       	mov	r20, r22
    3934:	53 2f       	mov	r21, r19
    3936:	61 2c       	mov	r6, r1
    3938:	71 2c       	mov	r7, r1
    393a:	3e e2       	ldi	r19, 0x2E	; 46
    393c:	93 2e       	mov	r9, r19
    393e:	bc 01       	movw	r22, r24
    3940:	62 1b       	sub	r22, r18
    3942:	71 09       	sbc	r23, r1
    3944:	9b 01       	movw	r18, r22
    3946:	dc 01       	movw	r26, r24
    3948:	a4 1b       	sub	r26, r20
    394a:	b5 0b       	sbc	r27, r21
    394c:	e1 e0       	ldi	r30, 0x01	; 1
    394e:	f0 e0       	ldi	r31, 0x00	; 0
    3950:	ec 0f       	add	r30, r28
    3952:	fd 1f       	adc	r31, r29
    3954:	ae 0f       	add	r26, r30
    3956:	bf 1f       	adc	r27, r31
    3958:	e1 2e       	mov	r14, r17
    395a:	f1 2c       	mov	r15, r1
    395c:	f1 94       	neg	r15
    395e:	e1 94       	neg	r14
    3960:	f1 08       	sbc	r15, r1
    3962:	4f 3f       	cpi	r20, 0xFF	; 255
    3964:	ff ef       	ldi	r31, 0xFF	; 255
    3966:	5f 07       	cpc	r21, r31
    3968:	31 f4       	brne	.+12     	; 0x3976 <dtoa_prf+0x268>
    396a:	f6 01       	movw	r30, r12
    396c:	90 82       	st	Z, r9
    396e:	b6 01       	movw	r22, r12
    3970:	6f 5f       	subi	r22, 0xFF	; 255
    3972:	7f 4f       	sbci	r23, 0xFF	; 255
    3974:	6b 01       	movw	r12, r22
    3976:	84 17       	cp	r24, r20
    3978:	95 07       	cpc	r25, r21
    397a:	4c f0       	brlt	.+18     	; 0x398e <dtoa_prf+0x280>
    397c:	24 17       	cp	r18, r20
    397e:	35 07       	cpc	r19, r21
    3980:	34 f4       	brge	.+12     	; 0x398e <dtoa_prf+0x280>
    3982:	bd 01       	movw	r22, r26
    3984:	66 0d       	add	r22, r6
    3986:	77 1d       	adc	r23, r7
    3988:	fb 01       	movw	r30, r22
    398a:	11 81       	ldd	r17, Z+1	; 0x01
    398c:	01 c0       	rjmp	.+2      	; 0x3990 <dtoa_prf+0x282>
    398e:	10 e3       	ldi	r17, 0x30	; 48
    3990:	41 50       	subi	r20, 0x01	; 1
    3992:	51 09       	sbc	r21, r1
    3994:	ff ef       	ldi	r31, 0xFF	; 255
    3996:	6f 1a       	sub	r6, r31
    3998:	7f 0a       	sbc	r7, r31
    399a:	b6 01       	movw	r22, r12
    399c:	6f 5f       	subi	r22, 0xFF	; 255
    399e:	7f 4f       	sbci	r23, 0xFF	; 255
    39a0:	4e 15       	cp	r20, r14
    39a2:	5f 05       	cpc	r21, r15
    39a4:	24 f0       	brlt	.+8      	; 0x39ae <dtoa_prf+0x2a0>
    39a6:	f6 01       	movw	r30, r12
    39a8:	10 83       	st	Z, r17
    39aa:	6b 01       	movw	r12, r22
    39ac:	da cf       	rjmp	.-76     	; 0x3962 <dtoa_prf+0x254>
    39ae:	48 17       	cp	r20, r24
    39b0:	59 07       	cpc	r21, r25
    39b2:	39 f4       	brne	.+14     	; 0x39c2 <dtoa_prf+0x2b4>
    39b4:	06 33       	cpi	r16, 0x36	; 54
    39b6:	20 f4       	brcc	.+8      	; 0x39c0 <dtoa_prf+0x2b2>
    39b8:	05 33       	cpi	r16, 0x35	; 53
    39ba:	19 f4       	brne	.+6      	; 0x39c2 <dtoa_prf+0x2b4>
    39bc:	a1 10       	cpse	r10, r1
    39be:	01 c0       	rjmp	.+2      	; 0x39c2 <dtoa_prf+0x2b4>
    39c0:	11 e3       	ldi	r17, 0x31	; 49
    39c2:	f6 01       	movw	r30, r12
    39c4:	10 83       	st	Z, r17
    39c6:	fb 01       	movw	r30, r22
    39c8:	8b 2d       	mov	r24, r11
    39ca:	90 e2       	ldi	r25, 0x20	; 32
    39cc:	88 23       	and	r24, r24
    39ce:	19 f0       	breq	.+6      	; 0x39d6 <dtoa_prf+0x2c8>
    39d0:	91 93       	st	Z+, r25
    39d2:	81 50       	subi	r24, 0x01	; 1
    39d4:	fb cf       	rjmp	.-10     	; 0x39cc <dtoa_prf+0x2be>
    39d6:	fb 01       	movw	r30, r22
    39d8:	eb 0d       	add	r30, r11
    39da:	f1 1d       	adc	r31, r1
    39dc:	10 82       	st	Z, r1
    39de:	80 e0       	ldi	r24, 0x00	; 0
    39e0:	90 e0       	ldi	r25, 0x00	; 0
    39e2:	29 96       	adiw	r28, 0x09	; 9
    39e4:	0f b6       	in	r0, 0x3f	; 63
    39e6:	f8 94       	cli
    39e8:	de bf       	out	0x3e, r29	; 62
    39ea:	0f be       	out	0x3f, r0	; 63
    39ec:	cd bf       	out	0x3d, r28	; 61
    39ee:	df 91       	pop	r29
    39f0:	cf 91       	pop	r28
    39f2:	1f 91       	pop	r17
    39f4:	0f 91       	pop	r16
    39f6:	ff 90       	pop	r15
    39f8:	ef 90       	pop	r14
    39fa:	df 90       	pop	r13
    39fc:	cf 90       	pop	r12
    39fe:	bf 90       	pop	r11
    3a00:	af 90       	pop	r10
    3a02:	9f 90       	pop	r9
    3a04:	7f 90       	pop	r7
    3a06:	6f 90       	pop	r6
    3a08:	08 95       	ret

00003a0a <__ftoa_engine>:
    3a0a:	28 30       	cpi	r18, 0x08	; 8
    3a0c:	08 f0       	brcs	.+2      	; 0x3a10 <__ftoa_engine+0x6>
    3a0e:	27 e0       	ldi	r18, 0x07	; 7
    3a10:	33 27       	eor	r19, r19
    3a12:	da 01       	movw	r26, r20
    3a14:	99 0f       	add	r25, r25
    3a16:	31 1d       	adc	r19, r1
    3a18:	87 fd       	sbrc	r24, 7
    3a1a:	91 60       	ori	r25, 0x01	; 1
    3a1c:	00 96       	adiw	r24, 0x00	; 0
    3a1e:	61 05       	cpc	r22, r1
    3a20:	71 05       	cpc	r23, r1
    3a22:	39 f4       	brne	.+14     	; 0x3a32 <__ftoa_engine+0x28>
    3a24:	32 60       	ori	r19, 0x02	; 2
    3a26:	2e 5f       	subi	r18, 0xFE	; 254
    3a28:	3d 93       	st	X+, r19
    3a2a:	30 e3       	ldi	r19, 0x30	; 48
    3a2c:	2a 95       	dec	r18
    3a2e:	e1 f7       	brne	.-8      	; 0x3a28 <__ftoa_engine+0x1e>
    3a30:	08 95       	ret
    3a32:	9f 3f       	cpi	r25, 0xFF	; 255
    3a34:	30 f0       	brcs	.+12     	; 0x3a42 <__ftoa_engine+0x38>
    3a36:	80 38       	cpi	r24, 0x80	; 128
    3a38:	71 05       	cpc	r23, r1
    3a3a:	61 05       	cpc	r22, r1
    3a3c:	09 f0       	breq	.+2      	; 0x3a40 <__ftoa_engine+0x36>
    3a3e:	3c 5f       	subi	r19, 0xFC	; 252
    3a40:	3c 5f       	subi	r19, 0xFC	; 252
    3a42:	3d 93       	st	X+, r19
    3a44:	91 30       	cpi	r25, 0x01	; 1
    3a46:	08 f0       	brcs	.+2      	; 0x3a4a <__ftoa_engine+0x40>
    3a48:	80 68       	ori	r24, 0x80	; 128
    3a4a:	91 1d       	adc	r25, r1
    3a4c:	df 93       	push	r29
    3a4e:	cf 93       	push	r28
    3a50:	1f 93       	push	r17
    3a52:	0f 93       	push	r16
    3a54:	ff 92       	push	r15
    3a56:	ef 92       	push	r14
    3a58:	19 2f       	mov	r17, r25
    3a5a:	98 7f       	andi	r25, 0xF8	; 248
    3a5c:	96 95       	lsr	r25
    3a5e:	e9 2f       	mov	r30, r25
    3a60:	96 95       	lsr	r25
    3a62:	96 95       	lsr	r25
    3a64:	e9 0f       	add	r30, r25
    3a66:	ff 27       	eor	r31, r31
    3a68:	ea 59       	subi	r30, 0x9A	; 154
    3a6a:	fc 4f       	sbci	r31, 0xFC	; 252
    3a6c:	99 27       	eor	r25, r25
    3a6e:	33 27       	eor	r19, r19
    3a70:	ee 24       	eor	r14, r14
    3a72:	ff 24       	eor	r15, r15
    3a74:	a7 01       	movw	r20, r14
    3a76:	e7 01       	movw	r28, r14
    3a78:	05 90       	lpm	r0, Z+
    3a7a:	08 94       	sec
    3a7c:	07 94       	ror	r0
    3a7e:	28 f4       	brcc	.+10     	; 0x3a8a <__ftoa_engine+0x80>
    3a80:	36 0f       	add	r19, r22
    3a82:	e7 1e       	adc	r14, r23
    3a84:	f8 1e       	adc	r15, r24
    3a86:	49 1f       	adc	r20, r25
    3a88:	51 1d       	adc	r21, r1
    3a8a:	66 0f       	add	r22, r22
    3a8c:	77 1f       	adc	r23, r23
    3a8e:	88 1f       	adc	r24, r24
    3a90:	99 1f       	adc	r25, r25
    3a92:	06 94       	lsr	r0
    3a94:	a1 f7       	brne	.-24     	; 0x3a7e <__ftoa_engine+0x74>
    3a96:	05 90       	lpm	r0, Z+
    3a98:	07 94       	ror	r0
    3a9a:	28 f4       	brcc	.+10     	; 0x3aa6 <__ftoa_engine+0x9c>
    3a9c:	e7 0e       	add	r14, r23
    3a9e:	f8 1e       	adc	r15, r24
    3aa0:	49 1f       	adc	r20, r25
    3aa2:	56 1f       	adc	r21, r22
    3aa4:	c1 1d       	adc	r28, r1
    3aa6:	77 0f       	add	r23, r23
    3aa8:	88 1f       	adc	r24, r24
    3aaa:	99 1f       	adc	r25, r25
    3aac:	66 1f       	adc	r22, r22
    3aae:	06 94       	lsr	r0
    3ab0:	a1 f7       	brne	.-24     	; 0x3a9a <__ftoa_engine+0x90>
    3ab2:	05 90       	lpm	r0, Z+
    3ab4:	07 94       	ror	r0
    3ab6:	28 f4       	brcc	.+10     	; 0x3ac2 <__ftoa_engine+0xb8>
    3ab8:	f8 0e       	add	r15, r24
    3aba:	49 1f       	adc	r20, r25
    3abc:	56 1f       	adc	r21, r22
    3abe:	c7 1f       	adc	r28, r23
    3ac0:	d1 1d       	adc	r29, r1
    3ac2:	88 0f       	add	r24, r24
    3ac4:	99 1f       	adc	r25, r25
    3ac6:	66 1f       	adc	r22, r22
    3ac8:	77 1f       	adc	r23, r23
    3aca:	06 94       	lsr	r0
    3acc:	a1 f7       	brne	.-24     	; 0x3ab6 <__ftoa_engine+0xac>
    3ace:	05 90       	lpm	r0, Z+
    3ad0:	07 94       	ror	r0
    3ad2:	20 f4       	brcc	.+8      	; 0x3adc <__ftoa_engine+0xd2>
    3ad4:	49 0f       	add	r20, r25
    3ad6:	56 1f       	adc	r21, r22
    3ad8:	c7 1f       	adc	r28, r23
    3ada:	d8 1f       	adc	r29, r24
    3adc:	99 0f       	add	r25, r25
    3ade:	66 1f       	adc	r22, r22
    3ae0:	77 1f       	adc	r23, r23
    3ae2:	88 1f       	adc	r24, r24
    3ae4:	06 94       	lsr	r0
    3ae6:	a9 f7       	brne	.-22     	; 0x3ad2 <__ftoa_engine+0xc8>
    3ae8:	84 91       	lpm	r24, Z
    3aea:	10 95       	com	r17
    3aec:	17 70       	andi	r17, 0x07	; 7
    3aee:	41 f0       	breq	.+16     	; 0x3b00 <__ftoa_engine+0xf6>
    3af0:	d6 95       	lsr	r29
    3af2:	c7 95       	ror	r28
    3af4:	57 95       	ror	r21
    3af6:	47 95       	ror	r20
    3af8:	f7 94       	ror	r15
    3afa:	e7 94       	ror	r14
    3afc:	1a 95       	dec	r17
    3afe:	c1 f7       	brne	.-16     	; 0x3af0 <__ftoa_engine+0xe6>
    3b00:	ec e0       	ldi	r30, 0x0C	; 12
    3b02:	f3 e0       	ldi	r31, 0x03	; 3
    3b04:	68 94       	set
    3b06:	15 90       	lpm	r1, Z+
    3b08:	15 91       	lpm	r17, Z+
    3b0a:	35 91       	lpm	r19, Z+
    3b0c:	65 91       	lpm	r22, Z+
    3b0e:	95 91       	lpm	r25, Z+
    3b10:	05 90       	lpm	r0, Z+
    3b12:	7f e2       	ldi	r23, 0x2F	; 47
    3b14:	73 95       	inc	r23
    3b16:	e1 18       	sub	r14, r1
    3b18:	f1 0a       	sbc	r15, r17
    3b1a:	43 0b       	sbc	r20, r19
    3b1c:	56 0b       	sbc	r21, r22
    3b1e:	c9 0b       	sbc	r28, r25
    3b20:	d0 09       	sbc	r29, r0
    3b22:	c0 f7       	brcc	.-16     	; 0x3b14 <__ftoa_engine+0x10a>
    3b24:	e1 0c       	add	r14, r1
    3b26:	f1 1e       	adc	r15, r17
    3b28:	43 1f       	adc	r20, r19
    3b2a:	56 1f       	adc	r21, r22
    3b2c:	c9 1f       	adc	r28, r25
    3b2e:	d0 1d       	adc	r29, r0
    3b30:	7e f4       	brtc	.+30     	; 0x3b50 <__ftoa_engine+0x146>
    3b32:	70 33       	cpi	r23, 0x30	; 48
    3b34:	11 f4       	brne	.+4      	; 0x3b3a <__ftoa_engine+0x130>
    3b36:	8a 95       	dec	r24
    3b38:	e6 cf       	rjmp	.-52     	; 0x3b06 <__ftoa_engine+0xfc>
    3b3a:	e8 94       	clt
    3b3c:	01 50       	subi	r16, 0x01	; 1
    3b3e:	30 f0       	brcs	.+12     	; 0x3b4c <__ftoa_engine+0x142>
    3b40:	08 0f       	add	r16, r24
    3b42:	0a f4       	brpl	.+2      	; 0x3b46 <__ftoa_engine+0x13c>
    3b44:	00 27       	eor	r16, r16
    3b46:	02 17       	cp	r16, r18
    3b48:	08 f4       	brcc	.+2      	; 0x3b4c <__ftoa_engine+0x142>
    3b4a:	20 2f       	mov	r18, r16
    3b4c:	23 95       	inc	r18
    3b4e:	02 2f       	mov	r16, r18
    3b50:	7a 33       	cpi	r23, 0x3A	; 58
    3b52:	28 f0       	brcs	.+10     	; 0x3b5e <__ftoa_engine+0x154>
    3b54:	79 e3       	ldi	r23, 0x39	; 57
    3b56:	7d 93       	st	X+, r23
    3b58:	2a 95       	dec	r18
    3b5a:	e9 f7       	brne	.-6      	; 0x3b56 <__ftoa_engine+0x14c>
    3b5c:	10 c0       	rjmp	.+32     	; 0x3b7e <__ftoa_engine+0x174>
    3b5e:	7d 93       	st	X+, r23
    3b60:	2a 95       	dec	r18
    3b62:	89 f6       	brne	.-94     	; 0x3b06 <__ftoa_engine+0xfc>
    3b64:	06 94       	lsr	r0
    3b66:	97 95       	ror	r25
    3b68:	67 95       	ror	r22
    3b6a:	37 95       	ror	r19
    3b6c:	17 95       	ror	r17
    3b6e:	17 94       	ror	r1
    3b70:	e1 18       	sub	r14, r1
    3b72:	f1 0a       	sbc	r15, r17
    3b74:	43 0b       	sbc	r20, r19
    3b76:	56 0b       	sbc	r21, r22
    3b78:	c9 0b       	sbc	r28, r25
    3b7a:	d0 09       	sbc	r29, r0
    3b7c:	98 f0       	brcs	.+38     	; 0x3ba4 <__ftoa_engine+0x19a>
    3b7e:	23 95       	inc	r18
    3b80:	7e 91       	ld	r23, -X
    3b82:	73 95       	inc	r23
    3b84:	7a 33       	cpi	r23, 0x3A	; 58
    3b86:	08 f0       	brcs	.+2      	; 0x3b8a <__ftoa_engine+0x180>
    3b88:	70 e3       	ldi	r23, 0x30	; 48
    3b8a:	7c 93       	st	X, r23
    3b8c:	20 13       	cpse	r18, r16
    3b8e:	b8 f7       	brcc	.-18     	; 0x3b7e <__ftoa_engine+0x174>
    3b90:	7e 91       	ld	r23, -X
    3b92:	70 61       	ori	r23, 0x10	; 16
    3b94:	7d 93       	st	X+, r23
    3b96:	30 f0       	brcs	.+12     	; 0x3ba4 <__ftoa_engine+0x19a>
    3b98:	83 95       	inc	r24
    3b9a:	71 e3       	ldi	r23, 0x31	; 49
    3b9c:	7d 93       	st	X+, r23
    3b9e:	70 e3       	ldi	r23, 0x30	; 48
    3ba0:	2a 95       	dec	r18
    3ba2:	e1 f7       	brne	.-8      	; 0x3b9c <__ftoa_engine+0x192>
    3ba4:	11 24       	eor	r1, r1
    3ba6:	ef 90       	pop	r14
    3ba8:	ff 90       	pop	r15
    3baa:	0f 91       	pop	r16
    3bac:	1f 91       	pop	r17
    3bae:	cf 91       	pop	r28
    3bb0:	df 91       	pop	r29
    3bb2:	99 27       	eor	r25, r25
    3bb4:	87 fd       	sbrc	r24, 7
    3bb6:	90 95       	com	r25
    3bb8:	08 95       	ret

00003bba <strnlen_P>:
    3bba:	fc 01       	movw	r30, r24
    3bbc:	05 90       	lpm	r0, Z+
    3bbe:	61 50       	subi	r22, 0x01	; 1
    3bc0:	70 40       	sbci	r23, 0x00	; 0
    3bc2:	01 10       	cpse	r0, r1
    3bc4:	d8 f7       	brcc	.-10     	; 0x3bbc <strnlen_P+0x2>
    3bc6:	80 95       	com	r24
    3bc8:	90 95       	com	r25
    3bca:	8e 0f       	add	r24, r30
    3bcc:	9f 1f       	adc	r25, r31
    3bce:	08 95       	ret

00003bd0 <strnlen>:
    3bd0:	fc 01       	movw	r30, r24
    3bd2:	61 50       	subi	r22, 0x01	; 1
    3bd4:	70 40       	sbci	r23, 0x00	; 0
    3bd6:	01 90       	ld	r0, Z+
    3bd8:	01 10       	cpse	r0, r1
    3bda:	d8 f7       	brcc	.-10     	; 0x3bd2 <strnlen+0x2>
    3bdc:	80 95       	com	r24
    3bde:	90 95       	com	r25
    3be0:	8e 0f       	add	r24, r30
    3be2:	9f 1f       	adc	r25, r31
    3be4:	08 95       	ret

00003be6 <strrev>:
    3be6:	dc 01       	movw	r26, r24
    3be8:	fc 01       	movw	r30, r24
    3bea:	67 2f       	mov	r22, r23
    3bec:	71 91       	ld	r23, Z+
    3bee:	77 23       	and	r23, r23
    3bf0:	e1 f7       	brne	.-8      	; 0x3bea <strrev+0x4>
    3bf2:	32 97       	sbiw	r30, 0x02	; 2
    3bf4:	04 c0       	rjmp	.+8      	; 0x3bfe <strrev+0x18>
    3bf6:	7c 91       	ld	r23, X
    3bf8:	6d 93       	st	X+, r22
    3bfa:	70 83       	st	Z, r23
    3bfc:	62 91       	ld	r22, -Z
    3bfe:	ae 17       	cp	r26, r30
    3c00:	bf 07       	cpc	r27, r31
    3c02:	c8 f3       	brcs	.-14     	; 0x3bf6 <strrev+0x10>
    3c04:	08 95       	ret

00003c06 <fputc>:
    3c06:	0f 93       	push	r16
    3c08:	1f 93       	push	r17
    3c0a:	cf 93       	push	r28
    3c0c:	df 93       	push	r29
    3c0e:	18 2f       	mov	r17, r24
    3c10:	09 2f       	mov	r16, r25
    3c12:	eb 01       	movw	r28, r22
    3c14:	8b 81       	ldd	r24, Y+3	; 0x03
    3c16:	81 fd       	sbrc	r24, 1
    3c18:	03 c0       	rjmp	.+6      	; 0x3c20 <fputc+0x1a>
    3c1a:	8f ef       	ldi	r24, 0xFF	; 255
    3c1c:	9f ef       	ldi	r25, 0xFF	; 255
    3c1e:	20 c0       	rjmp	.+64     	; 0x3c60 <fputc+0x5a>
    3c20:	82 ff       	sbrs	r24, 2
    3c22:	10 c0       	rjmp	.+32     	; 0x3c44 <fputc+0x3e>
    3c24:	4e 81       	ldd	r20, Y+6	; 0x06
    3c26:	5f 81       	ldd	r21, Y+7	; 0x07
    3c28:	2c 81       	ldd	r18, Y+4	; 0x04
    3c2a:	3d 81       	ldd	r19, Y+5	; 0x05
    3c2c:	42 17       	cp	r20, r18
    3c2e:	53 07       	cpc	r21, r19
    3c30:	7c f4       	brge	.+30     	; 0x3c50 <fputc+0x4a>
    3c32:	e8 81       	ld	r30, Y
    3c34:	f9 81       	ldd	r31, Y+1	; 0x01
    3c36:	9f 01       	movw	r18, r30
    3c38:	2f 5f       	subi	r18, 0xFF	; 255
    3c3a:	3f 4f       	sbci	r19, 0xFF	; 255
    3c3c:	39 83       	std	Y+1, r19	; 0x01
    3c3e:	28 83       	st	Y, r18
    3c40:	10 83       	st	Z, r17
    3c42:	06 c0       	rjmp	.+12     	; 0x3c50 <fputc+0x4a>
    3c44:	e8 85       	ldd	r30, Y+8	; 0x08
    3c46:	f9 85       	ldd	r31, Y+9	; 0x09
    3c48:	81 2f       	mov	r24, r17
    3c4a:	09 95       	icall
    3c4c:	89 2b       	or	r24, r25
    3c4e:	29 f7       	brne	.-54     	; 0x3c1a <fputc+0x14>
    3c50:	2e 81       	ldd	r18, Y+6	; 0x06
    3c52:	3f 81       	ldd	r19, Y+7	; 0x07
    3c54:	2f 5f       	subi	r18, 0xFF	; 255
    3c56:	3f 4f       	sbci	r19, 0xFF	; 255
    3c58:	3f 83       	std	Y+7, r19	; 0x07
    3c5a:	2e 83       	std	Y+6, r18	; 0x06
    3c5c:	81 2f       	mov	r24, r17
    3c5e:	90 2f       	mov	r25, r16
    3c60:	df 91       	pop	r29
    3c62:	cf 91       	pop	r28
    3c64:	1f 91       	pop	r17
    3c66:	0f 91       	pop	r16
    3c68:	08 95       	ret

00003c6a <__ultoa_invert>:
    3c6a:	fa 01       	movw	r30, r20
    3c6c:	aa 27       	eor	r26, r26
    3c6e:	28 30       	cpi	r18, 0x08	; 8
    3c70:	51 f1       	breq	.+84     	; 0x3cc6 <__ultoa_invert+0x5c>
    3c72:	20 31       	cpi	r18, 0x10	; 16
    3c74:	81 f1       	breq	.+96     	; 0x3cd6 <__ultoa_invert+0x6c>
    3c76:	e8 94       	clt
    3c78:	6f 93       	push	r22
    3c7a:	6e 7f       	andi	r22, 0xFE	; 254
    3c7c:	6e 5f       	subi	r22, 0xFE	; 254
    3c7e:	7f 4f       	sbci	r23, 0xFF	; 255
    3c80:	8f 4f       	sbci	r24, 0xFF	; 255
    3c82:	9f 4f       	sbci	r25, 0xFF	; 255
    3c84:	af 4f       	sbci	r26, 0xFF	; 255
    3c86:	b1 e0       	ldi	r27, 0x01	; 1
    3c88:	3e d0       	rcall	.+124    	; 0x3d06 <__ultoa_invert+0x9c>
    3c8a:	b4 e0       	ldi	r27, 0x04	; 4
    3c8c:	3c d0       	rcall	.+120    	; 0x3d06 <__ultoa_invert+0x9c>
    3c8e:	67 0f       	add	r22, r23
    3c90:	78 1f       	adc	r23, r24
    3c92:	89 1f       	adc	r24, r25
    3c94:	9a 1f       	adc	r25, r26
    3c96:	a1 1d       	adc	r26, r1
    3c98:	68 0f       	add	r22, r24
    3c9a:	79 1f       	adc	r23, r25
    3c9c:	8a 1f       	adc	r24, r26
    3c9e:	91 1d       	adc	r25, r1
    3ca0:	a1 1d       	adc	r26, r1
    3ca2:	6a 0f       	add	r22, r26
    3ca4:	71 1d       	adc	r23, r1
    3ca6:	81 1d       	adc	r24, r1
    3ca8:	91 1d       	adc	r25, r1
    3caa:	a1 1d       	adc	r26, r1
    3cac:	20 d0       	rcall	.+64     	; 0x3cee <__ultoa_invert+0x84>
    3cae:	09 f4       	brne	.+2      	; 0x3cb2 <__ultoa_invert+0x48>
    3cb0:	68 94       	set
    3cb2:	3f 91       	pop	r19
    3cb4:	2a e0       	ldi	r18, 0x0A	; 10
    3cb6:	26 9f       	mul	r18, r22
    3cb8:	11 24       	eor	r1, r1
    3cba:	30 19       	sub	r19, r0
    3cbc:	30 5d       	subi	r19, 0xD0	; 208
    3cbe:	31 93       	st	Z+, r19
    3cc0:	de f6       	brtc	.-74     	; 0x3c78 <__ultoa_invert+0xe>
    3cc2:	cf 01       	movw	r24, r30
    3cc4:	08 95       	ret
    3cc6:	46 2f       	mov	r20, r22
    3cc8:	47 70       	andi	r20, 0x07	; 7
    3cca:	40 5d       	subi	r20, 0xD0	; 208
    3ccc:	41 93       	st	Z+, r20
    3cce:	b3 e0       	ldi	r27, 0x03	; 3
    3cd0:	0f d0       	rcall	.+30     	; 0x3cf0 <__ultoa_invert+0x86>
    3cd2:	c9 f7       	brne	.-14     	; 0x3cc6 <__ultoa_invert+0x5c>
    3cd4:	f6 cf       	rjmp	.-20     	; 0x3cc2 <__ultoa_invert+0x58>
    3cd6:	46 2f       	mov	r20, r22
    3cd8:	4f 70       	andi	r20, 0x0F	; 15
    3cda:	40 5d       	subi	r20, 0xD0	; 208
    3cdc:	4a 33       	cpi	r20, 0x3A	; 58
    3cde:	18 f0       	brcs	.+6      	; 0x3ce6 <__ultoa_invert+0x7c>
    3ce0:	49 5d       	subi	r20, 0xD9	; 217
    3ce2:	31 fd       	sbrc	r19, 1
    3ce4:	40 52       	subi	r20, 0x20	; 32
    3ce6:	41 93       	st	Z+, r20
    3ce8:	02 d0       	rcall	.+4      	; 0x3cee <__ultoa_invert+0x84>
    3cea:	a9 f7       	brne	.-22     	; 0x3cd6 <__ultoa_invert+0x6c>
    3cec:	ea cf       	rjmp	.-44     	; 0x3cc2 <__ultoa_invert+0x58>
    3cee:	b4 e0       	ldi	r27, 0x04	; 4
    3cf0:	a6 95       	lsr	r26
    3cf2:	97 95       	ror	r25
    3cf4:	87 95       	ror	r24
    3cf6:	77 95       	ror	r23
    3cf8:	67 95       	ror	r22
    3cfa:	ba 95       	dec	r27
    3cfc:	c9 f7       	brne	.-14     	; 0x3cf0 <__ultoa_invert+0x86>
    3cfe:	00 97       	sbiw	r24, 0x00	; 0
    3d00:	61 05       	cpc	r22, r1
    3d02:	71 05       	cpc	r23, r1
    3d04:	08 95       	ret
    3d06:	9b 01       	movw	r18, r22
    3d08:	ac 01       	movw	r20, r24
    3d0a:	0a 2e       	mov	r0, r26
    3d0c:	06 94       	lsr	r0
    3d0e:	57 95       	ror	r21
    3d10:	47 95       	ror	r20
    3d12:	37 95       	ror	r19
    3d14:	27 95       	ror	r18
    3d16:	ba 95       	dec	r27
    3d18:	c9 f7       	brne	.-14     	; 0x3d0c <__ultoa_invert+0xa2>
    3d1a:	62 0f       	add	r22, r18
    3d1c:	73 1f       	adc	r23, r19
    3d1e:	84 1f       	adc	r24, r20
    3d20:	95 1f       	adc	r25, r21
    3d22:	a0 1d       	adc	r26, r0
    3d24:	08 95       	ret

00003d26 <__prologue_saves__>:
    3d26:	2f 92       	push	r2
    3d28:	3f 92       	push	r3
    3d2a:	4f 92       	push	r4
    3d2c:	5f 92       	push	r5
    3d2e:	6f 92       	push	r6
    3d30:	7f 92       	push	r7
    3d32:	8f 92       	push	r8
    3d34:	9f 92       	push	r9
    3d36:	af 92       	push	r10
    3d38:	bf 92       	push	r11
    3d3a:	cf 92       	push	r12
    3d3c:	df 92       	push	r13
    3d3e:	ef 92       	push	r14
    3d40:	ff 92       	push	r15
    3d42:	0f 93       	push	r16
    3d44:	1f 93       	push	r17
    3d46:	cf 93       	push	r28
    3d48:	df 93       	push	r29
    3d4a:	cd b7       	in	r28, 0x3d	; 61
    3d4c:	de b7       	in	r29, 0x3e	; 62
    3d4e:	ca 1b       	sub	r28, r26
    3d50:	db 0b       	sbc	r29, r27
    3d52:	0f b6       	in	r0, 0x3f	; 63
    3d54:	f8 94       	cli
    3d56:	de bf       	out	0x3e, r29	; 62
    3d58:	0f be       	out	0x3f, r0	; 63
    3d5a:	cd bf       	out	0x3d, r28	; 61
    3d5c:	09 94       	ijmp

00003d5e <__epilogue_restores__>:
    3d5e:	2a 88       	ldd	r2, Y+18	; 0x12
    3d60:	39 88       	ldd	r3, Y+17	; 0x11
    3d62:	48 88       	ldd	r4, Y+16	; 0x10
    3d64:	5f 84       	ldd	r5, Y+15	; 0x0f
    3d66:	6e 84       	ldd	r6, Y+14	; 0x0e
    3d68:	7d 84       	ldd	r7, Y+13	; 0x0d
    3d6a:	8c 84       	ldd	r8, Y+12	; 0x0c
    3d6c:	9b 84       	ldd	r9, Y+11	; 0x0b
    3d6e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3d70:	b9 84       	ldd	r11, Y+9	; 0x09
    3d72:	c8 84       	ldd	r12, Y+8	; 0x08
    3d74:	df 80       	ldd	r13, Y+7	; 0x07
    3d76:	ee 80       	ldd	r14, Y+6	; 0x06
    3d78:	fd 80       	ldd	r15, Y+5	; 0x05
    3d7a:	0c 81       	ldd	r16, Y+4	; 0x04
    3d7c:	1b 81       	ldd	r17, Y+3	; 0x03
    3d7e:	aa 81       	ldd	r26, Y+2	; 0x02
    3d80:	b9 81       	ldd	r27, Y+1	; 0x01
    3d82:	ce 0f       	add	r28, r30
    3d84:	d1 1d       	adc	r29, r1
    3d86:	0f b6       	in	r0, 0x3f	; 63
    3d88:	f8 94       	cli
    3d8a:	de bf       	out	0x3e, r29	; 62
    3d8c:	0f be       	out	0x3f, r0	; 63
    3d8e:	cd bf       	out	0x3d, r28	; 61
    3d90:	ed 01       	movw	r28, r26
    3d92:	08 95       	ret

00003d94 <_exit>:
    3d94:	f8 94       	cli

00003d96 <__stop_program>:
    3d96:	ff cf       	rjmp	.-2      	; 0x3d96 <__stop_program>
